<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>zsh安装注意点</title>
      <link href="/2020/06/25/zsh%E5%AE%89%E8%A3%85%E6%B3%A8%E6%84%8F%E7%82%B9/"/>
      <url>/2020/06/25/zsh%E5%AE%89%E8%A3%85%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="zsh的安装注意点："><a href="#zsh的安装注意点：" class="headerlink" title="zsh的安装注意点："></a>zsh的安装注意点：</h2><p>zsh的安装可以用pacman来直接安装，但是oh-my-zsh不要用pacman来安装，因为pacman安装的会缺少很多东西，所以最好的方式就是git克隆下来，然后却少什么插件就去github上面下载，并放到plugin的文件夹下面，这样就可以做到一个统一的管理。</p><p>另外oh-my-zsh的插件文件夹中虽然有fzf这个目录，但是是用不了的，还需要使用pacman来安装fzf，fzf提供的模糊搜索功能很强大</p><h2 id="其它的注意点："><a href="#其它的注意点：" class="headerlink" title="其它的注意点："></a>其它的注意点：</h2><p>这次是因为安装nvidia驱动把系统弄坏了，所以需要重新安装。我以为用<code>cp -r ~/*</code>就可以把所有的文件复制到的，但是那些隐藏文件和文件夹都没有复制到，所以导致很多配置文件丢失了。让安装过程变得很麻烦。</p><p>正确的方法是用点代替星号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ~/. /some/where</span><br></pre></td></tr></table></figure><p>有人说有重复的文件会一直需要输入yes来确认很麻烦，可以这么写</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yes | cp ~/. /some/where</span><br></pre></td></tr></table></figure><p>安装一个系统真的是有太多东西需要注意了，各种小的工具，有的属于软件包，还搜不到真的是挺麻烦的。</p>]]></content>
      
      
      <categories>
          
          <category> snippet </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vscode调试c</title>
      <link href="/2020/06/25/vscode%E8%B0%83%E8%AF%95c/"/>
      <url>/2020/06/25/vscode%E8%B0%83%E8%AF%95c/</url>
      
        <content type="html"><![CDATA[<h1 id="配置c调试环境"><a href="#配置c调试环境" class="headerlink" title="配置c调试环境"></a>配置c调试环境</h1><p>之前也准备设置，但是看着网上的教程太长了，而且照着也没成功就放弃了。今天打算重新配置一遍。</p><h2 id="简单配置"><a href="#简单配置" class="headerlink" title="简单配置"></a>简单配置</h2><p>配置文件<code>.vscode/launch.json</code>。只需要配置好这个就ok了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // Use IntelliSense to learn about possible attributes.</span><br><span class="line">    // Hover to view descriptions of existing attributes.</span><br><span class="line">    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class="line">    "version": "0.2.0",</span><br><span class="line">    "configurations": [</span><br><span class="line">        &#123;</span><br><span class="line">            "name": "gcc",</span><br><span class="line">            "type": "cppdbg",</span><br><span class="line">            "request": "launch",</span><br><span class="line">            "program": "$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;",</span><br><span class="line">            "args": [],</span><br><span class="line">            "stopAtEntry": false,</span><br><span class="line">            "cwd": "$&#123;workspaceFolder&#125;",</span><br><span class="line">            "environment": [],</span><br><span class="line">            "externalConsole": false,</span><br><span class="line">            "MIMode": "gdb",</span><br><span class="line">            "setupCommands": [</span><br><span class="line">                &#123;</span><br><span class="line">                    "description": "Enable pretty-printing for gdb",</span><br><span class="line">                    "text": "-enable-pretty-printing",</span><br><span class="line">                    "ignoreFailures": true</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            "preLaunchTask": "$&#123;defaultBuildTask&#125;",</span><br><span class="line">            "miDebuggerPath": "/usr/bin/gdb"</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的配置文件就是这样的。</p><p>其实没必要去照着网上的教程做，在点击debug的时候，那个选项没有配置好的，它会提醒，然后按照提示去官网找答案会更快。</p><ol><li>首先是将后面有类似注释的删掉</li><li>然后他会提示<code>preLaunchTask</code>无效，将它设置为<code>${defaultBuildTask}</code></li><li>还会提示gdb找不到，我以为linux默认已经安装了的，没想到真的没有安装，所以<code>pacman -S gdb</code>安装</li><li>设置好断点后，在重新运行debug就可以了</li></ol><h2 id="复杂一点的配置"><a href="#复杂一点的配置" class="headerlink" title="复杂一点的配置"></a>复杂一点的配置</h2><p>前面这种配置已经可以了，只是每次debug的时候都需要选择build task。因为前面的<code>&quot;preLaunchTask&quot;: &quot;${defaultBuildTask}&quot;</code>选择的是默认的，但是默认的为null，所以需要选择。可以配置默认的build task</p><p>配置文件<code>.vscode/task.json</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">"version": "2.0.0",</span><br><span class="line">"tasks": [</span><br><span class="line">&#123;</span><br><span class="line">"type": "shell",</span><br><span class="line">"label": "C/C++",</span><br><span class="line">"command": "/usr/bin/gcc",</span><br><span class="line">"args": [</span><br><span class="line">"-g",</span><br><span class="line">"$&#123;file&#125;",</span><br><span class="line">"-o",</span><br><span class="line">"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;"</span><br><span class="line">],</span><br><span class="line">"options": &#123;</span><br><span class="line">"cwd": "$&#123;workspaceFolder&#125;"</span><br><span class="line">&#125;,</span><br><span class="line">"problemMatcher": [</span><br><span class="line">"$gcc"</span><br><span class="line">],</span><br><span class="line">"group": "build"</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的label为<code>C/C++</code>，所以<code>launch.json</code>中也要修改为这个，其他不变</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"preLaunchTask": "C/C++",</span><br></pre></td></tr></table></figure><p>这样设置之后点debug就可以直接运行了。</p><h2 id="配置指定文件夹中"><a href="#配置指定文件夹中" class="headerlink" title="配置指定文件夹中"></a>配置指定文件夹中</h2><p>如果在一个文件夹下有不同的语言的文件夹，在vscode中需要进入到具体的某一个文件夹下在配置。因为配置文件会默认存在与主目录下，会造成相互覆盖。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">➜  code tree -a</span><br><span class="line">.</span><br><span class="line">├── c</span><br><span class="line">│   ├── learn</span><br><span class="line">│   ├── learn.c</span><br><span class="line">│   ├── tempCodeRunnerFile</span><br><span class="line">│   ├── tempCodeRunnerFile.c</span><br><span class="line">│   └── .vscode //不同文件夹下的配置文件</span><br><span class="line">│       └── launch.json</span><br><span class="line">├── c++</span><br><span class="line">│   ├── hello</span><br><span class="line">│   ├── hello.cpp</span><br><span class="line">│   ├── learn</span><br><span class="line">│   ├── start</span><br><span class="line">│   ├── start.cpp</span><br><span class="line">│   ├── tempCodeRunnerFile.cpp</span><br><span class="line">│   └── .vscode //不同文件夹下的配置文件</span><br><span class="line">│       └── launch.json</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> c/c++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>npm安装</title>
      <link href="/2020/06/25/npm%E5%AE%89%E8%A3%85/"/>
      <url>/2020/06/25/npm%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h1><p>npm是nodejs的安装包管理器，之前是直接通过pacman下载的。后来升级系统出现了许多不兼容的问题，查看了帮助，说最好不要使用pacman来安装其它的包管理器，容易造成复杂的系统依赖问题。所以需要从官网下载安装</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>在官网直接下载，解压到指定目录后，可以看到在安装目录下的bin目录下就已经有node和npm命令了。npm集成到了nodejs中，不需要另外安装。但是系统无法找到这些命令，所以需要将此目录添加到PATH中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">appendpath "$HOME/Software/node/node-v12.18.1-linux-x64/bin"</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>用命令查看默认配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config ls -l</span><br></pre></td></tr></table></figure><p>可以看到默认配置文件位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">globalconfig = "/home/fsl/Software/node/node-v12.18.1-linux-x64/etc/npmrc"</span><br></pre></td></tr></table></figure><p>这个位置没有此文件，需要手动创建，创建成功后将配置写入文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置国内源</span></span><br><span class="line">registry=https://registry.npm.taobao.org</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载目录</span></span><br><span class="line">cache=~/Software/node/node-v12.18.1-linux-x64/cache</span><br><span class="line"><span class="meta">#</span><span class="bash"> 全局安装目录</span></span><br><span class="line">prefix=~/Software/node/node-v12.18.1-linux-x64/module</span><br></pre></td></tr></table></figure><p>之后安装加了<code>-g</code>参数后都会安装到这里，否则安装到当前目录下</p>]]></content>
      
      
      <categories>
          
          <category> snippet </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>c</title>
      <link href="/2020/06/25/c/"/>
      <url>/2020/06/25/c/</url>
      
        <content type="html"><![CDATA[<h1 id="c"><a href="#c" class="headerlink" title="c"></a>c</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ol><li>使用vscode来编辑，由于是在linux下，不需要下载gcc（编译）默认已经安装了</li><li>下载c/c++插件，可以自动补全</li><li>下载code runner，可以实现一键运行，不需要手动编译</li></ol><h2 id="code-runner的配置"><a href="#code-runner的配置" class="headerlink" title="code runner的配置"></a>code runner的配置</h2><ol><li>在左下角的设置/或者快捷键ctrl+k ctrl+s进入快捷键设置界面，设置ctrl+enter运行代码</li><li>在setting中输入code runner terminal找到whether to run code in integated terminal选中</li></ol><h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello world\n"</span>);</span><br><span class="line">    system(<span class="string">"sleep 2"</span>); <span class="comment">//调用系统命令（linux）</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>单行注释使用<code>//</code>，多行注释使用<code>/* */</code>，vscode中只需要选中行，<code>ctrl+/</code>就可以注释了</p><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><p>一个项目只能有一个主函数，main函数是程序的入口，int定义函数返回值，return 0,0表示正常结束</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一种写法，void无参数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种写法，有参数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><p>语句以分号分隔</p><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><p>使用<code>#include</code>来导入预装的c文件，路径为<code>/usr/include</code><br><code>printf()</code>函数在<code>stdio.h</code>文件中，<code>system()</code>函数在<code>stdlib.h</code>文件中</p><h2 id="内建函数"><a href="#内建函数" class="headerlink" title="内建函数"></a>内建函数</h2><p>像printf这种常用的函数，如果不导入stdio.h文件的时候，程序也不会报错，仍然可以运行。因为printf为内建函数，即为gcc内置的函数，是为了提高编译的效率，而不需要去库文件中去查找复制对应的函数代码。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li><p>基本数据类型</p><ul><li>数值类型<ul><li>整型（有符号/无符号）<ul><li>short：短整型2字节 %hd</li><li>int：整型4字节 %d/%u</li><li>long：长整型,大于等于int长度，根据平台而不同 %ld</li><li>long long：超长整型8字节 %lld</li></ul></li><li>浮点型（有符号/无符号）,都可使用%e使用科学计数法<ul><li>float：整型4字节，%f</li><li>double:整型8字节，%lf</li><li>long double:大于等于double长度，%lf</li></ul></li></ul></li><li>字符型<ul><li>字符数组， %c</li><li>字符串， %s</li></ul></li></ul></li><li><p>构造类型</p><ul><li>数组</li><li>结构体</li><li>联合</li><li>枚举</li></ul></li><li><p>指针</p></li></ul><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><ol><li>声明与定义区别：声明一个变量未赋值，定义一个变量同时赋值</li><li>变量与常量区别：常量不可改变，变量可变</li><li>有符号和无符号：有负数的为有符号(会将最高位作为符号位，0代表正数，1代表负数)，没有负值的为无符号</li><li>int默认为有符号</li><li>int范围：-2^31~2^31-1，4个bitex8bit</li><li>无符号范围：0~2^32-1</li></ol><h3 id="为什么有符号int范围是这个"><a href="#为什么有符号int范围是这个" class="headerlink" title="为什么有符号int范围是这个"></a>为什么有符号int范围是这个</h3><p><a href="https://www.cnblogs.com/lemonbiscuit/p/7776065.html" target="_blank" rel="noopener">这篇文章讲到了反码以及补码的问题</a>，在计算机中负数是以补码的形式存在的，目的是为了让计算机做加法而不是减法减轻计算难度，但是为什么负数会比正数多1呢，因为-0的存在与+0冲突了，所以人为规定了-0的补码表示最小的那个数，这个补码不会进行原码计算，例如在一个字节中10000000就是-0的补码，表示-2^7</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> c = a + b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d+%d=%d\n"</span>,a,b,c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查看数据类型大小"><a href="#查看数据类型大小" class="headerlink" title="查看数据类型大小"></a>查看数据类型大小</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>))</span><br></pre></td></tr></table></figure><h3 id="一个linux上的链接问题"><a href="#一个linux上的链接问题" class="headerlink" title="一个linux上的链接问题"></a>一个linux上的链接问题</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">2</span>,y = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">double</span> result = <span class="built_in">pow</span>(x,y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lf\n"</span>, result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//报错信息</span></span><br><span class="line">/usr/bin/ld: /tmp/ccX8ix3h.o: in function `main<span class="number">'</span>:</span><br><span class="line">start.c:(.<span class="built_in">text</span>+<span class="number">0x21</span>): undefined reference to `<span class="built_in">pow</span><span class="number">'</span></span><br><span class="line">collect2: error: ld returned <span class="number">1</span> <span class="built_in">exit</span> status</span><br></pre></td></tr></table></figure><p>google了之后找到了原因：因为历史原因，没有将math库包括到标准libc.so/libc.a中，而是放到了libm.so/libm.a中。但是gcc编译时没有默认导入libm.so/libm.a，所以会提示找不到pow函数，这都是ld链接的问题。参考链接：<a href="https://stackoverflow.com/questions/8671366/undefined-reference-to-pow-and-floor" target="_blank" rel="noopener">1</a>,<a href="https://stackoverflow.com/questions/1033898/why-do-you-have-to-link-the-math-library-in-c" target="_blank" rel="noopener">2</a></p><p>解决方法：编译时指定导入math库：<code>gcc start.c -o start -lm</code></p><h3 id="连续定义"><a href="#连续定义" class="headerlink" title="连续定义"></a>连续定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a, b, c, d;</span><br><span class="line"><span class="comment">//也可以这么定义，这么写的好处是可以在每个变量后加注释</span></span><br><span class="line"><span class="keyword">int</span> a,</span><br><span class="line">    b,</span><br><span class="line">    c,</span><br><span class="line">    d;</span><br><span class="line">short e;</span><br><span class="line"><span class="keyword">long</span> f;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> g;</span><br></pre></td></tr></table></figure><h3 id="无符号整型"><a href="#无符号整型" class="headerlink" title="无符号整型"></a>无符号整型</h3><p>有符号的整型默认不写，无符号的整型使用<code>unsigned</code>关键字定义，printf中使用<code>%u</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> a = <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%u\n"</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="变量取内存地址"><a href="#变量取内存地址" class="headerlink" title="变量取内存地址"></a>变量取内存地址</h2><p>使用符号<code>&amp;</code>,格式化输出使用<code>%p</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> a = <span class="number">-123</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, &amp;a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//0x7ffdbeeec7205</span></span><br></pre></td></tr></table></figure><h2 id="表达式和语句"><a href="#表达式和语句" class="headerlink" title="表达式和语句"></a>表达式和语句</h2><p>表达式和语句的区别在有分号，以分号结尾的为语句，否则为表达式，表达式有值，由运算符组合而成</p><h2 id="用户输入scanf"><a href="#用户输入scanf" class="headerlink" title="用户输入scanf"></a>用户输入scanf</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 声明变量</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入一个数字: "</span>);</span><br><span class="line">    <span class="comment">// 将数据写入指定内存地址</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入多个数据时，数据之间的分隔默认为空格，如果格式化中使用其它字符，那么输入的分隔符也使用对应的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入两个数字: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d\n"</span>, a, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于编译器的不同，scanf可能会有警告，消除警告的方法：找到对应的警告码，添加到头文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br></pre></td></tr></table></figure><h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><ol><li>浮点型的零写0.0</li><li>有效数位：从左边开始非0的位数</li><li>设置显示小数位数<code>printf(&quot;%.numf\n&quot;, variable)</code></li></ol><h3 id="浮点型后缀"><a href="#浮点型后缀" class="headerlink" title="浮点型后缀"></a>浮点型后缀</h3><p>有小数点的数据类型默认为doube,在小数后添加<code>f</code>才变成float类型。long double需要添加<code>l</code>后缀。<br>不过我还是不明白，使用float这些关键字不是在声明变量时，取指定大小的内存吗，如果这些不能限定，为什么还需要这些关键字呢？而且用sizeof查看时，使用float声明的变量和double声明的长度不同啊，不懂？<br>过了一天，我好像明白了一点，小数默认为double类型，那么其精度就高一些，但是将其赋值给float后，精度自然会损失一些，可能会有精度损失的报错。如果在后面加f，那么就是指定了其为float，精度减少了，但是不会报错。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 即使是表明float类型，其实也是以double来存储的</span></span><br><span class="line">    <span class="comment">// float a = 12313.12312;</span></span><br><span class="line">    <span class="keyword">float</span> a = <span class="number">12313.12312f</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%f\n"</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自加自减误区"><a href="#自加自减误区" class="headerlink" title="自加自减误区"></a>自加自减误区</h2><ol><li>在一个语句中，不能超过两个的自加自减运算符</li><li>int a = i++,并不是先赋值后计算，而是在内存中分配出来一个地方给i存储值，然后自增，不过赋值时会将原来的值赋值给变量</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">int</span> b = a++ + ++a + a++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//例如超过两个后其值为 40</span></span><br></pre></td></tr></table></figure><h2 id="流程结构"><a href="#流程结构" class="headerlink" title="流程结构"></a>流程结构</h2><ol><li>顺序</li><li>循环<ul><li>while</li><li>for</li><li>do while</li></ul></li><li>分支和跳转</li><li>goto</li></ol><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(condition)&#123;</span><br><span class="line">    code block</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不加{}，那么只有接下来的一行会被当作循环体。用循环计算1到1亿的和，用c秒算出来，而用效率比shell高的awk需要4秒，c是真的快。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(a&lt;=<span class="number">5</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);</span><br><span class="line">        a++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非零为真，零为假</p><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p><code>&lt;  &lt;= &gt; &gt;= == !=</code></p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>and的优先级高于or</p><ul><li>and：<code>&amp;&amp;</code></li><li>or：<code>||</code></li><li>not：<code>!</code></li></ul><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(语句;条件;语句)&#123;</span><br><span class="line">    code block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="do-while"><a href="#do-while" class="headerlink" title="do while"></a>do while</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">while</span>()</span><br></pre></td></tr></table></figure><h3 id="break-continue"><a href="#break-continue" class="headerlink" title="break continue"></a>break continue</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i);</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="条件结构"><a href="#条件结构" class="headerlink" title="条件结构"></a>条件结构</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch-case"><a href="#switch-case" class="headerlink" title="switch case"></a>switch case</h3><ol><li>注意每个case后都需要加break等跳出switch，否则会执行后面的语句，不管是否符合条件</li><li>switch只能用整型</li><li>case为起始点</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line">        <span class="keyword">switch</span>(num)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"num\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h3><p>不建议使用，不过goto跳出多重循环时比break简单，只需要写一次</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//死循环</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    one:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"one"</span>);</span><br><span class="line">    <span class="keyword">goto</span> one;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">goto</span> outer;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    outer:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"outer"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组名即为一个指针，存储的为第一个元素的地址。</p><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><p>类型相同的数据</p><p>在内存中申请指定个数的连续空间</p><ul><li><p>申请</p><p>默认存储的为内存地址</p><p>也可以不写元素个数，但是前提是必须有初始化数据</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类型 变量名[元素个数]</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">queue</span>[<span class="number">4</span>];</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="built_in">queue</span>[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>初始化</p><p>可以初始化全部数据，或者部分数据</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化部分数据，其余数据默认为0</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">queue</span>[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">queue</span>[<span class="number">4</span>] = &#123;<span class="number">1</span>,[<span class="number">3</span>]=<span class="number">4</span>&#125;;</span><br><span class="line"><span class="comment">// 赋值</span></span><br><span class="line"><span class="built_in">queue</span>[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line"><span class="comment">// 全部初始化为0</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">queue</span>[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br></pre></td></tr></table></figure><ul><li>访问</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,<span class="built_in">queue</span>[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><ul><li><p>地址</p><p>+1表示加一个数据类型的内存大小，即下一个元素</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">queue</span>[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p %p %p"</span>,&amp;<span class="built_in">queue</span>, &amp;<span class="built_in">queue</span>[<span class="number">1</span>], &amp;<span class="built_in">queue</span>[<span class="number">0</span>]+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维数组-多维数组"><a href="#二维数组-多维数组" class="headerlink" title="二维数组/多维数组"></a>二维数组/多维数组</h3><p>即数组的嵌套</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">queue</span>[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, <span class="built_in">queue</span>[<span class="number">3</span>][<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>是一种数据类型，用来存储变量地址</p><p>类型：也是一些基本的数据类型，比如char，short，float等</p><p>声明：类型+*+变量名，两种写法：int *p / int * p</p><p>赋值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> *p = &amp;num;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> *p = &amp;num;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p  %p"</span>, p, &amp;num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我有个疑问：变量明明可以操作数据，为什么还要用指针操作呢</p><p>通过指针操作具体数据：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> *p = &amp;a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, *p); <span class="comment">//获得和变量a一样的值</span></span><br><span class="line">*p = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, a); <span class="comment">//a变量的值也会被改变</span></span><br><span class="line"><span class="comment">// 其实*p 和变量a相同</span></span><br></pre></td></tr></table></figure><p>数组指针：当指针为某一个元素的地址，那么指针+1也表示后一个元素，与数组中的操作类似，这时的1表示的是一个类型长度。</p><p>数组指针的下标运算：这个与数组有点不一样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">list</span>[<span class="number">3</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p   %p\n"</span>, &amp;<span class="built_in">list</span>, &amp;<span class="built_in">list</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> *p = &amp;<span class="built_in">list</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">0x7ffe9e04bd2c</span>   <span class="number">0x7ffe9e04bd2c</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>可以看到数组list的地址其实是第一个元素的地址。那么就好理解了，使用指针下标来循环所有元素的时候是使用的第一个元素的地址，而不是数组变量的地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"%d, %d\n"</span>, p[<span class="number">0</span>], <span class="number">0</span>[p]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%p, %p\n"</span>, &amp;p[<span class="number">0</span>], &amp;<span class="number">0</span>[p]);</span><br></pre></td></tr></table></figure><p>通过上面这个例子发现通过指针的下标取地址的另外一种写法，而这种写法居然是可以的。可以这么简单的理解：第一个是取p的第一个值，第二个是取第一个p的值</p><h3 id="指针的数组"><a href="#指针的数组" class="headerlink" title="指针的数组"></a>指针的数组</h3><p>一个数组全部装的是指针，数组可以嵌套，那么指针数组也有嵌套</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span> ,b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> *<span class="built_in">list</span>[<span class="number">2</span>] = &#123;&amp;a, &amp;b&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> com[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%p %p\n"</span>, com, &amp;com);</span><br><span class="line"><span class="number">0x7ffcbccdbb20</span> <span class="number">0x7ffcbccdbb20</span></span><br></pre></td></tr></table></figure><p>通过上面这个例子可以看出数组的名字和取地址表示的是同一个，所以在写嵌套的指针数组时，可以直接写数组名字，而不用写取地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">2</span>] = &#123;<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> *c[<span class="number">2</span>] = &#123;a, b&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, c[<span class="number">1</span>][<span class="number">0</span>]) <span class="comment">//3</span></span><br></pre></td></tr></table></figure><h3 id="数组的指针"><a href="#数组的指针" class="headerlink" title="数组的指针"></a>数组的指针</h3><p>昨天写了一个用数组变量名地址来作为指针地址的，结果发现老是报错：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num[<span class="number">3</span>] = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> *p = &amp;num;</span><br><span class="line"><span class="comment">// 我想用变量名既然可以取所有元素，那么用变量名的地址来写也应该可以，但是一直报错</span></span><br></pre></td></tr></table></figure><p>开始我还以为只能用元素地址，今天学了这个才发现原来有这个概念，只是我写法不对</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">3</span>] = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> (*p)[<span class="number">3</span>] = &amp;num;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (*p)[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这么写就和数组一样，也可以取元素了</span></span><br></pre></td></tr></table></figure><p>而这个就叫做数组指针，在写的时候要注意加小括号，否则就不对了</p><p>二维数组指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">2</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;, &#123;<span class="number">3</span>,<span class="number">4</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> (*p)[<span class="number">2</span>][<span class="number">2</span>] = &amp;num;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (*p)[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>虽然指针学了这么多，但是我还是不知道它到底有什么用。而且不是都说指针挺难吗，可是我不知道这到底哪里难了，难道我没学到它真正难的知识点吗</p><p>指针在程序中的设置：如果程序设置了32位，那么只能运行在32位系统，如果设置了64位，那么可以运行在32和64位系统上。32位和64位程序数据类型大小不一致。所以本质上还是编译器编译所选择的位数决定了程序的位数。</p><p>没错，在学到下面这一节的时候，我就有点分不清了。数组指针和指针数组不好区分，因为在中文的名字上太容易混了，所以得重新理解，一种是将所有元素都声明为指针<code>int *p[3]</code>，一种是将数组名声明为指针<code>int (*p)[3]</code>，如此就好区分了。</p><p>另外对于<code>*</code>星号的理解是在声明时表明这是一个指针变量，在使用时作为解引用/间接引用</p><h2 id="堆区空间的使用"><a href="#堆区空间的使用" class="headerlink" title="堆区空间的使用"></a>堆区空间的使用</h2><p>即手动进行内存的申请和释放</p><p>内存分区：</p><ul><li>栈区：申请和释放都由操作系统决定。约为4Gb，系统需要检测何时释放会占用cpu资源</li><li>堆区：程序决定何时申请和释放</li><li>全局区</li><li>字符常量区</li><li>代码区</li></ul><h3 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h3><p>堆区空间的申请使用<code>malloc()</code>函数，会申请一段连续空间并返回空间的首地址，类似指针数组（连续空间也就是说每次操作都会操作一个申请的数据类型大小，申请的空间和数组差不多，是分段的）</p><p>malloc(size),size单位为byte字节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *p = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">4</span>); <span class="comment">//后面的int*表示类型为int。前面的int表示一次操作4字节</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p"</span>, p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以直接写字节大小，也可以用sizeof来写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br></pre></td></tr></table></figure><p>判断申请空间是否成功</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"申请失败"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用循环来给申请的空间初始化，没有特殊的申请数组的方式，但是可以通过下标对这一连续空间进行初始化0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">40</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    p[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这样就达到了数组的效果</span></span><br></pre></td></tr></table></figure><p>另一种方式，按字节对申请空间进行赋值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="number">40</span>);</span><br></pre></td></tr></table></figure><p>使用<code>free()</code>函数释放空间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">free</span>(p);</span><br></pre></td></tr></table></figure><p>内存泄漏：当使用malloc申请了一块内存空间后，改变了指针地址，原先申请的内存空间无法找到操作也无法释放，这种现象被称为内存泄漏。</p><p>当空间使用free释放后，空间数据被初始化，但是指针变量依旧没变，再下次使用此指针时才会改变</p><h4 id="一维数组指针"><a href="#一维数组指针" class="headerlink" title="一维数组指针"></a>一维数组指针</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 将所有元素声明为指针</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> * p[<span class="number">2</span>] = &#123;&amp;a, &amp;b&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *p[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将变量名声明为指针，使用小括号是因为*的元算级别低于[]</span></span><br><span class="line">    <span class="keyword">int</span> c[<span class="number">2</span>] = &#123;<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> (*p1)[<span class="number">2</span>] = &amp;c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (*p1)[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一维数组的指针变量的手动声明</span></span><br><span class="line">    <span class="keyword">int</span> (*p2)[<span class="number">2</span>] = (<span class="keyword">int</span>(*)[<span class="number">2</span>])<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">        (*p2)[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (*p2)[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="calloc"><a href="#calloc" class="headerlink" title="calloc"></a>calloc</h3><p>与malloc函数功能一样，但是在声明变量的时候，会将所有元素初始化为0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 两个元素，每个大小为4字节</span></span><br><span class="line"><span class="keyword">int</span> *p3 = (<span class="keyword">int</span>*)<span class="built_in">calloc</span>(<span class="number">2</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, p3[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><h3 id="realloc"><a href="#realloc" class="headerlink" title="realloc"></a>realloc</h3><p>重新定义元素空间大小，也会返回之前的首地址。如果申请的空间在内存碎片上，不够申请的空间，那么会在其它地方申请，那么返回的地址会与原来的地址不同。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p4 = (<span class="keyword">int</span>*)<span class="built_in">realloc</span>(p3, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)*<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">返回值类型 函数名(参数列表)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第一个void表示无返回值，第二个void表示无参数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">fun();</span><br></pre></td></tr></table></figure><h3 id="函数调用：直接写函数名"><a href="#函数调用：直接写函数名" class="headerlink" title="函数调用：直接写函数名()"></a>函数调用：直接写函数名()</h3><p>函数名：即为函数的地址，函数名为一个变量，其存储了函数代码段的首地址。不过函数比较特殊，函数名与函数名取地址都相同<code>fun == (&amp;fun)</code>。所以可以直接写函数名来调用函数</p><p>如果没有参数，必须要写void</p><p>主函数与自定义函数区别：main主函数有系统自动调用，自定义函数需要手动调用</p><p>自定义函数要写在主函数外面，系统只会执行主函数里面的代码，所以必须在主函数中对自定义函数进行了调用，才会被执行</p><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><p>本来函数需要写在main函数前面，而且各个函数先后顺序必须要符合逻辑调用的顺序。但是函数的声明解决了这个问题，只需要在主函数前面对函数进行了声明，然后函数就可以写在main函数后面了，而且不用考虑之间的先后顺序。函数声明只不过是没有写函数的内容</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 主函数中的函数调用</span></span><br><span class="line">    fun();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无参数有返回值的函数，需要return来返回值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在无返回值的函数中可以使用<code>return</code>来结束</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="返回多个值"><a href="#返回多个值" class="headerlink" title="返回多个值"></a>返回多个值</h3><p>return只能返回一个值，所以在需要返回多个值的时候需要用指针去返回一段空间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意这里的返回值类型为int*</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">fun</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>* p = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*<span class="number">2</span>);</span><br><span class="line">    p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    p[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>* a = fun();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d, %d\n"</span>, a[<span class="number">0</span>], a[<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">// 手动申请的空间需要释放，注意这里是释放的a，a与p的地址一样 </span></span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然用数组也可以返回多个值，但是程序可能会有异常，因为使用了栈区空间就有可能出问题。而使用指针则是堆区空间，不会出问题。</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>使用逗号隔开，参数不能初始化（默认值）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在声明的时候可以不写具体的变量名，也可以写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">double</span> b)</span></span>;</span><br><span class="line"><span class="comment">// 这两种都可以</span></span><br></pre></td></tr></table></figure><h3 id="在函数内部修改函数外部的变量"><a href="#在函数内部修改函数外部的变量" class="headerlink" title="在函数内部修改函数外部的变量"></a>在函数内部修改函数外部的变量</h3><p>在python中可以通过global来修改，理解为不同的作用域。不过在c语言中没有这个，从本质上来说，就是通过指针去修改，因为指针是不变的，所以通过参数将指针传递进来便可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span>* p)</span></span>&#123;</span><br><span class="line">    *p = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> *p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    fun(&amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果通过变量名是无法做到的，比如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">fun(a);</span><br><span class="line"><span class="comment">// 在函数的参数中，其实是声明了一个变量b，然后将a传递进去，实际上是给变量b赋值为a。在内存中存在两个变量a，b，其内存地址不同，所以修改b是无法做到的</span></span><br></pre></td></tr></table></figure><h3 id="二级指针"><a href="#二级指针" class="headerlink" title="二级指针"></a>二级指针</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> **p;</span><br><span class="line"><span class="comment">// 二级指针装的是指针的地址</span></span><br></pre></td></tr></table></figure><h3 id="数组作为参数"><a href="#数组作为参数" class="headerlink" title="数组作为参数"></a>数组作为参数</h3><p>一维数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用指针</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> *p, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用数组，其实质也是数组的指针，数组中不需要写元素个数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">(<span class="keyword">int</span> n[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">3</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    <span class="comment">// 可以看到数组名存储的就是数组的地址， 所以可以直接将数组名作为参数传递</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p, %p\n"</span>, &amp;num, num);</span><br><span class="line">    fun(num, <span class="number">3</span>);</span><br><span class="line">    fun1(num, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二维数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要注意的就是嵌套的数组长度必须写上</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> (*p)[<span class="number">3</span>], <span class="keyword">int</span> len1, <span class="keyword">int</span> len2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len1;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len2;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, p[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里可以写 n[2][3] 或者 n[][3]</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">(<span class="keyword">int</span> n[][<span class="number">3</span>], <span class="keyword">int</span> len1, <span class="keyword">int</span> len2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len1;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len2;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">2</span>][<span class="number">3</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line">    fun(num, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    fun1(num, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><p>函数名与函数名指针相等，所以函数名也是一个指针。其类型为将函数名换成<code>(*p)</code>指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用指针p代替函数名</span></span><br><span class="line"><span class="keyword">int</span> (*p)(<span class="keyword">int</span> a, <span class="keyword">int</span> b) = fun;</span><br><span class="line">p(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d, %d\n"</span>, a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> (*p)(<span class="keyword">int</span> a, <span class="keyword">int</span> b) = fun;</span><br><span class="line">    p(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 与函数名调用作用相同</span></span><br><span class="line">    fun(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><h3 id="动态指定参数个数"><a href="#动态指定参数个数" class="headerlink" title="动态指定参数个数"></a>动态指定参数个数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt; //包含的头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    va_list <span class="built_in">list</span>; <span class="comment">// 声明可变长度变量</span></span><br><span class="line">    va_start(<span class="built_in">list</span>, n); <span class="comment">// 赋值，参数个数</span></span><br><span class="line">    va_arg(<span class="built_in">list</span>, <span class="keyword">int</span>); <span class="comment">// 取值，指定类型依次取值</span></span><br><span class="line">    va_arg(<span class="built_in">list</span>, <span class="keyword">double</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fun(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2.2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h2><p>使用单引号标识，两种输出方式：printf和putchar</p><p>一个字符占用一个字节byte（8bit）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, <span class="string">'a'</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'A'</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符变量"><a href="#字符变量" class="headerlink" title="字符变量"></a>字符变量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c = <span class="string">'a'</span>;</span><br></pre></td></tr></table></figure><p> scanf不是直接从输入中读取，输入的数据会存储到一个缓冲区，scanf会自动从缓冲区读取数据，读取一个，移除一个。</p><p>###　清空缓冲区的两种方式</p><ul><li>setbuf()</li><li>while()</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a,b,c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;a);</span><br><span class="line">    <span class="comment">// 使用函数一次全部清空缓存，没有while通用</span></span><br><span class="line">    <span class="comment">// setbuf(stdin, NULL);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用while循环，一个读取一个缓存，读取一个移除一个</span></span><br><span class="line">    <span class="keyword">while</span>(c = getchar() != <span class="string">'\n'</span> &amp;&amp; c != EOF);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c, %c\n"</span>, a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要达到输入一个数读取一个数，并不需要按回车，在win上有conio.h文件。在linux中没有conio.h文件，不能使用_getch()函数。不过可以使用curses.h文件达到相同效果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;curses.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    initscr();</span><br><span class="line">    <span class="keyword">char</span> a;</span><br><span class="line">    <span class="comment">// 循环读取值</span></span><br><span class="line">    <span class="keyword">while</span>(a != <span class="string">'\n'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        a = getch();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 结束</span></span><br><span class="line">    endwin();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> <span class="built_in">list</span>[<span class="number">3</span>] = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> <span class="built_in">list</span>[<span class="number">5</span>] = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c\n"</span>,<span class="built_in">list</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与数组类似，重新赋值也需要用循环一个一个的赋值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> <span class="built_in">list</span>[<span class="number">5</span>] = <span class="string">"abcde"</span>;</span><br><span class="line">    <span class="keyword">char</span> m[] = <span class="string">"123"</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">list</span>[i] = m[i];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c %c\n"</span>,<span class="built_in">list</span>[i],m[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="built_in">list</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用库函数"><a href="#使用库函数" class="headerlink" title="使用库函数"></a>使用库函数</h4><p>因为操作这么复杂，所以c提供了操作它的库：<code>string.h</code></p><p>重新赋值变得很简单</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[] = <span class="string">"hello world!"</span>;</span><br><span class="line">    <span class="keyword">char</span> *p = <span class="string">"linux"</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(str, p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定覆盖前多少个字符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[] = <span class="string">"hello world!"</span>;</span><br><span class="line">    <span class="keyword">char</span> *p = <span class="string">"linux is simple"</span>;</span><br><span class="line">    <span class="built_in">strncpy</span>(str, p, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>以<code>\0</code>（数字0）结尾的字符数组为字符串，用%s</p><h4 id="读取和输出"><a href="#读取和输出" class="headerlink" title="读取和输出"></a>读取和输出</h4><p><code>%s</code>会为自动在最后面加<code>\0</code>，同时<code>scanf</code>遇到空格会结束（无法读取空格），默认空格为分隔符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">30</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>fgets</code>可以读取空格，使用的更多</p><p>但是中文输入用<code>fgets</code>会乱码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">30</span>];</span><br><span class="line">    fgets(str, <span class="number">30</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>fputs</code>代替<code>printf</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">30</span>];</span><br><span class="line">    fgets(str, <span class="number">30</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">fputs</span>(str, <span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明：</p><ul><li>指定元素个数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> <span class="built_in">list</span>[<span class="number">3</span>] = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'\0'</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">list</span>[<span class="number">3</span>] = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">list</span>[<span class="number">3</span>] = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>&#125;; <span class="comment">//这里有三个元素，只写了两个，默认为0。所以为字符串</span></span><br></pre></td></tr></table></figure><ul><li>不指定元素个数，必须加上\0或者0</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> <span class="built_in">list</span>[] = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="number">0</span>&#125;;</span><br></pre></td></tr></table></figure><p>在没有遇到0或者\0时一直输出，遇到0后停止，所以不需要写循环。</p><p>可以从指定位置开始，默认为第一个字符</p><p>%s需要的为指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> <span class="built_in">list</span>[<span class="number">6</span>] = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="number">0</span>,<span class="string">'c'</span>,<span class="string">'d'</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,<span class="built_in">list</span>); <span class="comment">// 遇到0停止输出，所以结果为ab</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, &amp;<span class="built_in">list</span>[<span class="number">3</span>]); <span class="comment">// 从index为3的位置开始输出，所以结果为cd</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>puts也可以达到相同效果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">puts</span>(<span class="built_in">list</span>);</span><br><span class="line"><span class="built_in">puts</span>(&amp;<span class="built_in">list</span>[<span class="number">3</span>]);</span><br></pre></td></tr></table></figure><p>常量字符串：不可修改的字符串，使用双引号，双引号的作用为返回指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *p = <span class="string">"hello world"</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, p);</span><br></pre></td></tr></table></figure><h4 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *str = <span class="string">"12345 67"</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> len =   <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="比较是否相等"><a href="#比较是否相等" class="headerlink" title="比较是否相等"></a>比较是否相等</h4><p><code>strcmp</code>相等返回值为0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *str = <span class="string">"abc123"</span>;</span><br><span class="line">    <span class="keyword">char</span> sget[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, sget);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(str, sget) == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,<span class="string">"equal"</span>);</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"not equal"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>strncmp(str, sget, 3)</code>比较前3个是否相等</p><h4 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h4><p><code>strcat</code>，将后面的字符拼接给前面，所以前面的必须为一个字符数组，且空间要够拼接后面的，不然会越界。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *str = <span class="string">"abc123"</span>;</span><br><span class="line">    <span class="keyword">char</span> sget[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, sget);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strncmp</span>(str, sget, <span class="number">2</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,<span class="string">"equal"</span>);</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"not equal"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="built_in">strcat</span>(sget, str));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>strncat</code>类似的取第二个字符串的前n个拼接</p><h4 id="字符串转数字"><a href="#字符串转数字" class="headerlink" title="字符串转数字"></a>字符串转数字</h4><p>不过，他会从第一个开始查找，如果遇到字符就退出，所以如果开头就是字符的，那么不会进行转换。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = atoi(<span class="string">"123ab4c"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="将不同类型数据转为字符串"><a href="#将不同类型数据转为字符串" class="headerlink" title="将不同类型数据转为字符串"></a>将不同类型数据转为字符串</h4><p><code>sprintf</code>没有输出，仅仅是类型转换</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> <span class="built_in">buffer</span>[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">1234</span>;</span><br><span class="line">    <span class="built_in">sprintf</span>(<span class="built_in">buffer</span>,<span class="string">"%d%s%f"</span>,<span class="number">123</span>, <span class="string">"abc"</span>, <span class="number">12</span>,<span class="number">23</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="built_in">buffer</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串数组"><a href="#字符串数组" class="headerlink" title="字符串数组"></a>字符串数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">2</span>] = &#123;<span class="string">"abc"</span>, <span class="string">"dfs"</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><ul><li>一种数据类型</li><li>包含了多种基本数据类型</li><li>构造类型：自由组合基本数据类型</li><li>是一种由基本数据类型自由组合的数据类型，类似与对象，是一种复合数据类型。</li></ul><ol><li>结构体一般放在主函数外面，作为一个全局变量，可以被引用</li><li>结构体最后需要分号</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">struct_name</span>&#123;</span></span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">double</span> high;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结构体变量"><a href="#结构体变量" class="headerlink" title="结构体变量"></a>结构体变量</h3><p>其实我有一点搞不懂，声明结构体的时候不是已经有了一个结构体的名字了吗，为什么还要有结构体变量？</p><ul><li><p>声明结构体变量可以直接写在结构体后</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">double</span> high;</span><br><span class="line">&#125; stu1, stu2;</span><br></pre></td></tr></table></figure><p>结构体可以没有名字，就比如说这种声明结构体的同时声明变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">double</span> high;</span><br><span class="line">&#125; stu1, stu2;</span><br></pre></td></tr></table></figure></li><li><p>声明结构体变量的另一种方式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">double</span> high;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu1</span>;</span></span><br></pre></td></tr></table></figure><p>这种方式更加灵活，因为随时可以添加别的结构体变量，而不是声明的时候已经指定好了。</p></li></ul><p>现在明白了，结构体数据类型包含了<code>struct struct_name</code>。这两个才是一个数据类型，类似于<code>int</code>也是一种数据类型</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">struct Student stu1 = &#123;'昊天', 28, 1.82&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化部分元素，其它元素默认为0</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu1</span> = &#123;</span>.name=<span class="string">"昊天"</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="访问成员变量"><a href="#访问成员变量" class="headerlink" title="访问成员变量"></a>访问成员变量</h3><h4 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a>实例变量</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">double</span> high;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu1</span> = &#123;</span><span class="string">"昊天"</span>, <span class="number">28</span>, <span class="number">1.82</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s %d %f\n"</span>, stu1.name, stu1.age, stu1.high);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我发现char不能使用单引号，必须使用双引号！</p><h4 id="指针变量"><a href="#指针变量" class="headerlink" title="指针变量"></a>指针变量</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">double</span> high;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu1</span> = &#123;</span><span class="string">"昊天"</span>, <span class="number">28</span>, <span class="number">1.82</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> *<span class="title">p</span> = &amp;<span class="title">stu1</span>;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s %d %f\n"</span>, p-&gt;name, p-&gt;age, p-&gt;high);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// strcpy使用模块</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">// malloc使用模块</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">double</span> high;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="comment">// 强制类型转换，malloc手动申请空间</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> *<span class="title">p</span> = (<span class="title">struct</span> <span class="title">Student</span> *)<span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">Student</span>));</span></span><br><span class="line">    <span class="comment">// 字符数组的赋值必须使用拷贝</span></span><br><span class="line">    <span class="built_in">strcpy</span>(p-&gt;name , <span class="string">"昊天"</span>);</span><br><span class="line">    <span class="comment">// 指针变量赋值</span></span><br><span class="line">    p-&gt;age = <span class="number">28</span>;</span><br><span class="line">    <span class="comment">// 解引用等价于实例变量</span></span><br><span class="line">    (*p).high = <span class="number">1.82</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s %d %f\n"</span>, p-&gt;name, p-&gt;age, p-&gt;high);</span><br><span class="line">    <span class="comment">// 释放空间</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 整体赋值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">double</span> high;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu1</span> = &#123;</span><span class="string">"昊天"</span>, <span class="number">28</span>, <span class="number">1.82</span>&#125;;</span><br><span class="line">    stu1 = (struct Student)&#123;<span class="string">"斗罗"</span>, <span class="number">21</span>, <span class="number">1.76</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s %d %f\n"</span>, stu1.name, stu1.age, stu1.high);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指针成员"><a href="#指针成员" class="headerlink" title="指针成员"></a>指针成员</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> *p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">3</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu1</span> = &#123;</span>num&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数成员"><a href="#函数成员" class="headerlink" title="函数成员"></a>函数成员</h3><p>虽然结构体内不能直接写函数，但是可以通过指针间接使用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello wolrd!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="keyword">void</span> (*p)(<span class="keyword">void</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu1</span> = &#123;</span>fun&#125;;</span><br><span class="line">    stu1.p();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构体嵌套"><a href="#结构体嵌套" class="headerlink" title="结构体嵌套"></a>结构体嵌套</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">City</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> cit_name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> cit_age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Region</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> reg_name[<span class="number">20</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">City</span> <span class="title">cty</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Region</span> <span class="title">e1</span> = &#123;</span><span class="string">"China"</span>, &#123;<span class="string">"Beijing"</span>, <span class="number">2000</span>&#125;&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Region</span> <span class="title">w1</span> = &#123;</span><span class="string">"American"</span>, &#123;<span class="string">"Yework"</span>, <span class="number">500</span>&#125;&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s %s %d\n"</span>, e1.reg_name, e1.cty.cit_name, e1.cty.cit_age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Region</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> reg_name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> reg_age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Region</span> <span class="title">e1</span>[2] = &#123;</span>&#123;<span class="string">"China"</span>, <span class="number">2000</span>&#125;, &#123;<span class="string">"American"</span>, <span class="number">500</span>&#125;&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s %s\n"</span>, e1[<span class="number">0</span>].reg_name, e1[<span class="number">1</span>].reg_name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内存对齐"><a href="#内存对齐" class="headerlink" title="内存对齐"></a>内存对齐</h3><p>32位系统，4字节为最小cpu处理单位。64位系统，8字节为最小cpu处理单位。所以内存对齐，虽然浪费了一些内存，但是cpu处理速度提高。</p><h3 id="结构体大小"><a href="#结构体大小" class="headerlink" title="结构体大小"></a>结构体大小</h3><p>以最大类型为字节对齐宽度</p><h2 id="联合"><a href="#联合" class="headerlink" title="联合"></a>联合</h2><p>union，使用与结构体相同，只不过数据存储时，共享内存，即后面的会覆盖前面的，所以改变一个，其它的都会变化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> Region&#123;</span><br><span class="line">    <span class="keyword">char</span> reg_name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> reg_age;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其实我搞不懂这有啥作用啊？有不能控制其它变量，而且这种变化并没有一个对应关系。</p><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>给整数常量起一个名称，其实和变量赋值的作用一样。只不过这个占用空间小</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Shell&#123;bash, fish, zsh&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, bash, fish, zsh);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>作用为给整形常数取一个有意义的名字，enum的常数为0开始的1递增的有序整形常数。</p><p>我觉得这个作用还挺大的，因为他表达了一种数据与变量的对应关系，而且是一次性指定多个，比变量赋值简单一些。而且值指定以后不可改变，默认为0开始，也可以自己指定，但是递增为1不变。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Shell&#123;bash=<span class="number">20</span>, fish=<span class="number">11</span>, zsh=<span class="number">34</span>&#125;;</span><br><span class="line"><span class="comment">// 20 11 34</span></span><br><span class="line"><span class="keyword">enum</span> Shell&#123;bash=<span class="number">20</span>, fish, zsh&#125;;</span><br><span class="line"><span class="comment">// 20 21 22</span></span><br><span class="line"><span class="keyword">enum</span> Shell&#123;bash, fish=<span class="number">11</span>, zsh&#125;;</span><br><span class="line"><span class="comment">// 0 11 12</span></span><br></pre></td></tr></table></figure><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><h3 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h3><p>对数值类型的数据会自动进行类型转换</p><h3 id="显式类型转换"><a href="#显式类型转换" class="headerlink" title="显式类型转换"></a>显式类型转换</h3><p>即强制类型转换，对类型进行手动类型转换</p><ul><li><p>数据类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>指针类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> a = <span class="number">1.2</span>;</span><br><span class="line"><span class="keyword">int</span> *p = (<span class="keyword">int</span> *)&amp;a;</span><br><span class="line">*p = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><strong><em>可以由空间大的数据类型转换为数据空间小的，这样会造成精度丢失</em></strong></p><p><strong><em>但是不能有数据空间小的转换为大的，因为这样会造成内存越界</em></strong></p></li></ul><h3 id="小端存储"><a href="#小端存储" class="headerlink" title="小端存储"></a>小端存储</h3><p>平常使用的都是小端存储</p><p><img src="/home/fsl/Documents/note/image/image-20200609101909648.png" alt="image-20200609101909648"></p><h4 id="验证小端存储：强制类型转换"><a href="#验证小端存储：强制类型转换" class="headerlink" title="验证小端存储：强制类型转换"></a>验证小端存储：强制类型转换</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">134480385</span>;</span><br><span class="line">    <span class="keyword">char</span> *p = (<span class="keyword">char</span> *)&amp;a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" %p -&gt; %d\n %p -&gt; %d\n %p -&gt; %d\n %p -&gt; %d\n"</span>, &amp;p[<span class="number">0</span>], p[<span class="number">0</span>], &amp;p[<span class="number">1</span>], p[<span class="number">1</span>], &amp;p[<span class="number">2</span>],p[<span class="number">2</span>], &amp;p[<span class="number">3</span>],p[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="number">0x7ffc3900433c</span> -&gt; <span class="number">1</span></span><br><span class="line"> <span class="number">0x7ffc3900433d</span> -&gt; <span class="number">2</span></span><br><span class="line"> <span class="number">0x7ffc3900433e</span> -&gt; <span class="number">4</span></span><br><span class="line"> <span class="number">0x7ffc3900433f</span> -&gt; <span class="number">8</span></span><br></pre></td></tr></table></figure><p>地址由高到低，数据由低到高</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">内存低位对应数据低位 </span><br><span class="line"><span class="number">0x7ffc3900433c</span> <span class="number">0x7ffc3900433d</span> <span class="number">0x7ffc3900433e</span> <span class="number">0x7ffc3900433f</span></span><br><span class="line">     <span class="number">1</span><span class="number">2</span><span class="number">4</span><span class="number">8</span></span><br><span class="line">  <span class="number">00000001</span> <span class="number">00000010</span><span class="number">00000100</span><span class="number">00001000</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">实际数据应该是</span><br><span class="line">  <span class="number">00001000</span> <span class="number">00000100</span> <span class="number">00000010</span> <span class="number">00000001</span></span><br></pre></td></tr></table></figure><h4 id="验证小端存储：联合"><a href="#验证小端存储：联合" class="headerlink" title="验证小端存储：联合"></a>验证小端存储：联合</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> Num&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">char</span> b[<span class="number">4</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">union</span> Num u = &#123;<span class="number">134480385</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" %p -&gt; %d\n %p -&gt; %d\n %p -&gt; %d\n %p -&gt; %d\n"</span>, </span><br><span class="line">    &amp;u.b[<span class="number">0</span>], u.b[<span class="number">0</span>], &amp;u.b[<span class="number">1</span>], u.b[<span class="number">1</span>], &amp;u.b[<span class="number">2</span>],u.b[<span class="number">2</span>], &amp;u.b[<span class="number">3</span>],u.b[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="number">0x7ffdf48ee024</span> -&gt; <span class="number">1</span></span><br><span class="line"> <span class="number">0x7ffdf48ee025</span> -&gt; <span class="number">2</span></span><br><span class="line"> <span class="number">0x7ffdf48ee026</span> -&gt; <span class="number">4</span></span><br><span class="line"> <span class="number">0x7ffdf48ee027</span> -&gt; <span class="number">8</span></span><br></pre></td></tr></table></figure><p>使用union的特性，后面的值会覆盖前面的数据。</p><h3 id="大端存储"><a href="#大端存储" class="headerlink" title="大端存储"></a>大端存储</h3><p>一般用在通行方面</p><p><img src="/home/fsl/Documents/note/image/image-20200609102943704.png" alt="image-20200609102943704"></p><h3 id="类型重命名"><a href="#类型重命名" class="headerlink" title="类型重命名"></a>类型重命名</h3><p><code>typedef</code>可以对类型进行重命名，简化书写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将unsigned int 重命名为unint</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> unint;</span><br></pre></td></tr></table></figure><h4 id="结构体重命名"><a href="#结构体重命名" class="headerlink" title="结构体重命名"></a>结构体重命名</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Region</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> reg_name[<span class="number">20</span>];</span><br><span class="line">&#125;_Region;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    _Region e1 = &#123;<span class="string">"China"</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, e1.reg_name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数指针重命名"><a href="#函数指针重命名" class="headerlink" title="函数指针重命名"></a>函数指针重命名</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">float</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 没有进行重命名的时候写起来比较麻烦</span></span><br><span class="line">    <span class="keyword">float</span> (*c)(<span class="keyword">int</span>, <span class="keyword">float</span>) = cal;</span><br><span class="line">    <span class="keyword">float</span> m = c(<span class="number">2</span>, <span class="number">3.1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%f\n"</span>, m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">float</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对函数指针进行重命名</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">float</span> <span class="params">(*ncal)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">float</span>)</span> </span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    ncal c = cal; </span><br><span class="line">    <span class="keyword">float</span> m = c(<span class="number">2</span>, <span class="number">3.1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%f\n"</span>, m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h2><p><code>#define</code>可以给一切重命名，本质是替换（会将后面的全部替换为前面的，所以不能加分号，否则分号也会当作被替换的），不会进行任何计算。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, NUM);</span><br></pre></td></tr></table></figure><h3 id="参数宏"><a href="#参数宏" class="headerlink" title="参数宏"></a>参数宏</h3><p>宏也可以带参数，有点像lambda表达式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT(x) printf(<span class="meta-string">"%d\n"</span>, x)</span></span><br><span class="line"></span><br><span class="line">PRINT(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT(x,y) printf(<span class="meta-string">"%d\n"</span>, x+y)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    PRINT(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p>如果传递的参数是一个表达式，那么在定义宏的时候需要加括号，否则容易因为结合性导致错误</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT(x,y) printf(<span class="meta-string">"%d\n"</span>, (x)+(y))</span></span><br></pre></td></tr></table></figure><p><strong><em>如果一行写不下，那么可以使用<code>\</code>拼接</em></strong></p><h3 id="字符串指示符"><a href="#字符串指示符" class="headerlink" title="字符串指示符"></a>字符串指示符</h3><p>在最后面添加<code>#参数</code>表示将传递过来的作为字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT(x) #x</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, PRINT(<span class="number">2</span>));</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT(x, y) #x #y</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="number">123</span>, abc);</span><br><span class="line"></span><br><span class="line"><span class="number">123</span>abc</span><br></pre></td></tr></table></figure><h2 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a>项目管理</h2><p>一般包含了两个部分：</p><ul><li>.h的头文件<ol><li>函数声明</li><li>结构体类型声明</li><li>宏</li><li>typedef</li></ol></li><li>.c的源文件<ol><li>包含头文件（自己的用双引号，在项目目录下面找。而&lt;&gt;则是在系统库中去找）。也可写相对路径/绝对路径。</li><li>函数</li></ol></li></ul><h2 id="静态存储区"><a href="#静态存储区" class="headerlink" title="静态存储区"></a>静态存储区</h2><ul><li>所有变量自动初始化为0</li><li>生命周期为整个程序运行期间</li><li>初始化的时候只能初始化为常量，不能进行计算</li><li>可以多次声明，但只能定义一次。所以定义只能写在源文件中，如果写在头文件中那么会多次被引用定义</li><li>包含<ul><li>全局变量</li><li>静态全局变量</li><li>静态局部变量</li><li>静态函数</li></ul></li></ul><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>一般都会加<code>extern</code>来标识，虽然不加也可以</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> a = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>在源文件中申明的函数也会加<code>extern</code>，表明函数定义在别的文件中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>如果是在局部变量中要声明全局变量（比如在函数中），必须要<code>extern</code>，且不能初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">extern</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态全局变量"><a href="#静态全局变量" class="headerlink" title="静态全局变量"></a>静态全局变量</h3><ul><li><p><code>static</code>关键字</p></li><li><p>只在当前文件中有效</p></li><li><p>定义在主函数外</p></li></ul><h3 id="静态局部变量"><a href="#静态局部变量" class="headerlink" title="静态局部变量"></a>静态局部变量</h3><ul><li>定义在函数中，在作用域内有效，生命周期为程序运行期间</li><li>与普通变量不同，普通变量在函数执行完后销毁</li></ul><h2 id="寄存器变量"><a href="#寄存器变量" class="headerlink" title="寄存器变量"></a>寄存器变量</h2><ul><li><code>register</code></li><li>不能用在全局变量，只能局部变量</li><li>不能取地址，在cpu中</li><li>但是基本上不会存成功，因为由cpu控制</li></ul><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><h3 id="修饰常量"><a href="#修饰常量" class="headerlink" title="修饰常量"></a>修饰常量</h3><p>常量修饰符，被修饰的变量不可（通过变量）改变，所以必须要初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>但是可以通过指针去修改</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// a被const修饰，类型为const int,要进行类型转换为int</span></span><br><span class="line">    <span class="keyword">int</span> *p = (<span class="keyword">int</span> *)&amp;a;</span><br><span class="line">    *p = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修饰指针"><a href="#修饰指针" class="headerlink" title="修饰指针"></a>修饰指针</h3><p>只是被const修饰的变量不能直接修改（*p =2），但是其它途径都是可以修改的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过二级指针修改</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> *p = &amp;a;</span><br><span class="line">    <span class="keyword">int</span> **fp = (<span class="keyword">int</span> **)&amp;p;</span><br><span class="line">    **fp = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过a修改</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> *p = &amp;a;</span><br><span class="line">    a = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 还可以将p指向其它空间</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> *p = &amp;a;</span><br><span class="line">    p = &amp;b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本质上const只是对紧接着后面的变量进行修饰，例如对p进行修饰后*p又可以赋值了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对p进行修饰</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> * <span class="keyword">const</span> p = &amp;a;</span><br><span class="line">    *p = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可对p和<code>*p</code>同时修饰，这时对p和<code>*p</code>都不可直接修改了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> * <span class="keyword">const</span> p = &amp;a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是还是可以用二级指针修改</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> * <span class="keyword">const</span> p = &amp;a;</span><br><span class="line">    <span class="keyword">int</span> **m = (<span class="keyword">int</span> **)&amp;p;</span><br><span class="line">    **m = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *p);</span><br></pre></td></tr></table></figure><p>总之：const就是对变量进行一个修饰，表示不可修改，但是并不是说真正的修改不了。在c++中const修饰后就真正的无法修改了</p><h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><p>被修饰的变量告诉系统，该变量不需要被优化，不需要放入寄存器或者高速缓存</p><h2 id="restrict"><a href="#restrict" class="headerlink" title="restrict"></a>restrict</h2><p>只能用来修饰指针，当指针存在连续的算术运算时，会在编译的时候进行一些优化</p><h2 id="内存分区"><a href="#内存分区" class="headerlink" title="内存分区"></a>内存分区</h2><p>内存分区：</p><ul><li><p>栈区：申请和释放都由操作系统决定。约为4Gb（与操作系统有关），系统需要检测何时释放会占用cpu资源</p></li><li><p>堆区：程序决定何时申请和释放malloc/free。空间大小没有限制</p></li><li><p>静态全局区：全局变量/static变量，自动初始化为0，生命周期为程序运行期间</p></li><li><p>字符常量区：只读。数值（12），字符常量（’a’被系统识别为ascii码），字符串常量（”abc”）。字符串常量生命周期为程序运行期间。数值常量不占用空间，立即数存储，随用随丢。</p><p>全局变量被const修饰后存储到字符常量区，局部变量被const修饰后存储在栈区</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *p = (<span class="keyword">int</span> *)&amp;a;</span><br><span class="line">    *p = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[1]    78458 segmentation fault (core dumped)  "/home/fsl/Data/code/c/"learn</span><br><span class="line"><span class="comment">// 不可修改</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>代码区：只读</li></ul><h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span><br></pre></td></tr></table></figure><p><code>argc</code>：命令行参数个数</p><p><code>argv</code>：命令行参数数组，argv[0]为程序路径</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %s %s %s\n"</span>, argc, argv[<span class="number">0</span>], argv[<span class="number">1</span>], argv[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">》》》 ./learn  ab cd </span><br><span class="line"><span class="number">3</span> ./learn ab cd</span><br></pre></td></tr></table></figure><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> c/c++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>c++</title>
      <link href="/2020/06/25/c++/"/>
      <url>/2020/06/25/c++/</url>
      
        <content type="html"><![CDATA[<h1 id="c"><a href="#c" class="headerlink" title="c++"></a>c++</h1><h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><p>文件名结尾为<code>.cpp</code></p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>使用<code>g++</code>编译</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ learn.cpp -o learn</span><br></pre></td></tr></table></figure><h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"hello world! 你好，世界！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主函数必须要返回<code>int</code></li><li><code>endl</code>会立即刷新缓冲区实现换行，<code>\n</code>也可以实现换行，但没有刷新缓冲区的作用，所以无法保证立即输出到屏幕上，只有在执行后面的语句时才会写到屏幕上</li><li><code>cout</code>为一个对象</li></ul><h2 id="cin"><a href="#cin" class="headerlink" title="cin"></a>cin</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">12</span>];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入姓名，年龄："</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; name &gt;&gt; age;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"姓名："</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"年龄："</span> &lt;&lt; age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>cin</code>为一个对象，接收标准输入</p><h2 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h2><p>c++中需要使用命名空间来区分不同的函数名，变量名等。例如<code>cin,cout</code>输入<code>std</code>这个命名空间</p><p>使用namespace的几种方式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用整个std命名空间</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">count &lt;&lt; <span class="string">"hello"</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在需要的对象前面加上命名空间名</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"hello"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只使用指定的命名空间中的对象</span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"hello"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>总之这些写法都和perl中的使用很相似</p><h2 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h2><p>c++中，struct在使用的时候不需要写struct（c语言中声明与使用都需要）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">15</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Student stu1 = &#123;<span class="string">"昊天"</span>, <span class="number">22</span>&#125;;</span><br><span class="line">    stu1.age = <span class="number">24</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; stu1.name &lt;&lt; stu1.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="new-delete"><a href="#new-delete" class="headerlink" title="new/delete"></a>new/delete</h2><p>空间的申请与释放不再用c语言的malloc与free，而是使用new与delete</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *age = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line">*age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">delete</span> age;</span><br></pre></td></tr></table></figure><p>申请时并赋值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *age = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>申请数组与释放</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *<span class="built_in">list</span> = <span class="keyword">new</span> <span class="built_in">list</span>[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">memset</span>(<span class="built_in">list</span>, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)*<span class="number">5</span>);<span class="comment">//全部初始化为0</span></span><br><span class="line"><span class="keyword">delete</span>[] <span class="built_in">list</span>;</span><br></pre></td></tr></table></figure><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p>c++中多了引用，之前学perl的时候觉得引用和指针是一样的，但是现在看来这两个存在本质上的区别，引用是多个变量指向同一个地址。指针就是内存地址，引用是对同一块内存地址的不同命名。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 整数</span></span><br><span class="line">    <span class="keyword">int</span> &amp;b = a;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">10</span>] = <span class="string">"hello"</span>;</span><br><span class="line">    <span class="comment">// 字符</span></span><br><span class="line">    <span class="keyword">char</span> (&amp;b)[<span class="number">10</span>] = a;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 常量</span></span><br><span class="line">    <span class="keyword">const</span>  <span class="keyword">int</span> &amp;b = a;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">// 数组</span></span><br><span class="line">    <span class="keyword">int</span> (&amp;b)[<span class="number">10</span>] = a;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; b[<span class="number">9</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>][<span class="number">2</span>] = &#123;<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="comment">// 二位数组</span></span><br><span class="line">    <span class="keyword">int</span> (&amp;b)[<span class="number">10</span>][<span class="number">2</span>] = a;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a[<span class="number">0</span>][<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; b[<span class="number">9</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> *p1 = &amp;a;</span><br><span class="line">    <span class="keyword">int</span> *(&amp;p2) = p1;</span><br><span class="line">    *p2 = <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *p1 &lt;&lt; <span class="built_in">endl</span> &lt;&lt; *p2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改了其中一个，其它的也会改变，因为都是同一个内存地址。然而并不知道这个引用有什么作用，直到将引用作为函数参数的时候才发现挺有用。因为之前必须使用指针才能修改外部的值，现在用引用也可以做到。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传参为一个int类型的引用</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">num</span><span class="params">(<span class="keyword">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b = <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    num(a);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引用做为函数返回值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> &amp; <span class="title">num</span><span class="params">(<span class="keyword">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   b = <span class="number">1000</span>;</span><br><span class="line">   <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 要避免对函数返回的引用做再次引用的操作</span></span><br><span class="line">    <span class="keyword">int</span> &amp;c = num(a); <span class="comment">// 这种写法错误</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span> &lt;&lt; a  &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为当一个函数运行结束之后，所在空间被释放，那么再对其中的局部变量做引用的话，就是非法操作，所以不能对函数的返回引用再次引用（不能引用局部变量）</p><h2 id="引用与指针"><a href="#引用与指针" class="headerlink" title="引用与指针"></a>引用与指针</h2><ul><li>引用的时候需要初始化，而指针不需要</li><li>引用过得变量不能再使用，而指针可以</li><li>引用不占用空间，而指针需要占用空间（指针是数据类型，存储地址）</li><li>引用效率高于指针，引用直接操作空间，指针通过地址间接操作</li><li>引用更加安全，引用是数值操作，指针可能会有地址偏移</li><li>引用灵活性没有指针好</li></ul><h2 id="amp-符号的三种用法区分"><a href="#amp-符号的三种用法区分" class="headerlink" title="&amp;符号的三种用法区分"></a>&amp;符号的三种用法区分</h2><ul><li>在声明变量前，表示引用<code>int &amp;a = b;</code></li><li>在变量前面，表示取地址<code>scanf(int, &amp;a);</code></li><li>在数字中间，表示与运算<code>1 &amp; 2;</code></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数参数默认值"><a href="#函数参数默认值" class="headerlink" title="函数参数默认值"></a>函数参数默认值</h3><p>如果只指定部分值，那么后面的参数必须有指定值，而且需要连续，不能间隔指定</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">num</span><span class="params">(<span class="keyword">int</span> age, <span class="keyword">int</span> score=<span class="number">0</span>, <span class="built_in">string</span> name=<span class="string">"昊天"</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"age:"</span> &lt;&lt; age &lt;&lt; <span class="built_in">endl</span> &lt;&lt; score &lt;&lt;<span class="built_in">endl</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    num(<span class="number">20</span>, <span class="number">99</span>, <span class="string">"斗罗"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><p>同一作用域内，函数名相同，但是参数不同（包括参数数量和参数类型）的互相为重载函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">num</span><span class="params">(<span class="keyword">int</span> age, <span class="keyword">int</span> score=<span class="number">0</span>, <span class="built_in">string</span> name=<span class="string">"昊天"</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"age:"</span> &lt;&lt; age &lt;&lt; <span class="built_in">endl</span> &lt;&lt; score &lt;&lt;<span class="built_in">endl</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">num</span><span class="params">(<span class="keyword">int</span> age)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"age:"</span> &lt;&lt; age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    num(<span class="number">20</span>, <span class="number">99</span>, <span class="string">"斗罗"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数重载可以让函数根据参数类型，自动选择对应的函数。</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>对对象的数据进行初始化，在实例化对象的时候自动调用。</p><ul><li>构造函数无返回值</li><li>构造函数的函数名与类名相同</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    Student()</span><br><span class="line">    &#123;</span><br><span class="line">        age = <span class="number">22</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get_age</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Student stu1;</span><br><span class="line">    stu1.get_age();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果构造函数需要接收参数，那么在实例化的时候需要传参</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 设置默认值</span></span><br><span class="line">    Student(<span class="keyword">int</span> a = <span class="number">22</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        age = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get_age</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用默认值时，不需要写括号</span></span><br><span class="line">    Student stu;</span><br><span class="line">    stu.get_age();</span><br><span class="line">    <span class="comment">// 传参则会覆盖默认值，使用括号传参</span></span><br><span class="line">    <span class="function">Student <span class="title">stu1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line">    stu1.get_age();</span><br><span class="line">    <span class="comment">// 指针对象传参</span></span><br><span class="line">    Student *stu2 = <span class="keyword">new</span> Student(<span class="number">33</span>);</span><br><span class="line">    stu2 -&gt; get_age();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h4><p>对构造函数的数据进行初始化，而非赋值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数对数据进行初始化</span></span><br><span class="line">    Student():age(<span class="number">14</span>) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get_age</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Student stu;</span><br><span class="line">    stu.get_age();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h3><p>在对象销毁时自动调用，一般用在销毁指针变量时    </p><ul><li>不能进行重载</li><li>没有参数</li><li>函数名为<code>~类名</code></li><li>指针对象需要手动释放，所以在调用delete时，才会自动调用析构函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    Student():age(<span class="number">20</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 析构函数</span></span><br><span class="line">    ~Student()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"end object"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 作用域为括号内，局部对象</span></span><br><span class="line">    &#123;</span><br><span class="line">        Student stu1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对象被销毁</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Student():age(<span class="number">20</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Student()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"end object"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        Student stu1;</span><br><span class="line">    &#125;</span><br><span class="line">    Student *stu2 = <span class="keyword">new</span> Student;</span><br><span class="line">    <span class="comment">// 指针对象在调用delete时，才会执行析构函数</span></span><br><span class="line">    <span class="keyword">delete</span> stu2;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="临时对象"><a href="#临时对象" class="headerlink" title="临时对象"></a>临时对象</h4><p>没有对象名的对象创建方式（必须加括号），其作用域为当前所在语句。语句执行完，对象会被自动销毁。所以临时对象的析构函数会在语句执行完调用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Student():age(<span class="number">20</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Student()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"end object"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Student();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="malloc-free-VS-new-delete"><a href="#malloc-free-VS-new-delete" class="headerlink" title="malloc/free VS new/delete"></a>malloc/free VS new/delete</h4><p>malloc/free无法自动调用构造函数与析构函数    </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Student():age(<span class="number">20</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Student()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"end object"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 使用malloc/free时，不会自动调用构造函数/析构函数</span></span><br><span class="line">    Student *stu1 = (Student *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Student));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>为系统提供的一个对象指针</p><p>虽然this的作用是为了避免同名变量的问题，但是我发现即便是同名的不加<code>this</code>也没有问题，而老师的视频里面不加this是会出问题的，所以现在的c++已经改变了，可以不用加this了吗？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    Student(<span class="keyword">int</span> age)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 使用this来指示对象的变量，而非参数</span></span><br><span class="line">        <span class="keyword">this</span> -&gt; age = age;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Student()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"end object"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Student <span class="title">stu</span><span class="params">(<span class="number">22</span>)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常函数"><a href="#常函数" class="headerlink" title="常函数"></a>常函数</h3><p>在函数后添加<code>const</code>的函数为常函数，常函数中不可对变量进行修改</p><ul><li>构造函数和析构函数不能为常函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 添加const的函数称为常函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_age</span><span class="params">(<span class="keyword">int</span> age)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 常函数中不可对变量进行赋值</span></span><br><span class="line">        <span class="keyword">this</span> -&gt; age = age;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span> -&gt; age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Student stu;</span><br><span class="line">    stu.set_age(<span class="number">22</span>); <span class="comment">// 赋值会报错</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常对象"><a href="#常对象" class="headerlink" title="常对象"></a>常对象</h4><p>被const修饰的对象为常对象，常对象只能调用常函数，不能调用普通函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_age</span><span class="params">(<span class="keyword">int</span> age)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span> -&gt; age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 常对象只能调用常函数</span></span><br><span class="line">    <span class="keyword">const</span> Student stu;</span><br><span class="line">    stu.set_age(<span class="number">22</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p>静态成员不能在类内部进行初始化，必须在类外部进行初始化</p><ul><li>没有this对象指针（因为类存在时静态变量就已经存在，与对象无关）</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">// static成员</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_age</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span> -&gt; age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在类外部进行初始化</span></span><br><span class="line"><span class="keyword">int</span> Student::age = <span class="number">23</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> Student stu;</span><br><span class="line">    stu.set_age();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只有静态常量整形才能在类内部进行初始化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> age = <span class="number">24</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Student stu;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拷贝构造"><a href="#拷贝构造" class="headerlink" title="拷贝构造"></a>拷贝构造</h3><p>一个对象以另一个现有对象为基础进行实例化称为拷贝构造</p><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><p>默认的拷贝构造实现对非静态成员的复制（浅拷贝）</p><p>首要条件：拷贝构造函数中传参为局部对象，而且使用引用可以对速度有一定优化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Student()</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 默认拷贝构造，传递参数为一个局部对象Student的引用&amp;variable</span></span><br><span class="line"><span class="comment">// 如果传参为局部对象，那么会多走一步拷贝构造，使用引用则不会，而是使用原来的对象作为参数</span></span><br><span class="line">Student(<span class="keyword">const</span> Student&amp;variable)</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拷贝构造的方式：</p><ul><li><p>将现有对象作为参数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Student()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 实现系统默认的拷贝构造</span></span><br><span class="line">    Student(<span class="keyword">const</span> Student&amp;)</span><br><span class="line">    &#123;</span><br><span class="line">        age = <span class="number">18</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Student stu1;</span><br><span class="line">    <span class="function">Student <span class="title">stu2</span><span class="params">(stu1)</span></span>; <span class="comment">// 1</span></span><br><span class="line">    Student stu3 = stu1; <span class="comment">// 2</span></span><br><span class="line">    Student stu4 = Student(stu1); <span class="comment">// 3</span></span><br><span class="line">    Student *stu5 = <span class="keyword">new</span> Student(stu1); <span class="comment">// 4</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将现有对象作为值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student stu3 = stu1;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>以一个临时对象作为值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student stu4 = Student(stu1);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>对象指针中将现有对象作为参数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student *stu5 = <span class="keyword">new</span> Student(stu1);</span><br></pre></td></tr></table></figure></li></ul><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><p>浅拷贝存在的问题在于指针变量，当构造函数中有指针变量的时候，而且在析构函数中对指针变量进行了释放，那么在调用拷贝构造后，第一次释放指针变量后，释放拷贝构造的指针时，会因为第一次已经将指针变量释放掉了，而造成程序崩溃。所以如果构造函数中如果存在指针变量，那么就需要用深拷贝，深拷贝则是在构造函数中申请一块新的地址，来存储之前的指针所指向的值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> *age;</span><br><span class="line">    Student()</span><br><span class="line">    &#123;</span><br><span class="line">        age = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line">        *age = <span class="number">18</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Student(<span class="keyword">const</span> Student &amp;a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 拷贝构造申请新的空间</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;age = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line">        <span class="comment">// 这里是值的传递，而不是指针的传递</span></span><br><span class="line">        *age = *(a.age); <span class="comment">// a.age是一个指针</span></span><br><span class="line">    &#125;</span><br><span class="line">    ~Student()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Student stu;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *(stu.age) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    Student stu1 = stu;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *(stu1.age) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>&lt;cstring&gt;</code>中的<code>memcpy</code>可以将连续数组进行复制，适合数组复制</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> *age;</span><br><span class="line">    Student()</span><br><span class="line">    &#123;</span><br><span class="line">        age = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        age[<span class="number">0</span>] = <span class="number">18</span>;</span><br><span class="line">        age[<span class="number">1</span>] = <span class="number">19</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Student(<span class="keyword">const</span> Student &amp;a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// this-&gt;age[0] = a.age[0];</span></span><br><span class="line">        <span class="comment">// this-&gt;age[1] = a.age[1];</span></span><br><span class="line">        <span class="comment">// 当使用数组时，可以使用内存复制，一次性将所有值复制过来</span></span><br><span class="line">        <span class="built_in">memcpy</span>(<span class="keyword">this</span>-&gt;age, a.age, <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ~Student()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        Student stu;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; stu.age[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        Student stu1 = stu;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; stu1.age[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h3><p>在函数名前加<code>inline</code>，编译时会自动将函数调用的地方替换为函数本体，增加了代码区内存消耗，但是提高了执行速度</p><ul><li>优点：避免了常规函数的寻址跳转，节省了cpu寻址时间</li><li>缺点：代码量增多，让程序内存占用高一些</li><li>类内部的普通函数都是内联函数</li><li>内联函数如果写在头文件中，那么需要将定义和函数本体都写在里面</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">max_num</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">max</span> = max_num(<span class="number">8</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">max</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">max_num</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">max</span> = (a &gt; b)?a:b;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>: <span class="comment">//需要有public修饰，否则是private变量，不可访问（类中的函数/对象赋值）</span></span><br><span class="line">    <span class="comment">// char name[15];</span></span><br><span class="line">    <span class="built_in">string</span> name; <span class="comment">// 返回类型需要为string，使用不了char</span></span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">get_name</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Student stu1;</span><br><span class="line">    stu1.name = <span class="string">"昊天"</span>; </span><br><span class="line">    stu1.age = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; stu1.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    stu1.get_name();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不知道为什么，一直使用不了字符数组char？</p><ul><li><p>类名最好大写</p></li><li><p>使用class标识，struct也是类的一部分</p></li><li><p>变量具有严格的作用域，使用public修饰的才能被外部使用</p></li><li><p>除了static变量外，其它的都需要通过对象访问（实例化才会分配空间，类只是一个数据类型）</p></li><li><p>类的实例化有两种方式</p><ul><li>使用普通变量（栈区）：<code>class_name object_name</code></li><li>使用指针（堆区），是要使用new关键字：<code>class_name point = new class_name</code><ul><li>最后需要使用delete删除堆区变量</li><li>必须使用new，否则只是声明了一个指针对象，没有实例化对象</li></ul></li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">get_name</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Student *stu1 = <span class="keyword">new</span> Student;</span><br><span class="line">    stu1 -&gt; name = <span class="string">"昊天"</span>;</span><br><span class="line">    stu1 -&gt; age = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; stu1 -&gt; age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><ul><li>public：类外部可以访问（结构体默认为public）</li><li>private：仅类内部可以访问，外部不可见</li><li>protected：仅类内部以及子类可以访问</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">// private:  默认为private</span></span><br><span class="line">    <span class="built_in">string</span> name = <span class="string">"li"</span>;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">get_name</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Student *stu1 = <span class="keyword">new</span> Student;</span><br><span class="line">    <span class="built_in">string</span> na = stu1 -&gt; get_name();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; na &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="friend"><a href="#friend" class="headerlink" title="friend"></a>friend</h3><p>有元：让被private和protected修饰的变量/函数对指定函数/类可见（修饰friend函数/类）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_age</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// friend修饰的函数可见私有变量/函数</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Student stu1;</span><br><span class="line">    stu1.age = <span class="number">22</span>;</span><br><span class="line">    stu1.get_age();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fun();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主函数也可被声明为friend函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_age</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Student stu1;</span><br><span class="line">    stu1.age = <span class="number">22</span>;</span><br><span class="line">    stu1.get_age();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的，类也可以被friend修饰，成为friend类，作用同上</p><h2 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h2><p>一般来说函数是不可以和数字相加的，因为数据类型不一致，但是可以使用运算符重载来达到这个目的，它的主要意义还是对于同一个类的多个对象</p><h3 id="类外部运算符重载"><a href="#类外部运算符重载" class="headerlink" title="类外部运算符重载"></a>类外部运算符重载</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">operator</span>+(class_name_reference, variable)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Num</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">void</span> <span class="keyword">operator</span>+(Num &amp;v, <span class="keyword">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v.a + b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Num num1;</span><br><span class="line">    num1 + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Num</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">void</span> <span class="keyword">operator</span>+(Num &amp;v, <span class="keyword">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v.a + b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 还可以使用函数重载来实现自动判断参数类型</span></span><br><span class="line"><span class="keyword">void</span> <span class="keyword">operator</span>+(<span class="keyword">int</span> b, Num &amp;v)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v.a + b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Num num1;</span><br><span class="line">    <span class="comment">// 自动判断参数类型</span></span><br><span class="line">    num1 + <span class="number">10</span>;</span><br><span class="line">    <span class="number">20</span> + num1;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类内部运算符重载"><a href="#类内部运算符重载" class="headerlink" title="类内部运算符重载"></a>类内部运算符重载</h3><p>参数不需要写类，默认左边为类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">operator</span>+(variable)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Num</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">operator</span>+(<span class="keyword">int</span> b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a + b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Num num1;</span><br><span class="line">    num1 + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为默认左边为类的参数，所以不能实现左边为数字，右边为类的这种运算</p><h3 id="i-ostream重载"><a href="#i-ostream重载" class="headerlink" title="i/ostream重载"></a>i/ostream重载</h3><p>cout是ostream的一个对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Out</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Out()</span><br><span class="line">    &#123;</span><br><span class="line">        age = <span class="number">18</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用friend可以让外部operator的运算符重载可以使用private变量age</span></span><br><span class="line">    <span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;os, <span class="keyword">const</span> Out &amp;out);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个ostream的引用</span></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;os, <span class="keyword">const</span> Out &amp;out)</span><br><span class="line">&#123;</span><br><span class="line">    os &lt;&lt; out.age ;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Out ot1;</span><br><span class="line">    <span class="comment">// 重载ostream，实现对象的输出</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ot1 &lt;&lt; <span class="string">" year's old"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cin是istream的一个对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">In</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">friend</span> istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp;is, In &amp;in);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get_age</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp;is, In &amp;in)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 重载istream，实现输入对对象的赋值</span></span><br><span class="line">    is &gt;&gt; in.age;</span><br><span class="line">    <span class="comment">// 这里需要调用istream的内置函数fail进行输入错误判断</span></span><br><span class="line">    <span class="keyword">if</span>(is.fail())</span><br><span class="line">    &#123;</span><br><span class="line">        in.age = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"input error"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    In in1;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; in1;</span><br><span class="line">    in1.get_age();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>将公共的类作为基类，被子类继承后，子类也会拥有基类的所有属性（成员变量，成员函数）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class_name</span> :</span> permission basic_class_name</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="权限修饰符：修饰子类的继承之后的权限"><a href="#权限修饰符：修饰子类的继承之后的权限" class="headerlink" title="权限修饰符：修饰子类的继承之后的权限"></a>权限修饰符：修饰子类的继承之后的权限</h3><ul><li>public：拥有与父类一致的权限</li><li>protected：父类的public降低为protected，其它不变</li><li>private：所有成员变为private</li><li>如果不写权限修饰符，那么默认为private</li></ul><h3 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h3><ul><li>有参构造：父类的构造函数中有参数，需要通过子类的构造函数的初始化列表进行传递</li><li>无参构造：先调用父类的构造函数，再调用子类的构造函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> school_num;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    School()</span><br><span class="line">    &#123;</span><br><span class="line">        school_num = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; school_num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> :</span> <span class="keyword">public</span> School <span class="comment">//继承父类School</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> stu_num;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Student()</span><br><span class="line">    &#123;</span><br><span class="line">        stu_num = <span class="number">1001</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; stu_num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Student stu1;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> school_num;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    School(<span class="keyword">int</span> a)</span><br><span class="line">    &#123;</span><br><span class="line">        school_num = a;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; school_num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> :</span> <span class="keyword">public</span> School</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> stu_num;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Student() : School(<span class="number">1</span>) <span class="comment">//通过子类的构造函数的初始化列表对父类的构造函数进行传参</span></span><br><span class="line">    &#123;</span><br><span class="line">        stu_num = <span class="number">1001</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; stu_num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Student stu1;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="析构函数继承"><a href="#析构函数继承" class="headerlink" title="析构函数继承"></a>析构函数继承</h3><p>先执行子类的析构，再执行父类的析构，一级一级的向上析构</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> school_num;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    School(<span class="keyword">int</span> a)</span><br><span class="line">    &#123;</span><br><span class="line">        school_num = a;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; school_num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~School()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"father 析构"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> :</span> <span class="keyword">public</span> School</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> stu_num;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Student() : School(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        stu_num = <span class="number">1001</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; stu_num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Student()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"son 析构"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Student stu1;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1001</span></span><br><span class="line">son 析构</span><br><span class="line">father 析构</span><br></pre></td></tr></table></figure><h3 id="同名成员的覆盖"><a href="#同名成员的覆盖" class="headerlink" title="同名成员的覆盖"></a>同名成员的覆盖</h3><p>如果子类中有与父类中同名的成员（数据成员，函数成员），那么子类中的成员会对父类的成员进行覆盖（但是也可以使用类名作用域来调用父类成员）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> s_num = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get_num</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; s_num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> :</span> <span class="keyword">public</span> School</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> s_num = <span class="number">20</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get_num</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; s_num &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//覆盖</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; School::s_num &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 通过类名作用域来调用父类数据成员</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Student stu1;</span><br><span class="line">    stu1.get_num(); <span class="comment">// 覆盖</span></span><br><span class="line">    stu1.School::get_num(); <span class="comment">// 通过类名作用域来调用父类函数成员</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="friend不可继承"><a href="#friend不可继承" class="headerlink" title="friend不可继承"></a>friend不可继承</h3><p>父类的friend函数不可被子类继承</p><h3 id="static公共"><a href="#static公共" class="headerlink" title="static公共"></a>static公共</h3><p>static成员是公共的，都可以使用，但不属于继承的范围</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态：父类的指针，可以有多种执行状态，则被称为多态。</p><p>多态是一种范型编程思想，虚函数是实现范型编程思想的基础</p><p>一般而言，父类指针只能指向父类的成员</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">School *sl = <span class="keyword">new</span> School;</span><br></pre></td></tr></table></figure><p>但是c++中，父类指针也可以指向子类成员</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">School *sl = <span class="keyword">new</span> Student;</span><br></pre></td></tr></table></figure><p>不过不能访问子类的成员</p><h3 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h3><ul><li>前提条件：<ul><li>子类中存在和父类中同名的函数</li><li>指针对象</li></ul></li><li>特点：<ul><li>父类中为虚函数，子类默认也会为虚函数，但是省略了virtual。如果子类被继承，那么子类调用其子类也会是调用其子类的函数</li><li>不能是inline函数</li><li>构造函数不能是虚函数</li></ul></li></ul><p>虚函数可以让父类的指针不仅指向子类，还能使用子类的函数（为此，实现了多态）。只需要在父类的函数名前加<code>virtual</code></p><p>其原理是：当对象以指针类型创建时，而且存在虚函数时，那么会创建一个虚表。虚表的首地址存在对象指针的前8字节，虚表数组中存储的是虚函数的地址。并且子类中复写的虚函数的地址会替换掉父类虚表中虚函数的地址</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> s_num = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">get_num</span><span class="params">()</span> <span class="comment">// 虚函数</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; s_num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> :</span> <span class="keyword">public</span> School</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> s_num = <span class="number">20</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get_num</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; s_num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; School::s_num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    School *sl = <span class="keyword">new</span> Student; <span class="comment">// 父类指针指向子类空间</span></span><br><span class="line">    sl-&gt;get_num(); <span class="comment">//父类调用子类成员函数</span></span><br><span class="line">    <span class="keyword">delete</span> sl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="虚表"><a href="#虚表" class="headerlink" title="虚表"></a>虚表</h3><ul><li>对象创建时，如果存在虚函数，哪么会创建一个虚表来存放虚函数地址。对象的首地址（前八字节）存放的值为虚函数的首地址。取到前八字节的内容即取到了虚表的地址</li><li>虚表中存放的都是虚函数的地址，由于每个函数的返回值不同，所以存储的内容大小不同，需要取前八字节来获得函数地址</li><li>函数调用的实质是指针的调用，使用<code>pointer()</code>即可调用函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">he</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"hello"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> s_num = <span class="number">10</span>; <span class="comment">// 不是虚函数不会存进虚表</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">get_num</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"s_num"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> :</span> <span class="keyword">public</span> School</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">he</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"hello"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> s_num = <span class="number">20</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get_num</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"s_num"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    School *sh = <span class="keyword">new</span> Student;</span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*p)</span><span class="params">()</span></span>; <span class="comment">// 重定义函数指针类型为p</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(sh)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">// 64位编译器对象指针为八字节</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *(<span class="keyword">long</span>*)sh &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 取到虚表的首地址</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ((<span class="keyword">long</span>*)*(<span class="keyword">long</span>*)sh + <span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//将虚表数组所有元素转换为8字节指针</span></span><br><span class="line">    ((p)(*((<span class="keyword">long</span>*)*(<span class="keyword">long</span>*)sh+<span class="number">0</span>)))();<span class="comment">//取第一个元素（存放虚函数指针）的内容（函数指针），转换为函数指针类型来调用函数</span></span><br><span class="line">    ((p)(*((<span class="keyword">long</span>*)*(<span class="keyword">long</span>*)sh+<span class="number">1</span>)))();<span class="comment">//调用第二个虚函数</span></span><br><span class="line">    <span class="keyword">int</span> si = (<span class="keyword">int</span>)(*((<span class="keyword">long</span>*)*(<span class="keyword">long</span>*)sh+<span class="number">1</span>));<span class="comment">//常量不会存在于虚表</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; si &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">delete</span> sh;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">94101996871008</span></span><br><span class="line"><span class="number">0x5595d4189d60</span></span><br><span class="line">hello</span><br><span class="line">s_num</span><br><span class="line"><span class="number">-736595012</span></span><br></pre></td></tr></table></figure><h3 id="虚析构"><a href="#虚析构" class="headerlink" title="虚析构"></a>虚析构</h3><p>如果不让析构函数成为虚函数，那么父类指针指向子类时，释放父类指针时，只会调用父类的析构函数，不会调用子类的析构函数。所以需要在父类的析构函数成为虚析构，在析构函数前面加<code>virtual</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">he</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"hello"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~School() <span class="comment">// 虚析构</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"父类析构"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> :</span> <span class="keyword">public</span> School</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">he</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"hello"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~Student()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"子类析构"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    School *sh = <span class="keyword">new</span> Student;</span><br><span class="line">    <span class="keyword">delete</span> sh;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">子类析构</span><br><span class="line">父类析构</span><br></pre></td></tr></table></figure><h3 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h3><p>在父类中只声明了函数，没有函数主体的虚函数称为纯虚函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">function_name</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br></pre></td></tr></table></figure><ul><li>有纯虚函数的类，必须在子类中重写这个纯虚函数，才能实例化对象（子类）</li><li>有纯虚函数的类，称为抽象类（不能实例化对象）</li><li>全部为纯虚函数的类，称为接口类（可以包含成员变量，虚析构，构造函数）</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>= <span class="number">0</span>; <span class="comment">// 纯虚函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> :</span> <span class="keyword">public</span> School</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> <span class="comment">// 重写纯虚函数</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"hello"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Student stu;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="虚继承"><a href="#虚继承" class="headerlink" title="虚继承"></a>虚继承</h3><p>在多继承中存在一种情况：A为父类，B，C分别继承与A，D继承了B和C，那么D访问A中的成员时，就会出现访问不明确的问题。因为B，C继承时都是赋值了一份A中的成员，D访问时，不知道是访问B中的，还是C中的。所以需要虚继承来解决这个问题</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在继承权限修饰符前加virtual</span></span><br><span class="line"><span class="function">class <span class="title">A</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"><span class="function">class <span class="title">B</span><span class="params">()</span>:<span class="keyword">virtual</span> <span class="keyword">public</span> A</span>&#123;&#125;;</span><br><span class="line"><span class="function">class <span class="title">C</span><span class="params">()</span>:<span class="keyword">virtual</span> <span class="keyword">public</span> C</span>&#123;&#125;;</span><br><span class="line">class D():public B, public C&#123;&#125;;</span><br></pre></td></tr></table></figure><p>虚继承存在的问题：结构复杂，内存消耗大。</p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>一个类只能有一个实例化对象，如果要实例化其他的对象，需要将之前的对象删除掉。为了实现这种设计模式，需要满足的条件：</p><ul><li>构造函数是private或者protected（这样就不能在类外直接实例化对象）</li><li>类内部使用static函数实现对类的实例化（使用static函数返回一个对象指针）</li><li>使用一个static变量作为标记进行判断（达到只实例化一次的目的）</li><li>析构函数中改变static变量标记值（实现删除对象后可以再次实例化）</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">St</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    St()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"实例化对象"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>: <span class="comment">//public修饰的静态函数</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> flag;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> St* <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="number">1</span>; <span class="comment">//实例化一次之后进行标记</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> St;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">//第二次实例化的时候返回一个NULL空值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ~St()</span><br><span class="line">    &#123;</span><br><span class="line">        flag = <span class="number">0</span>; <span class="comment">//析构时将flag的值改为0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> St::flag = <span class="number">0</span>; <span class="comment">//类中的静态变量需要在外部进行初始化，因为在类中只有在实例化对象的时候才会进行数据的初始化，但是静态变量需要在程序开始时就进行初始化</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    St *st1 = St::init();</span><br><span class="line">    <span class="keyword">delete</span> st1;</span><br><span class="line">    St *st2 = St::init();</span><br><span class="line">    <span class="keyword">delete</span> st2;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> a;</span><br><span class="line"><span class="keyword">catch</span>(a) <span class="comment">//catch(...)表示其它所有情况</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>catch可以进行重载，以捕捉到各种异常。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> a ;</span><br><span class="line">    <span class="keyword">double</span> b ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">" "</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span>(b == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> e[] = <span class="string">"error !"</span>;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">double</span> c = a / b;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">"/"</span> &lt;&lt; b &lt;&lt; <span class="string">"= "</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(<span class="keyword">char</span> e[])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">" second number cannot be 0"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(...)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"second number cannot be 0"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>即一个类中嵌套另外一个类，这种情况比较麻烦</p><ul><li>外部类访问内部类成员：需要在外部类中实例化一个内部类的对象。通过对象去访问</li><li>内部类访问外部类成员：需要在外部类实例化外部类，并且将this指针作为参数，在内部类中调用外部类指针</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ot</span></span></span><br><span class="line"><span class="class">&#123;</span>  </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Is</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Ot *outside; <span class="comment">// 实例化外部类指针</span></span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        Is(Ot *o):outside(o) <span class="comment">//构造函数接收外部类传递进来的this指针</span></span><br><span class="line">        &#123;</span><br><span class="line">            a = outside-&gt;a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; outside-&gt;a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Is inside; <span class="comment">// 实例化内部类</span></span><br><span class="line">    Ot():inside(<span class="keyword">this</span>)&#123;&#125;; <span class="comment">// 构造函数中将this指针传递给内部类</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Ot outside;</span><br><span class="line">    outside.a = <span class="number">30</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"内部类 a= "</span> &lt;&lt; outside.inside.a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    outside.inside.show();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h2><p>通过函数模板可以实现之前函数重载的功能，对传入参数进行智能识别</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> customer_type_name&gt;</span><br><span class="line"><span class="keyword">return</span> type fun_name(customer_type_name arg)&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="comment">// 函数模板</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">num</span><span class="params">(T n)</span> <span class="comment">// 实现对n的数据类型的自动判断</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; n+<span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    num(<span class="number">3.3</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数模板的具体化"><a href="#函数模板的具体化" class="headerlink" title="函数模板的具体化"></a>函数模板的具体化</h3><p>如果给函数传入一个结构体，而非普通的数据类型，那么可以对函数模板进行具体化，让结构体走不同的模板</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">num</span><span class="params">(T n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="keyword">void</span> num&lt;<span class="built_in">list</span>&gt;(<span class="built_in">list</span> li)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; li.a &lt;&lt; <span class="string">" "</span> &lt;&lt; li.b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    num(<span class="string">"hello"</span>);</span><br><span class="line">    <span class="built_in">list</span> lt = &#123;<span class="number">10</span> , <span class="number">20</span>&#125;;</span><br><span class="line">    num(lt);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h2><p>如果类在实例化的时候构造函数需要传入参数，而这个参数类型不确定，那么可以使用类模板来达到自动识别参数类型的作用（实例化对象的时候手动指定类型）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> customer_type_name&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class_name</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    customer_type_name variable;</span><br><span class="line">    class_name(customer_type_name arg)</span><br><span class="line">    &#123;</span><br><span class="line">        variable = arg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T = <span class="keyword">int</span>&gt; <span class="comment">//可以设置默认类型</span></span><br><span class="line">class Student</span><br><span class="line">&#123;</span><br><span class="line">    T num; <span class="comment">//T类型</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Student(T n)&#123; <span class="comment">//接收T类型参数</span></span><br><span class="line">        num = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get_n</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Student&lt;&gt; <span class="title">stu1</span><span class="params">(<span class="number">22</span>)</span></span>; <span class="comment">//设置了默认类型不需要写int类型</span></span><br><span class="line">    stu1.get_n();</span><br><span class="line">    <span class="function">Student&lt;<span class="keyword">char</span> *&gt; <span class="title">stu2</span><span class="params">((<span class="keyword">char</span> *)<span class="string">"no.1"</span>)</span></span>; <span class="comment">//传入对应类型</span></span><br><span class="line">    stu2.get_n();</span><br><span class="line">    Student&lt;<span class="keyword">double</span>&gt; *p = <span class="keyword">new</span> Student&lt;<span class="keyword">double</span>&gt;(<span class="number">12.12</span>); <span class="comment">//指针对象</span></span><br><span class="line">    p-&gt;get_n();</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类外函数模板"><a href="#类外函数模板" class="headerlink" title="类外函数模板"></a>类外函数模板</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T = <span class="keyword">int</span>&gt;</span><br><span class="line">class Student</span><br><span class="line">&#123;</span><br><span class="line">    T num;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Student(T n)&#123;</span><br><span class="line">        num = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get_n</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_n</span><span class="params">(T n)</span></span>; <span class="comment">//函数内定义</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="comment">//函数外需要定义模板</span></span><br><span class="line"><span class="keyword">void</span> Student&lt;T&gt;::set_n(T n) <span class="comment">//类需要指定类型T</span></span><br><span class="line">&#123;</span><br><span class="line">    num = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Student&lt;&gt; <span class="title">stu1</span><span class="params">(<span class="number">22</span>)</span></span>;</span><br><span class="line">    stu1.get_n();</span><br><span class="line">    <span class="function">Student&lt;<span class="keyword">char</span> *&gt; <span class="title">stu2</span><span class="params">((<span class="keyword">char</span> *)<span class="string">"no.1"</span>)</span></span>;</span><br><span class="line">    stu2.get_n();</span><br><span class="line">    Student&lt;<span class="keyword">double</span>&gt; *p = <span class="keyword">new</span> Student&lt;<span class="keyword">double</span>&gt;(<span class="number">12.12</span>);</span><br><span class="line">    p-&gt;set_n(<span class="number">22.22</span>); <span class="comment">//调用类外函数赋值</span></span><br><span class="line">    p-&gt;get_n();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">22</span></span><br><span class="line">no<span class="number">.1</span></span><br><span class="line"><span class="number">22.22</span></span><br></pre></td></tr></table></figure><h3 id="继承类模板的使用"><a href="#继承类模板的使用" class="headerlink" title="继承类模板的使用"></a>继承类模板的使用</h3><p>如果子类继承了一个有类模板的父类，那么在子类中需给定模板类型：可以给定指定的类型，也可以让子类拥有类模板，动态给定类型</p><h4 id="指定固定类型"><a href="#指定固定类型" class="headerlink" title="指定固定类型"></a>指定固定类型</h4><p>指定后父类的模板类型固定</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T = <span class="keyword">int</span>&gt;</span><br><span class="line">class Student</span><br><span class="line">&#123;</span><br><span class="line">    T num;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Student(T n)&#123;</span><br><span class="line">        num = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get_n</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_n</span><span class="params">(T n)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> Student&lt;T&gt;::set_n(T n)</span><br><span class="line">&#123;</span><br><span class="line">    num = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> :</span> <span class="keyword">public</span> Student&lt;<span class="keyword">int</span>&gt; <span class="comment">//子类指定父类固定类型</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    User() : Student(<span class="number">100</span>) <span class="comment">//通过初始化列表给父类构造函数传参</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    User user1;</span><br><span class="line">    user1.set_n(<span class="number">111.111</span>);</span><br><span class="line">    user1.get_n();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="动态指定类型"><a href="#动态指定类型" class="headerlink" title="动态指定类型"></a>动态指定类型</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T = <span class="keyword">int</span>&gt;</span><br><span class="line">class Student</span><br><span class="line">&#123;</span><br><span class="line">    T num;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Student(T n)&#123;</span><br><span class="line">        num = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get_n</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_n</span><span class="params">(T n)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> Student&lt;T&gt;::set_n(T n)</span><br><span class="line">&#123;</span><br><span class="line">    num = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; <span class="comment">//动态函数模板</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> :</span> <span class="keyword">public</span> Student&lt;U&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    User() : Student&lt;U&gt;(<span class="number">100</span>) <span class="comment">//需要写动态类型</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    User&lt;<span class="keyword">double</span>&gt; user1; <span class="comment">//初始化需要指定类型</span></span><br><span class="line">    user1.set_n(<span class="number">111.111</span>);</span><br><span class="line">    user1.get_n();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多态模板"><a href="#多态模板" class="headerlink" title="多态模板"></a>多态模板</h2><p>类似上面动态指定类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T = <span class="keyword">int</span>&gt;</span><br><span class="line">class Student</span><br><span class="line">&#123;</span><br><span class="line">    T num;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Student(T n)</span><br><span class="line">    &#123;</span><br><span class="line">        num = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">get_n</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> :</span> <span class="keyword">public</span> Student&lt;U&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    User():Student&lt;U&gt;(<span class="number">100</span>)&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">get_n</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"虚函数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Student&lt;<span class="keyword">double</span>&gt; *p = <span class="keyword">new</span> User&lt;<span class="keyword">double</span>&gt;; </span><br><span class="line">    p-&gt;get_n();</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">虚函数</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> c/c++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>xmonad-topbar问题解决</title>
      <link href="/2020/06/25/xmonad-topbar%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2020/06/25/xmonad-topbar%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>自动上次换了电脑，似乎是很久之前了。大半年了，之后xmonad就无法使用topbar了，因为一旦使用topbar其它所有的layout就没有了作用，全部变成了全屏。但是没有topbar就不能很好的看出来那个窗口是当前的，这个问题真的很头疼，因为编译并没有报错，以为是xmonad升级的原因。</p><p>不过今天我居然发现了问题所在，google了好久都没有发现问题。但是在xmonad的官网上找到了原因，是因为默认的字体没有安装导致的。</p><p><img src="/home/fsl/Pictures/image/xmonad-err-fix.png" alt=""></p><p>加上有的字体就好了</p><p><img src="/home/fsl/Pictures/image/add-font-fix.png" alt=""></p><p>这种激动的感觉。。。。。。好像回到了初恋。</p><p>我都忘了这种感觉是多久多久之前才有的了，好像是大一下学期吧，刚安装好linux系统的时候</p><p>同时也解决了workspace无法显示中文的问题</p><p><img src="/home/fsl/.config/Typora/typora-user-images/image-20200531153252452.png" alt="image-20200531153252452"></p><p>将字体换成了wenquanyi字体就可以显示中文了</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>系统io调度优化</title>
      <link href="/2020/06/25/%E7%B3%BB%E7%BB%9Fio%E8%B0%83%E5%BA%A6%E4%BC%98%E5%8C%96/"/>
      <url>/2020/06/25/%E7%B3%BB%E7%BB%9Fio%E8%B0%83%E5%BA%A6%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="io-scheduler"><a href="#io-scheduler" class="headerlink" title="io scheduler"></a>io scheduler</h1><p>就是优化存储盘的io方案，提高读写性能。</p><h2 id="sql优化时的io优化"><a href="#sql优化时的io优化" class="headerlink" title="sql优化时的io优化"></a>sql优化时的io优化</h2><p>在学习sql优化的时候，系统上的优化就是io scheduler的优化了。看了许多的关于io scheduler的优化方法，发现跟我的archlinux不一致，因为我发现我的优化是<code>none</code>，而推荐的绝大多数是noop，其实是因为这些文章都过时了。</p><p>从linux kernel5.0开始，使用multiqueue I/O scheduling代替了Non-multiqueue  I/O scheduling，linux5.3就废弃了Non-multiqueue  I/O scheduling，之前的那些noop等都是single queue的，已经过时。</p><h2 id="查看与修改io-scheduler"><a href="#查看与修改io-scheduler" class="headerlink" title="查看与修改io scheduler"></a>查看与修改io scheduler</h2><p>查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--- ~ » cat /sys/block/nvme0n1/queue/scheduler </span><br><span class="line">[none] mq-deadline kyber bfq</span><br></pre></td></tr></table></figure><p>none就是正在使用的策略，而none就是适合于nvme固态盘的方案</p><p>临时修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo bfq &gt; /sys/block/nvme0n1/queue/scheduler</span><br></pre></td></tr></table></figure><p>虽然语法是这样，但是我用root用户也无法修改。这种修改方式重启后就没有了</p><p>永久修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/default/grub</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加</span></span><br><span class="line">GRUB_CMDLINE_LINUX_DEFAULT="loglevel=3 elevator=none"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新生成配置文件</span></span><br><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><p>不过我的系统就不需要修改了，因为默认就是none</p><h2 id="Multiqueue-I-O-schedulers"><a href="#Multiqueue-I-O-schedulers" class="headerlink" title="Multiqueue I/O schedulers"></a>Multiqueue I/O schedulers</h2><p>The following I/O schedulers are designed for multiqueue devices. These map I/O requests to multiple queues and these are handled by kernel threads that are distributed across multiple CPUs.  </p><h3 id="bfq-Budget-Fair-Queuing-Multiqueue"><a href="#bfq-Budget-Fair-Queuing-Multiqueue" class="headerlink" title="bfq (Budget Fair Queuing) (Multiqueue)"></a>bfq (Budget Fair Queuing) (Multiqueue)</h3><p>Designed to provide good interactive response, especially for slower I/O devices.  This is a complex I/O scheduler and has a relatively high per-operation overhead so it is not ideal for devices with slow CPUs or high throughput I/O devices.  Fair sharing is based on the number of sectors requested and heuristics rather than a time slice. Desktop users may like to experiment with this I/O scheduler as it can be advantageous when loading large applications. </p><h3 id="kyber-Multiqueue"><a href="#kyber-Multiqueue" class="headerlink" title="kyber (Multiqueue)"></a>kyber (Multiqueue)</h3><p>Designed for fast multi-queue devices and is relatively simple.  Has two request queues: </p><ul><li>Synchronous requests (e.g. blocked reads) </li><li>Asynchronous requests (e.g. writes) </li></ul><p>There are strict limits on the number of request operations sent to the queues. In theory this limits the time waiting for requests to be dispatched, and hence should provide quick completion time for requests that are high priority. </p><h3 id="none-Multiqueue"><a href="#none-Multiqueue" class="headerlink" title="none (Multiqueue)"></a>none (Multiqueue)</h3><p>The multi-queue no-op I/O scheduler. Does no reordering of requests, minimal overhead. Ideal for fast random I/O devices such as NVME. </p><h3 id="mq-deadline-Multiqueue"><a href="#mq-deadline-Multiqueue" class="headerlink" title="mq-deadline (Multiqueue)"></a>mq-deadline (Multiqueue)</h3><p>This is an adaption of the deadline I/O scheduler but designed for Multiqueue devices. A good all-rounder with fairly low CPU overhead. </p><h2 id="Non-multiqueue-I-O-schedulers"><a href="#Non-multiqueue-I-O-schedulers" class="headerlink" title="Non-multiqueue I/O schedulers"></a>Non-multiqueue I/O schedulers</h2><p>NOTE: Non-multiqueue have been deprecated in Ubuntu Eoan Ermine 19.10 onwards as they are no longer supported in the Linux 5.3 kernel. </p><h3 id="deadline"><a href="#deadline" class="headerlink" title="deadline"></a>deadline</h3><p>This fixes starvation issues seen in other schedulers. It uses 3 queues for I/O requests: </p><ul><li>Sorted </li><li>Read FIFO - read requests stored chronologically </li><li>Write FIFO - write requests stored chronologically </li></ul><p>Requests are issued from the sorted queue inless a read from the head of a read or write FIFO expires. Read requests are preferred over write requests. Read requests have a 500ms expiration time, write requests have a 5s expiration time. </p><h3 id="cfq-Completely-Fair-Queueing"><a href="#cfq-Completely-Fair-Queueing" class="headerlink" title="cfq (Completely Fair Queueing)"></a>cfq (Completely Fair Queueing)</h3><ul><li>Per-process sorted queues for synchronous I/O requests. </li><li>Fewer queues for asynchronous I/O requests. </li><li>Priorities from ionice are taken into account. </li></ul><p>Each queue is allocated a time slice for fair queuing. There may be wasteful idle time if a time slice quantum has not expired. </p><h3 id="noop-No-operation"><a href="#noop-No-operation" class="headerlink" title="noop (No-operation)"></a>noop (No-operation)</h3><p>Performs merging of I/O requests but no sorting.  Good for random access devices (flash, ramdisk, etc) and for devices that sort I/O requests such as advanced storage controllers. </p><h2 id="Selecting-I-O-Schedulers"><a href="#Selecting-I-O-Schedulers" class="headerlink" title="Selecting I/O Schedulers"></a>Selecting I/O Schedulers</h2><p>Prior to Ubuntu 19.04 with Linux 5.0 or Ubuntu 18.04.3 with Linux 4.15, the multiqueue I/O scheduling was not enabled by default and just the deadline, cfq and noop I/O schedulers were available by default. </p><p>For Ubuntu 19.10 with Linux 5.0 or Ubuntu 18.04.3 with Linux 5.0 onwards, multiqueue is enabled by default providing the bfq, kyber, mq-deadline and none I/O schedulers.  For  Ubuntu 19.10 with Linux 5.3 the deadline, cfq and noop I/O schedulers  are deprecated. </p><p>With the Linux 5.0 kernels, one can disable these and fall back to the non-multiqueue I/O schedulers using a kernel parameter, for example for SCSI devices one can use: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scsi_mod.use_blk_mq&#x3D;0</span><br></pre></td></tr></table></figure><p>..add this to the <code>GRUB_CMDLINE_LINUX_DEFAULT</code> string in <code>/etc/default/grub</code> and run <code>sudo update-grub</code> to enable this option. </p><p>Changing an I/O scheduler is performed on a per block device basis. For example, for non-multi queue device /dev/sda one can see the current I/O schedulers available using the following: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;sys&#x2F;block&#x2F;sda&#x2F;queue&#x2F;scheduler</span><br><span class="line">noop deadline [cfq]</span><br></pre></td></tr></table></figure><p>to change this to deadline use: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;deadline&quot; | sudo tee &#x2F;sys&#x2F;block&#x2F;sda&#x2F;queue&#x2F;scheduler</span><br></pre></td></tr></table></figure><p>For multiqueue devices the default will show: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;sys&#x2F;block&#x2F;sda&#x2F;queue&#x2F;scheduler </span><br><span class="line">[mq-deadline] none</span><br></pre></td></tr></table></figure><p>To use kyber, install the module: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo modprobe kyber-iosched</span><br><span class="line">cat &#x2F;sys&#x2F;block&#x2F;sda&#x2F;queue&#x2F;scheduler </span><br><span class="line">[mq-deadline] kyber none</span><br></pre></td></tr></table></figure><p>and enable it: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;kyber&quot; | sudo tee &#x2F;sys&#x2F;block&#x2F;sda&#x2F;queue&#x2F;scheduler</span><br></pre></td></tr></table></figure><p>To use bfq, install the module: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo modprobe bfq</span><br><span class="line">cat &#x2F;sys&#x2F;block&#x2F;sda&#x2F;queue&#x2F;scheduler </span><br><span class="line">[mq-deadline] kyber none</span><br></pre></td></tr></table></figure><p>and enable it: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;bfq&quot; | sudo tee &#x2F;sys&#x2F;block&#x2F;sda&#x2F;queue&#x2F;scheduler</span><br></pre></td></tr></table></figure><h2 id="Tuning-I-O-Schedulers"><a href="#Tuning-I-O-Schedulers" class="headerlink" title="Tuning I/O Schedulers"></a>Tuning I/O Schedulers</h2><p>Each I/O scheduler has a default set of tunable options that may be adjusted to help improve performance or fair sharing for your particular use case. The following kernel documentation covers these per-I/O scheduler tunable options: </p><ul><li>deadline (and mq-deadline) <a href="https://www.kernel.org/doc/Documentation/block/deadline-iosched.txt" target="_blank" rel="noopener">deadline-iosched.txt</a> </li><li>cfq <a href="https://www.kernel.org/doc/Documentation/block/cfq-iosched.txt" target="_blank" rel="noopener">cfq-iosched.txt</a> </li><li>bfq <a href="https://www.kernel.org/doc/Documentation/block/bfq-iosched.txt" target="_blank" rel="noopener">bfq-iosched.txt</a> </li><li>kyber <a href="https://www.kernel.org/doc/Documentation/block/kyber-iosched.txt" target="_blank" rel="noopener">kyber-iosched.txt</a> </li></ul><h2 id="Best-I-O-scheduler-to-use"><a href="#Best-I-O-scheduler-to-use" class="headerlink" title="Best I/O scheduler to use"></a>Best I/O scheduler to use</h2><p>Different I/O requirements may benefit from changing from the Ubuntu distro default.  A quick start guide to select a suitable I/O scheduler is below. The results are based on running 25 different synthetic I/O patterns generated using fio on ext4, xfs and btrfs with the various I/O schedulers using the 5.3 kernel.  </p><h3 id="SSD-or-NVME-drives"><a href="#SSD-or-NVME-drives" class="headerlink" title="SSD or NVME drives"></a>SSD or NVME drives</h3><p>It is worth noting that there is little difference in throughput between the mq-deadline/none/bfq I/O schedulers when using fast multi-queue SSD configurations or fast NVME devices. In these cases it may be preferable to use the ‘none’ I/O scheduler to reduce CPU overhead. </p><h3 id="HDD"><a href="#HDD" class="headerlink" title="HDD"></a>HDD</h3><p>Avoid using the none/noop I/O schedulers for a HDD as sorting requests on block addresses reduce the seek time latencies and neither of these I/O schedulers support this feature.  mq-deadline has been shown to be advantageous for the more demanding server related I/O, however, desktop users may like to experiment with bfq as has been shown to load some applications faster. </p><p>Of course, your use-case may differ, the above are just suggestions to start with based on some synthetic tests. You may find other choices with adjustments to the I/O scheduler tunables produce better results. </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>bfq：平均分配策略，消耗cpu计算分配方案，io速度慢，适合运行很多程序的个人电脑，速度快</li><li>kyber ：高速的并发方案，适合服务器</li><li>none ：适合高速的随机读写设备，nvme这类固态硬盘，减少cpu消耗</li><li>mq-deadline：大量的读写，适合数据库</li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>psd的问题修复</title>
      <link href="/2020/06/25/psd%E7%9A%84%E9%97%AE%E9%A2%98%E4%BF%AE%E5%A4%8D/"/>
      <url>/2020/06/25/psd%E7%9A%84%E9%97%AE%E9%A2%98%E4%BF%AE%E5%A4%8D/</url>
      
        <content type="html"><![CDATA[<p>很久很久之前就开始用psd了，因为当时看到psd的介绍，觉得非常有用，因为它可以将浏览器的缓存，临时文件等等加载到内存中，也就是说在使用firefox的时候对磁盘的消耗是极少的。但是最近我才注意到一个问题，就是每次在开机的时候cpu就会有十几秒的时间处于10%左右。</p><p>这当然不正常了，所以看了日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">journalctl</span><br></pre></td></tr></table></figure><p>发现每次开机之后就会有一个psd的进程在家目录下寻找crash recover文件。但是我的Data目录它是没有权限的。而且随着使用我的家目录下的文件太多了，这就是导致了十几秒10%cpu使用率的原因。</p><p>那么可不可以将这个功能关掉，在psd的配置文件中，将备份数据的功能关掉了，但是依旧没有改变。</p><p>最后我差点都要放弃使用psd了，但是最后我还是发现了终极奥义。在archwiki上面说psd只是一个shell脚本，去/usr/bin/psd看了一下，果然是一个shell脚本，这真的有点出乎意料。那么就好解决了。</p><p><img src="/home/narcissus/.config/Typora/typora-user-images/image-20200530195414442.png" alt="image-20200530195414442"></p><p>在脚本中许多这种在家目录下查找的语句，不止一处。显然一个一个去改是有点麻烦的，所以解决掉它查找的路径就好了。不让它在家目录下查找，而是一个我指定的目录，而且需要这个目录下最好是空的。</p><p><img src="/home/narcissus/.config/Typora/typora-user-images/image-20200530195645698.png" alt="image-20200530195645698"></p><p>后面黄颜色框中的路径是补上的，然后在重启，查看日志就没有那个需要查找十几秒的语句一直运行了。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql格式化输出</title>
      <link href="/2020/06/25/mysql%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA/"/>
      <url>/2020/06/25/mysql%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<p>用oracle的时候因为字段太多，显示全部都是乱的。而且查看字段也是很麻烦，不过在mysql中，这个功能简直太高了。</p><ol><li><p>查询字段名及描述</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">desc table_name;</span><br><span class="line"><span class="comment">-- 或者</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">columns</span> <span class="keyword">from</span> table_name;</span><br></pre></td></tr></table></figure></li><li><p>一行太长显示不下，那么将每一行按列显示。</p><p>只需要将语句最后的分号替换为<code>\G</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 例如：</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span>\G</span><br></pre></td></tr></table></figure></li><li><p>如果上面的这种显示方式太多，可以分页查看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pager more</span><br></pre></td></tr></table></figure><p>取消分页查看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nopager</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql优化</title>
      <link href="/2020/06/25/mysql%E4%BC%98%E5%8C%96/"/>
      <url>/2020/06/25/mysql%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="查看存储引擎"><a href="#查看存储引擎" class="headerlink" title="查看存储引擎"></a>查看存储引擎</h2><p>查看默认的整个数据库引擎</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">engines</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%storage_engine%'</span>;</span><br></pre></td></tr></table></figure><p>默认为<code>InnoDB</code></p><p>可以为每个特定的表指定引擎。查看指定表引擎：</p><ol><li><p>查看建表语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> table_name;</span><br></pre></td></tr></table></figure></li><li><p>查看表信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">table</span> <span class="keyword">status</span> <span class="keyword">from</span> database_name <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">'table_name'</span>\G</span><br></pre></td></tr></table></figure></li></ol><h2 id="指定引擎"><a href="#指定引擎" class="headerlink" title="指定引擎"></a>指定引擎</h2><p>建表时指定引擎</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> practice <span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line"><span class="comment">-- 建表，指定引擎</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> info(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">4</span>) auto_increment,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>),</span><br><span class="line">age <span class="built_in">int</span>(<span class="number">2</span>),</span><br><span class="line">score <span class="built_in">int</span>(<span class="number">3</span>),</span><br><span class="line">primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">) <span class="keyword">engine</span>=myisam auto_increment=<span class="number">1</span></span><br><span class="line"><span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br></pre></td></tr></table></figure><p>修改引擎</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> info <span class="keyword">engine</span>=<span class="keyword">innodb</span>;</span><br></pre></td></tr></table></figure><h2 id="sql语句解析过程"><a href="#sql语句解析过程" class="headerlink" title="sql语句解析过程"></a>sql语句解析过程</h2><p>链接：<a href="https://www.cnblogs.com/annsshadow/p/5037667.html" target="_blank" rel="noopener">https://www.cnblogs.com/annsshadow/p/5037667.html</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 编写语句</span></span><br><span class="line"><span class="keyword">select</span> distinct...from...join...on...where...group by...having...order by...limit...</span><br><span class="line"><span class="comment">-- 执行过程</span></span><br><span class="line">from...join...on...where...group by...having...select distinct...order by...limit...</span><br></pre></td></tr></table></figure><h2 id="sql优化基础"><a href="#sql优化基础" class="headerlink" title="sql优化基础"></a>sql优化基础</h2><p>基础的系统设置包含了内存，io调度策略，文件连接数，core file大小</p><p>内存：别用swap空间，因为会更加慢</p><p>io调度：使用mq-deadline</p><p>文件连接数和core file：查看ulimiit -a并修改</p><h2 id="sql优化（索引）"><a href="#sql优化（索引）" class="headerlink" title="sql优化（索引）"></a>sql优化（索引）</h2><p>sql的优化主要是优化索引。索引的数据结构分为：B数，hash数。mysql默认为B数，通过B数这种数据结构（类似二分法），查找数据不需要循环查找，可节省很多时间。</p><p>可以为同一张表的不同字段设置索引，但不是越多越好。索引是一种数据结构，也可以称为表。独立与原表的数据。所以如果需要经常对某些字段进行查询，那么就可以建索引，毕竟索引的数据小很多，查询速度快。</p><p>索引的优缺点/适用场景：</p><ol><li>索引需要占据的存储空间大</li><li>提高查询效率（IO）。但是会降低增、删、改的效率</li><li>如果字段会经常更新，那么更新一次，索引需要重新生成一次，耗费时间</li><li>很少使用的列，不必加索引</li><li>表的数据量少，不必加索引</li></ol><h2 id="索引分类-创建-删除"><a href="#索引分类-创建-删除" class="headerlink" title="索引分类/创建/删除"></a>索引分类/创建/删除</h2><h3 id="建索引的时机"><a href="#建索引的时机" class="headerlink" title="建索引的时机"></a>建索引的时机</h3><p>在数据已经导入表后，再建索引。</p><h3 id="通过create或者alter创建"><a href="#通过create或者alter创建" class="headerlink" title="通过create或者alter创建"></a>通过create或者alter创建</h3><ol><li><p>单值：单列为一个索引，不过一个表可以有多个</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> index_name <span class="keyword">on</span> table_name(column_name);</span><br><span class="line"><span class="comment">-- 举例</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> name_index <span class="keyword">on</span> info(<span class="keyword">name</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> info <span class="keyword">add</span> <span class="keyword">index</span> name_index(<span class="keyword">name</span>);</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>唯一：数据不能重复</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> <span class="keyword">index</span> index_name <span class="keyword">on</span> table_name(column_name);</span><br><span class="line"><span class="comment">-- 举例</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> <span class="keyword">index</span> name_index <span class="keyword">on</span> info(<span class="keyword">name</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> info <span class="keyword">add</span> <span class="keyword">unique</span> <span class="keyword">index</span> name_index(<span class="keyword">name</span>);</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>复合：多列构成的索引，但是查找时只要找到就ok，不一定要全部都用上</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> index_name <span class="keyword">on</span> table_name(column1_name,column2_name,...);</span><br><span class="line"><span class="comment">-- 举例</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> name_age_index <span class="keyword">on</span> info(<span class="keyword">name</span>,age);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> info <span class="keyword">add</span> <span class="keyword">index</span> name_age_index(<span class="keyword">name</span>,age);</span><br></pre></td></tr></table></figure></li></ol><h3 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h3><p>如果字段为primary key主键，那么为主键索引。主键索引与唯一索引的区别：主键索引不能为null，唯一索引可以为null</p><p>除了在建表的时候指定，还可以在建完表后</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Employees <span class="keyword">ADD</span> PRIMARY <span class="keyword">KEY</span>(<span class="keyword">ID</span>);</span><br></pre></td></tr></table></figure><h3 id="删除索引："><a href="#删除索引：" class="headerlink" title="删除索引："></a>删除索引：</h3><ol><li><p>删除表就会删除索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> table_name;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>删除索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> index_name <span class="keyword">on</span> table_name;</span><br></pre></td></tr></table></figure></li></ol><h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> table_name;</span><br></pre></td></tr></table></figure><h2 id="sql性能分析"><a href="#sql性能分析" class="headerlink" title="sql性能分析"></a>sql性能分析</h2><p>最主要的是分析sql执行计划，但是也要注意到mysql的优化器（自带）可能会干扰我们的优化语句</p><p><code>explain</code>可以模拟sql优化器执行sql语句，查看sql性能问题</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> info;</span><br><span class="line">+<span class="comment">------+-------------+-------+--------+---------------+------+---------+------+------+---------------------+</span></span><br><span class="line">| id   | select_type | table | type   | possible_keys | key  | key_len | ref  | rows | Extra               |</span><br><span class="line">+<span class="comment">------+-------------+-------+--------+---------------+------+---------+------+------+---------------------+</span></span><br><span class="line">|    1 | SIMPLE      | info  | system | NULL          | NULL | NULL    | NULL | 0    | Const row not found |</span><br><span class="line">+<span class="comment">------+-------------+-------+--------+---------------+------+---------+------+------+---------------------+</span></span><br></pre></td></tr></table></figure><p><code>id</code>：编号</p><ul><li>当id相等时，执行顺序为从上往下</li><li>当id不等时，先执行id大的语句（这种情况为嵌套子查询，里层往外查询）</li></ul><p><code>select_type</code>：查询类型</p><ul><li>primary：主查询</li><li>subquery：子查询</li><li>simple：不包含子查询和联合查询</li><li>derived：派生查询，在查询的时候用到了临时表<ul><li>在from子查询中，只有一张表</li><li>在from子查询中，有table1 union table2，那么table1为derived</li></ul></li><li>union：上面的table2为union</li><li>union result：table1和table2为union查询</li></ul><p><code>table</code>：查询表</p><p><code>type</code>：索引类型</p><ul><li><p>优化等级：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; all</span><br></pre></td></tr></table></figure></li><li><p>达到ref和range就是比较好的sql语句</p></li><li><p>eq_ref：使用primary key或者unique key作为查询条件或者不存在重复值的某列</p></li><li><p>ref：使用索引列查询，不用like匹配，且查询到的相同数据结果为0-n行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> dept_emp <span class="keyword">where</span> dept_no = <span class="string">'d001'</span> <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>range：查询范围的索引列，范围查询中in不一定有效</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> dept_emp <span class="keyword">where</span> emp_no &lt; <span class="number">10108</span>;</span><br></pre></td></tr></table></figure></li><li><p>index：查询全部索引的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> dept_no <span class="keyword">from</span> dept_emp;</span><br></pre></td></tr></table></figure></li><li><p>all：查询表中的所有数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> dept_emp <span class="keyword">where</span> dept_no <span class="keyword">like</span> <span class="string">'%d001%'</span>;</span><br></pre></td></tr></table></figure></li></ul><p><code>possible_keys</code>：预测用到的索引</p><p><code>key</code>： 实际用到的索引</p><p><code>key_len</code>：实际使用的索引的数据类型长度</p><p><code>ref</code>：表之间的引用</p><ul><li><p>const：值引用</p></li><li><p>NULL：某一个表对应字段没有索引</p></li></ul><p><code>rows</code>：通过索引查询到的数据条数</p><p><code>extra</code>：</p><ul><li>using filesort，（where列与order by列不同）性能消耗大，需要额外一次查询。解决方法：创建复合索引</li><li>using temporary：一般在group by中出现，性能消耗大，用到了临时表。解决方法：需要查询什么列就用什么列分组</li><li>using index：性能提升，不读取原文件，从索引表中获取数据，不需要回表查询</li><li>using where：需要回表查询，查询没有索引的数据</li><li>impossible where：where后面的语句不成立</li></ul><h3 id="多表执行顺序"><a href="#多表执行顺序" class="headerlink" title="多表执行顺序"></a>多表执行顺序</h3><p>当有多个表联合查询时，每两个表结合会产生迪卡尔集，那么会自动选择数据量小的表先结合，这样对系统内存消耗的较少。</p><h2 id="语句优化"><a href="#语句优化" class="headerlink" title="语句优化"></a>语句优化</h2><ol><li><p>查询列的顺序与where条件列的顺序一致</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a,b,c <span class="keyword">from</span> some_table <span class="keyword">where</span> a=<span class="number">1</span> <span class="keyword">and</span> b=<span class="number">2</span> <span class="keyword">and</span> c=<span class="number">3</span>;</span><br></pre></td></tr></table></figure></li><li><p>复合索引不要跨列使用，且需要从第一个索引开始写，否则后面的索引还是需要回表查询的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> a_b_c <span class="keyword">of</span> some_table(a,b,c);</span><br><span class="line"><span class="comment">-- 索引列c跨索引了，为无效索引会回表查询</span></span><br><span class="line"><span class="keyword">select</span> a,b,c <span class="keyword">from</span> some_table <span class="keyword">where</span> a=<span class="number">1</span> <span class="keyword">and</span> c=<span class="number">2</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="shell终端中文问题"><a href="#shell终端中文问题" class="headerlink" title="shell终端中文问题"></a>shell终端中文问题</h2><p>使用mysql客户端在shell中运行时，中文无法显示</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">names</span> utf8;</span><br></pre></td></tr></table></figure><p>set names utf8指定了客户端连接服务器的编码规则为utf8，两者之间传输消息字符时采用的也是utf8，相当于设置以下三个变量：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> character_set_client = utf8;     </span><br><span class="line"><span class="keyword">set</span> character_set_results = utf8;    </span><br><span class="line"><span class="keyword">set</span> character_set_connection = utf8;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux设置配置文件位置</title>
      <link href="/2020/06/25/linux%E8%AE%BE%E7%BD%AE%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BD%8D%E7%BD%AE/"/>
      <url>/2020/06/25/linux%E8%AE%BE%E7%BD%AE%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BD%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>今天突然有一个想法，就是家目录下有很多的配置文件，可不可以修改一下这些配置文件的位置，做一个统一的管理？google搜索了一下，发现是无法完全做到的。因为每个程序都有自己配置文件的位置，而没有一个统一有效的方式来进行管理。但是有些程序还是遵照这个规则的，不过archlinux上默认是没有设置这些变量位置，所以需要在安装系统时先设置好。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/environment</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> user directories</span></span><br><span class="line">XDG_CONFIG_HOME=$HOME/.config</span><br><span class="line">XDG_CACHE_HOME=$HOME/.cache</span><br><span class="line">XDG_DATA_HOME=$HOME/.local/share</span><br><span class="line"><span class="meta">#</span><span class="bash"> system directories</span></span><br><span class="line">XDG_DATA_DIRS=/usr/local/share:/usr/share</span><br><span class="line">XDG_CONFIG_DIRS=/etc/xdg</span><br></pre></td></tr></table></figure><p>虽然不是所有的都会生效，但是支持的还是可以的。希望以后有一个有效的方式来进行归类管理，免得家目录下面的东西太多太杂了。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>xmonad以及虚拟机全屏的问题</title>
      <link href="/2020/05/21/xmonad%E4%BB%A5%E5%8F%8A%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%85%A8%E5%B1%8F%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2020/05/21/xmonad%E4%BB%A5%E5%8F%8A%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%85%A8%E5%B1%8F%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<ul><li>xmonad编译报错</li></ul><p>安装的archlinx虚拟机中的xmonad在编译时报错，所有的包都无法找到。这个问题之前在我的archlinux遇到过，是一次更新引起的，解决办法就是重新加载数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ghc-pkg recache</span><br></pre></td></tr></table></figure><p>但是这个方法用在虚拟机中没有效果。目前还没找到解决办法</p><ul><li>虚拟机全屏</li></ul><p>有的虚拟机例如win10和kali都可以在挂载guest.iso后成功运行，并实现全屏。但是像manjaro和自己安装的archllinux却无法做到。</p><p>安装这个guest插件有两种方式：</p><ol><li>安装在host上，然后挂载到虚拟机，在虚拟机中运行这个挂载的文件</li><li>直接安装在guest中</li></ol><p>之前我一直都是使用的第一种方法，但是有的挂载就会报错，所以找到了第二种方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S virtualbox-guest-utils xf86-video-vmware</span><br></pre></td></tr></table></figure><p>安装这两个就好了，然后在guest中设置一下分辨率就可以设置全屏了。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell-数字问题</title>
      <link href="/2020/05/21/shell-%E6%95%B0%E5%AD%97%E9%97%AE%E9%A2%98/"/>
      <url>/2020/05/21/shell-%E6%95%B0%E5%AD%97%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在shell中，获取小时可以用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hour=`date +%H`</span><br></pre></td></tr></table></figure><p>这样得到的时间如果小于10,那么就会出现01，02……09这样的数据</p><p>在shell脚本中如果用到了这样的数字的比较那么就会报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[: 08: value too great for base (error token is "08")</span><br></pre></td></tr></table></figure><p>这是因为在shell中凡是以0开头的数字都会默认为八进制，所以需要在前面加<code>10#</code>来转为10进制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1  #!/bin/bash</span><br><span class="line">  </span><br><span class="line">2  time=`date +%H`</span><br><span class="line">3  true_time=10#`expr $time - 2`</span><br><span class="line">  </span><br><span class="line">4  echo $true_time</span><br><span class="line">5  if [[ $true_time -eq 8  ]];then</span><br><span class="line">6      echo "ok"</span><br><span class="line">7  else</span><br><span class="line">8      echo "no"</span><br><span class="line">9  fi</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell变量作用域</title>
      <link href="/2020/05/21/shell%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
      <url>/2020/05/21/shell%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<p>今天才遇到这个问题，无法修改最后变量的值。而且使用export也无法做到，所以目前唯一知道的办法就是将获取到的值写入到文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">num=`tail -n1 1.txt`</span><br><span class="line">sed -i '$d' 1.txt</span><br><span class="line">echo $num</span><br><span class="line">echo "------------------"</span><br><span class="line"></span><br><span class="line">cat 1.txt | while read line</span><br><span class="line">do</span><br><span class="line">    for i in 12 23 34 89 32 78 45 82 29 65 20 73</span><br><span class="line">    do</span><br><span class="line">        if [[ $line == $i ]];then</span><br><span class="line">            sed -i "/$&#123;i&#125;/d" 1.txt</span><br><span class="line">            # 这里的num值可以修改</span><br><span class="line">            num=`expr $num - 1`</span><br><span class="line">            # 只能将其值写入到文件中，最后读取出来</span><br><span class="line">            # echo $num &gt; 2.txt</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo "--------------------"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 但是最后的num值无法改变</span></span><br><span class="line">echo  $num &gt;&gt; 1.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> cat 2.txt &gt;&gt; 1.txt</span></span><br></pre></td></tr></table></figure><p>1.txt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">87</span><br><span class="line">52</span><br><span class="line">73</span><br><span class="line">75</span><br><span class="line">23</span><br><span class="line">99</span><br><span class="line">12</span><br><span class="line">19</span><br><span class="line">23</span><br><span class="line">12345678</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ranger图标</title>
      <link href="/2020/05/21/ranger%E5%9B%BE%E6%A0%87/"/>
      <url>/2020/05/21/ranger%E5%9B%BE%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<p>今天升级了一下linux系统，其它都还好，就是终端字体变宽了许多。因为用惯了窄字体，所以突然变宽了不习惯，记得之前也有过一次因为升级导致的字体变宽。那一次是通过换用另外一种字体解决的。</p><p>刚开始，以为是xterm的问题，所以用``downgrade xterm`降级了一下，不过却并没有改变。所以我打算下载了另外一种字体。刚好发现了这款字体</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">archlinuxcn/nerd-fonts-iosevka 2.1.0-4</span><br><span class="line">    Iosevka Nerd Font: patched from Iosevka with Nerd Fonts Glyphs(Icons)</span><br></pre></td></tr></table></figure><p>很惊奇的发现它支持Glyphs(Icons)。那也就是说ranger可以设置了在xterm下显示图标，之前在kitty中可以显示图标，但是xterm不支持，不过kitty与我的系统不是很符合所以放弃了。不过这次应该可以。</p><p>首先是去下载ranger的一个图标插件：<a href="https://github.com/alexanderjeurissen/ranger_devicons" target="_blank" rel="noopener">https://github.com/alexanderjeurissen/ranger_devicons</a></p><p>然后按照步骤克隆到本地的指定目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/alexanderjeurissen/ranger_devicons ~/.config/ranger/plugins/ranger_devicons</span><br></pre></td></tr></table></figure><p>然后只需要在ranger的配置文件中声明就可以了。ranger的配置文件在``/usr/share/doc/ranger/config/`下</p><p>复制到本地配置中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/doc/ranger/config/rc.conf ~/.config/ranger</span><br></pre></td></tr></table></figure><p>在配置文件的最后一行加上<code>default_linemode devicons</code>就可以了，打开新的终端，输入ranger就可以看到图标了。</p><p><img src="/home/narcissus/Pictures/screenshot/ranger.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>powershell</title>
      <link href="/2020/04/20/powershell/"/>
      <url>/2020/04/20/powershell/</url>
      
        <content type="html"><![CDATA[<blockquote><p>同学说他在windows下需要找到文件中包含给出字符的那些文件，非常浪费时间。其实在shell中一个find+grep就可以搞定这个事情了。但是在windows上，确实有点麻烦，毕竟我也不会powershell，虽然很久很久之前学过一段时间，但是感觉好难，所以今天打算再学习一下，原因：无聊</p></blockquote><h1 id="powershell"><a href="#powershell" class="headerlink" title="powershell"></a>powershell</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>由于我是日常使用linux的，所以不想再打开windows用了，其实也可以开虚拟机用。但是我发现可以在linux中安装powershell，因为这个powershell现在已经可以跨平台使用了。但是我的archlinux就算了，所以我把它安装到raspberry上。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 官方给出的操作步骤，但是wget从github下载速度太慢了</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Update package lists</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Install libunwind8 and libssl1.0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Regex is used to ensure that we <span class="keyword">do</span> not install libssl1.0-dev, as it is a variant that is not required</span></span><br><span class="line">sudo apt-get install '^libssl1.0.[0-9]$' libunwind8 -y</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Download and extract PowerShell</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Grab the latest tar.gz</span></span><br><span class="line">wget https://github.com/PowerShell/PowerShell/releases/download/v7.0.0/powershell-7.0.0-linux-arm32.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Make folder to put powershell</span></span><br><span class="line">mkdir ~/powershell</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Unpack the tar.gz file</span></span><br><span class="line">tar -xvf ./powershell-7.0.0-linux-arm32.tar.gz -C ~/powershell</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Start PowerShell</span></span><br><span class="line">~/powershell/pwsh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Start PowerShell from bash with sudo to create a symbolic link</span></span><br><span class="line">sudo ~/powershell/pwsh -c New-Item -ItemType SymbolicLink -Path "/usr/bin/pwsh" -Target "$PSHOME/pwsh" -Force</span><br></pre></td></tr></table></figure><h2 id="学习网址"><a href="#学习网址" class="headerlink" title="学习网址"></a>学习网址</h2><p><a href="https://docs.microsoft.com/en-us/powershell/scripting/learn/understanding-important-powershell-concepts?view=powershell-7" target="_blank" rel="noopener">微软官网</a></p><p><a href="http://powershelltutorial.net/Home/PowerShell-Basics" target="_blank" rel="noopener">在线学习</a></p><h2 id="还是开虚拟机算了"><a href="#还是开虚拟机算了" class="headerlink" title="还是开虚拟机算了"></a>还是开虚拟机算了</h2><p>哈，下了一个晚上，一看，还没下完，算了，开虚拟机玩</p><p>在用powershell时需要以管理员运行，否则很多命令是没有权限的。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ol><li>一切皆对象：powershell不同与linux的shell，linux shell是基于文本的，有各种不同的工具都可以对文本进行各种操作达到需要的目的。但是powershell是对象，所有输出都是对象，那么思考方式就不一样了，对象都有方法和属性。</li><li>powershell使用了许多c#的语法</li><li>powershell脚本以<code>.ps1</code>结尾，可直接在powershell中调用</li></ol><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><p>其实我最大的心得就是帮助文档是最重要的东西，使用好它，不用记命令都行。</p><ul><li><p>使用<code>man command</code>来获取帮助信息，那么首先需要更新帮助信息，<code>update-help</code>，man其实是help的一个别名</p></li><li><p>使用<code>command -?</code>获取帮助</p></li><li><p><code>get-help command -example</code></p></li></ul><h2 id="命令命名格式"><a href="#命令命名格式" class="headerlink" title="命令命名格式"></a>命令命名格式</h2><p>powershell使用verb-noun动-名词的命名格式，所以还是比较好记的。</p><p>比如需要查询所有以get开头的命令：<code>get-command -verb get</code>，查询所有包含service的命令：<code>get-command -noun service</code></p><h2 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h2><p>与linux shell一样，powershell的参数也是用<code>-</code>标识。其实很多都是借鉴的shell，比如说pipe</p><h2 id="命令别名及配置文件"><a href="#命令别名及配置文件" class="headerlink" title="命令别名及配置文件"></a>命令别名及配置文件</h2><p>在powershell中可以使用很多熟悉的linux命令，比如：ls，pwd，ps，cd，echo，rm，rmdir，mv，mount，diff，curl，wget，cp，cat等等，并不是它真的有这些linux命令，而是用了alias，我们输入<code>alias</code>即可查看所有的别名</p><p>设置自己的别名举例：<code>set-alias grep select-string</code>。这样就可以将查找字符映射为熟悉的grep，但是怎么保存这个别名呢？</p><ol><li><p>首先找到配置文件位置</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="variable">$profile</span></span><br></pre></td></tr></table></figure></li><li><p>查看配置文件是否存在</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test-path</span> <span class="variable">$profile</span></span><br></pre></td></tr></table></figure></li><li><p>新建文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">new-item</span> <span class="literal">-Path</span> <span class="variable">$profile</span> <span class="literal">-ItemType</span> file <span class="literal">-force</span></span><br></pre></td></tr></table></figure></li><li><p>将配置写入文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">"alias grep select-string"</span> &gt; <span class="variable">$profile</span></span><br></pre></td></tr></table></figure></li><li><p>给权限</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看默认权限</span></span><br><span class="line">PS C:\Users\narcissus&gt; <span class="built_in">Get-ExecutionPolicy</span>                                                                                             Restricted</span><br></pre></td></tr></table></figure><p>Restricted权限会阻止打开powershell时去读取配置文件的，所以需要修改，可以在<a href="https://docs.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7" target="_blank" rel="noopener">这里</a>查看各种权限意义</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改权限,remotesigned会要求从网上下载的必须要签名否则不能运行，但是本机的可以</span></span><br><span class="line"><span class="built_in">Set-ExecutionPolicy</span> <span class="literal">-ExecutionPolicy</span> RemoteSigned</span><br></pre></td></tr></table></figure><p>The acceptable execution policy values are as follows:</p><ul><li><strong>AllSigned</strong>. Requires that all scripts and configuration files are signed by a trusted publisher, including scripts written on the local computer.</li><li><strong>Bypass</strong>. Nothing is blocked and there are no warnings or prompts.</li><li><strong>Default</strong>. Sets the default execution policy. <strong>Restricted</strong> for Windows clients or <strong>RemoteSigned</strong> for Windows servers.</li><li><strong>RemoteSigned</strong>. Requires that all scripts and configuration files downloaded from the Internet are signed by a trusted publisher. The default execution policy for Windows server computers.</li><li><strong>Restricted</strong>. Doesn’t load configuration files or run scripts. The default execution policy Windows client computers.</li><li><strong>Undefined</strong>. No execution policy is set for the scope. Removes an assigned execution policy from a scope that is not set by a Group Policy. If the execution policy in all scopes is <strong>Undefined</strong>, the effective execution policy is <strong>Restricted</strong>.</li><li><strong>Unrestricted</strong>. Beginning in PowerShell 6.0, this is the default execution policy for non-Windows computers and can’t be changed. Loads all configuration files and runs all scripts. If you run an unsigned script that was downloaded from the internet, you’re prompted for permission before it runs.</li></ul></li><li><p>然后就可以随意使用grep了</p></li></ol><h2 id="自定义初始化路径"><a href="#自定义初始化路径" class="headerlink" title="自定义初始化路径"></a>自定义初始化路径</h2><p>每次打开powershell的时候，目录都不在home目录，想修改为home目录</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">"cd <span class="variable">$home</span>"</span> &gt;&gt; <span class="variable">$profile</span></span><br></pre></td></tr></table></figure><h2 id="pipe"><a href="#pipe" class="headerlink" title="pipe"></a>pipe</h2><p>可以将前一个命令的输出，作为后一个命令的输入。不同于linux的shell，powershell的所有输出都是对象，而在控制台显示的信息仅仅是对象的一部分信息，那么可以通过调用对象的方法来查看更多信息。</p><p><code>-inputobject</code>获取到对象</p><p><code>$_</code>代表传递过来的默认变量（对象）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看每个进程名以及所属公司：ps通过管道过来的数据都是对象，直接使用ps是看不到这些数据的，但是可以通过对象得到这些数据</span></span><br><span class="line">ps | echo <span class="literal">-InputObject</span> &#123;<span class="variable">$_</span>.ProcessName + <span class="string">'--&gt;'</span> + <span class="variable">$_</span>.Company&#125;</span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>类似于perl，变量声明需要在变量名前加<code>$</code>,变量的引用同样需要<code>$</code></p><p>例如配置文件：$profile</p><p>通过pipe传递过来的变量默认为<code>$_</code>：<code>get-item ./* | foreach {write-output $_; sleep 1}</code></p><p>字符拼接：<code>+</code></p><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><p>字符串具有许多的方法</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = (ipconfig)</span><br><span class="line"><span class="variable">$a</span>.replace(<span class="string">'0'</span>,<span class="number">1</span>)</span><br><span class="line"><span class="variable">$a</span>.split(<span class="string">'.'</span>)</span><br><span class="line"><span class="variable">$a</span>.count</span><br><span class="line"><span class="variable">$a</span>.length</span><br></pre></td></tr></table></figure><p>输出，支持颜色</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">write-host</span> <span class="variable">$a</span> <span class="literal">-backgroundcolor</span> black <span class="literal">-foregroundcolor</span> white</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$list</span> = <span class="selector-tag">@</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="variable">$list</span> = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span></span><br><span class="line"><span class="variable">$list</span> = <span class="number">1</span>..<span class="number">4</span></span><br><span class="line"><span class="built_in">write-output</span> <span class="variable">$list</span></span><br></pre></td></tr></table></figure><p>我们知道在powershell中一切都是对象，那么数组就具有很多方法和属性可调用</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$p</span> = <span class="selector-tag">@</span>(<span class="built_in">get-process</span>)</span><br><span class="line"><span class="variable">$p</span>.count</span><br><span class="line"><span class="variable">$p</span>.length</span><br><span class="line"><span class="variable">$p</span>[<span class="type">index</span>]</span><br><span class="line"><span class="variable">$p</span>[<span class="number">1</span>]</span><br><span class="line"><span class="variable">$p</span>[<span class="number">1</span>] = <span class="string">'0'</span></span><br><span class="line"><span class="variable">$p</span>.contains(<span class="number">0</span>)</span><br><span class="line"><span class="variable">$p</span> <span class="operator">-notcontains</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>这种方式创建的array无法修改<code>$list.isfixedsize</code>为True</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">system.collections.arraylist</span>]<span class="variable">$list</span> = <span class="number">1</span>..<span class="number">5</span></span><br></pre></td></tr></table></figure><p>这样创建的就是可变长度的list</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$list</span>.remove(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$hash</span> = <span class="selector-tag">@</span>&#123;<span class="string">'A'</span>=<span class="number">1</span>; <span class="string">'B'</span>=<span class="number">2</span>; <span class="string">'C'</span>=<span class="number">3</span>&#125;</span><br><span class="line"><span class="variable">$hash</span>[<span class="string">'A'</span>]</span><br><span class="line"><span class="variable">$hash</span>.count</span><br><span class="line"><span class="variable">$hash</span>.keys</span><br><span class="line"><span class="variable">$hash</span>.values</span><br><span class="line"><span class="variable">$hash</span>.containskey(<span class="string">'A'</span>)</span><br><span class="line"><span class="variable">$hash</span>.containsvalue(<span class="number">2</span>)</span><br><span class="line"><span class="variable">$hash</span>.remove(<span class="string">'C'</span>)</span><br><span class="line"><span class="variable">$hash</span>[<span class="string">'C'</span>] = <span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><ul><li>while</li><li>for</li><li>foreach</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> (condition)</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (condition)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (condition)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$i</span> <span class="operator">-lt</span> <span class="number">5</span>)&#123;</span><br><span class="line"><span class="built_in">write-output</span> <span class="variable">$i</span></span><br><span class="line"><span class="variable">$i</span>++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span> <span class="operator">-lt</span> <span class="number">5</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line"><span class="built_in">write-output</span> <span class="variable">$i</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="variable">$file</span> <span class="keyword">in</span> (<span class="built_in">get-item</span> ./*).fullname) &#123;</span><br><span class="line"><span class="built_in">write-output</span> <span class="variable">$file</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> (condition)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数字与字符比较都用<code>-eq -gt -lt</code>等等。不过字符比较时默认忽略大小写，如果要考虑大小写添加<code>-c</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">'ABC'</span> <span class="operator">-ceq</span> <span class="string">'Abc'</span>)&#123;echo <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><p>逻辑运算：<code>-and -or -not</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">2</span> <span class="operator">-gt</span> <span class="number">1</span> <span class="operator">-and</span> <span class="number">3</span> <span class="operator">-lt</span> <span class="number">4</span>)&#123;echo <span class="string">'ok'</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="keyword">Function</span><span class="title">Name</span> <span class="params">(parameters)</span></span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">#script block</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">Remove-Item</span> <span class="string">"C:\doentexist\file.txt"</span> <span class="literal">-ErrorAction</span> Stop</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> [<span class="type">System.Management.Automation.ItemNotFoundException</span>] &#123;</span><br><span class="line">    <span class="built_in">Write-Host</span> <span class="string">"item not found"</span> <span class="literal">-ForegroundColor</span> red</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">Write-Host</span> <span class="string">"undefined errors"</span> <span class="literal">-ForegroundColor</span> orange</span><br><span class="line">    <span class="built_in">Write-Host</span> <span class="variable">$error</span>[<span class="number">0</span>] <span class="literal">-ForegroundColor</span> orange</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="string">"Finally block"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="取消终端输出"><a href="#取消终端输出" class="headerlink" title="取消终端输出"></a>取消终端输出</h2><p>不像在linux可以重定向到/dev/null，powershell中是输出给到<code>out-null</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">system.collections.arraylist</span>]<span class="variable">$list</span> = <span class="selector-tag">@</span>()</span><br><span class="line"><span class="comment"># list在添加值的时候会输出index，为了不输出可以这么做</span></span><br><span class="line"><span class="variable">$list</span>.add(<span class="number">1</span>) | <span class="built_in">out-null</span></span><br></pre></td></tr></table></figure><p>其实还可以将输出赋值给一个变量</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$null</span> = (<span class="variable">$list</span>.add(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h2 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">get-childitem</span> | <span class="built_in">format-table</span></span><br><span class="line"><span class="built_in">get-childitem</span> | <span class="built_in">format-list</span></span><br><span class="line"><span class="built_in">get-childitem</span> | <span class="built_in">format-wide</span></span><br></pre></td></tr></table></figure><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 会返回True/False</span></span><br><span class="line">[<span class="type">regex</span>]::isMatch(<span class="variable">$i</span>,<span class="string">"txt"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取当前路径下txt文件，虽然可以用get-item *txt</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$i</span> <span class="keyword">in</span> (<span class="built_in">get-item</span> ./*).Name)&#123;<span class="keyword">if</span> ([<span class="type">regex</span>]::isMatch(<span class="variable">$i</span>,<span class="string">"txt"</span>) <span class="operator">-eq</span> <span class="string">'True'</span>)&#123;echo <span class="variable">$i</span>&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>select-string 匹配</p><p>stop-computer 关机</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看每个进程名以及所属公司：ps通过管道过来的数据都是对象，直接使用ps是看不到这些数据的，但是可以通过对象得到这些数据</span></span><br><span class="line">ps | echo <span class="literal">-InputObject</span> &#123;<span class="variable">$_</span>.ProcessName + <span class="string">'--&gt;'</span> + <span class="variable">$_</span>.Company&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看进程数：ps命令是没有count参数的，但是其输出对象有这个方法</span></span><br><span class="line">echo (ps).count</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个一秒逐行打印文件数据</span></span><br><span class="line">cat .\cmd.txt | <span class="keyword">foreach</span> &#123;echo <span class="variable">$_</span>;sleep <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下面这个就是实现给定条件文本，然后在许多文件中去找是否存在，对存在的数据进行复制。类似与linux的grep|cp的组合功能</span></span><br><span class="line"><span class="comment"># 需要对没有搜索到的条件进行打印，这个确实有点难，因为不是每个文件都包含这个条件，那么循环中既有找到的，也有找不到的</span></span><br><span class="line"><span class="comment"># 其实只要对找得到的，找不到的都做一个标记，将结果放进一个集合，然后找一个找到标记都没有的，那就是真的找不到的</span></span><br><span class="line"><span class="comment"># 将内容保存为search_txt.ps1，然后就可以直接在powershell中直接调用了，很方便</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义条件的文本</span></span><br><span class="line"><span class="variable">$condition</span> = <span class="string">'cmd.txt'</span></span><br><span class="line"><span class="comment"># 定义复制到哪的路径</span></span><br><span class="line"><span class="variable">$destition</span> = <span class="string">'~/Desktop/new'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$con</span> <span class="keyword">in</span> (<span class="built_in">get-content</span> <span class="variable">$condition</span>))&#123;</span><br><span class="line">    [<span class="type">system.collections.arraylist</span>]<span class="variable">$list</span> = <span class="selector-tag">@</span>()</span><br><span class="line">    <span class="comment"># 将文件夹，及不需要搜索的文件加入-exclude后面，逗号分隔</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$file</span> <span class="keyword">in</span> (<span class="built_in">get-item</span> ./* <span class="literal">-exclude</span> <span class="string">'new'</span>,<span class="string">'install.sh'</span>).fullname)&#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="built_in">select-string</span> <span class="variable">$con</span> <span class="variable">$file</span>).count <span class="operator">-gt</span> <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="variable">$null</span> = <span class="variable">$list</span>.add(<span class="string">'ok'</span>)</span><br><span class="line">            <span class="built_in">copy-item</span> <span class="variable">$file</span> <span class="variable">$destition</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$null</span> = <span class="variable">$list</span>.add(<span class="string">'no'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$list</span>.Contains(<span class="string">'ok'</span>))&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment"># 输出未找到的条件</span></span><br><span class="line">        <span class="built_in">write-host</span> [<span class="variable">$con</span>] not find <span class="keyword">in</span> files <span class="literal">-BackgroundColor</span> DarkCyan</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>powershell学习起来比linux shell简单多了，因为所有命令都是通过verb-noun这种方式来表示的，可以很轻易的查到。另外所有命令都有使用例子，真的很简单。虽然命令很多，但是却可以现学现用。如果花与学习linux shell相同时间，powershell一定玩的很溜，但是我不学了，好累突然。哈哈，我觉得我学的已经可以了，写个脚本什么的没问题了。反正一切皆对象，只要是同一类对象，根本就不用去记忆，直接调用就行了，反正方法都一样。现在想想大二时候刚开始学电脑的我，那个时候的我觉得这个东西太难了，学的也很慢，而且没学懂，变量都不会用。所以说学习的确是一个厚积薄发的过程，只有不断的学习新东西，学到更多的东西，才会越来越觉得简单。真的现在看到群里那些小伙伴提的问题我觉得好简单啊，虽然有很多不会的东西，但是去百度搜一下，然后就可以直接拿来用了，毫无违和感。我又飘了！</p><p>突然收到一条短信，我收到快递了，可是我没买东西，我发现这是一个最可怕的东西，该来的还是来了</p>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas</title>
      <link href="/2020/04/18/pandas/"/>
      <url>/2020/04/18/pandas/</url>
      
        <content type="html"><![CDATA[<blockquote><p>pandas是python中一个数据处理和科学分析的工具，它能做的很多，不过最为强大的就是数据处理。由于它可以很轻松的处理excel数据，所以，也是自动化办公的一个神器，也是我学习的主要目标。</p></blockquote><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>使用pip来安装pandas，pip需要先配置国内源，不然下载速度很慢</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pandas</span><br></pre></td></tr></table></figure><p>处理excel数据，还需要一个插件（openpyxl）来读取/写入excel</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> openpyxl (3.0.3)    - A Python library to <span class="built_in">read</span>/write Excel 2010 xlsx/xlsm files</span></span><br><span class="line">pip install openpyxl</span><br></pre></td></tr></table></figure><h1 id="三种数据结构"><a href="#三种数据结构" class="headerlink" title="三种数据结构"></a>三种数据结构</h1><table><thead><tr><th>数据结构</th><th>维度</th><th>特点</th></tr></thead><tbody><tr><td>Series</td><td>一维</td><td>同构（数据类型相同），表示一列column</td></tr><tr><td>DataFrame</td><td>二维</td><td>异构，表示一个表格table</td></tr><tr><td>Panel</td><td>三维</td><td>异构，使用的少</td></tr></tbody></table><p>由于具有DataFrame这种二维数据结构，所以可以处理很多类似数据结构的文件，比如：excel，sql，json等</p><h1 id="简单读取写入"><a href="#简单读取写入" class="headerlink" title="简单读取写入"></a>简单读取写入</h1><p><strong>读取数据的时候可以直接指定index列<code>index_col=</code></strong></p><p><strong>数据如果太长显示不了，可以设置显示宽度<code>pandas.options.display.max_columns=num</code></strong></p><h2 id="excel"><a href="#excel" class="headerlink" title="excel"></a>excel</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入数据到excel</span></span><br><span class="line">data = &#123;<span class="string">"name"</span>:[<span class="string">"韩信"</span>,<span class="string">"李白"</span>,<span class="string">"杜甫"</span>], <span class="string">"age"</span>:[<span class="number">21</span>,<span class="number">22</span>,<span class="number">24</span>], <span class="string">"score"</span>:[<span class="number">80</span>,<span class="number">90</span>,<span class="number">100</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line">df.to_excel(<span class="string">'/home/narcissus/Desktop/1.xlsx'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从excel读取数据</span></span><br><span class="line">pe = pd.read_excel(<span class="string">"/home/narcissus/Desktop/1.xlsx"</span>, index_col=<span class="string">'name'</span>)</span><br><span class="line">print(pe)</span><br></pre></td></tr></table></figure><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><p>需要安装数据库连接驱动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">host = <span class="string">'192.168.0.105'</span></span><br><span class="line">user = <span class="string">'pi'</span></span><br><span class="line">password = input(<span class="string">"password for mysql connection: "</span>)</span><br><span class="line">database = <span class="string">'mytestdb'</span></span><br><span class="line">con = pymysql.connect(host,user,password,database)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">df = pd.read_sql_query(<span class="string">'select * from ssacount limit 0,10'</span>,con)</span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以将数据库中读取到的数据直接写入excel中</span></span><br><span class="line">df.to_excel(<span class="string">'~/Desktop/1.xlsx'</span>)</span><br></pre></td></tr></table></figure><h2 id="sqlite"><a href="#sqlite" class="headerlink" title="sqlite"></a>sqlite</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">con = sqlite3.connect(<span class="string">"testdatabase.db"</span>)</span><br><span class="line">df = pd.read_sql_query(<span class="string">"SELECT * FROM ssacount"</span>, con)</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure><h2 id="json"><a href="#json" class="headerlink" title="json"></a>json</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_json(<span class="string">'test.json'</span>)</span><br></pre></td></tr></table></figure><h2 id="csv-tsv-txt"><a href="#csv-tsv-txt" class="headerlink" title="csv/tsv/txt"></a>csv/tsv/txt</h2><p>pandas只有一个<code>read_csv()</code>函数，但是却可以读取这三种文件（文本文件都可以），默认读取csv文件，其分隔符为逗号，所以在读取tsv和txt的时候，要手动设置分隔符<code>sep=&#39;&#39;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">'1.csv'</span>)</span><br><span class="line">df = pd.read_csv(<span class="string">'1.tsv'</span>, sep=<span class="string">'\t'</span>)</span><br><span class="line">df = pd.read_csv(<span class="string">'1.txt'</span>, sep=<span class="string">'文件中的特殊分隔符号'</span>)</span><br></pre></td></tr></table></figure><h2 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h2><p>值得注意的是在写入文件之前要确保去掉默认的index，需要设置成自己指定的index，否则再读取文件时，会有一个unamed的列（之前的index列）。其实可以用后面学习的<code>skiprows</code>在读取时指定跳过多少行，以及<code>usecols</code>来跳过指定列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">"name"</span>:[<span class="string">"韩信"</span>,<span class="literal">None</span>,<span class="string">"李白"</span>,<span class="string">"杜甫"</span>], <span class="string">"age"</span>:[<span class="number">21</span>,<span class="literal">None</span>,<span class="number">22</span>,<span class="number">24</span>], <span class="string">"score"</span>:[<span class="number">80</span>,<span class="number">80</span>,<span class="number">80</span>,<span class="number">100</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"><span class="comment"># 写入文件之前需要去掉默认的index</span></span><br><span class="line">df.set_index(<span class="string">'name'</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">df.to_excel(<span class="string">'~/Desktop/1.xlsx'</span>)</span><br><span class="line"><span class="comment"># 读取数据时指定index</span></span><br><span class="line">df = pd.read_excel(<span class="string">'~/Desktop/1.xlsx'</span>, index_col=<span class="string">'name'</span>)</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df.to_excel(<span class="string">'~/Desktop/1.xlsx'</span>)</span><br><span class="line"></span><br><span class="line">df.to_json(<span class="string">'~/Desktop/test.json'</span>)</span><br><span class="line"></span><br><span class="line">df.to_sql(<span class="string">'ssacount'</span>, con)</span><br></pre></td></tr></table></figure><p><strong>PS:</strong> 按照目前我的理解，pandas可以完美的完成这些数据文件之间的转换。可以将json，数据库中的数据导入到excel中进行可视化操作。</p><h1 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h1><p>作为最重要的一个部分，DataFrame包含了几百种方法和操作，可以对数据进行任何的分析与处理。</p><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>创建的方式比较多，但通常都是使用<code>dict</code>来创建。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">"name"</span>:[<span class="string">"韩信"</span>,<span class="string">"李白"</span>,<span class="string">"杜甫"</span>], </span><br><span class="line">        <span class="string">"age"</span>:[<span class="number">21</span>,<span class="number">22</span>,<span class="number">24</span>], </span><br><span class="line">        <span class="string">"score"</span>:[<span class="number">80</span>,<span class="number">90</span>,<span class="number">100</span>]</span><br><span class="line">       &#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure><p>每一对key-value作为一个Series(column)，key作为表头，value作为数据</p><h2 id="自己指定index"><a href="#自己指定index" class="headerlink" title="自己指定index"></a>自己指定index</h2><p>默认会自动创建一个index列，为从0开始的连续数据。可以自己指定某列为索引列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用set_index()方法</span></span><br><span class="line">df = df.set_index(<span class="string">"name"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者在DataFrame中指定index</span></span><br><span class="line">df = pd.DataFrame(data, index=[<span class="string">'一班'</span>,<span class="string">'二班'</span>,<span class="string">'二班'</span>])</span><br></pre></td></tr></table></figure><p>需要注意的是这个index的数据是可以重复的，并不需要唯一性</p><h2 id="通过index找出对应数据"><a href="#通过index找出对应数据" class="headerlink" title="通过index找出对应数据"></a>通过index找出对应数据</h2><p>可以通过<code>loc</code>找出来的条件是设置了index，否则无法找到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sear = df.loc[<span class="string">'一班'</span>]</span><br><span class="line">print(sear)</span><br><span class="line"></span><br><span class="line">name     韩信</span><br><span class="line">age      <span class="number">21</span></span><br><span class="line">score    <span class="number">80</span></span><br><span class="line">Name: 一班, dtype: object</span><br></pre></td></tr></table></figure><p>可以看出index与其对应数据也是一个<code>dict</code>数据类型</p><p>即使设置了index，也可以通过默认的index来查找<code>iloc</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sear = df.iloc[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h2 id="指定header"><a href="#指定header" class="headerlink" title="指定header"></a>指定header</h2><p>默认header=0,会使用第0行（index为空）/excel中的第一行作为header，即columns</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_excel(<span class="string">'~/Desktop/1.xlsx'</span>, header=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>重新自定义header，能够自定义成功的前提是这个文件本身就没有header，否则原来的header会作为一个数据行成为index=0的那一行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_excel(<span class="string">'~/Desktop/1.xlsx'</span>, header=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># 取指定列</span></span><br><span class="line">df = df[[<span class="number">1</span>,<span class="number">3</span>]]</span><br><span class="line"><span class="comment"># 设置header</span></span><br><span class="line">df.columns = [<span class="number">1</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure><h2 id="查看开头和结尾"><a href="#查看开头和结尾" class="headerlink" title="查看开头和结尾"></a>查看开头和结尾</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认为5行</span></span><br><span class="line">df.head()</span><br><span class="line">df.tail()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以自己指定显示多少行</span></span><br><span class="line">df.head(<span class="number">20</span>)</span><br><span class="line">df.tail(<span class="number">20</span>)</span><br></pre></td></tr></table></figure><h2 id="查看数据信息"><a href="#查看数据信息" class="headerlink" title="查看数据信息"></a>查看数据信息</h2><p><code>.info()</code>提供了很重要的一些信息，包括行，列，数据是否为空，数据类型，内存占用等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">"name"</span>:[<span class="string">"韩信"</span>,<span class="string">"李白"</span>,<span class="string">"杜甫"</span>], <span class="string">"age"</span>:[<span class="number">21</span>,<span class="number">22</span>,<span class="number">24</span>], <span class="string">"score"</span>:[<span class="number">80</span>,<span class="number">80</span>,<span class="number">100</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line">info = df.info()</span><br><span class="line">print(info)</span><br><span class="line"></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">RangeIndex</span>:</span> <span class="number">3</span> entries, <span class="number">0</span> to <span class="number">2</span></span><br><span class="line">Data columns (total <span class="number">3</span> columns):</span><br><span class="line"> <span class="comment">#   Column  Non-Null Count  Dtype </span></span><br><span class="line">---  ------  --------------  ----- </span><br><span class="line"> <span class="number">0</span>   name    <span class="number">3</span> non-null      object</span><br><span class="line"> <span class="number">1</span>   age     <span class="number">3</span> non-null      int64 </span><br><span class="line"> <span class="number">2</span>   score   <span class="number">3</span> non-null      int64 </span><br><span class="line">dtypes: int64(<span class="number">2</span>), object(<span class="number">1</span>)</span><br><span class="line">memory usage: <span class="number">200.0</span>+ bytes</span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure><h2 id="查看行列数"><a href="#查看行列数" class="headerlink" title="查看行列数"></a>查看行列数</h2><p><code>.shape</code>提供了一个简单快速查看总行数，列数的信息(rows,columns)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">info = df.shape</span><br><span class="line">print(info)</span><br><span class="line"></span><br><span class="line">(<span class="number">3</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h2 id="添加与去重"><a href="#添加与去重" class="headerlink" title="添加与去重"></a>添加与去重</h2><h3 id="添加DataFrame"><a href="#添加DataFrame" class="headerlink" title="添加DataFrame"></a>添加DataFrame</h3><ul><li>df.append()</li><li>pandas.concat([])</li></ul><p><code>.append()</code>可以将已有的DataFrame追加。但是index不会自动变化，要是index自动变化，需要调用<code>reset_index(drop=True)</code></p><p>append如果需要将Series追加到行后面，必须加一个参数<code>ignore_index=True</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">"name"</span>:[<span class="string">"韩信"</span>,<span class="string">"韩信"</span>,<span class="string">"李白"</span>,<span class="string">"杜甫"</span>], <span class="string">"age"</span>:[<span class="number">21</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">24</span>], <span class="string">"score"</span>:[<span class="number">80</span>,<span class="number">80</span>,<span class="number">80</span>,<span class="number">100</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line">tmp_df = df.append(df)</span><br><span class="line">print(tmp_df)</span><br><span class="line"></span><br><span class="line">    name  age  score</span><br><span class="line"><span class="number">0</span>   韩信   <span class="number">21</span>     <span class="number">80</span></span><br><span class="line"><span class="number">1</span>   韩信   <span class="number">21</span>     <span class="number">80</span></span><br><span class="line"><span class="number">2</span>   李白   <span class="number">22</span>     <span class="number">80</span></span><br><span class="line"><span class="number">3</span>   杜甫   <span class="number">24</span>    <span class="number">100</span></span><br><span class="line"><span class="number">0</span>   韩信   <span class="number">21</span>     <span class="number">80</span></span><br><span class="line"><span class="number">1</span>   韩信   <span class="number">21</span>     <span class="number">80</span></span><br><span class="line"><span class="number">2</span>   李白   <span class="number">22</span>     <span class="number">80</span></span><br><span class="line"><span class="number">3</span>   杜甫   <span class="number">24</span>    <span class="number">100</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">"name"</span>:[<span class="string">"韩信"</span>,<span class="string">"韩信"</span>,<span class="string">"李白"</span>,<span class="string">"杜甫"</span>], <span class="string">"age"</span>:[<span class="number">21</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">24</span>], <span class="string">"score"</span>:[<span class="number">80</span>,<span class="number">80</span>,<span class="number">80</span>,<span class="number">100</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line">tmp_df = df.append(df).reset_index(drop=<span class="literal">True</span>)</span><br><span class="line">print(tmp_df)</span><br><span class="line"></span><br><span class="line">name  age  score</span><br><span class="line"><span class="number">0</span>   韩信   <span class="number">21</span>     <span class="number">80</span></span><br><span class="line"><span class="number">1</span>   韩信   <span class="number">21</span>     <span class="number">80</span></span><br><span class="line"><span class="number">2</span>   李白   <span class="number">22</span>     <span class="number">80</span></span><br><span class="line"><span class="number">3</span>   杜甫   <span class="number">24</span>    <span class="number">100</span></span><br><span class="line"><span class="number">4</span>   韩信   <span class="number">21</span>     <span class="number">80</span></span><br><span class="line"><span class="number">5</span>   韩信   <span class="number">21</span>     <span class="number">80</span></span><br><span class="line"><span class="number">6</span>   李白   <span class="number">22</span>     <span class="number">80</span></span><br><span class="line"><span class="number">7</span>   杜甫   <span class="number">24</span>    <span class="number">100</span></span><br></pre></td></tr></table></figure><p>使用concat默认y轴添加，使用axis=1则x轴添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">"name"</span>:[<span class="string">"韩信"</span>,<span class="string">"韩信"</span>,<span class="string">"李白"</span>,<span class="string">"杜甫"</span>], <span class="string">"age"</span>:[<span class="number">21</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">24</span>], <span class="string">"score"</span>:[<span class="number">80</span>,<span class="number">80</span>,<span class="number">80</span>,<span class="number">100</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line">tmp_df = pd.concat([df,df], axis=<span class="number">0</span>).reset_index(drop=<span class="literal">True</span>)</span><br><span class="line">print(tmp_df)</span><br></pre></td></tr></table></figure><h3 id="添加Series"><a href="#添加Series" class="headerlink" title="添加Series"></a>添加Series</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">"name"</span>:[<span class="string">"韩信"</span>,<span class="string">"韩信"</span>,<span class="string">"李白"</span>,<span class="string">"杜甫"</span>], <span class="string">"age"</span>:[<span class="number">21</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">24</span>], <span class="string">"score"</span>:[<span class="number">80</span>,<span class="number">80</span>,<span class="number">80</span>,<span class="number">100</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line">add = pd.Series(&#123;<span class="string">'name'</span>:<span class="string">'筱倩'</span>, <span class="string">'age'</span>:<span class="number">30</span>, <span class="string">'score'</span>:<span class="number">88</span>&#125;)</span><br><span class="line">df = df.append(add, ignore_index=<span class="literal">True</span>)</span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line">name  age  score</span><br><span class="line"><span class="number">0</span>   韩信   <span class="number">21</span>     <span class="number">80</span></span><br><span class="line"><span class="number">1</span>   韩信   <span class="number">21</span>     <span class="number">80</span></span><br><span class="line"><span class="number">2</span>   李白   <span class="number">22</span>     <span class="number">80</span></span><br><span class="line"><span class="number">3</span>   杜甫   <span class="number">24</span>    <span class="number">100</span></span><br><span class="line"><span class="number">4</span>   筱倩   <span class="number">30</span>     <span class="number">88</span></span><br></pre></td></tr></table></figure><h3 id="添加列"><a href="#添加列" class="headerlink" title="添加列"></a>添加列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'column_name'</span>] = []</span><br><span class="line">tmp_df[<span class="string">'add'</span>] = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(max(tmp_df.index)+<span class="number">1</span>)]</span><br></pre></td></tr></table></figure><h3 id="找到重复数据"><a href="#找到重复数据" class="headerlink" title="找到重复数据"></a>找到重复数据</h3><p><code>df.dumpllicateed(subset=&#39;column_name&#39;)</code>可以找出指定列的重复index，和True/False的Series。那么如何通过index来找到真正的重复数据？可以通过循环，其实更加简单的方式是使用<code>df.iloc[index]</code>定位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">"name"</span>:[<span class="string">"韩信"</span>,<span class="string">"韩信"</span>,<span class="string">"李白"</span>,<span class="string">"杜甫"</span>], <span class="string">"age"</span>:[<span class="number">21</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">24</span>], <span class="string">"score"</span>:[<span class="number">80</span>,<span class="number">80</span>,<span class="number">80</span>,<span class="number">100</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line">dum = df.duplicated(subset=<span class="string">'name'</span>)</span><br><span class="line"><span class="comment"># 查看是否存在重复数据</span></span><br><span class="line">print(dum.any())</span><br><span class="line">dum = dum[dum == <span class="literal">True</span>] <span class="comment">#可以简化为dum = dum[dum]</span></span><br><span class="line">info = df.iloc[dum.index]</span><br><span class="line">print(info)</span><br><span class="line"></span><br><span class="line"><span class="literal">True</span></span><br><span class="line">name  age  score</span><br><span class="line"><span class="number">1</span>   韩信   <span class="number">21</span>     <span class="number">80</span></span><br></pre></td></tr></table></figure><h3 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h3><p><code>.drop_duplicates()</code>可以将追加的重复数据清除，需要加上<code>inplace=True</code>这个参数，否则不会生效。</p><ul><li>默认会对整个表的数据进行去重，如果需要对指定列，那么添加参数<code>subset=&#39;column_name&#39;</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tmp_df.drop_duplicates(subset=<span class="string">'score'</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    name  age  score</span><br><span class="line"><span class="number">0</span>   韩信   <span class="number">21</span>     <span class="number">80</span></span><br><span class="line"><span class="number">2</span>   李白   <span class="number">22</span>     <span class="number">80</span></span><br><span class="line"><span class="number">3</span>   杜甫   <span class="number">24</span>    <span class="number">100</span></span><br></pre></td></tr></table></figure><p><code>.drop_duplicates()</code>的<code>keep</code>参数：</p><ul><li>first，保留第一次出现的，默认</li><li>last，保留最后一次出现的</li><li>False，去除所有重复数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tmp_df.drop_duplicates(inplace=<span class="literal">True</span>, keep=<span class="string">'first'</span>)</span><br><span class="line"></span><br><span class="line">    name  age  score</span><br><span class="line"><span class="number">0</span>   韩信   <span class="number">21</span>     <span class="number">80</span></span><br><span class="line"><span class="number">2</span>   李白   <span class="number">22</span>     <span class="number">80</span></span><br><span class="line"><span class="number">3</span>   杜甫   <span class="number">24</span>    <span class="number">100</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tmp_df.drop_duplicates(inplace=<span class="literal">True</span>, keep=<span class="string">'last'</span>)</span><br><span class="line"></span><br><span class="line">    name  age  score</span><br><span class="line"><span class="number">1</span>   韩信   <span class="number">21</span>     <span class="number">80</span></span><br><span class="line"><span class="number">2</span>   李白   <span class="number">22</span>     <span class="number">80</span></span><br><span class="line"><span class="number">3</span>   杜甫   <span class="number">24</span>    <span class="number">100</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tmp_df.drop_duplicates(inplace=<span class="literal">True</span>, keep=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">Empty DataFrame</span><br><span class="line">Columns: [name, age, score]</span><br><span class="line">Index: []</span><br></pre></td></tr></table></figure><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>通过df[‘column_name’]/df.column_name可以获取Series，通过Series[index]可以获取到指定的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">"name"</span>:[<span class="string">"韩信"</span>,<span class="string">"韩信"</span>,<span class="string">"李白"</span>,<span class="string">"杜甫"</span>], <span class="string">"age"</span>:[<span class="number">21</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">24</span>], <span class="string">"score"</span>:[<span class="number">80</span>,<span class="number">80</span>,<span class="number">80</span>,<span class="number">100</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line">df.name[<span class="number">1</span>] = <span class="string">'筱倩'</span></span><br><span class="line">df.age[<span class="number">1</span>] = <span class="number">99</span></span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line">name  age  score</span><br><span class="line"><span class="number">0</span>   韩信   <span class="number">21</span>     <span class="number">80</span></span><br><span class="line"><span class="number">1</span>   筱倩   <span class="number">99</span>     <span class="number">80</span></span><br><span class="line"><span class="number">2</span>   李白   <span class="number">22</span>     <span class="number">80</span></span><br><span class="line"><span class="number">3</span>   杜甫   <span class="number">24</span>    <span class="number">100</span></span><br></pre></td></tr></table></figure><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><p>使用到了<code>df.iloc[index]</code>定位，并用Series进行替换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">"name"</span>:[<span class="string">"韩信"</span>,<span class="string">"韩信"</span>,<span class="string">"李白"</span>,<span class="string">"杜甫"</span>], <span class="string">"age"</span>:[<span class="number">21</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">24</span>], <span class="string">"score"</span>:[<span class="number">80</span>,<span class="number">80</span>,<span class="number">80</span>,<span class="number">100</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line">alert = pd.Series(&#123;<span class="string">'name'</span>:<span class="string">'筱倩'</span>, <span class="string">'age'</span>:<span class="number">30</span>, <span class="string">'score'</span>:<span class="number">88</span>&#125;)</span><br><span class="line">df.iloc[<span class="number">1</span>] = alert</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><h3 id="行"><a href="#行" class="headerlink" title="行"></a>行</h3><p>使用到了df[]切片以及追加操作。值得注意的是：在python中可以对list进行切片，但是在pandas中还可以对DataFrame这种二维数据进行切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">"name"</span>:[<span class="string">"韩信"</span>,<span class="string">"韩信"</span>,<span class="string">"李白"</span>,<span class="string">"杜甫"</span>], <span class="string">"age"</span>:[<span class="number">21</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">24</span>], <span class="string">"score"</span>:[<span class="number">80</span>,<span class="number">80</span>,<span class="number">80</span>,<span class="number">100</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line">insert = pd.Series(&#123;<span class="string">'name'</span>:<span class="string">'筱倩'</span>, <span class="string">'age'</span>:<span class="number">30</span>, <span class="string">'score'</span>:<span class="number">88</span>&#125;)</span><br><span class="line">part1 = df[:<span class="number">2</span>]</span><br><span class="line">part2 = df[<span class="number">2</span>:]</span><br><span class="line">df = part1.append(insert, ignore_index=<span class="literal">True</span>).append(part2).reset_index(drop=<span class="literal">True</span>)</span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line">name  age  score</span><br><span class="line"><span class="number">0</span>   韩信   <span class="number">21</span>     <span class="number">80</span></span><br><span class="line"><span class="number">1</span>   韩信   <span class="number">21</span>     <span class="number">80</span></span><br><span class="line"><span class="number">2</span>   筱倩   <span class="number">30</span>     <span class="number">88</span></span><br><span class="line"><span class="number">3</span>   李白   <span class="number">22</span>     <span class="number">80</span></span><br><span class="line"><span class="number">4</span>   杜甫   <span class="number">24</span>    <span class="number">100</span></span><br></pre></td></tr></table></figure><h3 id="列"><a href="#列" class="headerlink" title="列"></a>列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># num为想插入到第几列前面</span></span><br><span class="line">df.insert(num, column=<span class="string">'column_name'</span>, value=[])</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="行-1"><a href="#行-1" class="headerlink" title="行"></a>行</h3><p>两种方法：</p><ul><li>使用到了<code>df.drop(index=[], inplace=True)</code></li><li>可以使用切片，将需要的数据切出来然后append组合</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">"name"</span>:[<span class="string">"韩信"</span>,<span class="string">"韩信"</span>,<span class="string">"李白"</span>,<span class="string">"杜甫"</span>], <span class="string">"age"</span>:[<span class="number">21</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">24</span>], <span class="string">"score"</span>:[<span class="number">80</span>,<span class="number">80</span>,<span class="number">80</span>,<span class="number">100</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line">insert = pd.Series(&#123;<span class="string">'name'</span>:<span class="string">'筱倩'</span>, <span class="string">'age'</span>:<span class="number">30</span>, <span class="string">'score'</span>:<span class="number">88</span>&#125;)</span><br><span class="line">part1 = df[:<span class="number">1</span>]</span><br><span class="line">part2 = df[<span class="number">2</span>:]</span><br><span class="line"><span class="comment"># index后面可以跟一个list集合，也可以是一个range()函数</span></span><br><span class="line">df.drop(index=<span class="number">2</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 使用切片然后组合</span></span><br><span class="line"><span class="comment"># df = part1.append(part2).reset_index(drop=True)</span></span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure><h3 id="列-1"><a href="#列-1" class="headerlink" title="列"></a>列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.drop(columns=[],inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="columns"><a href="#columns" class="headerlink" title="columns"></a>columns</h2><p><code>.columns</code>可获取所有列名，返回的是一个列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(df.columns)</span><br><span class="line"></span><br><span class="line">Index([<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'score'</span>], dtype=<span class="string">'object'</span>)</span><br></pre></td></tr></table></figure><p><code>.rename()</code>可修改列名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.rename(columns=&#123;<span class="string">'name'</span>:<span class="string">'Name'</span>, <span class="string">'age'</span>:<span class="string">'AGE'</span>&#125;, inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><code>col.lower()</code>搭配列表生成式可以转换小写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.columns = [col.lower() <span class="keyword">for</span> col <span class="keyword">in</span> df.columns]</span><br></pre></td></tr></table></figure><h2 id="Null数据行清除"><a href="#Null数据行清除" class="headerlink" title="Null数据行清除"></a>Null数据行清除</h2><p><code>.isnull()</code>找出null数据，null数据显示True，非空数据显示False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(df.isnull())</span><br></pre></td></tr></table></figure><p><code>.sum()</code>计算总的null数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(df.isnull().sum())</span><br></pre></td></tr></table></figure><p><code>.dropna()</code>删除有null数据的行，只要有一个null数据就会清除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.dropna(inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>可以看到这种清除数据的缺点，无法对指定列的Null数据进行清除，所以需要使用到过滤</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">"name"</span>:[<span class="string">"韩信"</span>,<span class="literal">None</span>,<span class="string">"李白"</span>,<span class="string">"杜甫"</span>], <span class="string">"age"</span>:[<span class="number">21</span>,<span class="number">21</span>,<span class="literal">None</span>,<span class="number">24</span>], <span class="string">"score"</span>:[<span class="number">80</span>,<span class="number">80</span>,<span class="number">80</span>,<span class="number">100</span>]&#125;</span><br><span class="line"><span class="comment"># 为了能够找到手动输入的None数据列，对其进行了转换</span></span><br><span class="line">df = pd.DataFrame(data).fillna(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">miss = df.loc[df.name == <span class="number">0</span> ].index</span><br><span class="line">df.drop(index=miss, inplace=<span class="literal">True</span>)</span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line">name   age  score</span><br><span class="line"><span class="number">0</span>   韩信  <span class="number">21.0</span>     <span class="number">80</span></span><br><span class="line"><span class="number">2</span>   李白   <span class="number">0.0</span>     <span class="number">80</span></span><br><span class="line"><span class="number">3</span>   杜甫  <span class="number">24.0</span>    <span class="number">100</span></span><br></pre></td></tr></table></figure><h2 id="Null数据列的清除"><a href="#Null数据列的清除" class="headerlink" title="Null数据列的清除"></a>Null数据列的清除</h2><p><code>.dropna(axis=1)</code>使用了一个参数axis</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.dropna(inplace=<span class="literal">True</span>, axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>为什么是1？在我们使用df.shape的时候返回一个tuple，(rows,columns)，可以看出columns的索引为1</p><h2 id="使用mean来填充null数据列"><a href="#使用mean来填充null数据列" class="headerlink" title="使用mean来填充null数据列"></a>使用mean来填充null数据列</h2><p><code>.fillna(column_name, inplace=True)</code>如果将有null的数据列都删除的话， 那么数据的缺失会比较大，可以用平均值来填充</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">"name"</span>:[<span class="string">"韩信"</span>,<span class="literal">None</span>,<span class="string">"李白"</span>,<span class="string">"杜甫"</span>], <span class="string">"age"</span>:[<span class="number">21</span>,<span class="literal">None</span>,<span class="number">22</span>,<span class="number">24</span>], <span class="string">"score"</span>:[<span class="number">80</span>,<span class="number">80</span>,<span class="number">80</span>,<span class="number">100</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取出age列</span></span><br><span class="line">age = df[<span class="string">'age'</span>]</span><br><span class="line"><span class="comment"># 取平均值</span></span><br><span class="line">age_mean = age.mean()</span><br><span class="line"><span class="comment"># 将age列中的null用平均值填充</span></span><br><span class="line">age.fillna(age_mean, inplace=<span class="literal">True</span>)</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure><h2 id="获取数据描述"><a href="#获取数据描述" class="headerlink" title="获取数据描述"></a>获取数据描述</h2><p>前面用<code>.info()</code>获取了对DataFrame的描述，但是<code>.describe()</code>可以获取关于数据的描述：包括最大值，最小值，平均值，列数，行数等。既可以是整个DataFrame，也可以是某一列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 整个表</span></span><br><span class="line">print(df.describe())</span><br><span class="line"><span class="comment"># age列</span></span><br><span class="line">print(df[<span class="string">'age'</span>].describe())</span><br></pre></td></tr></table></figure><h2 id="查看某列数据相同数据的个数"><a href="#查看某列数据相同数据的个数" class="headerlink" title="查看某列数据相同数据的个数"></a>查看某列数据相同数据的个数</h2><p><code>.value_counts()</code>指定列的数据出现个数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(df[<span class="string">'score'</span>].value_counts())</span><br></pre></td></tr></table></figure><h2 id="重组DataFrame"><a href="#重组DataFrame" class="headerlink" title="重组DataFrame"></a>重组DataFrame</h2><p><code>type(df[&#39;age&#39;])</code>的类型是一个serise，而<code>type(df[[&#39;age&#39;]])</code>的类型是一个DataFrame，所以可以使用这种方式来重新选取需要的列构成新的DataFrame</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">new_df = df[[<span class="string">'name'</span>, <span class="string">'age'</span>]]</span><br><span class="line">print(new_df)</span><br></pre></td></tr></table></figure><h2 id="数据的过滤"><a href="#数据的过滤" class="headerlink" title="数据的过滤"></a>数据的过滤</h2><h3 id="在Series的基础上过滤"><a href="#在Series的基础上过滤" class="headerlink" title="在Series的基础上过滤"></a>在Series的基础上过滤</h3><p>用条件判断来过滤数据：<code>&gt; &lt; == !=</code>等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">info = (df[<span class="string">'score'</span>] == <span class="number">80</span>)</span><br><span class="line">print(info)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以得到true of false的返回值</span></span><br><span class="line"><span class="number">0</span>     <span class="literal">True</span></span><br><span class="line"><span class="number">1</span>     <span class="literal">True</span></span><br><span class="line"><span class="number">2</span>     <span class="literal">True</span></span><br><span class="line"><span class="number">3</span>    <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>如果想要直接得到过滤后的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">info = df[df[<span class="string">'score'</span>] == <span class="number">80</span>]</span><br><span class="line">print(info)</span><br><span class="line"></span><br><span class="line">   name   age  score</span><br><span class="line"><span class="number">0</span>    韩信  <span class="number">21.0</span>     <span class="number">80</span></span><br><span class="line"><span class="number">1</span>   <span class="literal">None</span>   NaN     <span class="number">80</span></span><br><span class="line"><span class="number">2</span>    李白  <span class="number">22.0</span>     <span class="number">80</span></span><br></pre></td></tr></table></figure><p>还可以使用逻辑判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info = df[(df[<span class="string">'score'</span>] &gt; <span class="number">80</span>) | (df[<span class="string">'age'</span>] == <span class="number">22</span>)]</span><br></pre></td></tr></table></figure><p>使用<code>isin()</code>更加简洁</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info = df[df[<span class="string">'age'</span>].isin([<span class="number">21</span>,<span class="number">22</span>])]</span><br></pre></td></tr></table></figure><p><strong><em>上面的所有方法都很简洁，但是数据量比较大的时候，效率就比较低</em></strong></p><p>所以我们需要使用函数来进行过滤，使用<code>.apply()</code>将column传递给函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_score</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">100</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">info = df.loc[df[<span class="string">'score'</span>].apply(filter_score)]</span><br><span class="line"><span class="comment"># 简化</span></span><br><span class="line">info = df[df[<span class="string">'score'</span>].apply(filter_score)]</span><br><span class="line"><span class="comment"># 简化，其实我不理解为什么可以这么写</span></span><br><span class="line">info = df[df.score.apply(filter_score)]</span><br></pre></td></tr></table></figure><p>可以使用匿名函数简化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">info = df[df[<span class="string">'score'</span>].apply(<span class="keyword">lambda</span> x : x == <span class="number">100</span>)]</span><br><span class="line"><span class="comment"># 再简化</span></span><br><span class="line">info = df[df.score.apply(<span class="keyword">lambda</span> x : x == <span class="number">100</span>)]</span><br></pre></td></tr></table></figure><h3 id="在DataFrame基础上过滤"><a href="#在DataFrame基础上过滤" class="headerlink" title="在DataFrame基础上过滤"></a>在DataFrame基础上过滤</h3><p><code>axis=1</code>表示每一行（x轴），<code>axis=0</code>表示每一列（y轴）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_score</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x.score == <span class="number">100</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">info = df.apply(filter_score， axis=<span class="number">1</span>)</span><br><span class="line">print(info)</span><br></pre></td></tr></table></figure><h2 id="从指定行或列开始读取"><a href="#从指定行或列开始读取" class="headerlink" title="从指定行或列开始读取"></a>从指定行或列开始读取</h2><p>可能表格并不是从第一行第一列开始写的，所以需要指定从哪里开始读取，否则会出现许多的unamed row和Nan值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">'~/Desktop/1.xlsx'</span>)</span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里包含了一个空行，和一个index列，读取的时候会出现这些问题</span></span><br><span class="line">Unnamed: <span class="number">0</span> Unnamed: <span class="number">1</span> Unnamed: <span class="number">2</span> Unnamed: <span class="number">3</span></span><br><span class="line"><span class="number">0</span>         NaN       name        age      score</span><br><span class="line"><span class="number">1</span>         <span class="number">0.0</span>         韩信         <span class="number">21</span>         <span class="number">80</span></span><br><span class="line"><span class="number">2</span>         <span class="number">1.0</span>         韩信         <span class="number">22</span>         <span class="number">80</span></span><br><span class="line"><span class="number">3</span>         <span class="number">2.0</span>         李白         <span class="number">22</span>         <span class="number">80</span></span><br><span class="line"><span class="number">4</span>         <span class="number">3.0</span>         杜甫         <span class="number">24</span>        <span class="number">100</span></span><br></pre></td></tr></table></figure><p>使用<code>skiprows(num)</code>和<code>usecols=[]</code>来选取需要的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">'~/Desktop/1.xlsx'</span>, skiprows=<span class="number">1</span>, usecols=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="comment"># 或者使用列名指定</span></span><br><span class="line">df = pd.read_excel(<span class="string">'~/Desktop/1.xlsx'</span>, skiprows=<span class="number">1</span>, usecols=[<span class="string">'name'</span>,<span class="string">'age'</span>,<span class="string">'score'</span>])</span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这样就能读取需要的数据了</span></span><br><span class="line">name  age  score</span><br><span class="line"><span class="number">0</span>   韩信   <span class="number">21</span>     <span class="number">80</span></span><br><span class="line"><span class="number">1</span>   韩信   <span class="number">22</span>     <span class="number">80</span></span><br><span class="line"><span class="number">2</span>   李白   <span class="number">22</span>     <span class="number">80</span></span><br><span class="line"><span class="number">3</span>   杜甫   <span class="number">24</span>    <span class="number">100</span></span><br></pre></td></tr></table></figure><h2 id="自动填充功能"><a href="#自动填充功能" class="headerlink" title="自动填充功能"></a>自动填充功能</h2><p>用python来实现excel中拖拽自动填充的功能，生成序列数据进行填充，比较复杂的是日期的处理</p><ul><li>连续数据：list赋值</li><li>交叉数据：三目运算</li><li>日期数据：自定义函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date,timedelta</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">'name'</span>:[<span class="string">'李白'</span>,<span class="string">'杜甫'</span>,<span class="string">'白居易'</span>,<span class="string">'王维'</span>], <span class="string">'age'</span>:[<span class="literal">None</span>,<span class="literal">None</span>,<span class="literal">None</span>,<span class="literal">None</span>], <span class="string">'birthday'</span>:[<span class="literal">None</span>,<span class="literal">None</span>,<span class="literal">None</span>,<span class="literal">None</span>], <span class="string">'drink'</span>:[<span class="literal">None</span>,<span class="literal">None</span>,<span class="literal">None</span>,<span class="literal">None</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line">=======================================================================================</span><br><span class="line">name   age birthday drink</span><br><span class="line"><span class="number">0</span>   李白  <span class="literal">None</span>     <span class="literal">None</span>  <span class="literal">None</span></span><br><span class="line"><span class="number">1</span>   杜甫  <span class="literal">None</span>     <span class="literal">None</span>  <span class="literal">None</span></span><br><span class="line"><span class="number">2</span>  白居易  <span class="literal">None</span>     <span class="literal">None</span>  <span class="literal">None</span></span><br><span class="line"><span class="number">3</span>   王维  <span class="literal">None</span>     <span class="literal">None</span>  <span class="literal">None</span></span><br><span class="line">=======================================================================================</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化日期</span></span><br><span class="line">start = date(<span class="number">1600</span>,<span class="number">1</span>,<span class="number">31</span>)</span><br><span class="line"><span class="comment"># 定义日期处理函数，传一个开始日期以及添加的月份</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_month</span><span class="params">(start_date, add_month)</span>:</span></span><br><span class="line">    tmonth = start_date.month + add_month</span><br><span class="line">    cyear = start_date.year + tmonth // <span class="number">12</span> </span><br><span class="line">    cmonth = <span class="number">12</span> <span class="keyword">if</span> tmonth % <span class="number">12</span>  == <span class="number">0</span> <span class="keyword">else</span> tmonth % <span class="number">12</span></span><br><span class="line">    cday = start_date.day</span><br><span class="line"><span class="comment"># 由于不同月份的天数不同，所以需要考虑</span></span><br><span class="line">    <span class="keyword">if</span> cday &gt; <span class="number">28</span>:</span><br><span class="line">        <span class="keyword">if</span> cmonth == <span class="number">2</span>:</span><br><span class="line">            cday = <span class="number">29</span> <span class="keyword">if</span> cyear % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> cyear % <span class="number">100</span> != <span class="number">0</span> <span class="keyword">or</span> cyear % <span class="number">400</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="number">28</span></span><br><span class="line">        <span class="keyword">elif</span> cday == <span class="number">31</span> <span class="keyword">and</span> cmonth <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">12</span>]:</span><br><span class="line">            cday = <span class="number">31</span></span><br><span class="line">        <span class="keyword">elif</span> cday == <span class="number">31</span> <span class="keyword">and</span> cmonth <span class="keyword">in</span> [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">11</span>]:</span><br><span class="line">            cday = <span class="number">30</span></span><br><span class="line">    <span class="keyword">return</span> date(cyear,cmonth,cday)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对age进行填充，使用到了list的赋值</span></span><br><span class="line">df[<span class="string">'age'</span>] = [i+<span class="number">20</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(df.shape[<span class="number">1</span>])]</span><br><span class="line"><span class="comment"># 使用循环index，来对每一项进行赋值</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> df.index:</span><br><span class="line">    <span class="comment"># 用到了三目运算，实现交叉数据填充</span></span><br><span class="line">    df[<span class="string">'drink'</span>][i] = <span class="string">'like'</span> <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="string">'hate'</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># day递增的情况：day的相加有对应的函数</span></span><br><span class="line">    df[<span class="string">'birthday'</span>][i] = start + timedelta(days=i)</span><br><span class="line"><span class="comment"># year递增的情况：year的相加可以在year上直接添加</span></span><br><span class="line">    df[<span class="string">'birthday'</span>][i] = date(start.year+i, start.month, start.day)</span><br><span class="line"><span class="comment"># month递增的情况：比较复杂，涉及到year与month进位的问题，调用自定义函数实现</span></span><br><span class="line">    df[<span class="string">'birthday'</span>][i] = add_month(start,i+<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line">=======================================================================================</span><br><span class="line">name  age    birthday drink</span><br><span class="line"><span class="number">0</span>   李白   <span class="number">20</span>  <span class="number">1600</span><span class="number">-11</span><span class="number">-30</span>  like</span><br><span class="line"><span class="number">1</span>   杜甫   <span class="number">21</span>  <span class="number">1601</span><span class="number">-12</span><span class="number">-31</span>  hate</span><br><span class="line"><span class="number">2</span>  白居易   <span class="number">22</span>  <span class="number">1601</span><span class="number">-01</span><span class="number">-31</span>  like</span><br><span class="line"><span class="number">3</span>   王维   <span class="number">23</span>  <span class="number">1601</span><span class="number">-02</span><span class="number">-28</span>  hate</span><br><span class="line">=======================================================================================</span><br></pre></td></tr></table></figure><h2 id="计算功能"><a href="#计算功能" class="headerlink" title="计算功能"></a>计算功能</h2><h3 id="x轴向乘法"><a href="#x轴向乘法" class="headerlink" title="x轴向乘法"></a>x轴向乘法</h3><p>使用到了pandas特有的list相乘，以及list展开相乘（这在python语法中是没有的，乘也是list的复制）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">sr1 = pd.Series([<span class="number">21</span>,<span class="number">18</span>,<span class="number">22</span>,<span class="number">24</span>])</span><br><span class="line">sr2 = pd.Series([<span class="number">80</span>,<span class="number">80</span>,<span class="number">80</span>,<span class="number">100</span>])</span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">'A'</span>:sr1, <span class="string">'B'</span>:sr2&#125;)</span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pandas的list乘</span></span><br><span class="line">df[<span class="string">'C'</span>] = df[<span class="string">'A'</span>] * df[<span class="string">'B'</span>]</span><br><span class="line">df[<span class="string">'D'</span>] = df[<span class="string">'C'</span>] * <span class="number">100</span></span><br><span class="line"><span class="comment"># 可以使用apply()</span></span><br><span class="line">df[<span class="string">'E'</span>] = df[<span class="string">'B'</span>].apply(<span class="keyword">lambda</span> x:x+<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line">A    B</span><br><span class="line"><span class="number">0</span>  <span class="number">21</span>   <span class="number">80</span></span><br><span class="line"><span class="number">1</span>  <span class="number">18</span>   <span class="number">80</span></span><br><span class="line"><span class="number">2</span>  <span class="number">22</span>   <span class="number">80</span></span><br><span class="line"><span class="number">3</span>  <span class="number">24</span>  <span class="number">100</span></span><br><span class="line">    A    B     C       D    E</span><br><span class="line"><span class="number">0</span>  <span class="number">21</span>   <span class="number">80</span>  <span class="number">1680</span>  <span class="number">168000</span>   <span class="number">82</span></span><br><span class="line"><span class="number">1</span>  <span class="number">18</span>   <span class="number">80</span>  <span class="number">1440</span>  <span class="number">144000</span>   <span class="number">82</span></span><br><span class="line"><span class="number">2</span>  <span class="number">22</span>   <span class="number">80</span>  <span class="number">1760</span>  <span class="number">176000</span>   <span class="number">82</span></span><br><span class="line"><span class="number">3</span>  <span class="number">24</span>  <span class="number">100</span>  <span class="number">2400</span>  <span class="number">240000</span>  <span class="number">102</span></span><br></pre></td></tr></table></figure><h3 id="x轴向求和-平均"><a href="#x轴向求和-平均" class="headerlink" title="x轴向求和/平均"></a>x轴向求和/平均</h3><p>前面都是使用的Series来进行计算的，如果需要的不止一列的数据呢？比如说需要每一行的和和平均值，当然也可以将所有列写出来计算，但是有点麻烦，其实可以指定轴。它会自动过滤掉文字列，只计算数字列。(索引不会计算)</p><p><code>axis=1</code>指定x轴，按行计算，从上到下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df1 = pd.read_excel(<span class="string">'~/Desktop/1.xlsx'</span>, sheet_name=<span class="string">'Sheet1'</span>)</span><br><span class="line">df2 = pd.read_excel(<span class="string">'~/Desktop/1.xlsx'</span>, sheet_name=<span class="string">'Sheet2'</span>)</span><br><span class="line"></span><br><span class="line">table = df1.join(df2, how=<span class="string">'left'</span>).fillna(<span class="number">0</span>)</span><br><span class="line">table[<span class="string">'qq'</span>] = table[<span class="string">'qq'</span>].astype(int)</span><br><span class="line"></span><br><span class="line">table[<span class="string">'sum'</span>] = table.sum(axis=<span class="number">1</span>)</span><br><span class="line">table[<span class="string">'mean'</span>] = table.mean(axis=<span class="number">1</span>).astype(int)</span><br><span class="line">print(table)</span><br><span class="line"></span><br><span class="line">name  age  score student          qq         sum        mean</span><br><span class="line"><span class="number">0</span>   韩信   <span class="number">21</span>     <span class="number">80</span>      韩信   <span class="number">124242423</span>   <span class="number">124242524</span>    <span class="number">62121262</span></span><br><span class="line"><span class="number">1</span>   赵云   <span class="number">22</span>     <span class="number">10</span>      赵云    <span class="number">12342356</span>    <span class="number">12342388</span>     <span class="number">6171194</span></span><br><span class="line"><span class="number">2</span>   李白   <span class="number">22</span>     <span class="number">30</span>      李白   <span class="number">574534563</span>   <span class="number">574534615</span>   <span class="number">287267307</span></span><br><span class="line"><span class="number">3</span>   杜甫   <span class="number">24</span>    <span class="number">100</span>      杜甫     <span class="number">6785842</span>     <span class="number">6785966</span>     <span class="number">3392983</span></span><br><span class="line"><span class="number">4</span>   曹操   <span class="number">18</span>     <span class="number">75</span>      曹操    <span class="number">34563342</span>    <span class="number">34563435</span>    <span class="number">17281717</span></span><br><span class="line"><span class="number">5</span>   姜尚   <span class="number">45</span>     <span class="number">75</span>      姜尚    <span class="number">57845262</span>    <span class="number">57845382</span>    <span class="number">28922691</span></span><br><span class="line"><span class="number">6</span>   阿狗   <span class="number">23</span>     <span class="number">11</span>      阿狗    <span class="number">45645834</span>    <span class="number">45645868</span>    <span class="number">22822934</span></span><br><span class="line"><span class="number">7</span>   筱倩    <span class="number">3</span>     <span class="number">99</span>      筱倩    <span class="number">58364743</span>    <span class="number">58364845</span>    <span class="number">29182422</span></span><br><span class="line"><span class="number">8</span>   夫子  <span class="number">123</span>    <span class="number">107</span>      夫子  <span class="number">4824854834</span>  <span class="number">4824855064</span>  <span class="number">2412427532</span></span><br><span class="line"><span class="number">9</span>   葛聂   <span class="number">33</span>     <span class="number">90</span>       <span class="number">0</span>           <span class="number">0</span>         <span class="number">123</span>          <span class="number">61</span></span><br></pre></td></tr></table></figure><h3 id="y轴向求和-平均并添加到DataFrame"><a href="#y轴向求和-平均并添加到DataFrame" class="headerlink" title="y轴向求和/平均并添加到DataFrame"></a>y轴向求和/平均并添加到DataFrame</h3><ul><li>必须设置<code>ignore_index=True</code>，否则无法添加</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df1 = pd.read_excel(<span class="string">'~/Desktop/1.xlsx'</span>, sheet_name=<span class="string">'Sheet1'</span>)</span><br><span class="line">df2 = pd.read_excel(<span class="string">'~/Desktop/1.xlsx'</span>, sheet_name=<span class="string">'Sheet2'</span>)</span><br><span class="line"></span><br><span class="line">table = df1.join(df2, how=<span class="string">'left'</span>).fillna(<span class="number">0</span>)</span><br><span class="line">table[<span class="string">'qq'</span>] = table[<span class="string">'qq'</span>].astype(int)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里省略了axis=0,因为这是默认值</span></span><br><span class="line">total = table.mean()</span><br><span class="line">sum = table.sum()</span><br><span class="line"><span class="comment"># total为一个Series，可以设置name值</span></span><br><span class="line">total[<span class="string">'name'</span>] = <span class="string">'平均值'</span></span><br><span class="line">sum[<span class="string">'name'</span>] = <span class="string">'总和'</span></span><br><span class="line"><span class="comment"># 将Nan转为空</span></span><br><span class="line">table = table.append([total,sum], ignore_index=<span class="literal">True</span>).fillna(<span class="string">''</span>)</span><br><span class="line">print(table)</span><br><span class="line"></span><br><span class="line">name    age  score student            qq</span><br><span class="line"><span class="number">0</span>    韩信   <span class="number">21.0</span>   <span class="number">80.0</span>      韩信  <span class="number">1.242424e+08</span></span><br><span class="line"><span class="number">1</span>    赵云   <span class="number">22.0</span>   <span class="number">10.0</span>      赵云  <span class="number">1.234236e+07</span></span><br><span class="line"><span class="number">2</span>    李白   <span class="number">22.0</span>   <span class="number">30.0</span>      李白  <span class="number">5.745346e+08</span></span><br><span class="line"><span class="number">3</span>    杜甫   <span class="number">24.0</span>  <span class="number">100.0</span>      杜甫  <span class="number">6.785842e+06</span></span><br><span class="line"><span class="number">4</span>    曹操   <span class="number">18.0</span>   <span class="number">75.0</span>      曹操  <span class="number">3.456334e+07</span></span><br><span class="line"><span class="number">5</span>    姜尚   <span class="number">45.0</span>   <span class="number">75.0</span>      姜尚  <span class="number">5.784526e+07</span></span><br><span class="line"><span class="number">6</span>    阿狗   <span class="number">23.0</span>   <span class="number">11.0</span>      阿狗  <span class="number">4.564583e+07</span></span><br><span class="line"><span class="number">7</span>    筱倩    <span class="number">3.0</span>   <span class="number">99.0</span>      筱倩  <span class="number">5.836474e+07</span></span><br><span class="line"><span class="number">8</span>    夫子  <span class="number">123.0</span>  <span class="number">107.0</span>      夫子  <span class="number">4.824855e+09</span></span><br><span class="line"><span class="number">9</span>    葛聂   <span class="number">33.0</span>   <span class="number">90.0</span>       <span class="number">0</span>  <span class="number">0.000000e+00</span></span><br><span class="line"><span class="number">10</span>  平均值   <span class="number">33.4</span>   <span class="number">67.7</span>          <span class="number">5.739179e+08</span></span><br><span class="line"><span class="number">11</span>   总和  <span class="number">334.0</span>  <span class="number">677.0</span>          <span class="number">5.739179e+09</span></span><br></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p><code>.sort_values(by=[],inplace=True,ascending=[False])</code></p><p>默认生成一个新的DataFrame，使用inplace=True在原DataFrame上修改</p><p>默认使用升序排列，用ascending=False来降序排列</p><ol><li>对一列数据进行排序</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">sr2 = pd.Series([<span class="number">21</span>,<span class="number">18</span>,<span class="number">22</span>,<span class="number">22</span>,<span class="number">24</span>])</span><br><span class="line">sr3 = pd.Series([<span class="number">80</span>,<span class="number">80</span>,<span class="number">60</span>,<span class="number">80</span>,<span class="number">100</span>])</span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">'A'</span>:sr2, <span class="string">'B'</span>:sr3&#125;)</span><br><span class="line">df.set_index(<span class="string">'A'</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">df.sort_values(by=<span class="string">'A'</span>, inplace=<span class="literal">True</span>, ascending=<span class="literal">False</span>)</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure><ol start="2"><li>对多列数据进行排序，而且第一列倒序，第二列升序</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">sr2 = pd.Series([<span class="number">21</span>,<span class="number">18</span>,<span class="number">22</span>,<span class="number">22</span>,<span class="number">24</span>])</span><br><span class="line">sr3 = pd.Series([<span class="number">80</span>,<span class="number">80</span>,<span class="number">60</span>,<span class="number">80</span>,<span class="number">100</span>])</span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">'A'</span>:sr2, <span class="string">'B'</span>:sr3&#125;)</span><br><span class="line">df.set_index(<span class="string">'A'</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">df.sort_values(by=[<span class="string">'A'</span>,<span class="string">'B'</span>], inplace=<span class="literal">True</span>, ascending=[<span class="literal">False</span>,<span class="literal">True</span>])</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure><h2 id="数据相关性"><a href="#数据相关性" class="headerlink" title="数据相关性"></a>数据相关性</h2><p>之前在一篇文章中看到<code>df.corr()</code>时，没看懂它到底什么意思，有什么作用。今天看了老师讲的视频，才发现这个东西超级无敌厉害。它就是分析一个表中每两列数据之间的相关性的。</p><ul><li>1.0代表完全相关</li><li>比例越大，相关性越大</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">sr2 = pd.Series([<span class="number">21</span>,<span class="number">18</span>,<span class="number">22</span>,<span class="number">22</span>,<span class="number">24</span>])</span><br><span class="line">sr3 = pd.Series([<span class="number">80</span>,<span class="number">80</span>,<span class="number">60</span>,<span class="number">80</span>,<span class="number">100</span>])</span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">'age'</span>:sr2, <span class="string">'score'</span>:sr3&#125;)</span><br><span class="line">df.corr()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看出score与age之间的相关性比较小，仅有0.3</span></span><br><span class="line">agescore</span><br><span class="line">age<span class="number">1.000000</span><span class="number">0.322749</span></span><br><span class="line">score<span class="number">0.322749</span><span class="number">1.000000</span></span><br></pre></td></tr></table></figure><h2 id="从不同sheet页读取"><a href="#从不同sheet页读取" class="headerlink" title="从不同sheet页读取"></a>从不同sheet页读取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df1 = pd.read_excel(<span class="string">'~/Desktop/1.xlsx'</span>, sheet_name=<span class="string">'Sheet1'</span>)</span><br><span class="line">df2 = pd.read_excel(<span class="string">'~/Desktop/1.xlsx'</span>, sheet_name=<span class="string">'Sheet2'</span>)</span><br><span class="line"></span><br><span class="line">print(df1)</span><br><span class="line">print(df2)</span><br><span class="line"><span class="comment"># table = df1.merge(df2, on='name')</span></span><br><span class="line"><span class="comment"># print(table)</span></span><br><span class="line">name  age  score</span><br><span class="line"><span class="number">0</span>   韩信   <span class="number">21</span>     <span class="number">80</span></span><br><span class="line"><span class="number">1</span>   赵云   <span class="number">22</span>     <span class="number">10</span></span><br><span class="line"><span class="number">2</span>   李白   <span class="number">22</span>     <span class="number">30</span></span><br><span class="line"><span class="number">3</span>   杜甫   <span class="number">24</span>    <span class="number">100</span></span><br><span class="line"><span class="number">4</span>   曹操   <span class="number">18</span>     <span class="number">75</span></span><br><span class="line"><span class="number">5</span>   姜尚   <span class="number">45</span>     <span class="number">75</span></span><br><span class="line"><span class="number">6</span>   阿狗   <span class="number">23</span>     <span class="number">11</span></span><br><span class="line"><span class="number">7</span>   筱倩    <span class="number">3</span>     <span class="number">99</span></span><br><span class="line"><span class="number">8</span>   夫子  <span class="number">123</span>    <span class="number">107</span></span><br><span class="line"><span class="number">9</span>   葛聂   <span class="number">33</span>     <span class="number">90</span></span><br><span class="line">  name          qq</span><br><span class="line"><span class="number">0</span>   韩信   <span class="number">124242423</span></span><br><span class="line"><span class="number">1</span>   赵云    <span class="number">12342356</span></span><br><span class="line"><span class="number">2</span>   李白   <span class="number">574534563</span></span><br><span class="line"><span class="number">3</span>   杜甫     <span class="number">6785842</span></span><br><span class="line"><span class="number">4</span>   曹操    <span class="number">34563342</span></span><br><span class="line"><span class="number">5</span>   姜尚    <span class="number">57845262</span></span><br><span class="line"><span class="number">6</span>   阿狗    <span class="number">45645834</span></span><br><span class="line"><span class="number">7</span>   筱倩    <span class="number">58364743</span></span><br><span class="line"><span class="number">8</span>   夫子  <span class="number">4824854834</span></span><br></pre></td></tr></table></figure><h2 id="多表联合查询"><a href="#多表联合查询" class="headerlink" title="多表联合查询"></a>多表联合查询</h2><p>用到了与数据库类似的操作，merge两个DataFrame，默认为inner join,可以设置left/right join</p><ul><li><code>df.merge()</code>需要指定关联的列，具有内连接，左/右连接</li><li><code>df.join()</code>默认使用index作为关联的列，不具有内连接，左/右连接</li><li><code>pandas.concat([],axis=num)</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df1 = pd.read_excel(<span class="string">'~/Desktop/1.xlsx'</span>, sheet_name=<span class="string">'Sheet1'</span>)</span><br><span class="line">df2 = pd.read_excel(<span class="string">'~/Desktop/1.xlsx'</span>, sheet_name=<span class="string">'Sheet2'</span>)</span><br><span class="line"></span><br><span class="line">table = df1.merge(df2, on=<span class="string">'name'</span>)</span><br><span class="line">print(table)</span><br><span class="line"></span><br><span class="line">name  age  score          qq</span><br><span class="line"><span class="number">0</span>   韩信   <span class="number">21</span>     <span class="number">80</span>   <span class="number">124242423</span></span><br><span class="line"><span class="number">1</span>   赵云   <span class="number">22</span>     <span class="number">10</span>    <span class="number">12342356</span></span><br><span class="line"><span class="number">2</span>   李白   <span class="number">22</span>     <span class="number">30</span>   <span class="number">574534563</span></span><br><span class="line"><span class="number">3</span>   杜甫   <span class="number">24</span>    <span class="number">100</span>     <span class="number">6785842</span></span><br><span class="line"><span class="number">4</span>   曹操   <span class="number">18</span>     <span class="number">75</span>    <span class="number">34563342</span></span><br><span class="line"><span class="number">5</span>   姜尚   <span class="number">45</span>     <span class="number">75</span>    <span class="number">57845262</span></span><br><span class="line"><span class="number">6</span>   阿狗   <span class="number">23</span>     <span class="number">11</span>    <span class="number">45645834</span></span><br><span class="line"><span class="number">7</span>   筱倩    <span class="number">3</span>     <span class="number">99</span>    <span class="number">58364743</span></span><br><span class="line"><span class="number">8</span>   夫子  <span class="number">123</span>    <span class="number">107</span>  <span class="number">4824854834</span></span><br></pre></td></tr></table></figure><p>可以发现默认是使用的inner join，要df1的数据全部显示出来，使用left join方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">table = df1.merge(df2, how=<span class="string">'left'</span>, on=<span class="string">'name'</span>)</span><br></pre></td></tr></table></figure><p>如果要关联的两张表的columns名字不同，那么不能使用<code>on</code>，而需要使用<code>left_on=&#39;&#39;,right_on=&#39;&#39;</code>来连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">name  age  score</span><br><span class="line"><span class="number">0</span>   韩信   <span class="number">21</span>     <span class="number">80</span></span><br><span class="line"><span class="number">1</span>   赵云   <span class="number">22</span>     <span class="number">10</span></span><br><span class="line"><span class="number">2</span>   李白   <span class="number">22</span>     <span class="number">30</span></span><br><span class="line"><span class="number">3</span>   杜甫   <span class="number">24</span>    <span class="number">100</span></span><br><span class="line"><span class="number">4</span>   曹操   <span class="number">18</span>     <span class="number">75</span></span><br><span class="line"><span class="number">5</span>   姜尚   <span class="number">45</span>     <span class="number">75</span></span><br><span class="line"><span class="number">6</span>   阿狗   <span class="number">23</span>     <span class="number">11</span></span><br><span class="line"><span class="number">7</span>   筱倩    <span class="number">3</span>     <span class="number">99</span></span><br><span class="line"><span class="number">8</span>   夫子  <span class="number">123</span>    <span class="number">107</span></span><br><span class="line"><span class="number">9</span>   葛聂   <span class="number">33</span>     <span class="number">90</span></span><br><span class="line"></span><br><span class="line">  student          qq</span><br><span class="line"><span class="number">0</span>      韩信   <span class="number">124242423</span></span><br><span class="line"><span class="number">1</span>      赵云    <span class="number">12342356</span></span><br><span class="line"><span class="number">2</span>      李白   <span class="number">574534563</span></span><br><span class="line"><span class="number">3</span>      杜甫     <span class="number">6785842</span></span><br><span class="line"><span class="number">4</span>      曹操    <span class="number">34563342</span></span><br><span class="line"><span class="number">5</span>      姜尚    <span class="number">57845262</span></span><br><span class="line"><span class="number">6</span>      阿狗    <span class="number">45645834</span></span><br><span class="line"><span class="number">7</span>      筱倩    <span class="number">58364743</span></span><br><span class="line"><span class="number">8</span>      夫子  <span class="number">4824854834</span></span><br></pre></td></tr></table></figure><p>关联之后数据会出现Nan值，使用<code>fillna()</code>函数来填充null</p><p>如果显示的是小数或者科学计数，可以使用<code>astype()</code>设置为数据类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df1 = pd.read_excel(<span class="string">'~/Desktop/1.xlsx'</span>, sheet_name=<span class="string">'Sheet1'</span>)</span><br><span class="line">df2 = pd.read_excel(<span class="string">'~/Desktop/1.xlsx'</span>, sheet_name=<span class="string">'Sheet2'</span>)</span><br><span class="line"></span><br><span class="line">table = df1.merge(df2, how=<span class="string">'left'</span>, left_on=<span class="string">'name'</span>, right_on=<span class="string">'student'</span>).fillna(<span class="number">0</span>)</span><br><span class="line">table[<span class="string">'qq'</span>] = table[<span class="string">'qq'</span>].astype(int)</span><br><span class="line">print(table)</span><br><span class="line"></span><br><span class="line">name  age  score student          qq</span><br><span class="line"><span class="number">0</span>   韩信   <span class="number">21</span>     <span class="number">80</span>      韩信   <span class="number">124242423</span></span><br><span class="line"><span class="number">1</span>   赵云   <span class="number">22</span>     <span class="number">10</span>      赵云    <span class="number">12342356</span></span><br><span class="line"><span class="number">2</span>   李白   <span class="number">22</span>     <span class="number">30</span>      李白   <span class="number">574534563</span></span><br><span class="line"><span class="number">3</span>   杜甫   <span class="number">24</span>    <span class="number">100</span>      杜甫     <span class="number">6785842</span></span><br><span class="line"><span class="number">4</span>   曹操   <span class="number">18</span>     <span class="number">75</span>      曹操    <span class="number">34563342</span></span><br><span class="line"><span class="number">5</span>   姜尚   <span class="number">45</span>     <span class="number">75</span>      姜尚    <span class="number">57845262</span></span><br><span class="line"><span class="number">6</span>   阿狗   <span class="number">23</span>     <span class="number">11</span>      阿狗    <span class="number">45645834</span></span><br><span class="line"><span class="number">7</span>   筱倩    <span class="number">3</span>     <span class="number">99</span>      筱倩    <span class="number">58364743</span></span><br><span class="line"><span class="number">8</span>   夫子  <span class="number">123</span>    <span class="number">107</span>      夫子  <span class="number">4824854834</span></span><br><span class="line"><span class="number">9</span>   葛聂   <span class="number">33</span>     <span class="number">90</span>       <span class="number">0</span>           <span class="number">0</span></span><br></pre></td></tr></table></figure><p>使用<code>join()</code>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df1 = pd.read_excel(<span class="string">'~/Desktop/1.xlsx'</span>, sheet_name=<span class="string">'Sheet1'</span>)</span><br><span class="line">df2 = pd.read_excel(<span class="string">'~/Desktop/1.xlsx'</span>, sheet_name=<span class="string">'Sheet2'</span>)</span><br><span class="line"></span><br><span class="line">table = df1.join(df2, how=<span class="string">'left'</span>).fillna(<span class="number">0</span>)</span><br><span class="line">table[<span class="string">'qq'</span>] = table[<span class="string">'qq'</span>].astype(int)</span><br><span class="line">print(table)</span><br><span class="line"></span><br><span class="line">name  age  score student          qq</span><br><span class="line"><span class="number">0</span>   韩信   <span class="number">21</span>     <span class="number">80</span>      韩信   <span class="number">124242423</span></span><br><span class="line"><span class="number">1</span>   赵云   <span class="number">22</span>     <span class="number">10</span>      赵云    <span class="number">12342356</span></span><br><span class="line"><span class="number">2</span>   李白   <span class="number">22</span>     <span class="number">30</span>      李白   <span class="number">574534563</span></span><br><span class="line"><span class="number">3</span>   杜甫   <span class="number">24</span>    <span class="number">100</span>      杜甫     <span class="number">6785842</span></span><br><span class="line"><span class="number">4</span>   曹操   <span class="number">18</span>     <span class="number">75</span>      曹操    <span class="number">34563342</span></span><br><span class="line"><span class="number">5</span>   姜尚   <span class="number">45</span>     <span class="number">75</span>      姜尚    <span class="number">57845262</span></span><br><span class="line"><span class="number">6</span>   阿狗   <span class="number">23</span>     <span class="number">11</span>      阿狗    <span class="number">45645834</span></span><br><span class="line"><span class="number">7</span>   筱倩    <span class="number">3</span>     <span class="number">99</span>      筱倩    <span class="number">58364743</span></span><br><span class="line"><span class="number">8</span>   夫子  <span class="number">123</span>    <span class="number">107</span>      夫子  <span class="number">4824854834</span></span><br><span class="line"><span class="number">9</span>   葛聂   <span class="number">33</span>     <span class="number">90</span>       <span class="number">0</span>           <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="数据列分割"><a href="#数据列分割" class="headerlink" title="数据列分割"></a>数据列分割</h2><p>使用到了<code>Series.str.split()</code>方法，另外<code>Series.str</code>有很多方法可以用，可以对字符串进行各种操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">'A'</span>:[<span class="string">"hello joyce"</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">8</span>)]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"><span class="comment"># 不使用expand，那么数据会作为一个list</span></span><br><span class="line">info = df.A.str.split(expand=<span class="literal">True</span>)</span><br><span class="line">df[<span class="string">'first'</span>] = info[<span class="number">0</span>]</span><br><span class="line">df[<span class="string">'last'</span>] = info[<span class="number">1</span>]</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure><h2 id="行列转换"><a href="#行列转换" class="headerlink" title="行列转换"></a>行列转换</h2><p><code>df.transpose()</code>即可，为了避免旋转后第一行为index，所以在读取的时候需要指定index</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">'~/Desktop/1.xlsx'</span>, index_col=<span class="string">'name'</span>)</span><br><span class="line">df = df.transpose()</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure><h2 id="提取日期"><a href="#提取日期" class="headerlink" title="提取日期"></a>提取日期</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pandas.DatetimeIndex(df[<span class="string">'column_name'</span>]).year</span><br><span class="line">pandas.DatetimeIndex(df[<span class="string">'column_name'</span>]).month</span><br><span class="line">pandas.DatetimeIndex(df[<span class="string">'column_name'</span>]).day</span><br></pre></td></tr></table></figure><h2 id="分组，聚合"><a href="#分组，聚合" class="headerlink" title="分组，聚合"></a>分组，聚合</h2><p>模拟透视表功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df.pivot_table(index=<span class="string">'column_name'</span>, columns=<span class="string">'column_name'</span>, value=<span class="string">'column_name'</span>, aggfunc=np.sum)</span><br></pre></td></tr></table></figure><p>分组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groups = df.groupby(<span class="string">'column_name'</span>)</span><br></pre></td></tr></table></figure><p>聚合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S = groups[<span class="string">'column_name'</span>].sum()</span><br></pre></td></tr></table></figure><h2 id="条件颜色"><a href="#条件颜色" class="headerlink" title="条件颜色"></a>条件颜色</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">colorlize</span><span class="params">(x)</span>:</span></span><br><span class="line">    colors = <span class="string">'orange'</span> <span class="keyword">if</span> x &lt; <span class="number">60</span> <span class="keyword">else</span> <span class="string">'lime'</span></span><br><span class="line">    <span class="comment"># 这里返回的格式必须要是这样</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f'color:<span class="subst">&#123;colors&#125;</span>'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">another</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="comment"># 这里需要返回一个list</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="string">'color:red'</span> <span class="keyword">if</span> v &gt; <span class="number">90</span> <span class="keyword">else</span> <span class="string">'background-color:black'</span> <span class="keyword">for</span> v <span class="keyword">in</span> x] </span><br><span class="line">    </span><br><span class="line">df = pd.read_excel(<span class="string">'~/Desktop/1.xlsx'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可直接添加在后面</span></span><br><span class="line"><span class="comment"># df.style.apply(another, subset=['age','score'])</span></span><br><span class="line">df.style.applymap(colorlize, subset=[<span class="string">'age'</span>,<span class="string">'score'</span>]).apply(another, subset=[<span class="string">'age'</span>,<span class="string">'score'</span>])</span><br></pre></td></tr></table></figure><p><img src="/home/narcissus/.config/Typora/typora-user-images/image-20200418202939418.png" alt="image-20200418202939418"></p><p>需要注意的：</p><ul><li><code>df.style.applymap()</code>获取到的是每一个值</li><li><code>df.style.apply()</code>获取到的是一个Series，但是需要用for循环读取每一个值，这和之前用的<code>df.apply()</code>自动循环每一个值不同</li></ul><h2 id="颜色条"><a href="#颜色条" class="headerlink" title="颜色条"></a>颜色条</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">'~/Desktop/1.xlsx'</span>)</span><br><span class="line">df.style.bar(color=<span class="string">'pink'</span>, subset=[<span class="string">'age'</span>,<span class="string">'score'</span>])</span><br></pre></td></tr></table></figure><p><img src="/home/narcissus/.config/Typora/typora-user-images/image-20200418204331053.png" alt="image-20200418204331053"></p><h2 id="渐变颜色"><a href="#渐变颜色" class="headerlink" title="渐变颜色"></a>渐变颜色</h2><p>需要下载seaborn模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install seaborn</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sn</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">'~/Desktop/1.xlsx'</span>)</span><br><span class="line">color_map = sn.light_palette(<span class="string">'pink'</span>, as_cmap=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">df.style.background_gradient(color_map, subset=[<span class="string">'age'</span>, <span class="string">'score'</span>])</span><br></pre></td></tr></table></figure><p><img src="/home/narcissus/.config/Typora/typora-user-images/image-20200418204439512.png" alt="image-20200418204439512"></p><hr><h1 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h1><h2 id="Series序列"><a href="#Series序列" class="headerlink" title="Series序列"></a>Series序列</h2><p>用来生成一维数据。类似list数据类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">"name"</span>:[<span class="string">"韩信"</span>,<span class="string">"貂蝉"</span>,<span class="string">"李白"</span>,<span class="string">"杜甫"</span>], <span class="string">"age"</span>:[<span class="number">21</span>,<span class="number">18</span>,<span class="number">22</span>,<span class="number">24</span>], <span class="string">"score"</span>:[<span class="number">80</span>,<span class="number">80</span>,<span class="number">80</span>,<span class="number">100</span>]&#125;</span><br><span class="line">sr = pd.Series(data)</span><br><span class="line">print(sr)</span><br><span class="line"></span><br><span class="line">name      [韩信, 貂蝉, 李白, 杜甫]</span><br><span class="line">age       [<span class="number">21</span>, <span class="number">18</span>, <span class="number">22</span>, <span class="number">24</span>]</span><br><span class="line">score    [<span class="number">80</span>, <span class="number">80</span>, <span class="number">80</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure><h2 id="Series组装DataFrame"><a href="#Series组装DataFrame" class="headerlink" title="Series组装DataFrame"></a>Series组装DataFrame</h2><ol><li>使用<code>dict</code>组装。不指定index时，使用默认的index</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">sr1 = pd.Series([<span class="string">"韩信"</span>,<span class="string">"貂蝉"</span>,<span class="string">"李白"</span>,<span class="string">"杜甫"</span>])</span><br><span class="line">sr2 = pd.Series([<span class="number">21</span>,<span class="number">18</span>,<span class="number">22</span>,<span class="number">24</span>])</span><br><span class="line">sr3 = pd.Series([<span class="number">80</span>,<span class="number">80</span>,<span class="number">80</span>,<span class="number">100</span>])</span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">'name'</span>:sr1, <span class="string">'age'</span>:sr2, <span class="string">'score'</span>:sr3&#125;)</span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line">  name  age  score</span><br><span class="line"><span class="number">0</span>   韩信   <span class="number">21</span>     <span class="number">80</span></span><br><span class="line"><span class="number">1</span>   貂蝉   <span class="number">18</span>     <span class="number">80</span></span><br><span class="line"><span class="number">2</span>   李白   <span class="number">22</span>     <span class="number">80</span></span><br><span class="line"><span class="number">3</span>   杜甫   <span class="number">24</span>    <span class="number">100</span></span><br></pre></td></tr></table></figure><ol start="2"><li>还可以手动指定index</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">sr1 = pd.Series([<span class="string">"韩信"</span>,<span class="string">"貂蝉"</span>,<span class="string">"李白"</span>,<span class="string">"杜甫"</span>], index=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>), name=<span class="string">'name'</span>)</span><br><span class="line">sr2 = pd.Series([<span class="number">21</span>,<span class="number">18</span>,<span class="number">22</span>,<span class="number">24</span>], index=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>), name=<span class="string">'age'</span>)</span><br><span class="line">sr3 = pd.Series([<span class="number">80</span>,<span class="number">80</span>,<span class="number">80</span>,<span class="number">100</span>], index=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">df = pd.DataFrame(&#123;sr1.name:sr1, sr2.name:sr2, sr3.name:sr3&#125;)</span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line">  name  age  NaN</span><br><span class="line"><span class="number">1</span>   韩信   <span class="number">21</span>   <span class="number">80</span></span><br><span class="line"><span class="number">2</span>   貂蝉   <span class="number">18</span>   <span class="number">80</span></span><br><span class="line"><span class="number">3</span>   李白   <span class="number">22</span>   <span class="number">80</span></span><br><span class="line"><span class="number">4</span>   杜甫   <span class="number">24</span>  <span class="number">100</span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用<code>list</code>组装。如果不指定index和name，那么会用默认的index来填充columns和index</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">sr1 = pd.Series([<span class="string">"韩信"</span>,<span class="string">"貂蝉"</span>,<span class="string">"李白"</span>,<span class="string">"杜甫"</span>],  index=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>), name=<span class="string">'name'</span>)</span><br><span class="line">sr2 = pd.Series([<span class="number">21</span>,<span class="number">18</span>,<span class="number">22</span>,<span class="number">24</span>], index=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>), name=<span class="string">'age'</span>)</span><br><span class="line">sr3 = pd.Series([<span class="number">80</span>,<span class="number">80</span>,<span class="number">80</span>,<span class="number">100</span>], index=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>), name=<span class="string">'score'</span>)</span><br><span class="line">df = pd.DataFrame([sr1, sr2, sr3])</span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line">        <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>    <span class="number">4</span></span><br><span class="line">name   韩信  貂蝉  李白   杜甫</span><br><span class="line">age    <span class="number">21</span>  <span class="number">18</span>  <span class="number">22</span>   <span class="number">24</span></span><br><span class="line">score  <span class="number">80</span>  <span class="number">80</span>  <span class="number">80</span>  <span class="number">100</span></span><br></pre></td></tr></table></figure><p><em>可以发现，使用list来组装DataFrame时，会将Series以行的形式展示。如果用dict来组装，那么会将Series以列的形式组装。</em></p><h2 id="DataFrame取出Series"><a href="#DataFrame取出Series" class="headerlink" title="DataFrame取出Series"></a>DataFrame取出Series</h2><p>两种方式：</p><ul><li>这种就是python自身的语法，DataFrame由字典组成，所以使用<code>df[&#39;column_name&#39;]</code>即可</li><li>使用pandas DataFrame数据结构的语法，<code>df.column_name</code>也可以</li></ul><hr><h1 id="制图"><a href="#制图" class="headerlink" title="制图"></a>制图</h1><p>pandas是构建于matplotlib之上，所以需要先下载</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># matplotlib (3.2.1)                 - Python plotting package</span></span><br><span class="line">pip install matplotlib</span><br></pre></td></tr></table></figure><p>使用到的数据：</p><p><img src="/home/narcissus/.config/Typora/typora-user-images/image-20200417203430726.png" alt="1.xlsx"></p><h2 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h2><p>第一个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">'~/Desktop/1.xlsx'</span>, skiprows=<span class="number">1</span>, usecols=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="comment"># 先排score，再排age，从大到小</span></span><br><span class="line">df.sort_values(by=[<span class="string">'score'</span>,<span class="string">'age'</span>], inplace=<span class="literal">True</span>, ascending=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># pandas支持制图</span></span><br><span class="line">df.plot.bar(x=<span class="string">'name'</span>, y=[<span class="string">'score'</span>,<span class="string">'age'</span>], color=[<span class="string">'lightblue'</span>,<span class="string">'orange'</span>])</span><br><span class="line"><span class="comment"># 紧凑显示</span></span><br><span class="line">plt.tight_layout()</span><br><span class="line"><span class="comment"># 使用matplotlib来渲染</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/home/narcissus/.config/Typora/typora-user-images/image-20200417192602580.png" alt="image-20200417192602580"></p><h2 id="中文支持"><a href="#中文支持" class="headerlink" title="中文支持"></a>中文支持</h2><p>默认matplotlib无法显示中文，需要从matplotlib导入font_manager</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager</span><br></pre></td></tr></table></figure><p>查看有那些中文字体</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fc-list :lang=zh</span><br><span class="line"></span><br><span class="line">/usr/share/fonts/wenquanyi/wqy-microhei/wqy-microhei.ttc: WenQuanYi Micro Hei,文泉驛微米黑,文泉驿微米黑:style=Regular</span><br><span class="line">/usr/share/fonts/wenquanyi/wqy-microhei/wqy-microhei.ttc: WenQuanYi Micro Hei Mono,文泉驛等寬微米黑,文泉驿等宽微米黑:style=Regular</span><br></pre></td></tr></table></figure><p>设置font变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font = font_manager.FontProperties(fname=<span class="string">"/usr/share/fonts/wenquanyi/wqy-microhei/wqy-microhei.ttc"</span>)</span><br></pre></td></tr></table></figure><p>在需要显示中文的地方加上fontproperties属性。需要注意只有matplotlib才能加这个属性，所以在需要加这个属性的时候，要用matplotlib来设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.xticks(rotation=<span class="number">40</span>, fontproperties=font)</span><br></pre></td></tr></table></figure><h2 id="使用matplotlib修饰"><a href="#使用matplotlib修饰" class="headerlink" title="使用matplotlib修饰"></a>使用matplotlib修饰</h2><p>matpllotlib比pandas自带的制图功能要多，可定制性更强。导入matplotlib的作用呢就是来补充pandas自身制图功能的一些不足，以及渲染图片。</p><p>由于pandas基于matplotlib，所以这两个可完美的搭配使用。在pandas搞不定的地方就用matplotlib来补充</p><h2 id="分组柱状图"><a href="#分组柱状图" class="headerlink" title="分组柱状图"></a>分组柱状图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager</span><br><span class="line"></span><br><span class="line">font = font_manager.FontProperties(fname=<span class="string">"/usr/share/fonts/wenquanyi/wqy-microhei/wqy-microhei.ttc"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取</span></span><br><span class="line">df = pd.read_excel(<span class="string">'~/Desktop/1.xlsx'</span>, skiprows=<span class="number">1</span>, usecols=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line">df.sort_values(by=[<span class="string">'score'</span>,<span class="string">'age'</span>], inplace=<span class="literal">True</span>, ascending=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 用pandas自身绘制分组柱状图</span></span><br><span class="line">df.plot.bar(x=<span class="string">'name'</span>, y=[<span class="string">'score'</span>,<span class="string">'age'</span>], color=[<span class="string">'lightblue'</span>,<span class="string">'orange'</span>])</span><br><span class="line"><span class="comment"># pandas自身绘图的标签不支持中文，那么用matplotlib来让标签显示中文，以及设置一定旋转角度</span></span><br><span class="line"><span class="comment"># plt.xticks(rotation=20, fontproperties=font, fontsize=14)</span></span><br><span class="line"><span class="comment"># 上面这个无法设置旋转中心，所以使用下面的</span></span><br><span class="line"><span class="comment"># gca获取x轴，ha='right'设置右端对齐</span></span><br><span class="line">px = plt.gca()</span><br><span class="line">px.set_xticklabels(df[<span class="string">'name'</span>], rotation=<span class="number">20</span>, ha=<span class="string">'right'</span>, fontproperties=font, fontsize=<span class="number">14</span>)</span><br><span class="line"><span class="comment"># gcf获取图形的布局</span></span><br><span class="line">pf = plt.gcf()</span><br><span class="line">pf.subplots_adjust(left=<span class="number">0.1</span>)</span><br><span class="line"><span class="comment"># 用matplotlib来设置x轴名称</span></span><br><span class="line">plt.xlabel(<span class="string">'name'</span>, fontsize=<span class="number">20</span>)</span><br><span class="line"><span class="comment"># 用matplotlib来设置y轴名称</span></span><br><span class="line">plt.ylabel(<span class="string">'score'</span>, fontsize=<span class="number">20</span>)</span><br><span class="line"><span class="comment"># 用matplotlib来设置title</span></span><br><span class="line">plt.title(<span class="string">'学习情况统计表'</span>, fontproperties=font, fontsize=<span class="number">24</span>, color=<span class="string">'lightpink'</span>)</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/home/narcissus/Desktop/Figure_1.png" alt=""></p><h2 id="叠加柱状图"><a href="#叠加柱状图" class="headerlink" title="叠加柱状图"></a>叠加柱状图</h2><ul><li>需要自己新计算一个新的列，这个列的值为需要叠加的数据之和</li><li>使用这个新的列作为排序的标准</li><li>y轴仍然为之前的列</li><li>只不过在df.plot.bar显示的时候加了一个参数<code>stacked=True</code>，声明使用叠加的方式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot  <span class="keyword">as</span> plt </span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager</span><br><span class="line"></span><br><span class="line">font = font_manager.FontProperties(fname=<span class="string">"/usr/share/fonts/wenquanyi/wqy-microhei/wqy-microhei.ttc"</span>)</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">'~/Desktop/1.xlsx'</span>, usecols=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], skiprows=<span class="number">1</span>)</span><br><span class="line">df[<span class="string">'total'</span>] = df[<span class="string">'age'</span>] + df[<span class="string">'score'</span>]</span><br><span class="line">df.sort_values(by=<span class="string">'total'</span>, inplace=<span class="literal">True</span>, ascending=<span class="literal">False</span>)</span><br><span class="line">df.plot.bar(x=<span class="string">'name'</span>, y=[<span class="string">'score'</span>, <span class="string">'age'</span>], color=[<span class="string">'brown'</span>,<span class="string">'pink'</span>], stacked=<span class="literal">True</span>)</span><br><span class="line">px = plt.gca()</span><br><span class="line">px.set_xticklabels(df[<span class="string">'name'</span>], rotation=<span class="number">10</span>, ha=<span class="string">'right'</span>, fontproperties=font)</span><br><span class="line">plt.xlabel(<span class="string">'name'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'count'</span>)</span><br><span class="line">plt.title(<span class="string">'学习情况统计'</span>, fontproperties=font, fontsize=<span class="number">22</span>, fontweight=<span class="string">'bold'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/home/narcissus/.config/Typora/typora-user-images/image-20200417202420437.png" alt="image-20200417202420437"></p><h2 id="水平叠加柱状图"><a href="#水平叠加柱状图" class="headerlink" title="水平叠加柱状图"></a>水平叠加柱状图</h2><p>其实只需要改一个参数就可以了，将<code>df.plot.bar</code>改为<code>df.plot.barh</code>就代表水平展示了。</p><ul><li>这个时候的排序可能需要调整一下</li><li>如果自定义了x轴，y轴的话，需要交换一下</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot  <span class="keyword">as</span> plt </span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager</span><br><span class="line"></span><br><span class="line">font = font_manager.FontProperties(fname=<span class="string">"/usr/share/fonts/wenquanyi/wqy-microhei/wqy-microhei.ttc"</span>)</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">'~/Desktop/1.xlsx'</span>, usecols=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], skiprows=<span class="number">1</span>)</span><br><span class="line">df[<span class="string">'total'</span>] = df[<span class="string">'age'</span>] + df[<span class="string">'score'</span>]</span><br><span class="line">df.sort_values(by=<span class="string">'total'</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">df.plot.barh(x=<span class="string">'name'</span>, y=[<span class="string">'score'</span>, <span class="string">'age'</span>], color=[<span class="string">'brown'</span>,<span class="string">'pink'</span>], stacked=<span class="literal">True</span>)</span><br><span class="line">px = plt.gca()</span><br><span class="line">px.set_yticklabels(df[<span class="string">'name'</span>], rotation=<span class="number">10</span>, ha=<span class="string">'right'</span>, fontproperties=font)</span><br><span class="line">plt.xlabel(<span class="string">'count'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'name'</span>)</span><br><span class="line">plt.title(<span class="string">'学习情况统计'</span>, fontproperties=font, fontsize=<span class="number">22</span>, fontweight=<span class="string">'bold'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/home/narcissus/.config/Typora/typora-user-images/image-20200417202957849.png" alt="image-20200417202957849"></p><h2 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h2><p>绘制饼图的优点是可以清晰的看出各部分所占的比例</p><p>与柱状图不同，饼图需要的数据为一个Series，同时在读取数据的时候指定的index会成为饼图显示的信息</p><ul><li>饼图注意点还挺多的，最为重要的就是使用pandas来绘制，无法显示中文，所以采用了plt来绘制</li><li>采用matplotlib时，也无法直接设置字体，需要用循环给具体的对象赋值</li><li>对序列排序，并通过绘制时的顺时针来设置旋转方向</li><li>通过startangle来设置最大值从12点方向开始</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager <span class="keyword">as</span> fm </span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt </span><br><span class="line"></span><br><span class="line">font = fm.FontProperties(fname=<span class="string">"/usr/share/fonts/wenquanyi/wqy-microhei/wqy-microhei.ttc"</span>)</span><br><span class="line">df = pd.read_excel(<span class="string">'~/Desktop/1.xlsx'</span>, skiprows=<span class="number">1</span>, usecols=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="comment"># 为了顺序显示，进行排序。这里没有从大到小排是因为后面绘制的时候可以使用counterclock来设置顺时针排序</span></span><br><span class="line">df.sort_values(by=<span class="string">'score'</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 使用pandas自身的绘图，无法显示中文，所以不采用</span></span><br><span class="line"><span class="comment"># df['score'].plot.pie(labels=df['name'])</span></span><br><span class="line"><span class="comment"># 使用matplotlib来绘制图形，label为标签名</span></span><br><span class="line">paint = plt.pie(df[<span class="string">'score'</span>], labels=df[<span class="string">'name'</span>], counterclock=<span class="literal">True</span>, startangle=<span class="number">-270</span>)</span><br><span class="line"><span class="comment"># 即便是通过matplotlib来绘制，中文也不好显示，只能通过返回值来找到text所在位置，并循环设置中文字体</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> df.index:</span><br><span class="line">    paint[<span class="number">1</span>][i].set_fontproperties(font)</span><br><span class="line">plt.title(<span class="string">'学习情况统计'</span>, fontproperties=font, fontsize=<span class="number">22</span>, fontweight=<span class="string">'bold'</span>)</span><br><span class="line"><span class="comment"># ylabel来设置左边显示文字</span></span><br><span class="line">plt.ylabel(<span class="string">'score'</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>对数据进行排序之后会出现，比例较小的部分字重叠，这也是一个问题。</p><p><img src="/home/narcissus/.config/Typora/typora-user-images/image-20200417220253777.png" alt="排序"></p><p>所以不对其进行排序显示的效果可能会更好。</p><p><img src="/home/narcissus/.config/Typora/typora-user-images/image-20200417220601412.png" alt="未排序"></p><h2 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h2><ul><li>折线图在绘制的时候，只要直接使用<code>.plot</code>就可以了。需要指定y轴的数据</li><li>x轴的数据可以通过指定index来设置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt </span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager <span class="keyword">as</span> fm </span><br><span class="line"></span><br><span class="line">font = fm.FontProperties(fname=<span class="string">'/usr/share/fonts/wenquanyi/wqy-microhei/wqy-microhei.ttc'</span>)</span><br><span class="line">data = &#123;<span class="string">'score'</span>:[<span class="number">45</span>,<span class="number">76</span>,<span class="number">56</span>,<span class="number">100</span>,<span class="number">93</span>], <span class="string">'age'</span>:[<span class="number">16</span>,<span class="number">18</span>,<span class="number">24</span>,<span class="number">29</span>,<span class="number">35</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line">df.plot(y=[<span class="string">'score'</span>,<span class="string">'age'</span>])</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'年龄与分数走势图'</span>,fontproperties=font, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.xlabel(<span class="string">'time'</span>)</span><br><span class="line">plt.xticks(df.index)</span><br><span class="line">plt.ylabel(<span class="string">'count'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/home/narcissus/.config/Typora/typora-user-images/image-20200417223035065.png" alt="image-20200417223035065"></p><h2 id="叠加区域图"><a href="#叠加区域图" class="headerlink" title="叠加区域图"></a>叠加区域图</h2><p>只需要在折线图的基础上将<code>.plot</code>改为<code>.plot.area</code>即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.plot.area(y=[<span class="string">'score'</span>,<span class="string">'age'</span>])</span><br></pre></td></tr></table></figure><p><img src="/home/narcissus/.config/Typora/typora-user-images/image-20200417223407312.png" alt="image-20200417223407312"></p><h2 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h2><p>散点图就可以看出pandas的处理速度完胜excel，同时交换x，y轴数据，pandas可以轻松搞定，而excel在数据量多的时候无法操作。</p><ul><li>使用到了<code>df.plot.scatter()</code>来画散点图</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager <span class="keyword">as</span> fm </span><br><span class="line"></span><br><span class="line">font = fm.FontProperties(fname=<span class="string">"/usr/share/fonts/wenquanyi/wqy-microhei/wqy-microhei.ttc"</span>)</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">'~/Desktop/1.xlsx'</span>, skiprows=<span class="number">1</span>, usecols=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">df.plot.scatter(x=<span class="string">'score'</span>, y=<span class="string">'age'</span>, color=<span class="string">'brown'</span>)</span><br><span class="line">plt.title(<span class="string">'学习与年龄散点图'</span>, fontproperties=font, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/home/narcissus/.config/Typora/typora-user-images/image-20200418095053048.png" alt="image-20200418095053048"></p><h2 id="分布图"><a href="#分布图" class="headerlink" title="分布图"></a>分布图</h2><p>可以清晰的看出指定数据的分布情况。分布图只需要Series就可以</p><ul><li>使用了<code>Series.plot.hist(bins=num)</code></li><li>参数bins设置划分区间，越多图越精细</li><li><code>plt.xticks()</code>设置x轴的分段，默认Series分段少，使用range()函数，来设置步长</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager <span class="keyword">as</span> fm </span><br><span class="line"></span><br><span class="line">font = fm.FontProperties(fname=<span class="string">"/usr/share/fonts/wenquanyi/wqy-microhei/wqy-microhei.ttc"</span>)</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">'~/Desktop/1.xlsx'</span>, skiprows=<span class="number">1</span>, usecols=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">df[<span class="string">'score'</span>].plot.hist(bins=<span class="number">10</span>)</span><br><span class="line">plt.xticks(range(<span class="number">0</span>,max(df[<span class="string">'score'</span>]),<span class="number">4</span>), rotation=<span class="number">90</span>)</span><br><span class="line">plt.xlabel(<span class="string">'score'</span>)</span><br><span class="line">plt.title(<span class="string">'分数分布图'</span>, fontproperties=font, fontsize=<span class="number">20</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/home/narcissus/.config/Typora/typora-user-images/image-20200418103216628.png" alt="image-20200418103216628"></p><h2 id="密度图"><a href="#密度图" class="headerlink" title="密度图"></a>密度图</h2><p>直接使用会报错，提示缺少一个scipy的科学库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># scipy (1.4.1)                   - SciPy: Scientific Library for Python</span></span><br><span class="line">pip install scipy</span><br></pre></td></tr></table></figure><p>密度图同样使用Series</p><ul><li>使用<code>Series.plot.kde()</code>,其它与分布图类似</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager <span class="keyword">as</span> fm </span><br><span class="line"></span><br><span class="line">font = fm.FontProperties(fname=<span class="string">"/usr/share/fonts/wenquanyi/wqy-microhei/wqy-microhei.ttc"</span>)</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">'~/Desktop/1.xlsx'</span>, skiprows=<span class="number">1</span>, usecols=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">df[<span class="string">'score'</span>].plot.kde()</span><br><span class="line">plt.xlabel(<span class="string">'score'</span>)</span><br><span class="line">plt.title(<span class="string">'密度分布图'</span>, fontproperties=font, fontsize=<span class="number">20</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/home/narcissus/.config/Typora/typora-user-images/image-20200418104716779.png" alt="image-20200418104716779"></p><hr><p>终于一口气学完了这个模块，感觉功能确实很多，而且没学到的功能还有很多。但是就目前掌握的这些来说，写个自动化办公的脚本来说已经够了。数据的读取，增删查改，制图等等功能都很好用。虽然是一边看视频，一边敲代码，但是熟悉程度还不够，还的在日常的生活中多用才会熟练。学完一个东西觉得很开心，但是又觉得有点失落，因为我接下来要学什么呢？是个很大的问题。要不学学powershell吧！</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加密解密</title>
      <link href="/2020/04/15/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/"/>
      <url>/2020/04/15/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="加密和解密"><a href="#加密和解密" class="headerlink" title="加密和解密"></a>加密和解密</h1><p>在linux下对文件和文件夹，脚本，以及passwd等进行加密解密还是比较重要的一个东西，所以需要学习一下。</p><p>加密解密的思路也并不是我所理解的加密就是给一个文件上了一把锁这种，其实只要是让之前可以直接可视化的东西不能直接看出来就算是加密了。</p><h2 id="对脚本-文件的加密解密"><a href="#对脚本-文件的加密解密" class="headerlink" title="对脚本/文件的加密解密"></a>对脚本/文件的加密解密</h2><h3 id="gzexe"><a href="#gzexe" class="headerlink" title="gzexe"></a>gzexe</h3><p>简单的就是gzexe，是gzip的一个扩展。可以用来对文本进行压缩来达到加密的目的。这个压缩文件可以直接运行，在运行时会自动执行解压缩的过程，运行结束后仍然为压缩状态。所以这对cpu来说有点消耗。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--- Desktop/test » gzexe 1.sh</span><br><span class="line">1.sh:    11.6%</span><br><span class="line">--- Desktop/test » ll</span><br><span class="line">total 8.0K</span><br><span class="line">-rwxr-xr-x 1 narcissus narcissus 1.1K Apr 15 15:20 1.sh</span><br><span class="line">-rwxr-xr-x 1 narcissus narcissus  138 Apr  4 23:21 1.sh~</span><br></pre></td></tr></table></figure><p>会生成两个文件：<code>1.sh</code>为压缩后的加密文件，可以直接运行。<code>1.sh~</code>为原文件。实际使用中可以只保留压缩后的文件即可，因为可以使用<code>gzexe -d 1.sh</code>对文件解压缩（解密），但是我的gzexe有一个bug，无法解密。</p><p>这种加密的方式挺适合脚本，因为源代码无法直接可视，但是又可以直接运行脚本（在运行脚本过程中，会自动解压缩）。</p><h3 id="shc"><a href="#shc" class="headerlink" title="shc"></a>shc</h3><p>Converts shell script to C source code, and then compiles it. Do NOT use this to encrypt your scripts as it is not meant to be used for that.<br>是一个用来将shell脚本转换为c语言以及经过gcc编译后的二进制工具。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> archllinux需要下载</span></span><br><span class="line">yay -S shc</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 简单的使用</span></span><br><span class="line">--- Desktop/test » ll</span><br><span class="line">total 4.0K</span><br><span class="line">-rwxr-xr-x 1 narcissus narcissus 138 Apr 15 15:33 2.sh</span><br><span class="line">--- Desktop/test » shc -r -f 2.sh</span><br><span class="line">--- Desktop/test » ll</span><br><span class="line">total 40K</span><br><span class="line">-rwxr-xr-x 1 narcissus narcissus 138 Apr 15 15:33 2.sh</span><br><span class="line">-rwxrwxr-x 1 narcissus narcissus 15K Apr 15 16:56 2.sh.x</span><br><span class="line">-rw-r--r-- 1 narcissus narcissus 18K Apr 15 16:56 2.sh.x.c</span><br></pre></td></tr></table></figure><p>使用到了两个参数：</p><ul><li><code>-r</code>:使可移植性更好 Relax security. Make a redistributable binary</li><li><code>-f</code>:指定需要转换的脚本 File name of the script to compile</li></ul><p>生成了两个文件：</p><ul><li><code>2.sh.x</code>:为经过gcc编译后的二进制文件，其实也可以通过ida等工具进行反编译</li><li><code>2.sh.x.c</code>:转换成c语言的版本，不可直接执行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用-U参数让其反编译更难</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  -U     Make binary untraceable [no]</span></span><br><span class="line">shc -r -U -f 2.sh</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用-o指定输出文件名</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -o %s  output filename</span></span><br><span class="line">shc -r -o autoline -f 2.sh</span><br></pre></td></tr></table></figure><p>二进制文件可以直接执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--- Desktop/test » ./autoline</span><br><span class="line">============================================================================================================================================================</span><br></pre></td></tr></table></figure><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><p>zip比较特殊，既可以加密文件又可以加密文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 简单使用</span></span><br><span class="line">--- Desktop/test » zip -e 2.zip 2.sh</span><br><span class="line">Enter password: </span><br><span class="line">Verify password: </span><br><span class="line">  adding: 2.sh (deflated 10%)</span><br></pre></td></tr></table></figure><p>上面这种方式默认是对原文件进行了压缩，可以指定不压缩</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--- Desktop/test » zip -e -0 2.zip 2.sh</span><br></pre></td></tr></table></figure><p>对文件夹加密</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -r  -- recurse into directories</span></span><br><span class="line">--- ~/Desktop » ll</span><br><span class="line">drwxr-xr-x 2 narcissus narcissus 4.0K Apr 15 17:17 test</span><br><span class="line"></span><br><span class="line">--- ~/Desktop » zip -re0 test.zip test</span><br><span class="line">Enter password: </span><br><span class="line">Verify password: </span><br><span class="line">  adding: test/ (stored 0%)</span><br><span class="line">  adding: test/autoline (stored 0%)</span><br><span class="line">  adding: test/2.sh.x.c (stored 0%)</span><br><span class="line">  adding: test/2.zip (stored 0%)</span><br><span class="line">  adding: test/2.sh (stored 0%)</span><br></pre></td></tr></table></figure><p>使用这种方式加密的文件/文件夹在解压时需要输入密码进行解压。怎么说呢，我挺喜欢这个的，简单嘛。</p><h2 id="对字符串加密-解密"><a href="#对字符串加密-解密" class="headerlink" title="对字符串加密/解密"></a>对字符串加密/解密</h2><p>可以使用base64/base32来加密解密</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--- Desktop/test » echo 123 | base64</span><br><span class="line">MTIzCg==</span><br><span class="line">--- Desktop/test » echo MTIzCg== | base64 -d</span><br><span class="line">123</span><br></pre></td></tr></table></figure><p>其实加密解密还有两个特别厉害的工具集：gpg和openssl，由于这两个都太复杂了，涉及到的东西太多，所以这里不写了。以后再写。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vbox使用</title>
      <link href="/2020/04/15/vbox%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/04/15/vbox%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="使用中的一点问题"><a href="#使用中的一点问题" class="headerlink" title="使用中的一点问题"></a>使用中的一点问题</h1><h2 id="如何查看已有的VM"><a href="#如何查看已有的VM" class="headerlink" title="如何查看已有的VM"></a>如何查看已有的VM</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vboxmanage list vms</span><br></pre></td></tr></table></figure><h2 id="如何修改分区大小"><a href="#如何修改分区大小" class="headerlink" title="如何修改分区大小"></a>如何修改分区大小</h2><p>之前给win10分配的只有30Gb，发现不够用，安装完系统就只有7个G的剩余空间，希望可以给磁盘增加空间，如果建虚拟机时使用的是动态分配空间的话，那么修改就非常简单。如果是固定大小的话，那还挺麻烦的。这些只记录动态分配的操作步骤</p><ol><li><p>重新分配大小</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 首先进入vdi文件所在目录</span></span><br><span class="line">--- Software/vbox » cd win10</span><br><span class="line"><span class="meta">#</span><span class="bash"> 分配后的大小，默认单位是Mb</span></span><br><span class="line">--- vbox/win10 » vboxmanage modifyhd windows10.vdi --resize 40000</span><br><span class="line"><span class="meta">0%</span><span class="bash">...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%</span></span><br></pre></td></tr></table></figure></li><li><p>进入虚拟系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vboxsdl --startvm win10</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li>然后需要进入系统重新分配大小，如果是linux的话，使用parted可以重新分配大小，如果是windows，那么还需要下载一个diskgenius来将磁盘分配给c盘。</li></ol>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell参数扩展</title>
      <link href="/2020/04/04/shell%E5%8F%82%E6%95%B0%E6%89%A9%E5%B1%95/"/>
      <url>/2020/04/04/shell%E5%8F%82%E6%95%B0%E6%89%A9%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<h1 id="shell-parameter-expansion"><a href="#shell-parameter-expansion" class="headerlink" title="shell parameter expansion"></a>shell parameter expansion</h1><ol><li><p>设置默认变量值（变量未赋值/为空时）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;var:-default&#125;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;var:=default&#125;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;var=default&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>如果变量未定义，给出message</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;var?message&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>按照index进行截取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;var:index:length&#125;</span></span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">a="beautiful world"</span><br><span class="line">echo $&#123;a:2&#125; #autiful world</span><br><span class="line">echo $&#123;a:2:4&#125; #auti</span><br></pre></td></tr></table></figure></li><li><p>按照匹配字符截取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;var<span class="comment">#*pattern&#125; #--&gt;非贪婪</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;var<span class="comment">##*pattern&#125; #--&gt;贪婪</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;var%pattern*&#125; <span class="comment">#&lt;--非贪婪</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;var%%pattern*&#125; <span class="comment">#&lt;--贪婪</span></span></span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">a="beautiful world"</span><br><span class="line">echo $&#123;a#*l&#125; #world</span><br><span class="line">echo $&#123;a##*l&#125; #d</span><br><span class="line">echo $&#123;a%l*&#125; #beautiful wor</span><br><span class="line">echo $&#123;a%%l*&#125; #beautifu</span><br></pre></td></tr></table></figure></li><li><p>变量长度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;<span class="comment">#var&#125;</span></span></span><br></pre></td></tr></table></figure></li><li><p>打印所有以pre开头的变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;!pre*&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>替换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;var/search/replace&#125; <span class="comment">#替换第一个</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;var//search/replace&#125; <span class="comment">#替换全部</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;var/<span class="comment">#search/replace&#125; #只替换开头匹配到的</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;var/%search/replace&#125; <span class="comment">#只替换结尾匹配到的</span></span></span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line"> a="beautiful world"</span><br><span class="line"> echo $&#123;a/l/AA&#125; #beautifuAA world</span><br><span class="line"> echo $&#123;a//l/AA&#125; #beautifuAA worAAd</span><br><span class="line"> echo $&#123;a/#be/AA&#125; #AAautiful world</span><br><span class="line"> echo $&#123;a/%ld/AA&#125; #beautiful world</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>shell内置重要命令</title>
      <link href="/2020/04/04/shell%E5%86%85%E7%BD%AE%E9%87%8D%E8%A6%81%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/04/04/shell%E5%86%85%E7%BD%AE%E9%87%8D%E8%A6%81%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="built-in-commands"><a href="#built-in-commands" class="headerlink" title="built-in commands"></a>built-in commands</h1><ol><li><p>alias/unalias function/unset -f </p><p>首先要说的就是在shell中怎么写函数，当然了立马会想到function，这种one liner的写法只有在zsh中才可以使用，在bash中不能写在一行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function autoline()&#123;for ((i=0;i&lt;`tput cols`;i++));do echo -n "=";sleep 0.001;done&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以使用<span class="built_in">unset</span> -f来删除删除定义</span></span><br><span class="line">unset -f autoline</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果需要处理参数，那么只有<span class="keyword">function</span>可以做到。</span></span><br><span class="line">function get()&#123;a=$@;echo "length:$&#123;#a&#125;"&#125;</span><br></pre></td></tr></table></figure><p>其实alias也可以做到，实质都是对代码段的引用，但是alias写的需要source之后才能使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alias autoline="for ((i=0;i&lt;`tput cols`;i++));do echo -n "=";sleep 0.001;done"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 对于简单的，不需要传参的，两种调用效果相同</span></span><br><span class="line">autoline</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以使用<span class="built_in">unalias</span>来取消<span class="built_in">alias</span>定义</span></span><br><span class="line">unalias autoline</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>:占位</p><p>之前在写if语句的时候就遇到过需要类似python中pass的效果，但是shell中没有pass，不过冒号可以做到</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if [ $&#123;a&#125; &gt; 3 ];then</span><br><span class="line">:</span><br><span class="line">else</span><br><span class="line">a=6</span><br></pre></td></tr></table></figure></li><li><p>local</p><p>设置局部变量，仅在函数内部有效，function中有效，alias没效果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">function pt()&#123;</span><br><span class="line">local a=6</span><br><span class="line">echo $a</span><br><span class="line">&#125;</span><br><span class="line">pt</span><br><span class="line">echo $a</span><br><span class="line"></span><br><span class="line">6</span><br><span class="line">3</span><br></pre></td></tr></table></figure></li><li><p>type查看是一个alias还是一个function/built-in/executable等</p></li><li><p>set -C，禁止复写</p><p>set的一个重要作用，set是用来对shell做一些设置的，可设置shell的属性。使用<code>-</code>设置属性，使用<code>+</code>取消属性。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在shell中避免清空存在的文件开启<span class="built_in">set</span> -C</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!bin/bash</span></span><br><span class="line"></span><br><span class="line">echo "123" &gt; 2.txt</span><br><span class="line">set -C</span><br><span class="line">echo "456" &gt; 2.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行脚本会报错，无法写入。只能追加</span></span><br></pre></td></tr></table></figure></li><li><p>unset，取消设置的变量，与set的作用完全不同</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=1</span><br><span class="line">unset a</span><br><span class="line">echo $a</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>column格式化输出</title>
      <link href="/2020/03/28/column%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA/"/>
      <url>/2020/03/28/column%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="规则的打印输出"><a href="#规则的打印输出" class="headerlink" title="规则的打印输出"></a>规则的打印输出</h1><p>之前遇到过这个格式化输出的问题，之间用<code>echo</code>或者<code>printf</code>很难达到想要的效果，因为它无法实现字符长度不同的列保持相同的宽度。不过后来使用<code>awk</code>的printf解决了这个问题，可以实现不同宽度的列对齐，但是写起来听麻烦的。今天发现了一个新的命令<code>column</code>，很简单的一个命令完美的解决了问题。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">--- Code/shell » head ss.final </span><br><span class="line"> sslocal -s 139.28.235.243 -p 5911 -k lncn.org r6* -m rc4 -l 1080</span><br><span class="line"> sslocal -s 46.17.45.194 -p 5922 -k lncn.org 2gt -m rc4 -l 1080</span><br><span class="line"> sslocal -s 45.136.244.204 -p 5922 -k lncn.org 2gt -m rc4 -l 1080</span><br><span class="line"> sslocal -s 45.12.109.134 -p 5922 -k lncn.org 5tb -m rc4 -l 1080</span><br><span class="line"> sslocal -s 85.117.234.98 -p 5922 -k lncn.org t2j -m rc4 -l 1080</span><br><span class="line"> sslocal -s 45.147.201.168 -p 5922 -k lncn.org t2j -m rc4 -l 1080</span><br><span class="line"> sslocal -s 45.82.255.115 -p 5922 -k lncn.org 5tb -m rc4 -l 1080</span><br><span class="line"> sslocal -s 45.135.134.205 -p 5922 -k lncn.org 6tw -m rc4 -l 1080</span><br><span class="line"> sslocal -s 45.144.2.51 -p 5922 -k lncn.org t2j -m rc4 -l 1080</span><br><span class="line"> sslocal -s 45.144.2.186 -p 5922 -k lncn.org t2j -m rc4 -l 1080</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 简单的格式化，以table的格式打印 -t</span></span><br><span class="line">--- Code/shell » head ss.final | column -t</span><br><span class="line">sslocal  -s  139.28.235.243  -p  5911  -k  lncn.org  r6*  -m  rc4  -l  1080</span><br><span class="line">sslocal  -s  46.17.45.194    -p  5922  -k  lncn.org  2gt  -m  rc4  -l  1080</span><br><span class="line">sslocal  -s  45.136.244.204  -p  5922  -k  lncn.org  2gt  -m  rc4  -l  1080</span><br><span class="line">sslocal  -s  45.12.109.134   -p  5922  -k  lncn.org  5tb  -m  rc4  -l  1080</span><br><span class="line">sslocal  -s  85.117.234.98   -p  5922  -k  lncn.org  t2j  -m  rc4  -l  1080</span><br><span class="line">sslocal  -s  45.147.201.168  -p  5922  -k  lncn.org  t2j  -m  rc4  -l  1080</span><br><span class="line">sslocal  -s  45.82.255.115   -p  5922  -k  lncn.org  5tb  -m  rc4  -l  1080</span><br><span class="line">sslocal  -s  45.135.134.205  -p  5922  -k  lncn.org  6tw  -m  rc4  -l  1080</span><br><span class="line">sslocal  -s  45.144.2.51     -p  5922  -k  lncn.org  t2j  -m  rc4  -l  1080</span><br><span class="line">sslocal  -s  45.144.2.186    -p  5922  -k  lncn.org  t2j  -m  rc4  -l  1080</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定分隔符 -s</span></span><br><span class="line">--- ~/Desktop » cat passwd</span><br><span class="line">root:x:0:0::/root:/bin/bash</span><br><span class="line">bin:x:1:1::/:/usr/bin/nologin</span><br><span class="line">daemon:x:2:2::/:/usr/bin/nologin</span><br><span class="line">mail:x:8:12::/var/spool/mail:/usr/bin/nologin</span><br><span class="line"></span><br><span class="line">--- ~/Desktop » column -t -s: passwd                                                                        </span><br><span class="line">root    x  0  0     /root            /bin/bash</span><br><span class="line">bin     x  1  1     /                /usr/bin/nologin</span><br><span class="line">daemon  x  2  2     /                /usr/bin/nologin</span><br><span class="line">mail    x  8  12    /var/spool/mail  /usr/bin/nologin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 忽略某些列 -H</span></span><br><span class="line">--- Code/shell » head ss.final | column -t -H 1,2,3</span><br><span class="line">-p  5911  -k  lncn.org  r6*  -m  rc4  -l  1080</span><br><span class="line">-p  5922  -k  lncn.org  2gt  -m  rc4  -l  1080</span><br><span class="line">-p  5922  -k  lncn.org  2gt  -m  rc4  -l  1080</span><br><span class="line">-p  5922  -k  lncn.org  5tb  -m  rc4  -l  1080</span><br><span class="line">-p  5922  -k  lncn.org  t2j  -m  rc4  -l  1080</span><br><span class="line">-p  5922  -k  lncn.org  t2j  -m  rc4  -l  1080</span><br><span class="line">-p  5922  -k  lncn.org  5tb  -m  rc4  -l  1080</span><br><span class="line">-p  5922  -k  lncn.org  6tw  -m  rc4  -l  1080</span><br><span class="line">-p  5922  -k  lncn.org  t2j  -m  rc4  -l  1080</span><br><span class="line">-p  5922  -k  lncn.org  t2j  -m  rc4  -l  1080</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 按指定的列顺序 -O</span></span><br><span class="line">--- Code/shell » head ss.final | column -t -O 12,3,2,1 </span><br><span class="line">1080  139.28.235.243  -s  sslocal  -p  5911  -k  lncn.org  r6*  -m  rc4  -l</span><br><span class="line">1080  46.17.45.194    -s  sslocal  -p  5922  -k  lncn.org  2gt  -m  rc4  -l</span><br><span class="line">1080  45.136.244.204  -s  sslocal  -p  5922  -k  lncn.org  2gt  -m  rc4  -l</span><br><span class="line">1080  45.12.109.134   -s  sslocal  -p  5922  -k  lncn.org  5tb  -m  rc4  -l</span><br><span class="line">1080  85.117.234.98   -s  sslocal  -p  5922  -k  lncn.org  t2j  -m  rc4  -l</span><br><span class="line">1080  45.147.201.168  -s  sslocal  -p  5922  -k  lncn.org  t2j  -m  rc4  -l</span><br><span class="line">1080  45.82.255.115   -s  sslocal  -p  5922  -k  lncn.org  5tb  -m  rc4  -l</span><br><span class="line">1080  45.135.134.205  -s  sslocal  -p  5922  -k  lncn.org  6tw  -m  rc4  -l</span><br><span class="line">1080  45.144.2.51     -s  sslocal  -p  5922  -k  lncn.org  t2j  -m  rc4  -l</span><br><span class="line">1080  45.144.2.186    -s  sslocal  -p  5922  -k  lncn.org  t2j  -m  rc4  -l</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定某列右对齐 -R</span></span><br><span class="line">--- Code/shell » head ss.final | column -t -R 3</span><br><span class="line">sslocal  -s  139.28.235.243  -p  5911  -k  lncn.org  r6*  -m  rc4  -l  1080</span><br><span class="line">sslocal  -s    46.17.45.194  -p  5922  -k  lncn.org  2gt  -m  rc4  -l  1080</span><br><span class="line">sslocal  -s  45.136.244.204  -p  5922  -k  lncn.org  2gt  -m  rc4  -l  1080</span><br><span class="line">sslocal  -s   45.12.109.134  -p  5922  -k  lncn.org  5tb  -m  rc4  -l  1080</span><br><span class="line">sslocal  -s   85.117.234.98  -p  5922  -k  lncn.org  t2j  -m  rc4  -l  1080</span><br><span class="line">sslocal  -s  45.147.201.168  -p  5922  -k  lncn.org  t2j  -m  rc4  -l  1080</span><br><span class="line">sslocal  -s   45.82.255.115  -p  5922  -k  lncn.org  5tb  -m  rc4  -l  1080</span><br><span class="line">sslocal  -s  45.135.134.205  -p  5922  -k  lncn.org  6tw  -m  rc4  -l  1080</span><br><span class="line">sslocal  -s     45.144.2.51  -p  5922  -k  lncn.org  t2j  -m  rc4  -l  1080</span><br><span class="line">sslocal  -s    45.144.2.186  -p  5922  -k  lncn.org  t2j  -m  rc4  -l  1080</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定输出分割符 -o</span></span><br><span class="line">--- Code/shell » head ss.final | column -t -o '|  |' </span><br><span class="line">sslocal|  |-s|  |139.28.235.243|  |-p|  |5911|  |-k|  |lncn.org|  |r6*|  |-m|  |rc4|  |-l|  |1080</span><br><span class="line">sslocal|  |-s|  |46.17.45.194  |  |-p|  |5922|  |-k|  |lncn.org|  |2gt|  |-m|  |rc4|  |-l|  |1080</span><br><span class="line">sslocal|  |-s|  |45.136.244.204|  |-p|  |5922|  |-k|  |lncn.org|  |2gt|  |-m|  |rc4|  |-l|  |1080</span><br><span class="line">sslocal|  |-s|  |45.12.109.134 |  |-p|  |5922|  |-k|  |lncn.org|  |5tb|  |-m|  |rc4|  |-l|  |1080</span><br><span class="line">sslocal|  |-s|  |85.117.234.98 |  |-p|  |5922|  |-k|  |lncn.org|  |t2j|  |-m|  |rc4|  |-l|  |1080</span><br><span class="line">sslocal|  |-s|  |45.147.201.168|  |-p|  |5922|  |-k|  |lncn.org|  |t2j|  |-m|  |rc4|  |-l|  |1080</span><br><span class="line">sslocal|  |-s|  |45.82.255.115 |  |-p|  |5922|  |-k|  |lncn.org|  |5tb|  |-m|  |rc4|  |-l|  |1080</span><br><span class="line">sslocal|  |-s|  |45.135.134.205|  |-p|  |5922|  |-k|  |lncn.org|  |6tw|  |-m|  |rc4|  |-l|  |1080</span><br><span class="line">sslocal|  |-s|  |45.144.2.51   |  |-p|  |5922|  |-k|  |lncn.org|  |t2j|  |-m|  |rc4|  |-l|  |1080</span><br><span class="line">sslocal|  |-s|  |45.144.2.186  |  |-p|  |5922|  |-k|  |lncn.org|  |t2j|  |-m|  |rc4|  |-l|  |1080</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 结合awk在行首行尾添加</span></span><br><span class="line">--- Code/shell » head ss.final | column -t -o '|  |' | awk '&#123;print "|" $0 "|"&#125;'</span><br><span class="line">|sslocal|  |-s|  |139.28.235.243|  |-p|  |5911|  |-k|  |lncn.org|  |r6*|  |-m|  |rc4|  |-l|  |1080|</span><br><span class="line">|sslocal|  |-s|  |46.17.45.194  |  |-p|  |5922|  |-k|  |lncn.org|  |2gt|  |-m|  |rc4|  |-l|  |1080|</span><br><span class="line">|sslocal|  |-s|  |45.136.244.204|  |-p|  |5922|  |-k|  |lncn.org|  |2gt|  |-m|  |rc4|  |-l|  |1080|</span><br><span class="line">|sslocal|  |-s|  |45.12.109.134 |  |-p|  |5922|  |-k|  |lncn.org|  |5tb|  |-m|  |rc4|  |-l|  |1080|</span><br><span class="line">|sslocal|  |-s|  |85.117.234.98 |  |-p|  |5922|  |-k|  |lncn.org|  |t2j|  |-m|  |rc4|  |-l|  |1080|</span><br><span class="line">|sslocal|  |-s|  |45.147.201.168|  |-p|  |5922|  |-k|  |lncn.org|  |t2j|  |-m|  |rc4|  |-l|  |1080|</span><br><span class="line">|sslocal|  |-s|  |45.82.255.115 |  |-p|  |5922|  |-k|  |lncn.org|  |5tb|  |-m|  |rc4|  |-l|  |1080|</span><br><span class="line">|sslocal|  |-s|  |45.135.134.205|  |-p|  |5922|  |-k|  |lncn.org|  |6tw|  |-m|  |rc4|  |-l|  |1080|</span><br><span class="line">|sslocal|  |-s|  |45.144.2.51   |  |-p|  |5922|  |-k|  |lncn.org|  |t2j|  |-m|  |rc4|  |-l|  |1080|</span><br><span class="line">|sslocal|  |-s|  |45.144.2.186  |  |-p|  |5922|  |-k|  |lncn.org|  |t2j|  |-m|  |rc4|  |-l|  |1080|</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell数组与OneLiner</title>
      <link href="/2020/03/28/shell%E6%95%B0%E7%BB%84%E4%B8%8EOneLiner/"/>
      <url>/2020/03/28/shell%E6%95%B0%E7%BB%84%E4%B8%8EOneLiner/</url>
      
        <content type="html"><![CDATA[<h1 id="一些小的知识点"><a href="#一些小的知识点" class="headerlink" title="一些小的知识点"></a>一些小的知识点</h1><h2 id="tips："><a href="#tips：" class="headerlink" title="tips："></a>tips：</h2><p>在perl中，有一种可以直接在命令行使用的program被成为one-liner，虽然没写perl，但是记一下shell中使用的one-liner吧</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--- ~ » echo &#123;1..10..2&#125;</span><br><span class="line">1 3 5 7 9</span><br><span class="line">--- ~ » sum=0;for i in &#123;1..100&#125;;do sum=$((sum+=i));done;echo $sum</span><br><span class="line">5050</span><br><span class="line">--- ~ » awk 'BEGIN&#123;sum=0;for(i=1;i&lt;=100;i++)&#123;sum+=i&#125;;print sum&#125;'</span><br><span class="line">5050</span><br></pre></td></tr></table></figure><p>通过awk与shell的for循环对比发现，awk的效率比shell高很多！在计算一亿的和的时候，awk用了7s，而shell则是很慢，等了几十秒也没出结果。</p><h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><p>可以称为hash/map/dict，总之就是一个名字而已，代表的是二维数据。之前写shell的时候很奇怪shell为什么没有hash这种数据结构呢？我了解到的知识就是一维的数组而已，使用起来还是有些不方便。</p><p>认真的说，其实不是没有，而是我没有学过。但是即使没有学过，用已经了解到的知识其实也可以写的，只是，学东西学的不好吧，没理解到hash的真谛。hash二维i数据，是一维数据的扩展，可以理解为一种映射，更深层次就是说数据间存在某种联系。所以用老的知识也是可以写出hash的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">--- ~ » user=xiaoxiao</span><br><span class="line">--- ~ » age=20</span><br><span class="line">--- ~ » score=100</span><br><span class="line">--- ~ » list=($user $age $score)</span><br><span class="line">--- ~ » for i in $&#123;list[@]&#125;;echo $i</span><br><span class="line">xiaoxiao</span><br><span class="line">20</span><br><span class="line">100</span><br><span class="line"></span><br><span class="line">--- ~ » echo $&#123;list[1]&#125;</span><br><span class="line">xiaoxiao</span><br><span class="line">--- ~ » echo $&#123;list[2]&#125;</span><br><span class="line">20</span><br><span class="line">--- ~ » echo $&#123;list[3]&#125;</span><br><span class="line">100</span><br><span class="line"></span><br><span class="line">--- ~ » echo $list</span><br><span class="line">xiaoxiao 20 100</span><br></pre></td></tr></table></figure><p>上面这个例子，虽然看上去也并不是hash，因为取数据也只是用到了索引，但是至少存在了引用，建立了联系。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ARRAY=( "cow:moo"</span><br><span class="line">        "dinosaur:roar"</span><br><span class="line">        "bird:chirp"</span><br><span class="line">        "bash:rock" )</span><br><span class="line"></span><br><span class="line">for animal in "$&#123;ARRAY[@]&#125;" ; do</span><br><span class="line">    KEY="$&#123;animal%%:*&#125;"</span><br><span class="line">    VALUE="$&#123;animal##*:&#125;"</span><br><span class="line">    printf "%s likes to %s.\n" "$KEY" "$VALUE"</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">cow likes to moo.</span><br><span class="line">dinosaur likes to roar.</span><br><span class="line">bird likes to chirp.</span><br><span class="line">bash likes to rock.</span><br></pre></td></tr></table></figure><p>上面这个例子，是别人写的，用简单的字符串也建立起了数据间的联系。</p><p>下面要写shell中专门的hash了，在bash中使用。zsh中有些不同（获取key时报错）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> create associate array</span></span><br><span class="line">declare -A user </span><br><span class="line">user=([name]=xiaoxiao [age]=20 [score]=100) </span><br><span class="line"><span class="meta">#</span><span class="bash"> simplify</span></span><br><span class="line">declare -A user=([name]=xiaoxiao [age]=20 [score]=100) </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> add value</span></span><br><span class="line">user[like]=apple</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> get all keys</span></span><br><span class="line">[narcissus@archlinux ~]$ echo $&#123;!user[@]&#125;</span><br><span class="line">score age like name</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> get all values</span></span><br><span class="line">[narcissus@archlinux ~]$ echo $&#123;user[@]&#125;</span><br><span class="line">100 20 apple xiaoxiao</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> get specified value</span></span><br><span class="line">[narcissus@archlinux ~]$ echo $&#123;user[name]&#125;</span><br><span class="line">xiaoxiao</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> get length</span></span><br><span class="line">[narcissus@archlinux ~]$ echo $&#123;#user[@]&#125;</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>declare还具有大小写转换的功能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--- ~ » declare -u name=`whoami`</span><br><span class="line">--- ~ » echo $name</span><br><span class="line">NARCISSUS</span><br><span class="line">--- ~ » declare -l name</span><br><span class="line">--- ~ » echo $name</span><br><span class="line">narcissus</span><br></pre></td></tr></table></figure><hr><p>下面是日常的吐槽：加了几个群，看见群里的小伙伴说话都特别搞笑，什么一个星期学完python啊，就好像看到了我自己一样，我说我会六种语言，c，python，java，shell，perl，haskell。其实这都是假的，只不过我学过而已，而且都只是会点皮毛，而且c语言那还是大二的选修课，现在连个helloworld都不会写，java更是写都不想写，haskell嘛，学都没学懂。其它的勉强会用而已。就连我写的最多的shell，我发现连个hash都不会。所以很多时候，我们还是太轻浮了，学习不应该以这种态度的。就好比是这样一个变量的简单定义，可能有的人看一眼就说会了，不就是赋值吗，其实在理解的多一点还涉及到内存的分配，再多理解一点呢，可能就会通过一维数组去建立二维数据，如果了解的多一点，我们会发现就是这么简单的一个概念，却是perl玩的出神入化的核心。所以知识呢，永远没有尽头，不同的人有不同的理解程度，不要轻浮的觉得自己会多少东西了。当然了知识的广度也是一个很重要的方面，比如说一个paste命令解决了困扰好久的问题。</p><p>为什么会有这么多无聊的想法呢，还不是一个人闲的，其实我只是想说linux我不能说我懂多少，因为一个awk的man手册我都没有完整的看一遍，哪有资格说懂linux了呢？</p>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sed</title>
      <link href="/2020/03/27/sed/"/>
      <url>/2020/03/27/sed/</url>
      
        <content type="html"><![CDATA[<blockquote><p>sed 可以实现不打开文件就能编辑文件内容的操作，有点⑥，而且有点复杂，看了好多文章，总算弄懂了点，可能是别人写的不好，哈哈。</p><p>同时，还可以拿来做格式化文本</p></blockquote><p><code>sed</code> ：stream editor 流编辑器，它是按行来执行的，一次执行一行，把要处理的行储存在缓冲区中（pattern space），执行完后，输出到屏幕，直到所有行处理完。这也就是说<font color=red>如果不加参数限制，它是不会真正对文件做修改的，get？</font></p><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed [OPTION]... &#123;script-only-if-no-other-script&#125; [input-file]...</span><br></pre></td></tr></table></figure><h4 id="各部分的参数"><a href="#各部分的参数" class="headerlink" title="各部分的参数"></a>各部分的参数</h4><p><em>OPTION常用选项：</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-n#silent模式，sed默认会将所有数据都输出到屏幕，但是加上-n后，只会输出匹配到的行，需要结合p参数，实现打印。</span><br><span class="line">-e#expression表达式，指定sed的命令，默认就有这个，其真正作用是可以提供多个不同的命令。</span><br><span class="line">-i#in-place替代，这个参数才是真正将修改直接写入文件的操作，所以修改文件内容必须要它啊。</span><br><span class="line">-f#file，读取写有命令的文件，作用是可以写好一个命令文件后实现批量处理。</span><br><span class="line">-r#regexp-extended，支持扩展正则表达式。</span><br></pre></td></tr></table></figure><p><em>SCRIPT命令动作：</em></p><p><font color=red>命令部分都是通过单引号括起来的；命令有两种方式：一种就是sed自身支持的写法，一种是使用正则表达式</font></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a#append text，新增行，在匹配到的行后</span><br><span class="line">i#insert text，插入行，在匹配到的行前</span><br><span class="line">d#delete pattern space，删除匹配到的行</span><br><span class="line">s#substitute regex，替换，需要使用正则表达式</span><br><span class="line">p#print the current pattern space，打印匹配到的行</span><br><span class="line">c#replace line with text，替换匹配行的内容</span><br><span class="line">r#append contents of file，相当于a参数，只不过这个是读取的文件</span><br><span class="line">w#write pattern space to file，将匹配到的内容输出到另外的文件，不动源文件，等于另存为。</span><br></pre></td></tr></table></figure><p><em>INPUT-FILE：</em></p><p>需要操作的文件</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下面所有操作基于的文件</span></span><br><span class="line">nl test.sh</span><br><span class="line"></span><br><span class="line">1#!/bin/zsh</span><br><span class="line">  </span><br><span class="line">2j=1</span><br><span class="line">3cd ~</span><br><span class="line">4for i in `ls`</span><br><span class="line">5do</span><br><span class="line">6a[$j]=$i</span><br><span class="line">7((j++))</span><br><span class="line">8done</span><br><span class="line">9echo $&#123;a[*]&#125;</span><br></pre></td></tr></table></figure><h5 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">举例：在第四行后添加”四叶草“</span></span><br><span class="line">不使用正则表达式</span><br><span class="line">sed '4a 四叶草' test.sh#最好在a与后面文字间留空格，虽然不留空格也行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">在第四行和第六行后添加”四叶草“</span></span><br><span class="line">sed '/[4,6]/a 四叶草' test.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">在第四行第五行第六行后添加”四叶草“</span></span><br><span class="line">sed '4,6a 四叶草' test.sh</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">举例：在有<span class="keyword">do</span>的前一行添加”四叶草“</span></span><br><span class="line">sed '/do/i 四叶草' test.sh</span><br></pre></td></tr></table></figure><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">举例：删除以5开头的行</span></span><br><span class="line">sed ‘/^5/d' test.sh</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1#!&#x2F;bin&#x2F;zsh</span><br><span class="line">  </span><br><span class="line">2j&#x3D;1</span><br><span class="line">3cd ~</span><br><span class="line">4for i in &#96;ls&#96;</span><br><span class="line">6a[$j]&#x3D;$i</span><br><span class="line">7((j++))</span><br><span class="line">8done</span><br><span class="line">9echo $&#123;a[*]&#125;</span><br></pre></td></tr></table></figure><h5 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">举例：将2到最后一行所有i替换为jc</span></span><br><span class="line">sed '2,$s/i/jc/g' test.sh</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1#!&#x2F;bin&#x2F;zsh</span><br><span class="line">  </span><br><span class="line">2j&#x3D;1</span><br><span class="line">3cd ~</span><br><span class="line">4for jc jcn &#96;ls&#96;</span><br><span class="line">5do</span><br><span class="line">6a[$j]&#x3D;$jc</span><br><span class="line">7((j++))</span><br><span class="line">8done</span><br><span class="line">9echo $&#123;a[*]&#125;</span><br></pre></td></tr></table></figure><h5 id="取指定行"><a href="#取指定行" class="headerlink" title="取指定行"></a>取指定行</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">举例：打印第一行内容</span></span><br><span class="line">sed -n '1p' test.sh</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1#!&#x2F;bin&#x2F;zsh</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">举例：打印5到最后一行内容</span></span><br><span class="line">sed -n '5,$p' test.sh</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">4for i in &#96;ls&#96;</span><br><span class="line">5do</span><br><span class="line">6a[$j]&#x3D;$i</span><br><span class="line">7((j++))</span><br><span class="line">8done</span><br><span class="line">9echo $&#123;a[*]&#125;</span><br></pre></td></tr></table></figure><h5 id="替换匹配行"><a href="#替换匹配行" class="headerlink" title="替换匹配行"></a>替换匹配行</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">将有<span class="keyword">do</span>的行都替换为“四叶草”</span></span><br><span class="line">sed '/do/c 四叶草' test.sh</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1#!&#x2F;bin&#x2F;zsh</span><br><span class="line">  </span><br><span class="line">2j&#x3D;1</span><br><span class="line">3cd ~</span><br><span class="line">4for i in &#96;ls&#96;</span><br><span class="line">四叶草</span><br><span class="line">6a[$j]&#x3D;$i</span><br><span class="line">7((j++))</span><br><span class="line">四叶草</span><br><span class="line">9echo $&#123;a[*]&#125;</span><br></pre></td></tr></table></figure><h5 id="读取文件内容"><a href="#读取文件内容" class="headerlink" title="读取文件内容"></a>读取文件内容</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在所有的j后面添加com.txt中的内容</span></span><br><span class="line">cat com.txt</span><br><span class="line">滑小稽你最近有点皮是不是</span><br><span class="line"></span><br><span class="line">sed '/j/r com.txt' test.sh</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1#!&#x2F;bin&#x2F;zsh</span><br><span class="line">  </span><br><span class="line">2j&#x3D;1</span><br><span class="line">滑小稽你最近有点皮是不是</span><br><span class="line">3cd ~</span><br><span class="line">4for i in &#96;ls&#96;</span><br><span class="line">5do</span><br><span class="line">6a[$j]&#x3D;$i</span><br><span class="line">滑小稽你最近有点皮是不是</span><br><span class="line">7((j++))</span><br><span class="line">滑小稽你最近有点皮是不是</span><br><span class="line">8done</span><br><span class="line">9echo $&#123;a[*]&#125;</span><br></pre></td></tr></table></figure><h5 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">将5到7行内容写入到file.txt中</span></span><br><span class="line">sed '5,7w file.txt' test.sh</span><br></pre></td></tr></table></figure><h5 id="执行多个操作"><a href="#执行多个操作" class="headerlink" title="执行多个操作"></a>执行多个操作</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">将j换成jjjjjj，将i换成iiiiiii</span></span><br><span class="line">sed -e 's/j/jjjjjj/' -e 's/i/iiiiiii/' test.sh</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1#!&#x2F;biiiiiiin&#x2F;zsh</span><br><span class="line">  </span><br><span class="line">2jjjjjj&#x3D;1</span><br><span class="line">3cd ~</span><br><span class="line">4for iiiiiii in &#96;ls&#96;</span><br><span class="line">5do</span><br><span class="line">6a[$jjjjjj]&#x3D;$iiiiiii</span><br><span class="line">7((jjjjjj++))</span><br><span class="line">8done</span><br><span class="line">9echo $&#123;a[*]&#125;</span><br></pre></td></tr></table></figure><h5 id="直接修改文件"><a href="#直接修改文件" class="headerlink" title="直接修改文件"></a>直接修改文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i '1i 这是直接修改的' test.sh</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">这是直接修改的</span><br><span class="line">1#!&#x2F;bin&#x2F;zsh</span><br><span class="line">  </span><br><span class="line">2j&#x3D;1</span><br><span class="line">3cd ~</span><br><span class="line">4for i in &#96;ls&#96;</span><br><span class="line">5do</span><br><span class="line">6a[$j]&#x3D;$i</span><br><span class="line">7((j++))</span><br><span class="line">8done</span><br><span class="line">9echo $&#123;a[*]&#125;</span><br></pre></td></tr></table></figure><h4 id="sed模式空间pattern-space和暂存空间hold-space的使用"><a href="#sed模式空间pattern-space和暂存空间hold-space的使用" class="headerlink" title="sed模式空间pattern space和暂存空间hold space的使用:"></a>sed模式空间pattern space和暂存空间hold space的使用:</h4><p>sed有两个内存空间用来存储数据，大部分情况下，我们只用到了pattern space。读取到的内容就会进入pattern space，然后进行操作（增，删，查，改）。除非手动调用hold space，否则不会使用到它。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">h：pattern space &gt; hold space (把模式空间中的内容覆盖至保持空间中)</span><br><span class="line">H：pattern space &gt;&gt; hold space (把模式空间中的内容追加至保持空间中)</span><br><span class="line">g：hold space &gt; pattern space (从保持空间取出数据覆盖至模式空间)</span><br><span class="line">G：hold space&gt;&gt; pattern space(从保持空间取出内容追加至模式空间)</span><br><span class="line">x：pattern space &lt;&gt; hold space (把模式空间中的内容与保持空间中的内容进行互换)</span><br><span class="line">n：读取匹配到的行的下一行覆盖 至模式空间</span><br><span class="line">N：读取匹配到的行的下一行追加 至模式空间</span><br><span class="line">d：删除模式空间中的行</span><br><span class="line">D：删除 当前模式空间开端至\n 的内容（不再传 至标准输出），放弃之后的命令，但是对剩余模式空间重新执行sed</span><br></pre></td></tr></table></figure><ul><li><p>利用读取的下一行，来进行奇数与偶数行的选取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">--- ~ » seq 10 | sed 'n;d'  </span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">7</span><br><span class="line">9</span><br><span class="line">--- ~ » seq 10 | sed -n 'n;p'</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">6</span><br><span class="line">8</span><br><span class="line">10</span><br></pre></td></tr></table></figure></li><li><p>使用hold space来打印空行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">--- ~ » seq 3 | sed 'G'</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 先删除所有空行，再添加空行，保证只有一个空行</span></span><br><span class="line">--- ~ » seq 3 | sed '/^$/d;G'</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">3</span><br></pre></td></tr></table></figure></li><li><p>利用pattern space和hold space数据转换来达到倒序的效果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">--- ~ » seq 10 | sed '1!G;h;$!d'</span><br><span class="line">10</span><br><span class="line">9</span><br><span class="line">8</span><br><span class="line">7</span><br><span class="line">6</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>awk</title>
      <link href="/2020/03/27/awk/"/>
      <url>/2020/03/27/awk/</url>
      
        <content type="html"><![CDATA[<blockquote><p>怎么对一个文本进行格式化操作？如果使用的是windows，那么你的弄好半天，可是在linux上，我只能说so easy。对awk就敢这么说。超级强大</p></blockquote><p><code>awk</code> 不仅是一个命令，还是一门编程语言，能够实现条件判断，数组，循环等功能。以行为单位处理，将每一行以指定的分隔符分为多个分段，取出所需分段，以指定分隔符输出。</p><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">第一种：program被单引号包围</span></span><br><span class="line">awk [option] ‘program’ file</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">第二种：分为模式和动作</span></span><br><span class="line">awk [option] 'pattern option' file</span><br></pre></td></tr></table></figure><p><code>awk</code> 的两种写法中最常用的是第二种。</p><h3 id="各部分参数"><a href="#各部分参数" class="headerlink" title="各部分参数"></a>各部分参数</h3><p><em>option常用选项：</em> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-F#define input field separator by extended regex，指定分隔符。容易记错，所以还是用-v FS=''指定内部变量比较好。</span><br><span class="line">-v#assign values to variables，使用内部、外部变量。几乎每个awk命令都会用的一个参数</span><br></pre></td></tr></table></figure><h3 id="awk内置变量"><a href="#awk内置变量" class="headerlink" title="awk内置变量"></a>awk内置变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FSfield separate ，输入字段分隔符，默认为空白字符</span><br><span class="line">OFS output field separate，输出字段分隔符，默认为空白字符</span><br><span class="line">RSrecord separate，输入记录分隔符，每一条记录（row）分隔的依据，默认为回车</span><br><span class="line">ORS output record separate，输出记录分隔符，可以将多行合并为一行</span><br><span class="line">NFnumber of field，字段数，$NF为最后一行</span><br><span class="line">NRnumber of record，记录数（row），可以跟多个文件，文件的记录连续</span><br><span class="line">FNR可以跟多个文件，第二个文件记录数从一开始</span><br><span class="line">ARGC命令行参数个数</span><br><span class="line">ARGV命令行各参数组成的数组</span><br></pre></td></tr></table></figure><p>例子：使用内部变量，指定输入字段分隔符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -v FS=':' '&#123;print $1&#125;' /etc/passwd</span><br></pre></td></tr></table></figure><p>将多行合并为一行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -v ORS='' '&#123;print $0&#125;' /etc/passwd</span><br></pre></td></tr></table></figure><p>使用外部变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -v h=$HOST BEGIN'&#123;print h&#125;'  #BEGIN用来初始化变量</span><br></pre></td></tr></table></figure><h3 id="printf格式化输出"><a href="#printf格式化输出" class="headerlink" title="printf格式化输出"></a>printf格式化输出</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -v FS=':' '&#123;printf "%-30s %-20s %-10s\n",$1,$2,$3&#125;' /etc/passwd</span><br></pre></td></tr></table></figure><p><code>%</code>表示格式化输出</p><p><code>-</code>减号表示左对齐，后面的数字表示变量所占用的宽度，变量没有占完的宽度用空白字符替代，可以实现真正的格式化输出</p><p><code>+</code>加号表示右对齐。</p><p><code>\n</code>printf不会自动换行，需要手动加上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash">c:  显示字符的ASCII码</span></span><br><span class="line"><span class="meta">%</span><span class="bash">d %i:  显示十进制整数</span></span><br><span class="line"><span class="meta">%</span><span class="bash">e %E: 显示科学计数法数值</span></span><br><span class="line"><span class="meta">%</span><span class="bash">f ：显示为浮点数，小数   %5.1f，带整数、小数点、整数共5位，小数1位，不够用空格补上</span></span><br><span class="line"><span class="meta">%</span><span class="bash">g %G ：以科学计数法或浮点形式显示数值</span></span><br><span class="line"><span class="meta">%</span><span class="bash">s ：显示字符串；例：%5s最少5个字符，不够用空格补上，超过5个还继续显示</span></span><br><span class="line"><span class="meta">%</span><span class="bash">u ：无符号整数</span></span><br><span class="line"><span class="meta">%</span><span class="bash">%:  显示% 自身</span></span><br></pre></td></tr></table></figure><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><h5 id="算数操作符"><a href="#算数操作符" class="headerlink" title="算数操作符"></a>算数操作符</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ - * / % ^</span><br></pre></td></tr></table></figure><h5 id="赋值操作符"><a href="#赋值操作符" class="headerlink" title="赋值操作符"></a>赋值操作符</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+= -= *= /= %= ^=</span><br></pre></td></tr></table></figure><h5 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a>比较操作符</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">== != &gt; &gt;= &lt; &lt;=</span><br></pre></td></tr></table></figure><h5 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp; || !</span><br></pre></td></tr></table></figure><h5 id="模式匹配操作符"><a href="#模式匹配操作符" class="headerlink" title="模式匹配操作符"></a>模式匹配操作符</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~ !~</span><br></pre></td></tr></table></figure><h5 id="三目操作符"><a href="#三目操作符" class="headerlink" title="三目操作符"></a>三目操作符</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selector？if-true-expression:if-false-expression</span><br></pre></td></tr></table></figure><h5 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function(args1,args2)</span><br></pre></td></tr></table></figure><h3 id="awk语句"><a href="#awk语句" class="headerlink" title="awk语句"></a>awk语句</h3><p>除了指定一些变量外，其余内容的都应该写到括号里面，作为语句的一部分。awk的语法与c语言类似，语句间用分号相隔，同时变量不需要像shell中一样加$，直接使用变量名就行。语句块使用{}</p><p>if语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">--- ~ » seq 10 | paste -s | awk '&#123;if($3&gt;2) print $0&#125;'</span><br><span class="line">1       2       3       4       5       6       7       8       9       10</span><br><span class="line">--- ~ » seq 10 | paste -s | awk '&#123;if($3&lt;2)&#123;print $3&#125; else if($4&lt;3)&#123;print $4&#125; else&#123;print $5&#125;&#125;' </span><br><span class="line">5</span><br><span class="line">--- ~ » seq 10 | paste -s | awk '&#123;if($3&lt;2)&#123;                                                                   </span><br><span class="line">pipe pipe quote&gt; print $3</span><br><span class="line">pipe pipe quote&gt; &#125;</span><br><span class="line">pipe pipe quote&gt; else if($4&lt;3)&#123;</span><br><span class="line">pipe pipe quote&gt; print $4</span><br><span class="line">pipe pipe quote&gt; &#125;</span><br><span class="line">pipe pipe quote&gt; else&#123;</span><br><span class="line">pipe pipe quote&gt; print $5</span><br><span class="line">pipe pipe quote&gt; &#125;</span><br><span class="line">pipe pipe quote&gt; &#125;‘</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>while循环</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--- ~ » awk 'BEGIN&#123;sum=0;i=1;while(i&lt;=100)&#123;sum+=i;i++&#125;;print sum&#125;'                                          </span><br><span class="line">5050</span><br></pre></td></tr></table></figure><p>for循环</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--- ~ » awk 'BEGIN&#123;sum=0;for(i=1;i&lt;=100;i++)&#123;sum+=i&#125;;print sum&#125;'</span><br><span class="line">5050</span><br></pre></td></tr></table></figure><p>tips：awk循环中还可以使用break，continue，next等控制循环</p><p>至于其它功能，我觉得用处不大，所以不写了，有以上这些足够了。</p>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>连接文件问题</title>
      <link href="/2020/03/26/%E8%BF%9E%E6%8E%A5%E6%96%87%E4%BB%B6%E9%97%AE%E9%A2%98/"/>
      <url>/2020/03/26/%E8%BF%9E%E6%8E%A5%E6%96%87%E4%BB%B6%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="ln-sln"><a href="#ln-sln" class="headerlink" title="ln sln"></a>ln sln</h1><h2 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h2><p>在linux中会用到连接，之前学过hard link和symbolic link。这两个的解释如下：</p><p>文件创建时，会将数据写入到block中，同时建立一个inode，指向block地址。读取文件信息的时候先通过文件名找到inode，通过inode找到数据。</p><ul><li><p>hard link：创建hard Link既是另外一个文件名保存了相同的inode信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">917514 -rw-r--r--  2 narcissus narcissus     0 Mar 24 22:32  1</span><br><span class="line">917514 -rw-r--r--  2 narcissus narcissus     0 Mar 24 22:32  1.h</span><br></pre></td></tr></table></figure></li><li><p>symbolic link：创建了一个文件，这个文件保存了连接文件的路径，通过路径找到信息</p></li></ul><p>区别：</p><ul><li>hard link：<ul><li>不能建立目录的连接</li><li>删除其中一个连接/原始文件，不影响其它连接</li><li>可以随意移动原始文件位置</li></ul></li><li>symbolic link：<ul><li>可以建立目录的连接</li><li>删除了原始文件后，连接失效</li><li>不能改变原始文件位置</li></ul></li></ul><p>有一个错误的简单理解方法：那就是将hard link理解为复制，将symblic link理解为一个快捷方式。</p><h2 id="sln"><a href="#sln" class="headerlink" title="sln"></a>sln</h2><p>今天发现还有这个命令，解释如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The  sln  program  creates  symbolic  links.   Unlike the ln(1) program, it is statically linked.  This means that if for some reason the dynamic linker is not working, sln can be used to make symbolic links to dynamic libraries.</span><br></pre></td></tr></table></figure><p>它仍然为一个symbolic link，不过是静态的连接，可以解决某些动态库无法调用时的问题。</p><p>那么说说动态库和静态库的区别：</p><ul><li>动态库会在程序调用时个根据链接去寻找库文件</li><li>静态库则是将所需的库文件打包好，编译进程序里面。</li></ul><p>差异：</p><ul><li>动态库占用系统空间少，许多库可以共享，当然如果出现库缺失的情况那么程序会报错</li><li>静态库占用系统空间多，不需要共享，不会出现缺失库的问题</li></ul><p>所以sln则是用来解决动态库链接失效的问题。至于具体在什么情况下会使用到这个呢？暂时没有遇到过</p>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> snippet </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>curl简单使用</title>
      <link href="/2020/03/26/curl%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/03/26/curl%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="curl-simple-usage"><a href="#curl-simple-usage" class="headerlink" title="curl simple usage"></a>curl simple usage</h1><p>a long time ago,i wanna to find a tool which can test bandwidth when i use proxy.later i find a tool named speedtest-cli,however it cannot be used with proxychains.at last i find a method to download the webpage of google using curl and calculate the time downloading.in a fact,it is not reliabled.</p><p>today i find that the curl itself has a argument which can calculate the time accessing webpage.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--- ~ » curl -s -w "%&#123;time_total&#125;\n" -o /dev/null www.biadu.com</span><br><span class="line">1.409707</span><br></pre></td></tr></table></figure><p>while used in script,we need add timeout</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--- ~ » timeout 4 curl -s -w "%&#123;time_total&#125;\n" -o /dev/null www.biadu.com</span><br></pre></td></tr></table></figure><p>it can also get the header of webpage.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">--- ~ » curl -I www.baidu.com      </span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Cache-Control: private, no-cache, no-store, proxy-revalidate, no-transform</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: 277</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Date: Thu, 26 Mar 2020 08:33:34 GMT</span><br><span class="line">Etag: "575e1f72-115"</span><br><span class="line">Last-Modified: Mon, 13 Jun 2016 02:50:26 GMT</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Server: bfe/1.0.8.18</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> snippet </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>获取linux命令</title>
      <link href="/2020/03/21/%E8%8E%B7%E5%8F%96linux%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/03/21/%E8%8E%B7%E5%8F%96linux%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="获取命令简单解释"><a href="#获取命令简单解释" class="headerlink" title="获取命令简单解释"></a>获取命令简单解释</h1><p>之前为了能在状态栏显示一些常用命令，是用的一个定时任务从网上获取命令以及解释的，不过后来发现这个网页上的命令并没有每天更新，所以决定不在网上获取命令了，linux本身就有所有的命令以及解释，那么就自己搜一下吧。</p><p>这些命令呢都放在<code>/usr/bin</code>目录下，所以第一步就是将所有命令导入到一个文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /usr/bin/ &gt;&gt; 1.txt</span><br></pre></td></tr></table></figure><p>用<code>whatis</code>可以查看命令的简单介绍很符合我的需要，不过有的命令没有解释，所以还需要筛选一下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for i in `cat 1.txt`;do whatis $i;if [[ $? == 0 ]];then whatis $i &gt;&gt; 2.txt;if;done</span><br></pre></td></tr></table></figure><p>这样就得到了所以命令的简单介绍，然后用polybar随机选取一个进行显示就ok了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[module/manual]</span><br><span class="line">type = custom/script</span><br><span class="line">interval = 60</span><br><span class="line">exec = shuf -n1 ~/Documents/books/trscommand.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> snippet </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>两个小工具</title>
      <link href="/2020/03/21/%E4%B8%A4%E4%B8%AA%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
      <url>/2020/03/21/%E4%B8%A4%E4%B8%AA%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="小巧的工具"><a href="#小巧的工具" class="headerlink" title="小巧的工具"></a>小巧的工具</h1><p>虽然这两个工具可以用其它的命令替代，但是这两个工具很小巧</p><h2 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h2><p>用惯了cat来查看文件，不过还有一个tac来反向查看文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">--- ~/Desktop » cat 1.py </span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">--- ~/Desktop » tac 1.py </span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="comm"><a href="#comm" class="headerlink" title="comm"></a>comm</h2><p>用来比较两个文件的差异，不过需要这个文件是先排序的</p><ul><li>-1：2差1</li><li>-2：1差2</li><li>-3：交集的补集</li><li>-12：交集</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">--- ~/Desktop » cat 1.py </span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">--- ~/Desktop » cat 2.py </span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">--- ~/Desktop » comm 1.py 2.py </span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">                4</span><br><span class="line">                5</span><br><span class="line">        6</span><br><span class="line">        7</span><br><span class="line">        8</span><br><span class="line">        9</span><br><span class="line">--- ~/Desktop » comm -1 1.py 2.py </span><br><span class="line">        4</span><br><span class="line">        5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">--- ~/Desktop » comm -2 1.py 2.py</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">        4</span><br><span class="line">        5</span><br><span class="line">--- ~/Desktop » comm -3 1.py 2.py</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">        6</span><br><span class="line">        7</span><br><span class="line">        8</span><br><span class="line">        9</span><br><span class="line">--- ~/Desktop » comm -12 1.py 2.py</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> snippet </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>go-die-ing</title>
      <link href="/2020/03/21/go-die-ing/"/>
      <url>/2020/03/21/go-die-ing/</url>
      
        <content type="html"><![CDATA[<h1 id="郁闷的时刻"><a href="#郁闷的时刻" class="headerlink" title="郁闷的时刻"></a>郁闷的时刻</h1><p>今天发现世界上有种死法叫做被自己傻死，正在dieing。知道的东西太少了也是一种罪过！啊！！！！</p><p>之前为了将一个文件并行的写入另一个文件想了好多方法，最终呢是一个同事写了很长的脚本，用了许多高级的awk语法才搞定，但是今天呢，看见了一个命令，就是这个命令啊，差点没把我气死。一个命令搞定全部工作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">--- ~/Desktop » cat 1.py </span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">--- ~/Desktop » cat 2.py </span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">--- ~/Desktop » paste 1.py 2.py </span><br><span class="line">1       6</span><br><span class="line">2       7</span><br><span class="line">3       8</span><br><span class="line">4       9</span><br><span class="line">5       10</span><br></pre></td></tr></table></figure><p>原来一切如此简单！linux上的工具还真是好用啊。下面说说几个参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-d, --delimiters=LIST   reuse characters from LIST instead of TABs</span><br><span class="line">-s, --serial            paste one file at a time instead of in parallel</span><br><span class="line">-z, --zero-terminated    line delimiter is NUL, not newline</span><br></pre></td></tr></table></figure><ol><li><p><code>-d</code>指定delimiter，默认为tab</p><ul><li><p>使用<code>\n</code>实现交叉合并</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">--- ~/Desktop » paste 1.py 2.py -d'\n'</span><br><span class="line">1</span><br><span class="line">6</span><br><span class="line">2</span><br><span class="line">7</span><br><span class="line">3</span><br><span class="line">8</span><br><span class="line">4</span><br><span class="line">9</span><br><span class="line">5</span><br><span class="line">10</span><br></pre></td></tr></table></figure></li><li><p>指定其它delimiter，不过这个delimiter只能有一个可惜</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--- ~/Desktop » paste 1.py 2.py -d '-'</span><br><span class="line">1-6</span><br><span class="line">2-7</span><br><span class="line">3-8</span><br><span class="line">4-9</span><br><span class="line">5-10</span><br></pre></td></tr></table></figure><p>如果要用长一些的delimiter那么使用awk</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--- ~/Desktop » paste *py | awk '&#123;print $1"----&gt;"$2"&lt;----"$3&#125;' </span><br><span class="line"><span class="meta">1----&gt;</span><span class="bash">6&lt;----11</span></span><br><span class="line"><span class="meta">2----&gt;</span><span class="bash">7&lt;----12</span></span><br><span class="line"><span class="meta">3----&gt;</span><span class="bash">8&lt;----13</span></span><br><span class="line"><span class="meta">4----&gt;</span><span class="bash">9&lt;----14</span></span><br><span class="line"><span class="meta">5----&gt;</span><span class="bash">10&lt;----15</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>-s</code>将列转为行，比使用<code>xargs -n</code>好多了，因为xargs毕竟需要指定列数，具有不可靠性，而这个才是专业的</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--- ~/Desktop » paste 1.py 2.py -s    </span><br><span class="line">1       2       3       4       5</span><br><span class="line">6       7       8       9       10</span><br><span class="line">--- ~/Desktop » paste 1.py -s     </span><br><span class="line">1       2       3       4       5</span><br></pre></td></tr></table></figure></li><li><p><code>-z</code>这个参数的作用我暂时还没体会到，恕我愚蠢</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">--- ~/Desktop » paste 1.py 2.py 3.py -z</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">        6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">        11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td></tr></table></figure></li><li><p>结合使用</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">--- ~/Desktop » paste 1.py 2.py 3.py -d '\n' -s</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td></tr></table></figure><p> 效果类似于</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">--- ~/Desktop » cat 1.py 2.py 3.py| xargs -n 1 </span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td></tr></table></figure> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">--- ~/Desktop » cat *.py</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> snippet </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux下获取网络上linux命令</title>
      <link href="/2020/03/19/linux%E4%B8%8B%E8%8E%B7%E5%8F%96%E7%BD%91%E7%BB%9C%E4%B8%8Alinux%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/03/19/linux%E4%B8%8B%E8%8E%B7%E5%8F%96%E7%BD%91%E7%BB%9C%E4%B8%8Alinux%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="获取网络上linux命令"><a href="#获取网络上linux命令" class="headerlink" title="获取网络上linux命令"></a>获取网络上linux命令</h1><p>linux上的命令很多，没有学全，而且容易忘记，那么写个脚本从网络上获取命令吧</p><p>要达到的目标：</p><ul><li>从网页上获取数据进行筛选得到需要的命令</li><li>将命令显示到状态栏polybar上</li></ul><ol><li><p>为了实现第一个目标：</p><ul><li><p>使用定时任务每天定时获取命令，因为这个网页的命令每天更新。由于获取到的命令存在中文，但是polybar显示不了，所以对其进行了翻译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 定时任务获取数据</span></span><br><span class="line">0 20 * * * curl https://www.linuxcool.com/ | grep  -E '^&lt;a' | awk -F '&gt;' '&#123;print $2&#125;' | awk '&#123;print $1 "----" $3&#125;' | awk -F '&lt;' '&#123;print $1&#125;' | grep -E '^[a-zA-Z]' &gt; ~/Documents/books/command.txt &amp;&amp; ~/.local/bin/trans</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 翻译脚本并格式化输出</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">file="/home/narcissus/Documents/books/command.txt"</span><br><span class="line">newfile="/home/narcissus/Documents/books/trscommand.txt"</span><br><span class="line">total=`wc -l $file | awk '&#123;print $1&#125;'`</span><br><span class="line"></span><br><span class="line">for ((i=1; i&lt;=$&#123;total&#125;; i++))</span><br><span class="line">do</span><br><span class="line">    info=`sed -n "$&#123;i&#125;p" $file`</span><br><span class="line">    one=`echo $info | awk -F '----' '&#123;print$1&#125;'`    </span><br><span class="line">    two=`echo $info | awk -F '----' '&#123;print$2&#125;' | ydcv | tail -n1`    </span><br><span class="line">    echo "[ $one ] :::::: $two"  &gt;&gt; $newfile</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li></ul></li><li><p>为了实现第二个目标</p><ul><li><p>使用polybar定时刷新的功能，随机显示命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[module/hiscmd]</span><br><span class="line">type = custom/script</span><br><span class="line">interval = 60</span><br><span class="line">exec = shuf -n1 ~/Documents/books/trscommand.txt</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> snippet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下翻译并循环提醒</title>
      <link href="/2020/03/19/linux%E4%B8%8B%E7%BF%BB%E8%AF%91%E5%B9%B6%E5%BE%AA%E7%8E%AF%E6%8F%90%E9%86%92/"/>
      <url>/2020/03/19/linux%E4%B8%8B%E7%BF%BB%E8%AF%91%E5%B9%B6%E5%BE%AA%E7%8E%AF%E6%8F%90%E9%86%92/</url>
      
        <content type="html"><![CDATA[<h1 id="翻译功能-复习功能"><a href="#翻译功能-复习功能" class="headerlink" title="翻译功能+复习功能"></a>翻译功能+复习功能</h1><p>确实，windows这个系统很好看，前段时间安装了windows，差点就被它漂亮的UI，舒服的使用体验迷惑住了。但是要用来编程的话，它确实不够好。下面就说说在linux上如何使用脚本等来实现一键翻译以及复习单词的功能。</p><p>想要的效果是：</p><ul><li>使用快捷键来翻译选中的单词</li><li>每隔一段时间将之前翻译过的那些不认识的单词自动翻译一遍来达到复习的效果</li></ul><ol><li><p>为了达到第一个目标</p><ul><li><p>快捷键需要使用xmonad中自定义快捷键的功能</p></li><li><p>选中单词使用<code>xclip</code>命令</p></li><li><p>翻译使用脚本translate（具有拼读功能）</p></li><li><p>将翻译结果以弹窗消息的形式显示出来使用到了<code>dunst</code>这个软件，以及<code>notify-send</code>这个命令发送翻译结果</p></li><li><p>为了后面的复习功能需要将单词保存到一个文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 这是定义的快捷键翻译功能</span></span><br><span class="line">, ((0 , xK_t), spawn "translate `xclip -o` | xargs -0 notify-send &amp;&amp; xclip -o &gt;&gt; ~/Documents/books/remember_word.txt")</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 这是翻译发声脚本</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">翻译单词并拼读出来</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">获取系统音量大小</span></span><br><span class="line">volume=`amixer sget Master | tr -d '[a-zA-Z][:punct:]' | awk '&#123;print $2&#125;' | sed -n '$p'`</span><br><span class="line"><span class="meta">#</span><span class="bash">通过在线语音拼读</span></span><br><span class="line">mplayer -volume $&#123;volume&#125; http://dict.youdao.com/dictvoice\?audio\=$&#123;1&#125; &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">通过ydcv程序来对单词进行翻译</span></span><br><span class="line">ydcv $&#123;1&#125;</span><br></pre></td></tr></table></figure><p>现在就可以先用鼠标选中单词，然后按快捷键将单词进行翻译了。</p></li></ul></li><li><p>为了实现第二个目标</p><ul><li><p>前面已经将单词保存到了文件中，所以相对来说应该挺简单的，但是发现crontab并不能使用<code>notify-send</code>命令，所以只能选择其它方法来达到定时复习的功能</p></li><li><p>由于polybar状态栏具有定时功能，所以就使用它了</p></li><li><p>现在就很简单，只需要从文件中随机读取一个单词，然后翻译并显示就好了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 读取单词并翻译</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">shuf -n1 ~/Documents/books/remember_word.txt  | xargs ydcv | xargs -0 notify-send &amp;&amp; mplayer ~/Music/prompt/wechat.mp3 &amp;&gt;/dev/null</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> polybar中设置定时功能</span></span><br><span class="line">[module/trans]</span><br><span class="line">type = custom/script</span><br><span class="line">interval = 120</span><br><span class="line">exec = ~/.local/bin/remember_word</span><br></pre></td></tr></table></figure><p>这样就实现了每隔两分钟自动复习的功能</p></li></ul></li><li><p>效果图</p><p> <img src="https://s1.ax1x.com/2020/03/19/8rApkD.png" alt="效果"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> snippet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cronie</title>
      <link href="/2020/03/19/cronie/"/>
      <url>/2020/03/19/cronie/</url>
      
        <content type="html"><![CDATA[<h1 id="cronie"><a href="#cronie" class="headerlink" title="cronie"></a>cronie</h1><p>In archlinux, using crontab need to install a package named cronie</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S cronie</span><br></pre></td></tr></table></figure><p>make it start at boot and start it</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable cronie</span><br><span class="line">sudo systemctl start cronie</span><br></pre></td></tr></table></figure><p>edit crontab with vim, because default editor is vi</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EDITOR=vim crontab -e</span><br></pre></td></tr></table></figure><p>list all crontab</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure><p>it seems that cannot use <code>notify-send</code> command and i don’t know how to resolve it.</p>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> snippet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-ps</title>
      <link href="/2020/03/18/linux-ps/"/>
      <url>/2020/03/18/linux-ps/</url>
      
        <content type="html"><![CDATA[<p>Not only once i use the command to find zombie process, because of it’s so long i don’t mind to remember it. However, today i see all parameters of it and find that it is not hard enought as i ever thought.</p><p>command like this:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -eo stat,ppid,pid,cmd | grep -E '^Z'</span><br></pre></td></tr></table></figure><p>each parameter above is important in use, i will tell you why.</p><ul><li><code>-e</code>: list all of processes, without it will not show full message</li><li><code>-o</code>: used for format, without it cannot write needed field</li><li><code>stat</code>: the main filed to recognize whether the process is zombie, the zombie process begin with <code>Z</code></li><li><code>ppid</code>: father process pid, if pid cannot end the process, need kill ppid</li><li><code>pid</code>: process pid</li><li><code>cmd</code>: this is used to see zombie process name</li></ul><p>In a fact, if we only want to see whether there is a zombie process it can be much easier.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -eo stat | grep -E '^Z'</span><br></pre></td></tr></table></figure><p>or use <code>top</code> command to see zombie processs number</p><p>then we need to kill zombie process we find, remember cannot use <code>kill -9 pid</code> to kill the process, because the status of process is end and it is just zombie.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kill -HUP pid</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line">kill -HUP ppid</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> snippet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xmonad-pycharm</title>
      <link href="/2020/03/17/xmonad-pycharm/"/>
      <url>/2020/03/17/xmonad-pycharm/</url>
      
        <content type="html"><![CDATA[<h1 id="start-pycharm-error"><a href="#start-pycharm-error" class="headerlink" title="start pycharm error"></a>start pycharm error</h1><p>I find that if i don’t start pycharm in window environment there was a problem called:<code>WARN - s.impl.EditorColorsManagerImpl - Cannot find scheme: Vibrant Ink from plugin: com.intellij.database</code>.</p><p>So i cannot use pycharm in xmonad. At last i find the method to fix the problem in google.</p><p>Just export a variable</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export _JAVA_AWT_WM_NONREPARENTING=1</span><br></pre></td></tr></table></figure><p>After that i can start pycharm, every thing is ok.</p><p>In order to simplify the command, because of hard to remember, i write an alias to <code>.zshrc</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias pycharm='export _JAVA_AWT_WM_NONREPARENTING=1 &amp;&amp; ~/Software/pycharm/pycharm-2019.3.3/bin/pycharm.sh &amp;&gt;/dev/null &amp;'</span><br></pre></td></tr></table></figure><p>After doing this, every time i want start pycharm just only type pycharm in terminal.</p>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> snippet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip-setting</title>
      <link href="/2020/03/15/pip-setting/"/>
      <url>/2020/03/15/pip-setting/</url>
      
        <content type="html"><![CDATA[<blockquote><p>pip install localtion can be modified</p></blockquote><p>command to find the default position</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m site</span><br></pre></td></tr></table></figure><p>be careful the <code>USER_SITE</code> value, it stores the package location pip installed</p><p>now let us to see where is the config file</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m site --help</span><br></pre></td></tr></table></figure><p>the config file is <code>/usr/lib/python3.8/site.py</code></p><p>then we change the default value to</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USER_SITE &#x3D; &quot;&#x2F;home&#x2F;narcissus&#x2F;Software&#x2F;python_lib&quot;</span><br></pre></td></tr></table></figure><p>from now on, we use pip command install packages, they will be stored in customized position</p><p>example:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pandas --user</span><br></pre></td></tr></table></figure><p>but the defalut localtion (~/.local/lib/python3.8/site-packages) is good enough, so i don’t change it.</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell-for循环</title>
      <link href="/2020/03/14/shell-for%E5%BE%AA%E7%8E%AF/"/>
      <url>/2020/03/14/shell-for%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<p><code>(())</code>中可以做计算，但是没想到还可以这么写</p><pre><code class="shell"><span class="meta">#</span><span class="bash">!/bin/bash</span>for ((i=0; i&lt;=10; i++))do    echo $idone</code></pre>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python</title>
      <link href="/2020/03/04/python-%E9%87%8D%E6%96%B0%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/03/04/python-%E9%87%8D%E6%96%B0%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>之前学习过python，看书，视频等等，但是发现看的都不完整。所以这一次决定好好的来从头学习一遍。打算学好python，然后再学习go语言以及vue</p></blockquote><h1 id="python环境"><a href="#python环境" class="headerlink" title="python环境"></a>python环境</h1><ul><li><p>python是一门解释型语言，也就是说不像c语言那样可以编译好了运行，python是边解释边执行的。所以源码可见，这个解释器就是python，我们在网上下载的python就是一个解释器。下载了并安装了python就拥有了一个python环境。</p></li><li><p>查看python版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure></li><li><p>第一个函数<code>print()</code><br>print函数默认换行，如果不换行则需要加参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"hello"</span>,end=<span class="string">" "</span>)</span><br><span class="line">print(<span class="string">"world"</span>)</span><br></pre></td></tr></table></figure></li></ul><h1 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h1><ul><li><p>python代码的一个很明显的特点就是缩进。代码块是通过缩进来组织的，代码块使用冒号<code>:</code>来标识</p></li><li><p>单行注释使用<code>#</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单行注释</span></span><br></pre></td></tr></table></figure></li><li><p>多行注释使用<code>&quot;&quot;&quot; &quot;&quot;&quot;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">多行</span></span><br><span class="line"><span class="string">注释</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure></li><li><p>一行代码拆分多行使用<code>\</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">user = &#123;<span class="string">"name"</span>:<span class="string">"snippet"</span>,\</span><br><span class="line">        <span class="string">"age"</span>:<span class="string">"12"</span>,\</span><br><span class="line">        <span class="string">"gender"</span>:<span class="string">"male"</span></span><br><span class="line">        &#125;</span><br><span class="line">print(user[<span class="string">"age"</span>])</span><br></pre></td></tr></table></figure></li><li><p>命名规范</p><ul><li><p>类命名：<br>使用大驼峰的规范，即每个单词都以大写字母开头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">()</span>:</span></span><br><span class="line">    name = <span class="string">"python"</span></span><br></pre></td></tr></table></figure></li><li><p>变量命名：</p><ol><li>第一种：小驼峰，即第一个单词小写开头，其余字母大写开头<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">baiduUrl = <span class="string">"https://www.baidu.com"</span></span><br></pre></td></tr></table></figure></li><li>第二种：所有字母全部小写，并用<code>_</code>连接，我比较喜欢这个<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">baidu_url = <span class="string">"https://www.baidu.com"</span></span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ul><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h2><ul><li>变量是一个字符串，用来保存数据的内存地址，指向内存中数据Data的位置。</li><li>变量所保存的内存地址可以被改变，所以变量可变</li><li>如果在程序中多处都要使用到这个数据，那么使用变量则可以只修改一个地方就行</li></ul><h2 id="赋值："><a href="#赋值：" class="headerlink" title="赋值："></a>赋值：</h2><ul><li><p>由于python是解释型语言，所以在声明变量时，不需要指定变量的类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"xiaotianquan"</span></span><br></pre></td></tr></table></figure></li><li><p>还可以一次性赋值多个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name,age,like = <span class="string">"gou"</span>,<span class="number">2</span>,<span class="string">"food"</span></span><br><span class="line">print(name,age,like)</span><br></pre></td></tr></table></figure></li></ul><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>直接写变量名即可</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="标准数据类型："><a href="#标准数据类型：" class="headerlink" title="标准数据类型："></a>标准数据类型：</h2><ol><li><p>数字</p><p> 直接写数字，不加引号，加了引号作为字符串</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p>字符串 str</p><p> 用引号括起来的作为字符串，可以使用单引号和双引号<br> 这两种没有区别，因为没有变量置换（shell和perl中）这种操作，它使用的是拼接</p></li><li><p>布尔 True/False</p><p> 在python中，布尔值也可以作为数字使用<br> True = 1, False = 0</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">3</span></span><br><span class="line">print(age+<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li><li><p>列表 list</p><p> 用<code>[]</code>表示，可以存储不同类型的数据</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="string">"a"</span>,<span class="string">"b"</span>]</span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure><p> 切片操作</p><ul><li><p>使用<code>:</code>，取出指定范围的数据，可以使用函数<code>id()</code>查看取出数据的内存地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list[start_index:end_index:step]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">data1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 作用为复制列表，使用频率高，有效的避免对原数组数据造成破坏</span></span><br><span class="line">data2 = data1[:]</span><br><span class="line"><span class="comment"># 内存地址不同</span></span><br><span class="line">print(id(data1),id(data2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 与data[:]作用相同，-1为最后一个元素的索引</span></span><br><span class="line">data3 = data1[<span class="number">0</span>:<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定位置,前闭后开[)</span></span><br><span class="line">data4 = data1[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定步幅</span></span><br><span class="line">data4 = data1[::<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逆序</span></span><br><span class="line">data8 = data1[<span class="number">-1</span>::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 负数索引</span></span><br><span class="line">data5 = data1[<span class="number">-3</span>:<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p>其它</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除指定元素</span></span><br><span class="line">data6 = data1.remove(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从后往前取出数据（删除）</span></span><br><span class="line">data7 = data1.pop()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 乘</span></span><br><span class="line">data9 = data1 * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表生成式</span></span><br><span class="line">data10 = [ i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>) ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌套</span></span><br><span class="line">data11 = [data,data10]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环取出嵌套数据</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data11:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">        print(j)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 如果嵌套的两个list元素个数一致，可以使用一层嵌套即可取出所有值</span></span><br><span class="line">la = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">lb = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>]</span><br><span class="line">lc = [la,lb]</span><br><span class="line"><span class="keyword">for</span> i,j,k,l <span class="keyword">in</span> lc:</span><br><span class="line">    print(i,j,k,l)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看list元素个数</span></span><br><span class="line">len(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全部为数字时，可以取最大值，最小值</span></span><br><span class="line">max(la)</span><br><span class="line">min(la)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某个元素存在多少个</span></span><br><span class="line">la.count(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>元组 tuple</p><p> 使用<code>()</code>，为一个不可修改列表，大部分用法与list一致</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">data = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">"a"</span>,<span class="string">"b"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个只有一个元素的tuple，后面需要一个逗号</span></span><br><span class="line">data = (<span class="number">1</span>,)</span><br><span class="line">print(type(data))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以不加括号</span></span><br><span class="line">data = <span class="number">1</span>,</span><br><span class="line">print(type(data))</span><br><span class="line">data = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span></span><br><span class="line">print(type(data))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建空的tuple</span></span><br><span class="line">data = tuple()</span><br><span class="line">data = ()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过list创建tuple</span></span><br><span class="line">mylist = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9</span>)]</span><br><span class="line">data = tuple(mylist)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tuple的特殊用法，两个元素交换</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">a,b = b,a</span><br></pre></td></tr></table></figure></li><li><p>集合 set</p><ul><li><p>数据有序，而且不可重复,具有取出重复的作用</p></li><li><p>通过list和tuple来生成集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">b = set(a)</span><br><span class="line">print(type(b))</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure></li><li><p>通过<code>{}</code>来定义集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">print(type(a))</span><br></pre></td></tr></table></figure></li><li><p>集合没有索引，只能for循环取出元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>)&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure></li><li><p>集合运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>)&#125;</span><br><span class="line">b = &#123;i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>,<span class="number">7</span>)&#125;</span><br><span class="line"><span class="comment"># 交集</span></span><br><span class="line">c = a.intersection(b)</span><br><span class="line"><span class="comment"># 并集</span></span><br><span class="line">d = a.union(b)</span><br><span class="line"><span class="comment"># 差集</span></span><br><span class="line">e = a.difference(b)</span><br></pre></td></tr></table></figure></li><li><p>让集合不可修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = &#123; i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>)&#125;</span><br><span class="line">b = frozenset(a)</span><br></pre></td></tr></table></figure><p>其它 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成奇数、偶数集合</span></span><br><span class="line">a = &#123;i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>&#125;</span><br><span class="line">b = &#123;i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>) <span class="keyword">if</span> i % <span class="number">2</span> != <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除集合中的数，如果不存在则会报错</span></span><br><span class="line">sa = &#123;i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>)&#125;</span><br><span class="line">sa.remove(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除集合中的数，如果不存在不会报错</span></span><br><span class="line">sa.discard(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合中也有pop函数，但是是随机的</span></span><br><span class="line">sa.pop()</span><br></pre></td></tr></table></figure></li></ul></li></ol><ol start="7"><li>字典 dict</li></ol><h2 id="数据类型嵌套-对象"><a href="#数据类型嵌套-对象" class="headerlink" title="数据类型嵌套-对象"></a>数据类型嵌套-对象</h2><p>在list，tuple，set，dict中均可以存储对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">()</span>:</span></span><br><span class="line">    name = <span class="string">"ls"</span></span><br><span class="line">    age = <span class="number">21</span></span><br><span class="line">user = User()</span><br><span class="line"></span><br><span class="line">a = [user]</span><br><span class="line">b = (user,)</span><br><span class="line">c = &#123;user&#125;</span><br><span class="line">d = &#123;<span class="string">"obj"</span>:user&#125;</span><br><span class="line"></span><br><span class="line">print(type(a),type(b),type(c),type(d))</span><br><span class="line">print(a[<span class="number">0</span>].name,b[<span class="number">0</span>].name,d[<span class="string">"obj"</span>].name)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">    print(i.name,i.age)</span><br></pre></td></tr></table></figure><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><ul><li>算数运算符</li><li>关系运算符</li><li>赋值运算符</li><li>逻辑运算符</li><li>位运算</li><li>成员运算符</li><li>身份运算符</li></ul><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><ul><li>python没有自增自减运算符</li><li>包括：<ul><li>加 <code>+</code></li><li>减 <code>-</code></li><li>乘 <code>*</code></li><li>除<ul><li>普通除法 <code>/</code></li><li>取余 <code>%</code></li><li>取整 <code>//</code></li></ul></li></ul></li><li>所有运算符都可以使用运算赋值的缩写：<br>  <code>+=</code>，<code>-=</code>，<code>*=</code>,<code>/=</code>,<code>%=</code>,<code>//=</code>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">a += <span class="number">1</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>  已经有运算赋值这两个操作了，所以不能再赋值</li></ul><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>比较运算的结果一定为一个布尔值：True/False</p><ul><li>等于 <code>==</code></li><li>不等于 <code>!=</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">3</span>!=<span class="number">4</span>)</span><br></pre></td></tr></table></figure></li><li>其它<ul><li><code>&gt;</code></li><li><code>&gt;=</code></li><li><code>&lt;</code></li><li><code>&lt;=</code></li></ul></li></ul><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>使用等号来赋值<code>=</code>，将数据data赋值给变量</p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>返回结果为True/False</p><ul><li>and</li><li>or</li><li>not</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> a == <span class="number">3</span> <span class="keyword">or</span> a == <span class="number">2</span> :</span><br><span class="line">    print(<span class="string">"true"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"false"</span>)</span><br></pre></td></tr></table></figure><h2 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h2><p>用来检测一个值或者变量是否在一个集合中,返回结果为True/False</p><ul><li>in</li><li>not in<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>)]</span><br><span class="line">c = a <span class="keyword">in</span> b</span><br><span class="line">d = a <span class="keyword">not</span> <span class="keyword">in</span> b</span><br><span class="line">print(c,d)</span><br></pre></td></tr></table></figure></li></ul><h2 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h2><p>用来判断两个变量是否一致,返回结果为True/False</p><ul><li>is</li><li>is not<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">1</span></span><br><span class="line">c = <span class="number">2</span></span><br><span class="line">print(a <span class="keyword">is</span> b)</span><br><span class="line">print(a <span class="keyword">is</span> c)</span><br><span class="line">print(a <span class="keyword">is</span> <span class="keyword">not</span> c)</span><br></pre></td></tr></table></figure></li></ul><h1 id="程序结构"><a href="#程序结构" class="headerlink" title="程序结构"></a>程序结构</h1><ul><li>顺序<br>  程序从上到下依次执行</li><li>循环<br>  <code>for</code><br>  <code>while</code></li><li>分支<br>  <code>if</code></li></ul><h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><p><em>这里的条件表达式只要是返回结果为True/False即可</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件表达式:</span><br><span class="line">    语句<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> 条件表达式:</span><br><span class="line">    语句<span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    语句<span class="number">3</span></span><br></pre></td></tr></table></figure><p>举例1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">user = input(<span class="string">"type your name: "</span>)</span><br><span class="line"><span class="keyword">if</span> user == <span class="string">"root"</span>:</span><br><span class="line">    print(<span class="string">"you are the admin"</span>)</span><br><span class="line"><span class="keyword">elif</span> user == <span class="string">"narcissus"</span>:</span><br><span class="line">    print(<span class="string">"you are the normal user"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"you are the user not in group sudo"</span>)</span><br></pre></td></tr></table></figure><p>举例2：空字符串为假</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">""</span>:</span><br><span class="line">    print(<span class="string">"true"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"false"</span>)</span><br></pre></td></tr></table></figure><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p><em>用来遍历序列中的所有元素</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量 <span class="keyword">in</span> 序列:</span><br><span class="line">    语句</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><ul><li>循环中的条件跳转<ul><li>break 终止循环</li><li>continue 跳过continue后的语句</li><li>pass 没有实际作用，用来占位</li></ul></li></ul><p>举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        print(str(i) + <span class="string">"能被2整除"</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">elif</span> i % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">        print(str(i) + <span class="string">"能被3整除"</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>当条件成立时，一直循环。这个条件必须要有终止，否则会形成死循环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件表达式:</span><br><span class="line">    语句</span><br></pre></td></tr></table></figure><p>举例1：<br>求a，b的最小公约数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">2</span></span><br><span class="line">b = <span class="number">5</span></span><br><span class="line">c = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> c % a != <span class="number">0</span> <span class="keyword">or</span> c % b != <span class="number">0</span>:</span><br><span class="line">    c += <span class="number">1</span></span><br><span class="line">    print(a,b,c)</span><br></pre></td></tr></table></figure><p>举例2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">3</span>:</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        num =  int(input(<span class="string">"num"</span>))</span><br><span class="line">        a = <span class="number">5</span> / num</span><br><span class="line">        print(a)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"输入非零整数"</span>)</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul><li><p>命名<br>一般采用:<code>动词_名词</code>的形式</p></li><li><p>意义<br>复用代码</p></li><li><p>定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">()</span>:</span></span><br><span class="line">    语句</span><br></pre></td></tr></table></figure></li><li><p>调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名()</span><br></pre></td></tr></table></figure></li><li><p>举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_time</span><span class="params">()</span>:</span></span><br><span class="line">    now = time.strftime(<span class="string">"%Y%m%d-%H:%M:%S"</span>)</span><br><span class="line">    print(now)</span><br><span class="line">get_time()</span><br></pre></td></tr></table></figure></li></ul><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ul><li><p>分类方式1：</p><ul><li><p>形参：在写函数时，括号中的那个参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(name)</span><br></pre></td></tr></table></figure></li><li><p>实参：在函数调用时括号中传入的参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get_name(<span class="string">"小舞"</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>分类方式2：</p><ul><li><p>位置参数：在传参时必须一一对应</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normal</span><span class="params">(name,age,like)</span>:</span></span><br><span class="line">    print(<span class="string">"&#123;&#125; is &#123;&#125; years old and like &#123;&#125;"</span>.format(name,age,like))</span><br><span class="line">normal(<span class="string">"小舞"</span>,<span class="number">20</span>,<span class="string">"star"</span>)</span><br></pre></td></tr></table></figure></li><li><p>关键字参数：在传参时不必一一对应，而是使用参数名来设置参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">keyword</span><span class="params">(name,age,like)</span>:</span></span><br><span class="line">    print(<span class="string">"&#123;&#125; is &#123;&#125; years old and like &#123;&#125;"</span>.format(name,age,like))</span><br><span class="line">keyword(age=<span class="number">20</span>, name=<span class="string">"小舞"</span>, like=<span class="string">"star"</span>)</span><br></pre></td></tr></table></figure></li><li><p>默认参数: 给参数设置默认值，如果不传则使用默认值，不过默认参数后面不能写位置参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">default</span><span class="params">(a,b,c=<span class="number">1</span>)</span>:</span></span><br><span class="line">    print((a + b) / c)</span><br><span class="line">default(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li><li><p>收集参数：在不确定会传入参数个数的情况下使用</p><ol><li>如果后面还有位置参数，那么位置参数会作为关键字参数，而且位置不能变</li><li>如果有两个星号，那么表示收集所有参数包括关键字参数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">collection</span><span class="params">(*count)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> count:</span><br><span class="line">        sum += i</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">collection(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">collection</span><span class="params">(*count,another=<span class="number">1</span>)</span>:</span></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> count:</span><br><span class="line">    sum += i</span><br><span class="line"><span class="keyword">return</span> sum + another</span><br><span class="line">collection(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,another=<span class="number">5</span>)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>分解参数：</p><ol><li><p>将list和元组作为参数传给函数时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">expend</span><span class="params">(*args)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span> </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">        sum += i</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">a = (i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line">b = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>)]</span><br><span class="line">print(expend(*a))</span><br><span class="line">print(expend(*b))</span><br></pre></td></tr></table></figure></li><li><p>将字典作为参数传给函数时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">expend</span><span class="params">(**args)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">        sum += args[i]</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">c = &#123;<span class="string">"a"</span>:<span class="number">1</span>,<span class="string">"b"</span>:<span class="number">2</span>,<span class="string">"c"</span>:<span class="number">3</span>&#125;</span><br><span class="line">expend(**c)</span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ul><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><ul><li>函数可以有返回值，也可以没有返回值，使用<code>return</code>来返回执行结果</li><li>但是在python中还是推荐有返回值，如果没有实际值返回可以返回一个<code>None</code></li><li>函数一旦执行return之后函数就会结束，return后面的语句不会执行</li></ul><p>举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">a = sum(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">c = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> c</span><br><span class="line">    c += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"><span class="comment"># 函数没有返回值，每次调用函数c的值就自增1</span></span><br><span class="line">plus()</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure><p>计算九九乘法表：我写的挺复杂</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> x &lt;= y:</span><br><span class="line">        print(str(x) + <span class="string">"*"</span> + str(y) + <span class="string">"="</span> + str(x*y) \</span><br><span class="line">        + <span class="string">" "</span>,end=<span class="string">''</span>)</span><br><span class="line">        x += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> x &gt; y:</span><br><span class="line">            print(end=<span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure><p>简单写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,y+<span class="number">1</span>):</span><br><span class="line">        print(<span class="string">'&#123;&#125;*&#123;&#125;=&#123;&#125;\t'</span>.format(x,y,x*y),end=<span class="string">""</span>)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure><p>三角形</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>-y):</span><br><span class="line">        print(<span class="string">"   "</span>,end=<span class="string">""</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">2</span>*y):</span><br><span class="line">        print(<span class="string">" 1 "</span>,end=<span class="string">""</span>)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure><h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><p>函数直接或者间接调用自己，需要有结束条件</p><p>优缺点：</p><ul><li>优点：书写理解简单</li><li>缺点：执行速度慢</li></ul><p>写法：</p><ul><li><p>结束条件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="comment"># 这个函数调用时，传入1，得到plus(1) = 1</span></span><br><span class="line"><span class="comment"># 不能这么写，这么写是错误的</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(num)</span>:</span></span><br><span class="line">    plus(<span class="number">1</span>) = <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>返回自己</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> num + plus(num<span class="number">-1</span>)</span><br><span class="line">plus(<span class="number">100</span>)</span><br></pre></td></tr></table></figure></li><li><p>举例：斐波拉契数列</p></li></ul><p>普通写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1, 1, 2, 3, 5, 8, 13.....</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(num)</span>:</span></span><br><span class="line">    a = b = i = <span class="number">1</span></span><br><span class="line">    sum = <span class="number">1</span> <span class="keyword">if</span> num == <span class="number">1</span> <span class="keyword">else</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; num<span class="number">-1</span>:</span><br><span class="line">        a,b = b,a+b</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        sum = sum + b </span><br><span class="line">    print(<span class="string">"第&#123;&#125;个斐波拉契数为：&#123;&#125;，总数为：&#123;&#125;"</span>.format(num,b,sum)) </span><br><span class="line">fun(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>使用递归写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1, 1, 2, 3, 5, 8, 13.....</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span> <span class="keyword">or</span> num == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib(num<span class="number">-1</span>) + fib(num<span class="number">-2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_list</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,num+<span class="number">1</span>):</span><br><span class="line">        print(fib(i))</span><br><span class="line">fib_list(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h2><p>对比普通写法和递归的写法，递归函数在调用40次时已经停止调用了，而且在求同一个斐波拉契数的时候，普通写法速度秒杀递归写法。普通写法单线程求第十万个斐波拉契数不到一秒，第一百万个斐波拉契数约六秒。所以递归函数不适合复杂计算</p><p>递归函数为什么慢？因为递归函数运行时，每一次调用都会返回一个<code>表达式</code>，不能返回一个确定的值，那么原函数的参数，逻辑结构等这些都不能修改，每次计算机在调用函数时会使用堆栈，每调用一个函数会增加一层栈帧，所以当递归过程多次调用函数的时候可能会导致大小有限的堆栈溢出。优化方式之一是尾递归</p><p>为什么尾递归可以优化？尾递归与递归都需要调用自身，看起来没多大区别（我刚开始也没看懂），但是尾递归每次都不是返回的表达式，而是返回的一个函数，至于计算结果，那是通过变量的形式进行传递的，这么做的好处就是不用开新的栈，而是刷新原函数，将参数传递进去就好了。所以做到了优化，但是python中即使是使用了尾递归，次数仍然只能达到999次。并不是真正意义上的尾递归</p><p>在很多时候我们都是在刷新变量的值，而并不是重新用一个别的变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    sum += i</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><p>尾递归的斐波拉契函数写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1, 1, 2, 3, 5, 8, 13.....</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(num, first=<span class="number">1</span>, second=<span class="number">1</span>, sum=<span class="number">2</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">2</span> <span class="keyword">or</span> num == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> second,sum</span><br><span class="line">    <span class="keyword">return</span> fib(num<span class="number">-1</span>, second, first+second, sum+first+second)</span><br><span class="line">fib(<span class="number">7</span>)</span><br></pre></td></tr></table></figure><p>利用三目运算简写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(num, first=<span class="number">1</span>, second=<span class="number">1</span>, sum=<span class="number">2</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> num == <span class="number">1</span> <span class="keyword">else</span>(sum  <span class="keyword">if</span> num == <span class="number">2</span> <span class="keyword">else</span> fib(num<span class="number">-1</span>, second, first+second, sum+first+second))</span><br><span class="line">fib(<span class="number">7</span>)</span><br></pre></td></tr></table></figure><p>通过上面尾递归的写法，可以看出函数调用自身的作用类似于计数，真正计算的过程在参数中。其实类似于普通函数的写法</p><h2 id="函数的使用"><a href="#函数的使用" class="headerlink" title="函数的使用"></a>函数的使用</h2><p>在python中一切皆是对象，所以函数也是对象，函数名指向的是代码段的内存地址</p><ul><li><p>作为元素使用：放在list，tuple，set，dict中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"hello"</span>)</span><br><span class="line">one = user()</span><br><span class="line">a = [one]</span><br></pre></td></tr></table></figure></li><li><p>作为参数传递给函数</p></li><li><p>可以被赋值</p></li><li><p>作为函数的返回值</p></li></ul><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>在linux相关的运维上，有很多都是处理字符串，所以字符串有点重要的</p><h2 id="路径问题"><a href="#路径问题" class="headerlink" title="路径问题"></a>路径问题</h2><p>在很多情况下，输入路径需要各种转义才行，为了避免这种麻烦，使用<code>r</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">location = <span class="string">r'c:\user\kite\desktop'</span></span><br><span class="line">print(location)</span><br></pre></td></tr></table></figure><h2 id="变量替换（字符串拼接、格式化）"><a href="#变量替换（字符串拼接、格式化）" class="headerlink" title="变量替换（字符串拼接、格式化）"></a>变量替换（字符串拼接、格式化）</h2><ul><li><p><code>%</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"i like %s and %s"</span>%(<span class="string">"cat"</span>,<span class="string">"dog"</span>))</span><br></pre></td></tr></table></figure></li><li><p><code>format</code>函数，使用<code>{}</code></p><ul><li><p>直接使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"i like &#123;&#125; and &#123;&#125;"</span>.format(<span class="string">"cat"</span>,<span class="string">"dog"</span>))</span><br></pre></td></tr></table></figure></li><li><p>使用变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">"i like &#123;&#125; and &#123;&#125;"</span></span><br><span class="line">print(a.format(<span class="string">"cat"</span>,<span class="string">"dog"</span>))</span><br></pre></td></tr></table></figure></li><li><p>指定位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">"i like &#123;0&#125; and &#123;0&#125; and &#123;1&#125;"</span></span><br><span class="line">print(a.format(<span class="string">"cat"</span>,<span class="string">"dog"</span>))</span><br></pre></td></tr></table></figure></li><li><p>使用命名：</p><ul><li>我觉得这种还不错，虽然字多了一点，但是很清晰<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">"i like &#123;animal&#125; and &#123;animal&#125; and &#123;drink&#125;"</span></span><br><span class="line">print(a.format(animal=<span class="string">"cat"</span>,drink=<span class="string">"juice"</span>))</span><br></pre></td></tr></table></figure></li><li>在传入的参数比较多时，使用字典是最好的,需要使用到参数分解，这个是目前我觉得最好的<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">"i like &#123;animal&#125; and &#123;animal&#125; and &#123;drink&#125;"</span></span><br><span class="line">b = &#123;<span class="string">"animal"</span>:<span class="string">"cat"</span>,<span class="string">"drink"</span>:<span class="string">"juice"</span>&#125;</span><br><span class="line">print(a.format(**b))</span><br></pre></td></tr></table></figure></li></ul></li><li><p>指定数字长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">"pi is &#123;:.2f&#125;"</span></span><br><span class="line">print(a.format(<span class="number">1.1314</span>))</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="判断类函数"><a href="#判断类函数" class="headerlink" title="判断类函数"></a>判断类函数</h2><p>函数以<code>is</code>开头，返回值为<code>True</code>/<code>False</code></p><h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><p>字符串的关键字为<code>str</code>，通过str来查看帮助文档</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">help(str)</span><br></pre></td></tr></table></figure><p>举例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">r"https://www.baidu.com"</span></span><br><span class="line"><span class="comment"># 查找，索引，未找到返回-1</span></span><br><span class="line">url.find(<span class="string">"http"</span>)</span><br><span class="line"><span class="comment"># 从指定位置开始查找，优化查找速度</span></span><br><span class="line">url.find(<span class="string">"d"</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从右边查找，查找字符在结尾时优化查找速度</span></span><br><span class="line">url.rfind(<span class="string">"m"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找，索引，未找到报错</span></span><br><span class="line">url.index(<span class="string">"h"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开头，结尾，返回True，False</span></span><br><span class="line">url.startswith(<span class="string">"https"</span>)</span><br><span class="line">url.endswith(<span class="string">"com"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否全大小写,返回True，False</span></span><br><span class="line">url.isupper()</span><br><span class="line">url.islower()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 大小写转换</span></span><br><span class="line">url.upper()</span><br><span class="line">url.lower()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首字母大写</span></span><br><span class="line">url.capitalize()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不带参数代表空格，去除开头结尾空格</span></span><br><span class="line">error = <span class="string">r"   https://www.baidu.com   "</span></span><br><span class="line">a = error.strip()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 带参数去除开头结尾指定字符</span></span><br><span class="line">url.strip(<span class="string">"https"</span>)</span><br></pre></td></tr></table></figure><h1 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h1><p>类通过class来定义，对象由类实例化而来。类的作用在于为对象提供一个模板，它包含了属性和函数。最重要的是类提供了继承，封装，多态这三大特性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化</span></span><br><span class="line">xiaolu = User()</span><br></pre></td></tr></table></figure><p>查看类的所有方法：<code>__dict__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.__dict__</span><br></pre></td></tr></table></figure><h2 id="类属性和方法"><a href="#类属性和方法" class="headerlink" title="类属性和方法"></a>类属性和方法</h2><p>在类定义之后，就在内存中保存了类的属性和方法，可以直接调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">()</span>:</span></span><br><span class="line">    name = <span class="string">"jounr"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line">print(User.name)</span><br><span class="line">print(User.get_name(User))</span><br></pre></td></tr></table></figure><ul><li><p>实例方法：使用最多的方法，需要将类实例化成为对象，通过对象调用方法</p></li><li><p>静态方法：</p><ul><li>不需要实例化，通过类直接调用</li><li>静态方法包装在staticmethod类的对象中，定义中没有self，可直接通过类来调用方法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tellme</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"i am a static method,without self"</span>)</span><br><span class="line">    tellme = staticmethod(tellme)</span><br><span class="line"></span><br><span class="line">MyClass.tellme()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>类方法：</p><ul><li>不需要实例化，通过类直接调用，如果调用需要传参的函数，则将类自己作为参数传递进去</li><li>类方法包装在classmethod类的对象中，参数为cls，虽然可以通过对象来调用，但是实际上cls还是会关联到类的方法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tellme</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(<span class="string">"i am a class method,with args sls"</span>)</span><br><span class="line">    tellme = classmethod(tellme)</span><br><span class="line"></span><br><span class="line">MyClass.tellme()</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><ul><li>上面的类方法和静态方法，需要手动写，但是可以通过使用装饰器来自动包装</li><li>用来替代手工包装，可用于包装任何可调用对象，还可用于方法和函数。装饰器可以有多个，指定多个时，应用的顺序与列出的顺序相反<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tellme</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"new decorator"</span>)</span><br><span class="line">MyClass.tellme()</span><br></pre></td></tr></table></figure></li></ul><h2 id="self"><a href="#self" class="headerlink" title="self"></a>self</h2><ul><li>self作为一个参数，常常用在类的函数中，但并不是所有类的函数都需要这个参数</li><li>self并不是一个关键字，也可以用其它的替代</li><li>如果这个函数需要访问类的属性，那么需要self这个参数，它用来指代实例自身</li><li>如果这个函数不需要访问类的属性，那么不需要self这个参数</li><li>在有self的时候，首先会看函数自己是否定义属性，如果没有，则访问类的属性<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">()</span>:</span></span><br><span class="line">    age = <span class="number">20</span></span><br><span class="line">    id = <span class="number">1</span></span><br><span class="line">    qq = <span class="number">102832343</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_age</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_qq</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.qq = <span class="number">2312323123</span></span><br><span class="line">        <span class="keyword">return</span> self.qq,self.age</span><br><span class="line">one = User()</span><br><span class="line">one.info()</span><br><span class="line">print(one.get_age())</span><br><span class="line">print(one.get_qq())</span><br></pre></td></tr></table></figure></li></ul><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul><li><p>继承父类的属性，函数等。避免了代码的冗余，也可重写父类的方法</p></li><li><p>将父类作为参数传递给子类</p></li><li><p>子类可以继承自多个类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">()</span>:</span></span><br><span class="line">    name = <span class="string">"one"</span></span><br><span class="line">    age = <span class="number">20</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span><span class="params">()</span>:</span></span><br><span class="line">    id = <span class="number">1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Realone</span><span class="params">(User,Customer)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">a = Realone()</span><br><span class="line">a.get_name()</span><br><span class="line">print(a.id)</span><br></pre></td></tr></table></figure></li><li><p>子类扩充父类的方法：使用<code>super()</code>调用父类方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">()</span>:</span></span><br><span class="line">    name = <span class="string">"journal"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeOne</span><span class="params">(User)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_info</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().get_name()</span><br><span class="line">        print(<span class="string">"attend super"</span>)</span><br><span class="line"></span><br><span class="line">a = SomeOne()</span><br><span class="line">a.get_info())</span><br></pre></td></tr></table></figure></li><li><p>检测是否为子类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(issubclass(Realone,User))</span><br></pre></td></tr></table></figure></li></ul><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><ul><li><p>在类实例化的时候第一个自动调用的函数，作用是给对象初始化一些数据</p></li><li><p>必须有参数self,函数名为<code>__init__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">"lixingyun"</span></span><br><span class="line"></span><br><span class="line">a = User()</span><br><span class="line">print(a.name)</span><br></pre></td></tr></table></figure></li><li><p>通过继承，扩展父类的构造函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        print(name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接写父类的init方法，只能写一个父类，不推荐使用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">One</span><span class="params">(User)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        <span class="comment"># 先调用父类的init函数</span></span><br><span class="line">        User.__init__(self,name)</span><br><span class="line">        print(<span class="string">"initial finish"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以自动向上寻找父类的init方法，父类没有写死，推荐使用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Two</span><span class="params">(User)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        super(Two,self).__init__(name)</span><br><span class="line">        print(<span class="string">"initial finish"</span>)</span><br><span class="line"></span><br><span class="line">a = One(<span class="string">"小小"</span>)</span><br><span class="line">b = Two(<span class="string">"小小"</span>)</span><br></pre></td></tr></table></figure></li><li><p>构造函数默认被继承</p></li><li><p>如果定义了自己的构造函数，那么父类的构造函数不再被继承。也叫重写父类函数</p></li></ul><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>封装即为对对象成员进行访问限制</p><ul><li><p>私有：最高级别的限制，只能在当前类或者对象中访问。通过在变量前加<code>__</code>实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">()</span>:</span></span><br><span class="line">    __name = <span class="string">"喜洋洋"</span></span><br><span class="line">    __age = <span class="number">20</span></span><br><span class="line">one = User()</span><br><span class="line"><span class="comment"># 无法直接访问</span></span><br><span class="line">print(one.name)</span><br></pre></td></tr></table></figure><p>其实私有也不是真的无法访问，还是可以访问的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(one._User__age)</span><br></pre></td></tr></table></figure></li><li><p>受保护的：在外部不可访问，可以在内部和子类中访问。通过在变量前加<code>_</code>实现</p></li><li><p>公有的：任何地方都可以使用</p></li></ul><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ul><li>同一个对象在不同情况下有不同的状态</li><li>在python中是一种设计思想，并没有语法要求，其实我也搞不懂</li></ul><h2 id="类的函数转属性"><a href="#类的函数转属性" class="headerlink" title="类的函数转属性"></a>类的函数转属性</h2><p>类中的get，set，del函数可以转换为属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_name</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">one = User(<span class="string">"小小"</span>)</span><br><span class="line">one.get_name()</span><br><span class="line">one.set_name(<span class="string">"小青"</span>)</span><br><span class="line">one.get_name()</span><br></pre></td></tr></table></figure><p>可以使用<code>property(get,set,del)</code>函数对get，set，del封装。将函数转换为一个属性值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_name</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    sname = property(get_name, set_name)</span><br><span class="line"></span><br><span class="line">two = User(<span class="string">"小二"</span>)</span><br><span class="line">two.sname</span><br><span class="line">two.sname = <span class="string">"可可"</span></span><br><span class="line">two.sname</span><br></pre></td></tr></table></figure><h2 id="类的内置属性"><a href="#类的内置属性" class="headerlink" title="类的内置属性"></a>类的内置属性</h2><ul><li><code>__dict__</code>： 显示类的属性和方法</li><li><code>__doc__</code>： 类的说明文档</li><li><code>__name__</code>： 类的名称</li><li><code>__bases__</code>： 类的所有父类</li></ul><h2 id="类的魔法函数"><a href="#类的魔法函数" class="headerlink" title="类的魔法函数"></a>类的魔法函数</h2><p>不需要手动调用，达到触发条件，自动调用</p><ul><li><p><code>__init__</code>： 初始化类的属性</p></li><li><p><code>__call__</code>： 当对象被当做函数使用的时候，调用此函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"此时对象被当做函数调用了"</span>)</span><br><span class="line">one = User()</span><br><span class="line">one()</span><br></pre></td></tr></table></figure></li><li><p><code>__str__</code>： 当对象被当做字符串使用的时候，调用此函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"此时对象被当做字符串使用了"</span></span><br><span class="line">one = User()</span><br><span class="line">print(one)</span><br></pre></td></tr></table></figure></li><li><p><code>__getattr__</code>： 当访问一个不存在的属性时，调用此函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self,method)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"此函数不存在"</span></span><br><span class="line"></span><br><span class="line">one = User()</span><br><span class="line">print(one.age)</span><br></pre></td></tr></table></figure></li></ul><h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><ul><li>抽象方法</li></ul><p>定义了方法，但没有实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li><p>抽象类</p><ul><li>必须导入模块<code>abc</code></li><li>抽象类不可以实例化，必须继承后实例化，继承的子类需要实现所有的继承来的抽象方法</li><li>作用为设定类的标准</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(metaclass=abc.ABCMeta)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义抽象方法</span></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义类抽象方法</span></span><br><span class="line"><span class="meta">    @abc.abstractclassmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_age</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义静态抽象方法</span></span><br><span class="line"><span class="meta">    @abc.abstractstaticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_id</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义普通方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_qq</span><span class="params">(self,qq)</span>:</span></span><br><span class="line">        self.qq = qq</span><br></pre></td></tr></table></figure><h2 id="组装类"><a href="#组装类" class="headerlink" title="组装类"></a>组装类</h2><p>函数名可以作为变量使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">he</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">"hello"</span>)</span><br><span class="line"></span><br><span class="line">User.he = he</span><br><span class="line">one = User()</span><br><span class="line">one.he()</span><br></pre></td></tr></table></figure><h1 id="Package"><a href="#Package" class="headerlink" title="Package"></a>Package</h1><p>package is a collection of modules, which must be included with a file called <code>__init__.py</code></p><ul><li><p>how to import a package</p><ul><li><p>import all include <code>__init__.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> package_name</span><br><span class="line"></span><br><span class="line">package_name.function_name()</span><br><span class="line">package_name.class_name.function_name()</span><br></pre></td></tr></table></figure></li><li><p>only import specify module,except <code>__init__.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> package_name.module_name <span class="keyword">as</span> md1</span><br><span class="line"></span><br><span class="line">md1.function_name()</span><br><span class="line">md1.class_name()</span><br></pre></td></tr></table></figure></li><li><p>another way import should be mentiond</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> package_name <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p>the way import only import function and class which in <code>__init__.py</code></p></li></ul></li></ul><h2 id="module"><a href="#module" class="headerlink" title="module"></a>module</h2><p>a module is a file contains python code.it’s suffix with .py</p><ul><li><p>why we need module?</p><ul><li>shrink program,make it easy to maintain</li><li>module can be reused</li><li>used as a namespace,reduce name conflict</li></ul></li><li><p>how to use module?</p><ul><li><p>import directily</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> module_name</span><br><span class="line"></span><br><span class="line">module_name.function_name()</span><br><span class="line">module_name.class_name()</span><br></pre></td></tr></table></figure></li><li><p>if the module name prefix with num such as 2.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"></span><br><span class="line">variable = importlib.import_module(<span class="string">"02"</span>)</span><br><span class="line"></span><br><span class="line">variable.function_name()</span><br><span class="line">variable.class_name()</span><br></pre></td></tr></table></figure></li><li><p>use as rename module when the name of module is long</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> module_name <span class="keyword">as</span> somename</span><br></pre></td></tr></table></figure></li><li><p>import module’s class or function,not whole module</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> someclass,somefunction</span><br><span class="line"></span><br><span class="line">variable1 = someclass()</span><br><span class="line">variable2 = somefunction()</span><br></pre></td></tr></table></figure></li><li><p>import all class and function</p><p>the benifit of it is writing class or function directily without module name prefix</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">variable = someclass()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>where modules store?</p><ul><li><p>default location</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sys.path:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure></li><li><p>add own module location</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sys.path.append(directory)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="the-entrance-of-code"><a href="#the-entrance-of-code" class="headerlink" title="the entrance of code"></a>the entrance of code</h2><ul><li>in genreal,all entrance of code should be started with this</li><li>it can control whether to execute some code,if used as a code which will be execute,if used as a module which will not be execute</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">"first execute code"</span>)</span><br></pre></td></tr></table></figure><h1 id="Error-catch"><a href="#Error-catch" class="headerlink" title="Error catch"></a>Error catch</h1><p>some days ago,i really don’t know why we need to catch error.in my mind,i think we should not write code with error.until one day,i get a problem,i need to create a temporary table first and then delete it every time the script run.and the error appeard.some times the table isn’t exist,when execute the delete code,the program broken.at last i use error catch to avoid the error</p><p>eg:get user type in</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num = int(input(<span class="string">"num:"</span>))</span><br><span class="line">    result = <span class="number">100</span> / num</span><br><span class="line">    print(result)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"not a none zero number"</span>)</span><br></pre></td></tr></table></figure><ul><li>syntax<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># can raise error by hand</span></span><br><span class="line">    <span class="keyword">raise</span> some_error_type</span><br><span class="line"><span class="comment"># if it is the error below(tuple),execute this code</span></span><br><span class="line"><span class="keyword">except</span> (error_type1,error_type2...):</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># exit() can exit the program</span></span><br><span class="line">    exit()</span><br><span class="line"><span class="comment"># we can print error infomation</span></span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="comment"># Exception is the supper of all except type</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    ...</span><br><span class="line"><span class="comment"># if not in the error above execute this code</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    ...</span><br><span class="line"><span class="comment"># what ever error happend,will execute this code</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></li></ul><h1 id="Time-mudule"><a href="#Time-mudule" class="headerlink" title="Time mudule"></a>Time mudule</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># get time now with format</span></span><br><span class="line">now = time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># another way to get the format time</span></span><br><span class="line">hour = time.localtime().tm_hour</span><br><span class="line"></span><br><span class="line"><span class="comment"># get the timestamp</span></span><br><span class="line">unique = time.time()</span><br><span class="line"></span><br><span class="line"><span class="comment"># sleep</span></span><br><span class="line">time.sleep(second_number)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"></span><br><span class="line"><span class="comment"># calcute program execute time with number times repeat</span></span><br><span class="line">t1 = timeit.timeit(stmt=<span class="string">"[i for i in range(10)]"</span>,number=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">number</span><span class="params">()</span>:</span></span><br><span class="line">    lt = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        lt.append(i)</span><br><span class="line"></span><br><span class="line">t2 = timeit.timeit(stmt=number,number=<span class="number">100</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># convert string to date</span></span><br><span class="line">a = datetime.date(<span class="number">2020</span>,<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line">print(a)</span><br><span class="line">b= datetime.time(<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line">print(b)</span><br><span class="line">c = datetime.datetime(<span class="number">2020</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get the current datetime</span></span><br><span class="line">d = datetime.date.today()</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure><h1 id="OS-module"><a href="#OS-module" class="headerlink" title="OS module"></a>OS module</h1><p>associated with operate system</p><p>three important modules:</p><ul><li>os</li><li>os.path, used for path</li><li>shutil, used for directory,file</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">dir = os.getcwd()</span><br><span class="line"></span><br><span class="line">os.chdir(<span class="string">"../"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get file and dir of current directory with out hidden file</span></span><br><span class="line">lt = [i <span class="keyword">for</span> i <span class="keyword">in</span> os.listdir() <span class="keyword">if</span> <span class="keyword">not</span> i.startswith(<span class="string">"."</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># execute shell command</span></span><br><span class="line">os.system(<span class="string">"htop"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get system environment variables</span></span><br><span class="line">os.getenv(<span class="string">"SHELL"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os.path <span class="keyword">as</span> op</span><br><span class="line"></span><br><span class="line">absc = op.abspath(<span class="string">"."</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># used for different operate system</span></span><br><span class="line">d1 = <span class="string">"/home/narcissus"</span></span><br><span class="line">d2 = <span class="string">"1.txt"</span></span><br><span class="line">os.join(d1,d2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># os.path.split return a tuple,so can be used like this</span></span><br><span class="line">d1,d2 = op.split(<span class="string">"/home/narcissus/1.txt"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># whether a path exists</span></span><br><span class="line">op.exists(<span class="string">"/home/narcissus/1.txt"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">shutil.copy(<span class="string">"1.txt"</span>,<span class="string">"2.txt"</span>)</span><br><span class="line"></span><br><span class="line">shutil.move(<span class="string">"1.txt"</span>,<span class="string">"2.txt"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># archive all file of Desktop into test.tar</span></span><br><span class="line">shutil.make_archive(<span class="string">"/home/narcissus/Desktop/test"</span>,<span class="string">"tar"</span>,<span class="string">"/home/narcissus/Desktop/"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># unarchive file</span></span><br><span class="line">shutil.unpack_archive(<span class="string">"/home/narcissus/Desktop/test.tar"</span>,<span class="string">"."</span>,<span class="string">"tar"</span>)</span><br></pre></td></tr></table></figure><h1 id="Random-module"><a href="#Random-module" class="headerlink" title="Random module"></a>Random module</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># return a number in the interval [0,1)</span></span><br><span class="line">r1 = random.random()</span><br><span class="line"></span><br><span class="line"><span class="comment"># return a number in the interval [0,100)</span></span><br><span class="line">r2 = int(random.random()*<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># random choice in the interval [1,100)</span></span><br><span class="line">l1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">100</span>)]</span><br><span class="line">random.choice(l1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># shuffle list</span></span><br><span class="line">l1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>)]</span><br><span class="line">print(l1)</span><br><span class="line">random.shuffle(l1)</span><br><span class="line">print(l1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># random integer</span></span><br><span class="line">random.randint(<span class="number">1</span>,<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h1 id="Functional-programming"><a href="#Functional-programming" class="headerlink" title="Functional programming"></a>Functional programming</h1><p>features:</p><ul><li>function can be used as a parameter </li><li>function can be used as return value</li></ul><h2 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h2><p>lambda exprssion</p><ul><li>begin with lambda</li><li>have zero or more parameter</li><li>use : split lambda with expression</li><li>no return keyword</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">la = <span class="keyword">lambda</span> x: x * <span class="number">100</span></span><br><span class="line">la(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">lb = <span class="keyword">lambda</span> x,y,z: x + y*<span class="number">10</span> + z/<span class="number">2</span></span><br><span class="line">lb(<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>)</span><br></pre></td></tr></table></figure><h2 id="high-level-function"><a href="#high-level-function" class="headerlink" title="high-level function"></a>high-level function</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"小小"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># function is a variable</span></span><br><span class="line">variable = get_name</span><br><span class="line">variable()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># normal function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> num * <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> plus(num) + <span class="number">100</span></span><br><span class="line">add(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># high_level function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> num * <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">high_level</span><span class="params">(fun,num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> fun(num) + <span class="number">100</span></span><br><span class="line">high_level(plus,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p><code>map(func,*iterables)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">l1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">print(l1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># use lambda expression ,ten times a num</span></span><br><span class="line">mult = <span class="keyword">lambda</span> num: num * <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use map to generate a class map</span></span><br><span class="line">l2 = map(mult,l1)</span><br><span class="line">print(l2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># class object can be iterabled</span></span><br><span class="line">l3 = [i <span class="keyword">for</span> i <span class="keyword">in</span> l2]</span><br><span class="line">print(l3)</span><br></pre></td></tr></table></figure><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p>notice:</p><ul><li>need import module</li><li>function need two parameters</li><li>function need return value</li></ul><p>principle:<br>reduce(1,2,3) = f(f(1,2),3)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">l1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">plus = <span class="keyword">lambda</span> x,y: x + y</span><br><span class="line"></span><br><span class="line">l2 = reduce(plus,l1)</span><br><span class="line">print(l2)</span><br></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>notice:</p><ul><li>function need return a boolean</li><li>filter return a class object which can be iterabled</li></ul><p><code>filter(function,*iterables)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">l1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">fit = <span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">l2 = filter(fit,l1)</span><br><span class="line"></span><br><span class="line">l3 = [i <span class="keyword">for</span> i <span class="keyword">in</span> l2]</span><br><span class="line">print(l3)</span><br></pre></td></tr></table></figure><h3 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h3><p>number sorted</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">l1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">random.shuffle(l1)</span><br><span class="line">print(l1)</span><br><span class="line"></span><br><span class="line">l2 = sorted(l1)</span><br><span class="line">print(l2)</span><br><span class="line"></span><br><span class="line">l3 = sorted(l1,reverse=<span class="literal">True</span>)</span><br><span class="line">print(l3)</span><br></pre></td></tr></table></figure><p>charactor sorted</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="string">"sda"</span>,<span class="string">"dev"</span>,<span class="string">"HOME"</span>,<span class="string">"Alian"</span>,<span class="string">"alias"</span>]</span><br><span class="line"></span><br><span class="line">l2 = sorted(l1)</span><br><span class="line">print(l2)</span><br><span class="line"></span><br><span class="line">l3 = sorted(l1, key=str.lower)</span><br><span class="line">print(l3)</span><br><span class="line"></span><br><span class="line">l4 = sorted(l1, key=str.lower, reverse=<span class="literal">True</span>)</span><br><span class="line">print(l4)</span><br></pre></td></tr></table></figure><h3 id="Closure-package"><a href="#Closure-package" class="headerlink" title="Closure package"></a>Closure package</h3><p>B function defined inside A function,and B function as a return vlaue,all parameters of A can be used by B,it is called closure</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">A</span><span class="params">(*args)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">B</span><span class="params">()</span>:</span></span><br><span class="line">        sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">            sum += i</span><br><span class="line">        <span class="keyword">return</span> sum</span><br><span class="line">    <span class="keyword">return</span> B</span><br><span class="line"></span><br><span class="line">l1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>)]</span><br><span class="line">one = A(*l1)</span><br><span class="line">one()</span><br></pre></td></tr></table></figure><h3 id="Decorator"><a href="#Decorator" class="headerlink" title="Decorator"></a>Decorator</h3><p>Decorator is a high-level function,i can return a function.</p><p>feature:</p><ul><li>extend origion function without change its code</li><li>use <code>@</code> to called a decorator</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pf</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">"Time:"</span>,time.ctime())</span><br><span class="line">        <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line">    <span class="keyword">return</span> pf</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">line</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pf</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">"="</span>*<span class="number">50</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line">    <span class="keyword">return</span> pf</span><br><span class="line"></span><br><span class="line"><span class="comment"># use system decorator @</span></span><br><span class="line"><span class="meta">@now</span></span><br><span class="line"><span class="meta">@line</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">he</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">"hello"</span>,name)</span><br><span class="line"></span><br><span class="line">he(<span class="string">"小小"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># by hand execute without system decorator @</span></span><br><span class="line">return_fun = now(he)</span><br><span class="line">return_fun(<span class="string">"小小"</span>)</span><br></pre></td></tr></table></figure><h3 id="Partial-function"><a href="#Partial-function" class="headerlink" title="Partial function"></a>Partial function</h3><p>return a new function with some of its parameters fixed</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="comment"># convert 16 to 10</span></span><br><span class="line">int16 = functools.partial(int,base=<span class="number">16</span>)</span><br><span class="line">int16(<span class="string">"f"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># we can realize this by hand</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">int16</span><span class="params">(num,base=<span class="number">16</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> int(num,base)</span><br><span class="line">int16(<span class="string">"f"</span>)</span><br></pre></td></tr></table></figure><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><p>combine two iterable object into several tuples</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>)]</span><br><span class="line">l2 = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>,<span class="number">110</span>)]</span><br><span class="line">l3 = [i <span class="keyword">for</span> i <span class="keyword">in</span> zip(l1,l2)]</span><br><span class="line">print(l3)</span><br></pre></td></tr></table></figure><h3 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate"></a>enumerate</h3><p>give each iterable object a index and return several tuples,notice that the index can be customized</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">l2 = [i <span class="keyword">for</span> i <span class="keyword">in</span> enumerate(l1,start=<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">print(l2)</span><br></pre></td></tr></table></figure><h3 id="collections-module"><a href="#collections-module" class="headerlink" title="collections module"></a>collections module</h3><ul><li>namedtuple: it can limit the number of tuple</li><li>deque: it is much faster than list</li><li>defaultdict: no error report when query none exist key</li><li>Counter: regard string as a iterable dict</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line">circle = collections.namedtuple(<span class="string">"circle"</span>,[<span class="string">"x"</span>,<span class="string">"y"</span>,<span class="string">"r"</span>])</span><br><span class="line">p = circle(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="keyword">if</span> p.x**<span class="number">2</span> + p.y**<span class="number">2</span> == p.r**<span class="number">2</span>:</span><br><span class="line">    print(<span class="string">"it is a circle"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line">ql = collections.deque()</span><br><span class="line">ql.append(<span class="number">1</span>)</span><br><span class="line">print(ql)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line">func = <span class="keyword">lambda</span> : <span class="string">"no key exist"</span></span><br><span class="line">dd = collections.defaultdict(func)</span><br><span class="line">dd[<span class="string">"one"</span>] = <span class="string">"first"</span></span><br><span class="line">dd[<span class="string">"one"</span>]</span><br><span class="line">dd[<span class="string">"four"</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line">cr = <span class="string">"ksjflajowielzxkjowieof1242lkjlk"</span></span><br><span class="line">cd = collections.Counter(cr)</span><br><span class="line">print(cd)</span><br><span class="line">print(cd[<span class="string">"j"</span>])</span><br></pre></td></tr></table></figure><h1 id="File-operate"><a href="#File-operate" class="headerlink" title="File operate"></a>File operate</h1><h2 id="open"><a href="#open" class="headerlink" title="open"></a>open</h2><ul><li>mode<ul><li>r: read only</li><li>w: new write,will erase origional file</li><li>x: open exist file,if not error reportd</li><li>a: append mode</li><li>b: binary write</li><li>t: file mode open</li><li>+: read and write</li></ul></li></ul><p>in this way, we need to close file handle by hand</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dir = <span class="string">r"/home/narcissus/Desktop/遍历游标的三种方式.md"</span></span><br><span class="line">f = open(dir,<span class="string">"r"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">    print(i)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>in this way, file handle will be closed automatically</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dir = <span class="string">r"/home/narcissus/Desktop/遍历游标的三种方式.md"</span></span><br><span class="line"><span class="keyword">with</span> open(dir,<span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">        print(i)</span><br></pre></td></tr></table></figure><p>read only one line,so should be carefully</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dir = <span class="string">r"/home/narcissus/Desktop/遍历游标的三种方式.md"</span></span><br><span class="line"><span class="keyword">with</span> open(dir,<span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    i = f.readline()</span><br><span class="line">    <span class="keyword">while</span> i:</span><br><span class="line">        print(i)</span><br><span class="line">        i = f.readline()</span><br></pre></td></tr></table></figure><p>read all lines</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dir = <span class="string">r"/home/narcissus/Desktop/遍历游标的三种方式.md"</span></span><br><span class="line"><span class="keyword">with</span> open(dir,<span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    i = f.readlines()</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">        print(j)</span><br><span class="line"></span><br><span class="line"><span class="comment"># or use this</span></span><br><span class="line"><span class="keyword">with</span> open(dir,<span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    i = list(f)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">        print(j)</span><br></pre></td></tr></table></figure><p>read each word</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dir = <span class="string">r"/home/narcissus/Desktop/遍历游标的三种方式.md"</span></span><br><span class="line"><span class="keyword">with</span> open(dir,<span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    word = f.read(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> word:</span><br><span class="line">        print(word,end=<span class="string">""</span>)</span><br><span class="line">        word = f.read(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="write"><a href="#write" class="headerlink" title="write"></a>write</h2><ul><li>write: only support string</li><li>writeline: can write list directily</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">dir = <span class="string">r"/home/narcissus/Desktop/1.txt"</span></span><br><span class="line">txt = os.listdir(<span class="string">"/home/narcissus"</span>)</span><br><span class="line">needed = [i <span class="keyword">for</span> i <span class="keyword">in</span> txt <span class="keyword">if</span> <span class="keyword">not</span> i.startswith(<span class="string">"."</span>)]</span><br><span class="line"><span class="keyword">with</span> open(dir, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># write whole list once without space</span></span><br><span class="line">    f.writelines(needed)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># can not write list directily,but can use loop to write new line per element</span></span><br><span class="line">    <span class="comment"># for i in needed:</span></span><br><span class="line">    <span class="comment">#     f.write(i)</span></span><br><span class="line">    <span class="comment">#     f.write("\n")</span></span><br><span class="line"><span class="keyword">with</span> open(dir,<span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    info = f.readlines()</span><br><span class="line">    print(info)</span><br></pre></td></tr></table></figure><h2 id="pickle-module"><a href="#pickle-module" class="headerlink" title="pickle module"></a>pickle module</h2><p>it is used for persistence file, can save program’s information to disk while the program runing</p><p>feature:</p><ul><li>it can store infomation immediately</li><li>it can store infomation with format unchanged</li></ul><p>function:</p><ul><li>pickle.dump: write</li><li>pickle.load: read</li></ul><p>notice:<br>use binary mode to write or read file</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle,os</span><br><span class="line"></span><br><span class="line">dir = <span class="string">r"/home/narcissus/Desktop/1.txt"</span></span><br><span class="line">txt = os.listdir(<span class="string">"/home/narcissus"</span>)</span><br><span class="line">info = [i <span class="keyword">for</span> i <span class="keyword">in</span> txt <span class="keyword">if</span> <span class="keyword">not</span> i.startswith(<span class="string">"."</span>)]</span><br><span class="line"><span class="keyword">with</span> open(dir,<span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pickle.dump(info,f)</span><br><span class="line"><span class="keyword">with</span> open(dir,<span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    get = pickle.load(f)</span><br><span class="line">    print(get)</span><br></pre></td></tr></table></figure><h1 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h1><p>why we need log?<br>recording some information at important points, suitable log information can let us to know program running statius<br>but that isn’t to say log is much more much better,because io operation will slow down program.</p><p>there are several log level:</p><ul><li>debug</li><li>info</li><li>notice</li><li>warning</li><li>error</li><li>critical</li><li>alert</li><li>emergency</li></ul><p>log include:<br>[time location level content]</p><p>good log module:</p><ul><li>log4j -&gt; java</li><li>log4php -&gt; php</li><li>logging -&gt; python</li></ul><h2 id="python-logging-module"><a href="#python-logging-module" class="headerlink" title="python logging module"></a>python logging module</h2><p>level:</p><ul><li>debug</li><li>info</li><li>warning</li><li>error</li><li>critical</li></ul><p>default log level:</p><ul><li>specify a log level in program</li><li>only log level which equal or high above than specified level will be write in log</li></ul><h2 id="usage"><a href="#usage" class="headerlink" title="usage:"></a>usage:</h2><h3 id="specify-default-log-level"><a href="#specify-default-log-level" class="headerlink" title="specify default log level"></a>specify default log level</h3><p>only logging once at first time executes</p><p>feature:</p><ul><li>specify the default log level</li><li>output: sys.stderr</li><li>default level: warning</li><li>format: level:log_name:content</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logging.basicConfig(**kwargs)</span><br></pre></td></tr></table></figure><p>eg:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">dir = <span class="string">r"/home/narcissus/Desktop/info.log"</span></span><br><span class="line">log_format = <span class="string">"%(asctime)s   %(levelname)s   %(message)s"</span></span><br><span class="line">logging.basicConfig(filename=dir, level=logging.DEBUG, format=log_format)</span><br></pre></td></tr></table></figure><h3 id="use-level-function"><a href="#use-level-function" class="headerlink" title="use level function"></a>use level function</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">logging.debug(msg, *args, **kwargs)</span><br><span class="line">logging.info(msg, *args, **kwargs)</span><br><span class="line">logging.warning(msg, *args, **kwargs)</span><br><span class="line">logging.error(msg, *args, **kwargs)</span><br><span class="line">logging.critical(msg, *args, **kwargs)</span><br></pre></td></tr></table></figure><p>eg:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.debug(<span class="string">"this is a debug log"</span>)</span><br><span class="line">logging.info(<span class="string">"this is a info log)</span></span><br></pre></td></tr></table></figure><h3 id="use-log-function"><a href="#use-log-function" class="headerlink" title="use log function"></a>use log function</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logging.log(level, *args, **kwargs)</span><br></pre></td></tr></table></figure><p>eg:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.log(logging.DEBUG,<span class="string">"this is a debug log"</span>)</span><br><span class="line">logging.log(logging.INFO,<span class="string">"this is a info log"</span>)</span><br></pre></td></tr></table></figure><p>complete example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">dir = <span class="string">r"/home/narcissus/Desktop/info.log"</span></span><br><span class="line">log_format = <span class="string">"%(asctime)s\t%(levelname)s\t%(lineno)d %(message)s"</span></span><br><span class="line">logging.basicConfig(filename=dir, level=logging.DEBUG, format=log_format)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logging.debug(<span class="string">"this is a debug log"</span>)</span><br><span class="line">logging.info(<span class="string">"this is a info log"</span>)</span><br><span class="line"></span><br><span class="line">logging.log(logging.DEBUG,<span class="string">"this is a debug log"</span>)</span><br><span class="line">logging.log(logging.INFO,<span class="string">"this is a info log"</span>)</span><br></pre></td></tr></table></figure><h2 id="by-hand-usage"><a href="#by-hand-usage" class="headerlink" title="by hand usage"></a>by hand usage</h2><ul><li>logger: a interface of log produces log</li><li>handler: decide where log stores</li><li>filter: what should be displayed</li><li>formatter: format</li></ul><p>logger:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Logger.setLevel()</span><br><span class="line">Logger.addHandler()/Logge.removeHandler()</span><br><span class="line">Logger.addFilter()/Logger.removeFilter()</span><br><span class="line">Logger.debug()/info/error</span><br><span class="line">Logger.exception()</span><br><span class="line">Logger.log()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logging.getLogger()</span><br></pre></td></tr></table></figure><p>and so on …..</p><h1 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h1><p>convert:</p><ul><li>json.dumps(): python -&gt; json</li><li>json.loads(): json -&gt; json</li></ul><p>read and write with file:</p><ul><li>json.dump(): write to file</li><li>json.load(): read from file</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json,os</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">"user"</span>: <span class="string">"小小"</span>,</span><br><span class="line">    <span class="string">"age"</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">"like"</span>: [<span class="string">"juice"</span>,<span class="string">"apple"</span>,<span class="string">"cherry"</span>],</span><br><span class="line">    <span class="string">"score"</span>: &#123;</span><br><span class="line">        <span class="string">"chinese"</span>: <span class="number">80</span>,</span><br><span class="line">        <span class="string">"math"</span>: <span class="number">90</span>,</span><br><span class="line">        <span class="string">"english"</span>: <span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jd = json.dumps(data)</span><br><span class="line">print(type(jd),jd)</span><br><span class="line">nd = json.loads(jd)</span><br><span class="line">print(type(nd),nd)</span><br><span class="line"></span><br><span class="line">dir = <span class="string">r"/home/narcissus/Desktop"</span></span><br><span class="line">os.chdir(dir)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"test.js"</span>,<span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(data,f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"test.js"</span>,<span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    file = json.load(f)</span><br><span class="line">    print(file[<span class="string">"score"</span>][<span class="string">"chinese"</span>])</span><br></pre></td></tr></table></figure><h1 id="Multi-threads"><a href="#Multi-threads" class="headerlink" title="Multi threads"></a>Multi threads</h1><p>process vs thread:<br>process totally different,but thread will share something.<br>process builds with threads</p><h2 id="basic-usage"><a href="#basic-usage" class="headerlink" title="basic usage"></a>basic usage</h2><p>syntax:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="comment"># args is tuple</span></span><br><span class="line">td = threading.thread(target=function_name,args=())</span><br><span class="line"><span class="comment"># set thread name,it is optional</span></span><br><span class="line">td.setName(<span class="string">"thread1"</span>)</span><br><span class="line"><span class="comment"># start thread</span></span><br><span class="line">td.start()</span><br><span class="line"><span class="comment"># waiting for thread finish</span></span><br><span class="line">td.join()</span><br></pre></td></tr></table></figure><p>notice:<br>the type of args is tuple</p><h2 id="daemon-thread"><a href="#daemon-thread" class="headerlink" title="daemon thread"></a>daemon thread</h2><p>when process stops the daemon thread will stop immediately</p><p>syntax:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="comment"># args is tuple</span></span><br><span class="line">td = threading.thread(target=function_name,args=())</span><br><span class="line">td.daemon = <span class="literal">True</span> <span class="comment"># or td.setDaemon(True)</span></span><br><span class="line">td.start()</span><br><span class="line"><span class="comment"># waiting for thread finish</span></span><br><span class="line">td.join()</span><br></pre></td></tr></table></figure><h2 id="shared-variables"><a href="#shared-variables" class="headerlink" title="shared variables"></a>shared variables</h2><p>it is appeard when several threads access one variable at the same time, it will lead wrong result. In order to resolve this problem, we can lock the use of variable</p><p>syntax:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lock = threading.Lock()</span><br><span class="line">lock.acquire()</span><br><span class="line">lockd_variable</span><br><span class="line">lock.release()</span><br></pre></td></tr></table></figure><p>without lock</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line">num = <span class="number">1000000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> sum</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        sum += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">miu</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> sum</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        sum -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"><span class="comment"># normal usage will return sum = 0</span></span><br><span class="line"><span class="comment"># miu(num)</span></span><br><span class="line"><span class="comment"># add(num)</span></span><br><span class="line"><span class="comment"># print(sum)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># use thread access one variable at the same time will lead wrong result</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calcu</span><span class="params">()</span>:</span></span><br><span class="line">    td1 = threading.Thread(target=add,args=(num,))</span><br><span class="line">    td2 = threading.Thread(target=miu,args=(num,))</span><br><span class="line"></span><br><span class="line">    td1.start()</span><br><span class="line">    td2.start()</span><br><span class="line">    td1.join()</span><br><span class="line">    td2.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    calcu()</span><br><span class="line">    print(sum)</span><br></pre></td></tr></table></figure><p>use lock</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line">num = <span class="number">1000000</span></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="comment"># lock variable to be accessd by one at the same time</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> sum</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        lock.acquire()</span><br><span class="line">        sum += <span class="number">1</span></span><br><span class="line">        lock.release()</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">miu</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> sum</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        lock.acquire()</span><br><span class="line">        sum -= <span class="number">1</span></span><br><span class="line">        lock.release()</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lock_calcu</span><span class="params">()</span>:</span></span><br><span class="line">    ld1 = threading.Thread(target=add,args=(num,))</span><br><span class="line">    ld2 = threading.Thread(target=miu,args=(num,))</span><br><span class="line"></span><br><span class="line">    ld1.start()</span><br><span class="line">    ld2.start()</span><br><span class="line"></span><br><span class="line">    ld1.join()</span><br><span class="line">    ld2.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    lock_calcu()</span><br><span class="line">    print(sum)</span><br></pre></td></tr></table></figure><h2 id="thread-safe"><a href="#thread-safe" class="headerlink" title="thread safe"></a>thread safe</h2><p>if one variable to be used by multi threads at the same time without lock variable but no problem happend, it is called thread safe.</p><p>not thread safe: list, set, dict</p><p>thread safe: queue</p><h2 id="deadlock"><a href="#deadlock" class="headerlink" title="deadlock"></a>deadlock</h2><p>two lock both not release, lead to both waitting, deadlock appeard, leading program dead</p><h1 id="muiti-processes"><a href="#muiti-processes" class="headerlink" title="muiti processes"></a>muiti processes</h1><p>we know multi threads will cause problem usually, but there are several method more useful than multi threads:</p><ul><li>subprocess</li><li>multiprocessing</li><li>concurrent.futures</li></ul><h1 id="iterable-iterator"><a href="#iterable-iterator" class="headerlink" title="iterable/iterator"></a>iterable/iterator</h1><p>difference:<br>iterable -&gt; directly used by for loop<br>iterator -&gt; not only used by for loop but also can be used by next function</p><p>how to distinct each other:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable,Iterator</span><br><span class="line"></span><br><span class="line">lt = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">print(isinstance(lt,Iterable))</span><br><span class="line">print(isinstance(lt,Iterator))</span><br></pre></td></tr></table></figure><p>convert iterable to iterator:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable,Iterator</span><br><span class="line"></span><br><span class="line">lt = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">print(isinstance(lt,Iterable))</span><br><span class="line">print(isinstance(lt,Iterator))</span><br><span class="line"></span><br><span class="line">clt = iter(lt)</span><br><span class="line">print(isinstance(clt,Iterable))</span><br><span class="line">print(isinstance(clt,Iterator))</span><br></pre></td></tr></table></figure><h1 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h1><p>feature:</p><ul><li>product data which used by for loop</li><li>at the end of generator raise StopIterationError</li><li>can be used by next() function</li></ul><p>why we need generator?<br>all data are calculated step by step when in need, don’t store in memory, use cpu instead of memory. range() is a generator,so we need use it often, it is more useful than list.</p><p>how to make a generator</p><ul><li><code>()</code></li><li>yield: yield can stop loop until next iterate</li></ul><p>use <code>()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lt = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">lg = (i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">print(type(lt))</span><br><span class="line"><span class="comment"># lg is a generator</span></span><br><span class="line">print(type(lg))</span><br></pre></td></tr></table></figure><p>use yield</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># normal usage</span></span><br><span class="line"><span class="comment"># 1,1,2,3,5,8,13</span></span><br><span class="line"><span class="comment"># def fib(num):</span></span><br><span class="line"><span class="comment">#     a,b,n = 0,1,0</span></span><br><span class="line"><span class="comment">#     while n &lt; num:</span></span><br><span class="line"><span class="comment">#         a,b = b,a+b</span></span><br><span class="line"><span class="comment">#         n += 1</span></span><br><span class="line"><span class="comment">#     return a</span></span><br><span class="line"><span class="comment"># fib(6)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># use yield</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(num)</span>:</span></span><br><span class="line">    a,b,n = <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; num:</span><br><span class="line">        <span class="comment"># yield can stop loop until next iterate</span></span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a,b = b,a+b</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># generator is iterable</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fib(<span class="number">7</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><h1 id="coroutines"><a href="#coroutines" class="headerlink" title="coroutines"></a>coroutines</h1><p>coroutines is much more useful than multi threads, it’s need less resource, we can regard it as a generator or a function which can be stopd</p><p>how to realize it?</p><ul><li>yield: return result</li><li>send: send args to generator</li><li>yield from: as a middle hand transfer message</li></ul><p>yield x: return x<br>x = yield: get x value from send() function</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_coroutine</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"start"</span>)</span><br><span class="line">    x = <span class="keyword">yield</span></span><br><span class="line">    print(<span class="string">"get"</span>,x)</span><br><span class="line">    <span class="keyword">yield</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">co = test_coroutine()</span><br><span class="line">next(co)</span><br><span class="line">co.send(<span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>yield from</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_coroutine</span><span class="params">(st)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(st):</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_num</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> <span class="string">"1234567"</span></span><br><span class="line"></span><br><span class="line">print(list(get_num()))</span><br></pre></td></tr></table></figure><h2 id="async-wait"><a href="#async-wait" class="headerlink" title="async/wait"></a>async/wait</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_num</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        print(i)</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">lt = [get_num(<span class="number">10</span>),get_num(<span class="number">20</span>)]</span><br><span class="line">loop.run_until_complete(asyncio.wait(lt))</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure><h2 id="concurrent-futures"><a href="#concurrent-futures" class="headerlink" title="concurrent.futures"></a>concurrent.futures</h2><ul><li>use subprocess, run several python interpreter. each subprocess can use a core of cpu, all core of cpu can be used 100%</li><li>use multithreads, as we know python can only use one thread at one time, so it uses the same time as one process, and each of thread can not pull use cpu</li></ul><h3 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h3><p>although my cpu only have 4 core 8 thread, but each cpu didn’t be full used, it is because python can only run one thread at one time, threadpool is also thread.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ts</span><span class="params">(num)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    print(threading.current_thread())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        sum += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line">pool = ThreadPoolExecutor(max_workers=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">t1 = pool.submit(ts, <span class="number">100000000</span>)</span><br><span class="line">t2 = pool.submit(ts, <span class="number">100000000</span>)</span><br><span class="line">t3 = pool.submit(ts, <span class="number">100000000</span>)</span><br><span class="line">t4 = pool.submit(ts, <span class="number">100000000</span>)</span><br><span class="line">t5 = pool.submit(ts, <span class="number">100000000</span>)</span><br><span class="line">t6 = pool.submit(ts, <span class="number">100000000</span>)</span><br><span class="line">t7 = pool.submit(ts, <span class="number">100000000</span>)</span><br><span class="line">t8 = pool.submit(ts, <span class="number">100000000</span>)</span><br><span class="line"></span><br><span class="line">print(t1.result())</span><br><span class="line">print(t2.result())</span><br><span class="line">print(t3.result())</span><br><span class="line">print(t4.result())</span><br><span class="line">print(t5.result())</span><br><span class="line">print(t6.result())</span><br><span class="line">print(t7.result())</span><br><span class="line">print(t8.result())</span><br></pre></td></tr></table></figure><p>use map</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ts</span><span class="params">(num)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    print(threading.current_thread())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        sum += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line">pool = ThreadPoolExecutor(max_workers=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lt = [<span class="number">100000000</span>] * <span class="number">8</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> pool.map(ts,lt):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><h3 id="ProcessPoolExecutor"><a href="#ProcessPoolExecutor" class="headerlink" title="ProcessPoolExecutor"></a>ProcessPoolExecutor</h3><p>all core of cpu can be used 100%</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ts</span><span class="params">(num)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    print(threading.current_thread())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        sum += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line">pool = ProcessPoolExecutor(max_workers=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lt = [<span class="number">100000000</span>] * <span class="number">8</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> pool.map(ts,lt):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><h1 id="regular-expression"><a href="#regular-expression" class="headerlink" title="regular expression"></a>regular expression</h1><ul><li><p>there are two methods</p><ol><li><p>compile re to a object</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">"Hello, Join. where did you go? 123,hk123,H89Hk"</span></span><br><span class="line">p = re.compile(<span class="string">"[0-9]&#123;1,&#125;"</span>)</span><br><span class="line">m = p.findall(s)</span><br><span class="line">print(m)</span><br></pre></td></tr></table></figure></li><li><p>use re directory</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">"Hello, Join. where did you go? 123,hk123,H89Hk"</span></span><br><span class="line">m = re.findall(<span class="string">"[0-9]&#123;1,&#125;"</span>,s)</span><br><span class="line">print(m)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>ignore case</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">"Hello, Join. where did you go? 123,hkj123,H89Hjk"</span></span><br><span class="line">p = re.compile(<span class="string">"h"</span>,re.I)</span><br><span class="line">m = p.findall(s)</span><br><span class="line">print(m)</span><br></pre></td></tr></table></figure><ul><li>substitute</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">"Hello, Join. where did you go? 123,hkj123,H89Hjk"</span></span><br><span class="line">p = re.compile(<span class="string">"\d+"</span>)</span><br><span class="line">t = p.sub(<span class="string">"000"</span>,s)</span><br><span class="line">print(s)</span><br><span class="line">print(t)</span><br></pre></td></tr></table></figure><ul><li>catch chinese</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">"Hello, 世界. 喜欢你where did you go? 123,hkj123,H89Hjk"</span></span><br><span class="line">p = re.compile(<span class="string">"[\u4c00-\u9fa5]+"</span>)</span><br><span class="line">t = p.findall(s)</span><br><span class="line"></span><br><span class="line">print(t)</span><br></pre></td></tr></table></figure><ul><li>catch no chinese</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">"Hello, 世界. 喜欢你where did you go? 123,hkj123,H89Hjk"</span></span><br><span class="line">p = re.compile(<span class="string">"[^\u4c00-\u9fa5]+"</span>)</span><br><span class="line">t = p.findall(s)</span><br><span class="line"></span><br><span class="line">print(t)</span><br></pre></td></tr></table></figure><h1 id="Xpath"><a href="#Xpath" class="headerlink" title="Xpath"></a>Xpath</h1><p>it is used to find xml file</p><p>syntax:</p><ul><li><code>/</code>: root node</li><li><code>//</code>: two node</li><li><code>.</code>: current node</li><li><code>..</code>: father node</li><li><code>@</code>: property</li></ul><h1 id="net-program"><a href="#net-program" class="headerlink" title="net program"></a>net program</h1><p>network model:</p><ul><li>7 layers model<ul><li>Layer 7 - Application</li><li>Layer 6 - Presentation</li><li>Layer 5 - Session</li><li>Layer 4 - Transport</li><li>Layer 3 - Network</li><li>Layer 2 - Data Link</li><li>Layer 1 - Physical</li></ul></li><li>4 layers model<ul><li>Layer 4 - Application</li><li>Layer 3 - Transport</li><li>Layer 2 - Network</li><li>Layer 1 - Link</li></ul></li></ul><h1 id="ftp"><a href="#ftp" class="headerlink" title="ftp"></a>ftp</h1><ul><li><p>leaning website: <a href="http://zetcode.com/python/ftp/" target="_blank" rel="noopener">link</a></p></li><li><p>Python ftplib<br>python ftplib is a module that implements the client side of the FTP protocol. It contains an FTP client class and some helper functions. </p></li><li><p>Python FTP clas<br>The ftplib.FTP() creates a new instance of the FTP class. When host is given, a connection to the host is made with the connect() method. </p></li></ul><p>example:</p><p>in my archlinux, i start vsftpd.service first</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start vsftpd</span><br></pre></td></tr></table></figure><p>and then change the default config <code>/etc/vsftpd.config</code> to enable local user login</p><p>at last i write a ftp python file</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ftplib</span><br><span class="line"></span><br><span class="line"><span class="comment"># a anonymous function print lines</span></span><br><span class="line">line = <span class="keyword">lambda</span> x: print(x * <span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get ftp login user and passwd</span></span><br><span class="line">user = input(<span class="string">"ftp login user name: "</span>)</span><br><span class="line">pwd = input(<span class="string">"password: "</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> ftplib.FTP(<span class="string">"localhost"</span>) <span class="keyword">as</span> ftp:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># get connection</span></span><br><span class="line">        ftp.login(user=user, passwd=pwd)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print welcome information</span></span><br><span class="line">        info = ftp.getwelcome()</span><br><span class="line">        print(<span class="string">"welcome: "</span>,info)</span><br><span class="line">        line(<span class="string">"-"</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># change current directory</span></span><br><span class="line">        ftp.cwd(dirname=<span class="string">"Desktop"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># get current directory</span></span><br><span class="line">        current_dir = ftp.pwd()</span><br><span class="line">        print(<span class="string">"current_dir: "</span>,current_dir)</span><br><span class="line">        line(<span class="string">"*"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># get context list</span></span><br><span class="line">        files = []</span><br><span class="line">        ftp.dir(files.append)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> files:</span><br><span class="line">            print(i)</span><br><span class="line">        line(<span class="string">"="</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># download file, by default the file will be stored at /tmp/</span></span><br><span class="line">        file_copy = <span class="string">"test.txt"</span></span><br><span class="line">        <span class="keyword">with</span> open(file_copy, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            res = ftp.retrlines(<span class="string">"RETR "</span>+<span class="string">"1.py"</span>, f.write)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> res.startswith(<span class="string">'226 Transfer complete'</span>):</span><br><span class="line">                print(<span class="string">'Download failed'</span>)</span><br><span class="line">                <span class="keyword">if</span> os.path.isfile(file_copy):</span><br><span class="line">                    os.remove(file_copy)  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"down"</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">except</span> ftplib.all_errors <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br></pre></td></tr></table></figure><h1 id="mail"><a href="#mail" class="headerlink" title="mail"></a>mail</h1><p>how it works?<br>process: user mail —-&gt; mail proxy —–&gt; mail server —–&gt; user<br>agent: ————&gt;mua————–&gt;mta—————&gt;mda<br>protocal: —————–&gt;SMTP————-&gt;POP3/IMAP</p><p>MUA: MailUserAgent, user send mail to proxy<br>MTA: MailTransferAgent, catch mail from proxy to mail server<br>MDA: MailDeliveryAgent, deliver mail from server to user</p><p>how to use it:<br>there are two modules</p><ol><li>email: used to modify mail</li><li>smtplib: used to send mail</li></ol><p>the following is a simple text mail example.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># define some variables</span></span><br><span class="line">from_addr = <span class="string">"1025096440@qq.com"</span></span><br><span class="line"><span class="comment"># this is a code from web mail</span></span><br><span class="line">from_pwd = <span class="string">"nrbnnibhjrgrbcdd"</span></span><br><span class="line">to_addr = <span class="string">"1025096440@qq.com"</span></span><br><span class="line">smtp_srv = <span class="string">"smtp.qq.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># write message</span></span><br><span class="line">text_msg = MIMEText(<span class="string">"第一封邮件"</span>, <span class="string">"plain"</span>, <span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add header</span></span><br><span class="line">text_msg[<span class="string">'From'</span>] = from_addr</span><br><span class="line">text_msg[<span class="string">'To'</span>] = to_addr</span><br><span class="line">text_msg[<span class="string">'Subject'</span>] = <span class="string">"测试"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># server address need encode to byte,so we need encode it</span></span><br><span class="line">    <span class="comment"># port 465 is a security port which server accept</span></span><br><span class="line">    srv = smtplib.SMTP_SSL(smtp_srv.encode(), <span class="number">465</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># login</span></span><br><span class="line">    srv.login(from_addr,from_pwd)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># send text mail</span></span><br><span class="line">    srv.sendmail(from_addr, [to_addr], text_msg.as_string())</span><br><span class="line">    srv.quit()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"done"</span>)</span><br></pre></td></tr></table></figure><p>the following is a text format mail with additional file </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEBase,MIMEMultipart</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># some variables</span></span><br><span class="line">from_addr = <span class="string">"1025096440@qq.com"</span></span><br><span class="line"><span class="comment"># this is a code from web mail</span></span><br><span class="line">from_pwd = <span class="string">"nrbnnibhjrgrbcdd"</span></span><br><span class="line">to_addr = <span class="string">"1025096440@qq.com"</span></span><br><span class="line">smtp_srv = <span class="string">"smtp.qq.com"</span></span><br><span class="line">files = <span class="string">r"/home/narcissus/Desktop/1.py"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># initial multipart object</span></span><br><span class="line">mail_mul = MIMEMultipart()</span><br><span class="line"><span class="comment"># add header</span></span><br><span class="line">mail_mul[<span class="string">'From'</span>] = from_addr</span><br><span class="line">mail_mul[<span class="string">'To'</span>] = to_addr</span><br><span class="line">mail_mul[<span class="string">'Subject'</span>] = <span class="string">"use python email and smtplib module send mail"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># write message</span></span><br><span class="line">text_msg = MIMEText(<span class="string">"the email include text message and file"</span>, <span class="string">"plain"</span>, <span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add text to multipart object</span></span><br><span class="line">mail_mul.attach(text_msg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add file</span></span><br><span class="line"><span class="keyword">with</span> open(files, <span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    line = f.read()</span><br><span class="line">    content = MIMEText(line, <span class="string">"base64"</span>, <span class="string">"utf-8"</span>)</span><br><span class="line">    content[<span class="string">"Content-type"</span>] = <span class="string">"application/octet-stream"</span></span><br><span class="line">    content[<span class="string">"Content-Disposition"</span>] = <span class="string">"attachment; filename=files"</span></span><br><span class="line">    mail_mul.attach(content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># send mail</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># server address need encode to byte,so we need encode it</span></span><br><span class="line">    <span class="comment"># port 465 is a security port which server accept</span></span><br><span class="line">    srv = smtplib.SMTP_SSL(smtp_srv.encode(), <span class="number">465</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># login</span></span><br><span class="line">    srv.login(from_addr,from_pwd)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># send text mail</span></span><br><span class="line">    srv.sendmail(from_addr, [to_addr], mail_mul.as_string())</span><br><span class="line">    srv.quit()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"done"</span>)</span><br></pre></td></tr></table></figure><p>the following is a html format mail example.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"></span><br><span class="line"><span class="comment"># write message</span></span><br><span class="line">html_msg = <span class="string">"""</span></span><br><span class="line"><span class="string">    &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">    &lt;html lang="en"&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;meta charset="UTF-8"&gt;</span></span><br><span class="line"><span class="string">        &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span></span><br><span class="line"><span class="string">        &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;Document&lt;/title&gt;</span></span><br><span class="line"><span class="string">        &lt;script src="./vue.js" charset="utf-8"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;h1 style="background: #7fedbb"&gt;有情人难成属眷&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">    &lt;/html&gt;</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">html_msg = MIMEText(html_msg, <span class="string">"html"</span>, <span class="string">"utf-8"</span>)</span><br><span class="line"><span class="comment"># some variables</span></span><br><span class="line">from_addr = <span class="string">"1025096440@qq.com"</span></span><br><span class="line"><span class="comment"># this is a code from web mail</span></span><br><span class="line">from_pwd = <span class="string">"nrbnnibhjrgrbcdd"</span></span><br><span class="line">to_addr = <span class="string">"1025096440@qq.com"</span></span><br><span class="line">smtp_srv = <span class="string">"smtp.qq.com"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># server address need encode to byte,so we need encode it</span></span><br><span class="line">    <span class="comment"># port 465 is a security port which server accept</span></span><br><span class="line">    srv = smtplib.SMTP_SSL(smtp_srv.encode(), <span class="number">465</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># login</span></span><br><span class="line">    srv.login(from_addr,from_pwd)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># send html mail</span></span><br><span class="line">    srv.sendmail(from_addr, [to_addr], html_msg.as_string())</span><br><span class="line">    srv.quit()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"done"</span>)</span><br></pre></td></tr></table></figure><p>alternative choose html format or text format, because some fo device can not display html format</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># some variables</span></span><br><span class="line">from_addr = <span class="string">"1025096440@qq.com"</span></span><br><span class="line"><span class="comment"># this is a code from web mail</span></span><br><span class="line">from_pwd = <span class="string">"nrbnnibhjrgrbcdd"</span></span><br><span class="line">to_addr = <span class="string">"1025096440@qq.com"</span></span><br><span class="line">smtp_srv = <span class="string">"smtp.qq.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># initial multipart object</span></span><br><span class="line">mail_mul = MIMEMultipart(<span class="string">"alternative"</span>)</span><br><span class="line"><span class="comment"># add header</span></span><br><span class="line">mail_mul[<span class="string">'From'</span>] = from_addr</span><br><span class="line">mail_mul[<span class="string">'To'</span>] = to_addr</span><br><span class="line">mail_mul[<span class="string">'Subject'</span>] = <span class="string">"use python email and smtplib module send mail"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># write message</span></span><br><span class="line">text_msg = MIMEText(<span class="string">"alternative choose text or html style"</span>, <span class="string">"plain"</span>, <span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add text to multipart object</span></span><br><span class="line">mail_mul.attach(text_msg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write html</span></span><br><span class="line">html_msg = <span class="string">"""</span></span><br><span class="line"><span class="string">    &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">    &lt;html lang="en"&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;meta charset="UTF-8"&gt;</span></span><br><span class="line"><span class="string">        &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span></span><br><span class="line"><span class="string">        &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;Document&lt;/title&gt;</span></span><br><span class="line"><span class="string">        &lt;script src="./vue.js" charset="utf-8"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;h1 style="background: #7fedbb"&gt;有情人难成属眷&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">    &lt;/html&gt;</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">html_msg = MIMEText(html_msg, <span class="string">"html"</span>, <span class="string">"utf-8"</span>)</span><br><span class="line">mail_mul.attach(html_msg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># send mail</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># server address need encode to byte,so we need encode it</span></span><br><span class="line">    <span class="comment"># port 465 is a security port which server accept</span></span><br><span class="line">    srv = smtplib.SMTP_SSL(smtp_srv.encode(), <span class="number">465</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># login</span></span><br><span class="line">    srv.login(from_addr,from_pwd)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># send text mail</span></span><br><span class="line">    srv.sendmail(from_addr, [to_addr], mail_mul.as_string())</span><br><span class="line">    srv.quit()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"done"</span>)</span><br></pre></td></tr></table></figure><hr><p>the end! I am really happy that i learn all of them. It is really awesome,nice.</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos和mysql安装</title>
      <link href="/2020/03/04/centos%E5%92%8Cmysql%E5%AE%89%E8%A3%85/"/>
      <url>/2020/03/04/centos%E5%92%8Cmysql%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="centos7安装"><a href="#centos7安装" class="headerlink" title="centos7安装"></a>centos7安装</h1><ul><li>官网下载速度有点慢：</li><li>只需要下载minimal（大约1G，没有图形界面）就行了<br>centos7下载链接：<code>http://mirrors.cn99.com/centos/7.7.1908/isos/x86_64/</code><br>centos7官方链接：<code>https://wiki.centos.org/Download</code></li></ul><h1 id="联网"><a href="#联网" class="headerlink" title="联网"></a>联网</h1><ul><li><p>在虚拟机中安装，网络适配器选择桥接</p></li><li><p>centos默认开启了两个网络管理软件network和NetworkManager，而且这两个软件读取的配置文件也相同。区别在于NetworkManager更加适合桌面系统，network则更加适合服务器使用，所以启用其中一个就可以了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable NetworkManager</span><br></pre></td></tr></table></figure></li><li><p>默认启动了network（NetworkManager）服务，但是没有设置DNS，也没有安装dhcp，那么可简单的临时手动指定ip来进行联网<br>查看服务启动情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status network</span><br></pre></td></tr></table></figure><p>查看网络接口名以及网络连接情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip -c a</span><br></pre></td></tr></table></figure><p>如果网络接口为down，那么需要启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip link set enp0s3 up</span><br></pre></td></tr></table></figure><p>设置静态ip</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip address add 192.168.0.99/24 broadcast + dev enp0s3</span><br></pre></td></tr></table></figure><p>设置路由</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip route add default via 192.168.0.1 dev enp0s3</span><br></pre></td></tr></table></figure><p>设置DNS</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "nameserver 114.114.114.114" &gt; /etc/resolv.conf</span><br></pre></td></tr></table></figure><p>查看是否可以联网</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping -c 3 www.baidu.com</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>设置静态ip</p><p>由于它默认使用的是network来管理网络的，而且是开机启动，所以可以直接配置就好</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/sysconfig/network-scripts</span><br></pre></td></tr></table></figure><p>查看默认配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ifcfg-enp0s3</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=dhcp</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=enp0s3</span><br><span class="line">UUID=d3eda668-4288-49cf-9b05-64ebf9f1556a</span><br><span class="line">DEVICE=enp0s3</span><br><span class="line">ONBOOT=no</span><br></pre></td></tr></table></figure><p>修改<br>需要注意的就是ip地址要选择一个未被使用的，可以简单的使用ping来检测是否被使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping -c 3 192.168.0.88</span><br></pre></td></tr></table></figure><p>配置如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static # 修改为静态</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=enp0s3</span><br><span class="line">UUID=d3eda668-4288-49cf-9b05-64ebf9f1556a</span><br><span class="line">DEVICE=enp0s3</span><br><span class="line">ONBOOT=yes # 修改为开机启动</span><br><span class="line"></span><br><span class="line">IPADDR=192.168.0.88 # 添加ip地址</span><br><span class="line">NETMASK=255.255.255.0 # 添加子网掩码</span><br><span class="line">GATEWAY=192.168.0.1 # 添加网关</span><br></pre></td></tr></table></figure><p>重启网络服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure></li></ul><h1 id="mysql8-0安装"><a href="#mysql8-0安装" class="headerlink" title="mysql8.0安装"></a>mysql8.0安装</h1><p>安装方式采用rpm安装包的方式，这种安装方式挺简单，但是下载速度很慢</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>网址：<a href="https://downloads.mysql.com/archives/community/" target="_blank" rel="noopener">https://downloads.mysql.com/archives/community/</a></p><p>下载：<br>首先安装wget</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install wget -y</span><br></pre></td></tr></table></figure><p>下载mysql：</p><ul><li>这个下载连接在网址里面去找，由于我是centos7，所以需要下载7对应的版本</li><li>下载bundle而不是server，因为bundle包括了所有需要的组件，单独下载server会缺少许多其它包<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;downloads.mysql.com&#x2F;archives&#x2F;get&#x2F;p&#x2F;23&#x2F;file&#x2F;mysql-8.0.18-1.el7.x86_64.rpm-bundle.tar</span><br></pre></td></tr></table></figure></li></ul><p>下载速度挺慢，大约需要3,4个小时</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>解压：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xf .&#x2F;mysql-8.0.18-1.el7.x86_64.rpm-bundle.tar</span><br></pre></td></tr></table></figure><p>安装：</p><ul><li>会解压许多的rpm文件，所以需要将这些都安装一下</li><li>有的安装会报错，可以不管，主要是能够安装client，common，server，libs这些<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh mysql-community-common-8.0.18-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-8.0.18-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-compat-8.0.18-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-embedded-compat-8.0.18-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-8.0.18-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-server-8.0.18-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure></li></ul><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure><p>查看启动是否成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure><p>查看动态密码</p><ul><li>安装时没有输出动态密码，需要自己查看<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;var&#x2F;log&#x2F;mysqld.log | grep password</span><br></pre></td></tr></table></figure></li></ul><p>客户端连接</p><ul><li>输入上面的动态密码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure></li></ul><p>修改密码</p><ul><li>必须先修改密码才能进行其它操作<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;1qaz@wsx#Ed&#39;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-文件被占用</title>
      <link href="/2020/03/03/linux-%E6%96%87%E4%BB%B6%E8%A2%AB%E5%8D%A0%E7%94%A8/"/>
      <url>/2020/03/03/linux-%E6%96%87%E4%BB%B6%E8%A2%AB%E5%8D%A0%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在某些情况下，会遇到文件被占用的情况。那么解决方法也挺简单</p></blockquote><h1 id="可能出现占用的情况"><a href="#可能出现占用的情况" class="headerlink" title="可能出现占用的情况"></a>可能出现占用的情况</h1><ol><li>挂载了某个磁盘后，并且某个程序还在使用挂载的这个磁盘中的文件时，如果这时去直接取消磁盘的挂载，那么就会出现占用的问题。</li><li>用vim正在编辑一个文件，不小心放入了后台。再打开这个文件的时候也会出现占用的情况</li></ol><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><ol><li><p>找到占用的程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof | grep 被占用文件</span><br></pre></td></tr></table></figure><p>这时可以去手动结束这个程序</p></li><li><p>如果没找到，那么可直接取消文件被占用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fuser -k 占用程序</span><br></pre></td></tr></table></figure></li><li><p>如果是因为后台程序问题，可以直接将它放入前台</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jobs# 查看是否存在后台程序</span><br><span class="line">fg# 放入前台</span><br></pre></td></tr></table></figure></li></ol><h1 id="遇到了一个奇怪的问题"><a href="#遇到了一个奇怪的问题" class="headerlink" title="遇到了一个奇怪的问题"></a>遇到了一个奇怪的问题</h1><p>一个朋友的服务器上，由于某种原因导致vim编辑的文件未正确关闭，产生了许多的swap文件。但是奇怪的是root都无法删除那个隐藏的swap文件，试了上面的那些方法都无法删除。</p><p>最后是阿里的售后工程师解决的，原因是安全软件(云锁)的影响，关闭之后就可以删除了。居然安全软件可以限制root用户的权限，我一直以为root用户无所不能的。</p>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> snippet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>archlinux-最好的desktop</title>
      <link href="/2020/03/03/archlinux-%E6%9C%80%E5%A5%BD%E7%9A%84desktop/"/>
      <url>/2020/03/03/archlinux-%E6%9C%80%E5%A5%BD%E7%9A%84desktop/</url>
      
        <content type="html"><![CDATA[<p>之前安装了pycharm，但是只能在桌面环境中才能使用。如果在xmonad中那么则使用不了，不过有atom，我就没打算安装桌面环境。但是这几天使用了一个teamviewer，不过在xmonad中也运行不了，后来google了一下才知道从teamviewer13开始就必须要使用桌面环境才能启动。所以不得不去找一个桌面环境</p><p>特点：</p><ul><li>简单</li><li>优雅</li></ul><p>没什么复杂的配置，但是很简单好看，功能也不多。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S budgie-desktop</span><br></pre></td></tr></table></figure><p>但是发现并没有壁纸，也设置不了壁纸。因为它依赖gnome的控制中心</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pacman -S gnome-control-center</span><br><span class="line">pacman -S gnome-backgrounds</span><br></pre></td></tr></table></figure><p>这样就可以设置桌面壁纸了</p><p>可以自己调整一些配置，由于它也是使用的gtk3，所以只需要安装gtk3的theme即可。安装方法和gnome一样。</p><p><a href="https://imgchr.com/i/3hn5TI" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/03/03/3hn5TI.png" alt="budgie"></a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>pip速度慢解决</title>
      <link href="/2020/02/28/pip%E9%80%9F%E5%BA%A6%E6%85%A2%E8%A7%A3%E5%86%B3/"/>
      <url>/2020/02/28/pip%E9%80%9F%E5%BA%A6%E6%85%A2%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>pip是python的一个包管理器,但是国内安装速度很慢,导致安装不成功的可能性很大,所以需要配置一下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>这样在<code>~/.config/pip/pip.conf</code>目录下就生成了一个配置文件</p>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> snippet </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue-计算属性原理</title>
      <link href="/2020/02/20/vue-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E5%8E%9F%E7%90%86/"/>
      <url>/2020/02/20/vue-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这两天明显感觉到了春天来了,每天的太阳都是那么温暖。但是却无法接近，现在看待事务变得总是那么悲观了</p></blockquote><p>之所以使用计算属性时，可以不加括号，是因为它本身就不是一个函数，而是使用了简写的形式。计算属性作为一个对象，实现了get和set方法，不过set方法一般不会使用，所以才有了简写形式</p><p>举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里调用的不是一个函数,而是作为computed的一个属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullname&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../../../vue.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#app"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                firstname: <span class="string">'lanzhan'</span>,</span></span><br><span class="line"><span class="actionscript">                lastname: <span class="string">'weiwuxian'</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            <span class="comment">// 使用计算属性</span></span></span><br><span class="line">            computed: &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// fullname其实不是一个函数,而是作为一个对象,包含了set和get方法</span></span></span><br><span class="line">                fullname: &#123;</span><br><span class="line"><span class="actionscript">                    <span class="comment">// set函数可以对其进行赋值,可以接受参数</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// set方法一般不会使用,为了安全,所以fullname这个对象只有一个get方法</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 所以一般不写set方法,只有get方法,就对其进行了简写</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">set</span>: <span class="function"><span class="keyword">function</span><span class="params">(newname)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">const</span> name = newname.split(<span class="string">' '</span>);</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.firstname = name[<span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.lastname= name[<span class="number">1</span>];</span></span><br><span class="line">                    &#125;,</span><br><span class="line"><span class="actionscript">                    <span class="comment">// get方法用来返回值,一般使用get方法</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">get</span>: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">return</span> <span class="keyword">this</span>.firstname + <span class="string">' '</span> + <span class="keyword">this</span>.lastname</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 简写一: 省略set方法</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// computed: &#123;</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//     fullname: &#123;</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//         get: function()&#123;</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//             return this.firstname + ' ' + this.lastname</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//         &#125;</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// &#125;,</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 简写二: 再次简化 ,这也是我们最常写的方法</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// computed: &#123;</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//     fullname: function()&#123;</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//         return this.firstname + ' ' + this.lastname</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// &#125;</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-es6语法</title>
      <link href="/2020/02/20/vue-es6%E8%AF%AD%E6%B3%95/"/>
      <url>/2020/02/20/vue-es6%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>分为三个部分：let，const，对象</p></blockquote><h2 id="let和const-使用let和const代替了var，因为var是全局变量。let和const有自己的作用域"><a href="#let和const-使用let和const代替了var，因为var是全局变量。let和const有自己的作用域" class="headerlink" title="let和const:使用let和const代替了var，因为var是全局变量。let和const有自己的作用域"></a>let和const:使用let和const代替了var，因为var是全局变量。let和const有自己的作用域</h2><ul><li>let： 变量</li><li>const： 常量</li></ul><p>举例：</p><ol><li>let</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"button"</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"button"</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"button"</span>&gt;</span>按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"button"</span>&gt;</span>按钮4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"button"</span>&gt;</span>按钮5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="comment">&lt;!-- const btn = document.getElementsByTagName('button') --&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="comment">&lt;!-- ES5中使用的var定义的变量为全局变量,没有自己的作用域 --&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="comment">&lt;!-- 所以通过循环监听,此时i的值已经变成了5,所以即使点击的是第一个按钮,也会打印第五个按钮被点击 --&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="comment">&lt;!-- 实际上所有按钮点击都会显示为第五个按钮被点击 --&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="comment">&lt;!-- for (var i = 0 ; i &lt; btn.length; i++)&#123; --&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="comment">&lt;!-- btn[i].addEventListener('click',function()&#123; --&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="comment">&lt;!-- console.log('第'+ i + '个按钮被点击') --&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="comment">&lt;!-- &#125;) --&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="comment">&lt;!-- &#125; --&gt;</span></span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'button'</span>)</span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="comment">&lt;!-- ES6中使用let后,for循环中的每个函数都有了自己的i值,let具有块级作用域 --&gt;</span></span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; btn.length; i++)&#123;</span></span><br><span class="line"><span class="actionscript">        btn[i].addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'第'</span>+ i + <span class="string">'个按钮被点击'</span>)</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>const</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> name = <span class="string">'lanzhan'</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(name)</span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="comment">&lt;!-- const标志name为一个常量,不可以被改变 --&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="comment">&lt;!-- name = 'weiwuxian' --&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="comment">&lt;!-- console.log(name) --&gt;</span></span></span></span><br><span class="line"></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="comment">&lt;!-- const可以指向一个对象,指定的对象不可以被改变,但是对象的属性可以被改变 --&gt;</span></span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> user = &#123;</span></span><br><span class="line">            id: 1,</span><br><span class="line"><span class="actionscript">            name: <span class="string">'lanzhan'</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(user.id)</span></span><br><span class="line"></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="comment">&lt;!-- 对象不可以被改变,因为user所指向的内存地址不可被改变 --&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="comment">&lt;!-- user = &#123; --&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="comment">&lt;!-- id: 2, --&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="comment">&lt;!-- name: 'weiwuxian' --&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="comment">&lt;!-- &#125; --&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="comment">&lt;!-- console.log(user.name) --&gt;</span></span></span></span><br><span class="line"></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="comment">&lt;!-- 对象中的属性可以被改变,因为此时user所指向的内存地址仍然没有变 --&gt;</span></span></span></span><br><span class="line"><span class="actionscript">        user.name = <span class="string">'weiwuxian'</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(user.name)</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="对象增强写法分为三个部分"><a href="#对象增强写法分为三个部分" class="headerlink" title="对象增强写法分为三个部分"></a>对象增强写法分为三个部分</h2><ul><li>对象写法</li><li>属性写法</li><li>函数写法</li></ul><p>举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 之前创建一个对象的写法</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// const user = new User()&#123;.... &#125;</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 对象字面量的增强写法</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// const user = &#123;.....&#125;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> id = <span class="number">1</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> name = <span class="string">'lanzhan'</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> age = <span class="number">20</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 之前获取这些属性值的写法</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// const user = &#123;</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//     id : id,</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//     name : name,</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//     age : age</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 对象属性的增强写法</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> user = &#123;</span></span><br><span class="line">            id,</span><br><span class="line">            name,</span><br><span class="line">            age</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(user)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 之前这么写函数</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// const user = &#123;</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//     getname function()&#123;</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 函数的增强写法</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> user = &#123;</span></span><br><span class="line">            getname()&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go-安装</title>
      <link href="/2020/02/20/go-%E5%AE%89%E8%A3%85/"/>
      <url>/2020/02/20/go-%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<blockquote><p>看武庚纪很喜欢最美的期待这首歌，看到有个人评论要做一个很酷的人，就连分手都要双手插在裤兜。发现自己的心胸真的不够宽阔</p></blockquote><p>一句话总结go的优点就是：接近c的运行速度，媲美python的简洁，完胜java的编译速度。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>下载：在<a href="https://golang.google.cn/" target="_blank" rel="noopener">go国内官方下载地址</a>下载</p><p>解压：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzf go1.13.8.linux-amd64.tar.gz -C ~/Software</span><br></pre></td></tr></table></figure><p>添加环境变量：</p><p>环境变量可以添加在<code>/etc/profile</code>中，作为系统变量，每个用户都可以使用；也可以添加在<code>~/.profile</code>中，只有当前用户可以使用</p><ul><li>配置goroot：go的安装目录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export GOROOT=~/Software/go</span><br></pre></td></tr></table></figure><ul><li>配置gopath：go项目代码存放位置,也就是ide中的workspace</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export GOPATH=~/Documents/script/go</span><br></pre></td></tr></table></figure><p>在这个目录下有三个目录：</p><ol><li>src：里面的每一个子目录就是一个包，包内为go的源码文件,也就是我们写go程序的位置</li><li>pkg: 编译后生成的包的目标文件</li><li>bin：生成的可执行文件</li></ol><p>只有src需要手动创建，其它会编译时自动生成</p><ul><li>配置gobin:命令文件位置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export GOBIN=~/Software/go/bin</span><br></pre></td></tr></table></figure><ul><li>将gobin添加到path中</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:$GOBIN</span><br></pre></td></tr></table></figure><p>使之立即生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.profile</span><br></pre></td></tr></table></figure><h1 id="查看是否配置成功"><a href="#查看是否配置成功" class="headerlink" title="查看是否配置成功"></a>查看是否配置成功</h1><p>查看版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go version</span><br></pre></td></tr></table></figure><p>查看环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go env</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-计算属性</title>
      <link href="/2020/02/17/vue-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/"/>
      <url>/2020/02/17/vue-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>computed,计算属性和methods看起来一样,不过区别还是挺大</p></blockquote><p>一般在html的内容中,我们都使用mustache语法来赋值,在mustache中,一般也是直接写变量名,而函数的使用是需要加小括号的,不过计算属性却可以不加小括号,虽然也是函数,但是却是作为一个属性值,可以直接用变量名来调用</p><h1 id="计算属性的优点"><a href="#计算属性的优点" class="headerlink" title="计算属性的优点"></a>计算属性的优点</h1><p>相比于函数methods,计算属性computed的优点为:</p><ul><li><p>可以直接写在mustache的括号中作为变量调用</p></li><li><p>函数的计算过程只有一遍,因为它具有缓存区,而函数则会在每次调用时都计算一遍</p></li></ul><h1 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;totalprice&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../../../vue.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#app"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 之前在这里用了个等号,一直无法显示,原来是要用冒号</span></span></span><br><span class="line">                user : [</span><br><span class="line"><span class="actionscript">                &#123;id:<span class="number">1</span>, name:<span class="string">'lanzhan'</span>, age:<span class="number">22</span>, money:<span class="number">100</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                &#123;id:<span class="number">2</span>, name:<span class="string">'libai'</span>, age:<span class="number">21</span>, money:<span class="number">100</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                &#123;id:<span class="number">3</span>, name:<span class="string">'dufu'</span>, age:<span class="number">24</span>, money:<span class="number">80</span>&#125;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            <span class="comment">// 虽然看起来计算属性和methods没有多大区别,但其实区别挺大</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 计算属性具有缓存</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 在效率上,计算属性只计算了一次,而methods会在每次调用就重新运算一遍</span></span></span><br><span class="line">            computed: &#123;</span><br><span class="line">                totalprice()&#123;</span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> result = <span class="number">0</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.user.length;i++)&#123;</span></span><br><span class="line"><span class="actionscript">                        result += <span class="keyword">this</span>.user[i].money</span></span><br><span class="line">                    &#125;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> result</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-简单使用</title>
      <link href="/2020/02/17/vue-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/02/17/vue-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>在html文件中加入这些代码</p><p>首先是一段简单的html代码，这里用到了一个<code>id</code>标识符，不过它被vue管理，其中的两个p标签中的数据也是通过两个括号来引用vue实例中的数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:title</span>=<span class="string">'showmsg'</span> &gt;</span>鼠标悬浮<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是一段js脚本，它通过<code>new</code>来声明了一个vue的实例，并使用<code>el</code>来标识这个实例的名称，<code>data</code>来存储数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: <span class="string">'Hello Vue!'</span>,</span><br><span class="line">        name: <span class="string">'二公子'</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>完整代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">dir</span>=<span class="string">"ltr"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span> <span class="attr">bgcolor</span>=<span class="string">"#cdcdc9"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">            &#123;&#123; message &#125;&#125; <span class="comment">&lt;!--&gt;引用数据&lt;/!--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//ES6中let定义变量,const定义常量,ES6之前使用var</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123; <span class="comment">//实例化一个对象</span></span></span><br><span class="line"><span class="actionscript">                el: <span class="string">"#app"</span>, <span class="comment">//挂载要管理的元素</span></span></span><br><span class="line"><span class="actionscript">                data: &#123; <span class="comment">//定义数据</span></span></span><br><span class="line"><span class="actionscript">                    message: <span class="string">"hello vue"</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一些想法：</p><p>很久之前，我喜欢上了vim，学了很多vim，觉得vim真的很好。不过这次学习vue我还是换了atom，我知道atom也可以支持vim模式的，可能我真的舍不得的就是那么vim中独有的命令吧。感觉那些才是vim真正强大的地方，但是vim终究还是没atom方便，虽然可以配置，但是哪有时间去弄那些，既然有集成好的，为什么不去使用呢，其实有时候懂得放弃比无知的的去追求要好，因为vim自身足够强大，没有插件才能给vim一个简洁的环境，它本来就是那么简单，强大不是吗。安装那么多插件，以努力达到ide的功能，这或许已经违背了vim的初衷吧</p><p>在使用atom一会后，我就觉得atom有点卡，所以我卸载了atom，安装上了vscode，因为看视频都说vscode不卡，相比于atom来说。但是我最终还是选择了atom，为什么呢，不是cscode不好，只是我还是喜欢第一眼了解的atom，不仅仅是cscode在html页面渲染时不能支持vue吧，毕竟atom的markdown的同步滚动插件容易卡死，而同步滚动在vscode中却是内置的一个功能，似乎本身就该是那样。可能就是一种喜欢，喜欢那种布局，喜欢默认的配色，都有一种特殊的感觉。而且它对于我这个经常使用vim的人来说功能已经逆天的强大了。并不是说一定要选择最好的编辑器，而是要选择自己喜欢的编辑器</p><p>就像archlinux一样，在我接触linux后不久了解到了它，使用了这么久，并不是说它真的就是最好的，其实那些集成的kde，gnome的manjaro也挺不错的，或者有qq，微信的deepin也挺好，但是我对archlinux很熟啊，使用了两三年，有感情了。我所配置的桌面也有诸多的不足，但是有感情，简简单单的，安安静静的，看着很舒心</p>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-基本介绍</title>
      <link href="/2020/02/17/vue-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/"/>
      <url>/2020/02/17/vue-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<blockquote><p>VUE：渐进式JavaScript框架</p></blockquote><p>渐进式理解：包含两个部分：</p><ul><li>核心库：基本，比较小</li><li>插件：需要特定的功能就下载插件</li></ul><p>作用：动态构建用户界面，将后台的数据在前端显示出来</p><p>特点：</p><ul><li>体积小，效率高，适合移动/pc端开发</li><li>自身关注UI，不过可以下载vue插件和第三方库</li></ul><p>vue常用插件：</p><ul><li>vue-cli：用来下载vue插件</li><li>axios(xvue-resource现在不常用了)：ajax请求</li><li>vue-route：路由</li><li>vuex：状态管理</li><li>vue-lazyload：图片加载</li><li>vue-scroller：页面滑动</li><li>mint-ui：基于vue的ui组件库（移动端）</li><li>element-ui：基于vue的ui组件库（PC端）</li></ul><p>vue.js安装：</p><ol><li><p>直接下载vue.js文件 并用<code>&lt;script&gt;</code> 标签引入，Vue 会被注册为一个全局变量。</p></li><li><p>使用命令行工具，vue-cli来自动下载项目需要的所有插件</p></li><li><p>还可以不下载vue.js文件，直接通过代码来引用</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>vue.js的引用</p><ol><li>将vue.js复制到项目文件夹下，通过html文件来应用vue.js</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"vue.js"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>同样是复制到项目文件夹下，不过是通过vue文件来引用</li></ol>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-动态绑定</title>
      <link href="/2020/02/17/vue-%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A/"/>
      <url>/2020/02/17/vue-%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<blockquote><p>vue的动态绑定分为三种: 绑定属性,绑定class,绑定style</p></blockquote><h1 id="绑定语法"><a href="#绑定语法" class="headerlink" title="绑定语法"></a>绑定语法</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v-bind:要绑定的属性</span><br></pre></td></tr></table></figure><p>其中<code>v-bind</code>可以简写为冒号<code>:</code></p><h1 id="绑定属性"><a href="#绑定属性" class="headerlink" title="绑定属性"></a>绑定属性</h1><p>例如:绑定图片地址,颜色等</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v-bind:src="url"</span><br><span class="line">v-bind:href="linkurl"</span><br></pre></td></tr></table></figure><p>使用简写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:src="url"</span><br><span class="line">:href="linkurl"</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 如果没有使用v-bind动态绑定指令,那么图片不会显示出来 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"imgurl"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用v-bind即可正常显示图片 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"imgurl"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"linkurl"</span>&gt;</span>博客地址<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"linkurl"</span>&gt;</span>博客地址<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 语法糖写法,即简写形式为一个冒号 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"linkurl"</span>&gt;</span>博客地址<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../../../vue.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#app"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                imgurl: <span class="string">'https://cn.bing.com/th?id=OHR.HumpbackHerring_ZH-CN2868885675_1920x1080.jpg&amp;rf=LaDigue_1920x1080.jpg&amp;pid=hp'</span></span></span><br><span class="line"><span class="actionscript">                ,linkurl: <span class="string">'https://ulomo.github.io'</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="绑定class"><a href="#绑定class" class="headerlink" title="绑定class"></a>绑定class</h1><p>有两种使用方式:</p><ul><li>使用对象</li><li>使用数组</li></ul><p>通常使用对象较多</p><h2 id="在使用对象时-使用-key-value-的形式"><a href="#在使用对象时-使用-key-value-的形式" class="headerlink" title="在使用对象时,使用{key-value}的形式"></a>在使用对象时,使用<code>{key-value}</code>的形式</h2><p>key为类名,value为一个布尔值,用来控制是否启用这个class</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:class=&#123;class1:bool1, class2:bool2&#125;</span><br></pre></td></tr></table></figure><p>bool值作为一个变量是在vue中对其进行赋值的</p><h2 id="在使用列表时-使用列表的形式"><a href="#在使用列表时-使用列表的形式" class="headerlink" title="在使用列表时,使用列表的形式[]"></a>在使用列表时,使用列表的形式<code>[]</code></h2><p>列表中的每一个元素时,列表中是每一个要设置的class,而判断是否启用class,是在vue中判断的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.check</span>&#123;</span></span><br><span class="line">            color: orange</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.checked</span>&#123;</span></span><br><span class="line">            color: green</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 动态绑定class时,后面为一个对象,使用&#123;key:value&#125;的形式 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;button @click='reversecolor' :class='&#123;classname1:value1, classname2:value2&#125;' type="button" name="button"&gt;确认&lt;/button&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'reversecolor'</span> <span class="attr">:class</span>=<span class="string">'&#123;check:c1, checked:c2&#125;'</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"button"</span>&gt;</span>确认<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 还可以使用方法来返回内容较长的对象 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'reversecolor'</span> <span class="attr">:class</span>=<span class="string">'getclass()'</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"button"</span>&gt;</span>确认<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 数组语法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'reversecolor'</span> <span class="attr">:class</span>=<span class="string">'[value1,value2]'</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"button"</span>&gt;</span>确认<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../../../vue.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#app"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                c1: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">                c2: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">                value1: <span class="string">'check'</span>,</span></span><br><span class="line"><span class="actionscript">                value2: <span class="string">'checked'</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                reversecolor()&#123;</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 点击事件bool值的改变使用!取反,不需要使用if去判断</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.c1 = ! <span class="keyword">this</span>.c1,</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.c2 = ! <span class="keyword">this</span>.c2</span></span><br><span class="line">                &#125;,</span><br><span class="line">                getclass()&#123;</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 使用方法来返回对象</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> &#123;check: <span class="keyword">this</span>.c1, checked: <span class="keyword">this</span>.c2&#125;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="绑定style"><a href="#绑定style" class="headerlink" title="绑定style"></a>绑定style</h1><p>和数组一样,也有两种绑定方式:对象和列表</p><p>不过在使用对象时,value并不是布尔值,而是style对应的值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:style=&#123;fontSize:finalsize, backgroundColor:finalcolor&#125;</span><br></pre></td></tr></table></figure><p>列表的使用方式一样</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 绑定对象语法 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用v-bind来绑定style --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">"&#123;fontSize: '80px' ,backgroundColor: 'orange'&#125;"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 用变量代替固定的属性值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">"&#123;fontSize: finalsize + 'px' ,backgroundColor: finalcolor&#125;"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用方法来避免在这里写太多东西 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">"getstyle()"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 绑定数组语法 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 将所有属性放在变量中,一般和条件配合使用,决定使用那一种style --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">'[base,overridebase]'</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../../../vue.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#app"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                message: <span class="string">"hello vue!"</span></span></span><br><span class="line">                ,finalsize: 100</span><br><span class="line"><span class="actionscript">                ,finalcolor: <span class="string">'green'</span></span></span><br><span class="line"><span class="actionscript">                ,base: &#123;fontSize: <span class="keyword">this</span>.finalsize + <span class="string">'px'</span>, backgroundColor: <span class="keyword">this</span>.finalcolor&#125;</span></span><br><span class="line"><span class="actionscript">                ,overridebase: &#123;fontSize: <span class="string">'20px'</span>, backgroundColor: <span class="string">'brown'</span>&#125;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                getstyle()&#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> &#123;fontSize: <span class="keyword">this</span>.finalsize + <span class="string">'px'</span>,backgroundColor: <span class="keyword">this</span>.finalcolor&#125;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>不论是使用对象还是列表,通常都是将这些数据在vue中用函数写好,在html中直接调用函数就好了</p>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-v指令</title>
      <link href="/2020/02/17/vue-v%E6%8C%87%E4%BB%A4/"/>
      <url>/2020/02/17/vue-v%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://cn.vuejs.org/v2/api/" target="_blank" rel="noopener">vue api</a>里面有所有的语法,指令等</p></blockquote><h1 id="vue的v指令"><a href="#vue的v指令" class="headerlink" title="vue的v指令"></a>vue的<a href="https://cn.vuejs.org/v2/api/#%E6%8C%87%E4%BB%A4" target="_blank" rel="noopener">v指令</a></h1><h2 id="循环指令-v-for"><a href="#循环指令-v-for" class="headerlink" title="循环指令:v-for"></a>循环指令:v-for</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v-<span class="keyword">for</span>=<span class="string">'value in values'</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">'i in message'</span>&gt;</span> &#123;&#123; i &#125;&#125; <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                message: [<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>]</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="事件指令-v-on"><a href="#事件指令-v-on" class="headerlink" title="事件指令:v-on"></a>事件指令:v-on</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span> 计数: &#123;&#123; num &#125;&#125; <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 简单的数据可以直接操作 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;button v-on:click="num++"&gt;+&lt;/button&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;button v-on:click="num--"&gt;一&lt;/button&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 复杂的操作可通过调用函数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"add"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 除了可以使用v-on指令,还可以使用@来简写 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"sub"</span>&gt;</span>一<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#app"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                num: 0</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            <span class="comment">// 定义函数</span></span></span><br><span class="line">            methods: &#123;</span><br><span class="line">                add()&#123;</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 取num的值,需要使用this,因为都属于vue这个对象</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.num = <span class="keyword">this</span>.num + <span class="number">1</span></span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">                sub: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.num--</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>snippets自定义代码片段</title>
      <link href="/2020/02/17/snippets%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
      <url>/2020/02/17/snippets%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>之前没太在意这个功能,但是发现每次都写重复的东西,确实挺浪费时间,atom中自带了snippets这个功能</p></blockquote><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法:"></a>使用方法:</h1><h2 id="打开编辑文件"><a href="#打开编辑文件" class="headerlink" title="打开编辑文件"></a>打开编辑文件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edit--snippets</span><br></pre></td></tr></table></figure><p>上面的路径就可以打开自定义代码片段的文件了</p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">'.source.language':</span><br><span class="line">    '一些描述':</span><br><span class="line">        'prefix':'words'</span><br><span class="line">        'body':"""</span><br><span class="line">        code</span><br><span class="line">        """</span><br></pre></td></tr></table></figure><p>language:为使用的语言,可以是python,java,html等等等</p><p>words:为想要使用什么来表示要补全的代码,例如html中使用<code>!</code>来补全基本语句</p><p>body中的code即为代码模板</p><p>在代码中还可以使用<code>$1</code>,<code>$2</code>来表示补全代码后光标停留的位置</p><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">'.source.html':</span><br><span class="line">    'vue template':</span><br><span class="line">        'prefix':'vue'</span><br><span class="line">        'body':"""</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">                &#123;&#123;message&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"$1"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">                    el: <span class="string">"#app"</span>,</span></span><br><span class="line">                    data: &#123;</span><br><span class="line"><span class="actionscript">                        message: <span class="string">"hello vue!"</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">"""</span><br></pre></td></tr></table></figure><p>然后就可以使用vue加tab来补全这段代码模板了,在代码补全之后,光标会停留在$1的位置,可以方便的输入路径,而不需要自己移动光标去那个地方</p>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>atom-配置</title>
      <link href="/2020/02/17/atom-%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/02/17/atom-%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>安装atom之后的一些配置</p></blockquote><ol><li><p>代码字体大小:设置中修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edit--preferences--editor-font-size</span><br></pre></td></tr></table></figure></li><li><p>侧边栏字体大小:设置style.less文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edit--stylesheet</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 修改侧边栏字体大小,重启后生效</span><br><span class="line">.tree-view &#123;</span><br><span class="line">  font-size: 18px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解决 atom下载插件速度慢的问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.atom/.atomrc</span><br><span class="line"></span><br><span class="line">registry = https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li><li><p>html实时预览插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">atom-html-preview</span><br></pre></td></tr></table></figure></li><li><p>vim模式插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim-mode-plus</span><br></pre></td></tr></table></figure><p>之前下载了vim-mode,然后每次用到r等待这些命令时就会报错,后来google了才知道,vim-mode早已经没有再维护,所以会出现各种错误,而vim-mode-plus安装之后没有出现错误</p></li></ol><ol start="6"><li><p>侧边栏文件图标</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file-icons</span><br></pre></td></tr></table></figure></li><li><p>修改tab宽度</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edit--preferences--editor</span><br></pre></td></tr></table></figure><p> 修改table length为4.这里的table type选择auto,soft代表使用space bar时也为4个空格,tab表示只有tab才有4个空格,所以选择auto最好</p></li><li><p>html补全插件</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emmet</span><br></pre></td></tr></table></figure></li></ol><ol start="9"><li><p>终端terminal</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">platformio-ide-terminal</span><br></pre></td></tr></table></figure></li><li><p>打开浏览器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open-in-browsers</span><br></pre></td></tr></table></figure></li></ol><ol start="11"><li><p>为输入加入特效,比如声音,屏幕特效等</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activate-power-mode</span><br></pre></td></tr></table></figure></li><li><p>代码显示颜色</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pigments</span><br></pre></td></tr></table></figure></li><li><p>颜色选择器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">color-picker</span><br></pre></td></tr></table></figure></li><li><p>vim的ex-mode模式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ex-mode-plus</span><br></pre></td></tr></table></figure></li><li><p>vim的相对行数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">relative-numbers-plus</span><br></pre></td></tr></table></figure></li><li><p>和jupyter笔记本的作用一样,可以只运行选中的代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydrogen</span><br></pre></td></tr></table></figure></li></ol><p>使用一段时间后,特别是准备下载go的插件的时候,发现出现了许多问题,而且上网搜到的方法都没有用,一直报错。下载个插件又慢，搞得都不想用了，但是还是舍不得atom的界面，很符合我的感觉，所以就忍忍了，凑合凑合用吧。</p>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>redis-主从复制</title>
      <link href="/2020/02/13/redis-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
      <url>/2020/02/13/redis-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>总以为书写在书上的历史离我们很远，其实很近，因为过去的每一天都将成为历史，只不过它们太过平凡，不会被历史所铭记而已。但是它们却是我们唯一的历史，应当用情去描绘，哪怕会有一些错误，也要勇敢的走下去。</p></blockquote><h1 id="master-slave"><a href="#master-slave" class="headerlink" title="master/slave"></a>master/slave</h1><p>功能：</p><ul><li><p>主从复制</p></li><li><p>读写分离</p></li><li><p>容灾备份</p></li></ul><h1 id="常用三种配置方案："><a href="#常用三种配置方案：" class="headerlink" title="常用三种配置方案："></a>常用三种配置方案：</h1><h2 id="一主二从"><a href="#一主二从" class="headerlink" title="一主二从"></a>一主二从</h2><p><strong>一台为master，2台或多台为slave</strong></p><ol><li><p>配从（库）不配主（库）</p></li><li><p>从库配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slaveof master_ip master_port</span><br></pre></td></tr></table></figure><p>每次主机与从机断开连接之后都需要重新连接，除非在redis.conf配置文件中写好</p></li><li><p>查看信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info replication</span><br></pre></td></tr></table></figure></li></ol><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="master与slave关系的确立："><a href="#master与slave关系的确立：" class="headerlink" title="master与slave关系的确立："></a>master与slave关系的确立：</h4><p>假设有三台主机，都没有在配置文件中配置master与slave的从属关系。现在三台主机都开启了redis服务</p><p>三台主机的关系现在是平等的，master主机不需要配置。slave主机需要配置是那个主机的从机<code>slaveof master_ip master_port</code></p><p>两台主机都这么配置了之后，master主机是谁也就明确了。slave主机的作用就是备份master主机的数据，所以有几台slave就有几个备份主机</p><h4 id="slave何时备份master的数据"><a href="#slave何时备份master的数据" class="headerlink" title="slave何时备份master的数据"></a>slave何时备份master的数据</h4><p>无论slave主机何时成为master主机的从机，都会立刻同步备份所有master主机的数据</p><h4 id="从机是否能写数据"><a href="#从机是否能写数据" class="headerlink" title="从机是否能写数据"></a>从机是否能写数据</h4><p>从机上只能读数据，不能写数据。即读写分离</p><h4 id="主机服务停止之后从机状态"><a href="#主机服务停止之后从机状态" class="headerlink" title="主机服务停止之后从机状态"></a>主机服务停止之后从机状态</h4><p>master主机服务停止之后，slave主机是否能自动成为master？</p><p>默认配置情况下，master主机服务停止之后，slave主机不会自动成为master，而是会等待与master主机的连接</p><p>master主机重新恢复服务之后，slave主机会自动连接master主机并实现数据同步备份</p><h4 id="从机服务停止之后再恢复时角色"><a href="#从机服务停止之后再恢复时角色" class="headerlink" title="从机服务停止之后再恢复时角色"></a>从机服务停止之后再恢复时角色</h4><p>如果没有在redis.conf配置文件中配置属于那台主机的从机，那么其恢复之后无法成为slave主机，只有重新输入命令让其成为slave</p><p>在其恢复之后，会马上与master主机进行数据同步备份</p><h2 id="薪火相传"><a href="#薪火相传" class="headerlink" title="薪火相传"></a>薪火相传</h2><p><strong>链式的主从关系</strong></p><p>一台机器角色不只一种，除了第一台的master和最后一台的slave角色只有一种外，中间的机器既可以作为上一台机器的slave，又可以作为下一台机器的master</p><h2 id="反客为主"><a href="#反客为主" class="headerlink" title="反客为主"></a>反客为主</h2><p>在一主二从的这种关系体系中，当master主机redis服务停止之后，slave主机使用命令<code>slaveof no one</code>来成为master主机，</p><p>其它从机可以重新使用<code>slaveof master_ip master_port</code>命令来成为这台新的master的slave</p><p>如果这时之前的master主机修复之后，其仍然为master的角色，但是没有slave了</p><h1 id="复制规则"><a href="#复制规则" class="headerlink" title="复制规则"></a>复制规则</h1><p>原理：slave连接到master后会发送一个sync命令</p><p>全量复制：slave第一次连接到master会进行一次全量复制</p><p>增量复制：连接master之后的复制为增量复制</p><p>重新全量复制：当slave与master连接断开后，再次连接master时又会进行一次全量复制</p><h1 id="哨兵模式sentinel"><a href="#哨兵模式sentinel" class="headerlink" title="哨兵模式sentinel"></a>哨兵模式sentinel</h1><p>即为自动化的反客为主模式，master服务停止之后slave通过投票选举出新的master。有一点不同：之前的master恢复之后会作为slave</p><h2 id="模式的开启"><a href="#模式的开启" class="headerlink" title="模式的开启"></a>模式的开启</h2><p>在redis.conf的相同目录下配置sentinel.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch sentinel.conf</span><br></pre></td></tr></table></figure><p>添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sentinel monitor master_name master_ip master_ip num</span><br></pre></td></tr></table></figure><ul><li>master_name为随意起master主机的名字</li><li>num为规定的选举投票数，必须要票数大于num才能成为master。所以在一主二从的体系中，num为1，即master主机挂掉之后，剩下的两个从机投票，当某一个从机获得两票的时候，其成为master。当然如果从机不止两台，那么这个数字就需要变化。这个数字的值需要超过剩下slave数量的一半，比如说有1台master，10台slave，那么投票数必须要超过5票。必须要获得一半以上的民心</li></ul><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-sentinel /dir/to/sentinel.conf</span><br></pre></td></tr></table></figure><p>这条命令执行的时间应该为主从机关系确立后就执行，它执行后就会立刻监控master主机的状态，一旦master主机挂掉，就立刻从从机中进行选举，并选出新的master主机</p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>之前有RDB数据备份和AOF指令记录，但是这两种策略的缺陷就是仅仅是针对同一台主机。而实际中的情况要更加糟糕，可能这台主机都挂掉了，所以很有必要使用多台主机进行备份，可能会想到使用脚本来写一个定时备份的功能，将数据复制到其它主机上，但是redis自身提供了这一功能，而且更好。</p><p>这就是master/slave模式，这种模式下有两种方案：</p><ol><li>一台主机作为master进行写操作，其它主机作为slave从机用来备份。<ul><li>如果不进行其它设置，那么主机挂掉之后，其它从机会进入等待。知道master恢复，重新连接</li><li>在master主机挂掉之后，我们还可以从slave主机中选择一台手动指定为master，重新分配slave，并形成新的master/slave模式。挂掉的master恢复后就没有了slave</li><li>这种手动设置的方法有一定的缺陷，虽然可以将配置写入redis.conf配置文件中，但是在主机挂掉的情况下还是需要手动配置，所以就有了自动化的哨兵模式sentinel，按照配置文件sentinel.conf中指定的规则，可以在master挂掉的情况下自动重新分配master，原先挂掉的master恢复后可作为从机运行</li></ul></li><li>链式的master/slave方案中，master主机不止一台，作为slave的主机同样可以作为其slave主机的master。这种情况下，如果master主机挂掉了，其slave也是其它主机的master不会成为master，会等待master的恢复</li></ol><h1 id="docker中redis主从复制的启动"><a href="#docker中redis主从复制的启动" class="headerlink" title="docker中redis主从复制的启动"></a>docker中redis主从复制的启动</h1><p>在docker中使用的redis默认开启了远程连接，所有不需要关心配置问题，而且我都没有找到配置文件在哪里，不过只需要配置好端口就可以使用主从复制。如果要使用配置文件来完成master/slave的话，应该是用挂载配置文件的方式吧</p><p>这里来完成链式的master/slave模式，一共三个redis服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull redis</span><br><span class="line">sudo docker run --name redis-master -p 6379:6379 -d redis</span><br><span class="line">sudo docker run --name redis-middle -p 6380:6379 -d redis</span><br><span class="line">sudo docker run --name redis-slaver -p 6381:6379 -d redis</span><br><span class="line"></span><br><span class="line">sudo docker exec -it redis-master redis-cli</span><br><span class="line"></span><br><span class="line">sudo docker exec -it redis-middle redis-cli</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> slaveof 192.168.0.6 6379</span></span><br><span class="line"></span><br><span class="line">sudo docker exec -it redis-slaver redis-cli</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> slaveof 192.168.0.6 6380</span></span><br></pre></td></tr></table></figure><p>这里需要注意的就是设置master的ip地址时不能使用127.0.0.1，否则显示连接为down，找了半天错误，并不是配置问题。主要问题就是两个，一个是端口要映射正确，第二个就是ip地址设置正确。</p>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>redis-消息订阅</title>
      <link href="/2020/02/13/redis-%E6%B6%88%E6%81%AF%E8%AE%A2%E9%98%85/"/>
      <url>/2020/02/13/redis-%E6%B6%88%E6%81%AF%E8%AE%A2%E9%98%85/</url>
      
        <content type="html"><![CDATA[<blockquote><p>redis通过消息订阅实现聊天软件功能</p></blockquote><p>订阅：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subscribe channel1 channel2</span><br></pre></td></tr></table></figure><p>匹配模式订阅：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psubscribe pattern1 pattern2</span><br></pre></td></tr></table></figure><p>退订：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unsubscribe channel1 channel2</span><br></pre></td></tr></table></figure><p>匹配模式退订：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">punsubscribe pattern1 pattern2</span><br></pre></td></tr></table></figure><p>发送：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">publish channel message</span><br></pre></td></tr></table></figure><hr><p>实现聊天功能，只需用到订阅与发送信息即可</p><p>假设聊天的每个人都有一个名字：现在有李白和韩信两个人，他们互相订阅，然后以自己的名义发送消息，对方即可接受到消息</p><p><img src="https://s2.ax1x.com/2020/02/13/1bqm4K.png" alt="1bqm4K.png"></p>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>redis-事务</title>
      <link href="/2020/02/13/redis-%E4%BA%8B%E5%8A%A1/"/>
      <url>/2020/02/13/redis-%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>事务：一组命令的集合</p></blockquote><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ol><li>从事务开始，命令执行，事务结束。整个流程执行完才算事务结束</li><li>如果其中有某条命令执行失败，整个事务就算失败，所有执行的命令会回滚</li></ol><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><h2 id="开启事务"><a href="#开启事务" class="headerlink" title="开启事务"></a>开启事务</h2><p><code>multi</code>：标记一个事务块的开始。</p><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><p><code>exec</code>：执行所有事务块内的命令。</p><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><p><code>discard</code>：取消事务，放弃执行事务块内的所有命令。</p><h2 id="部分支持事务"><a href="#部分支持事务" class="headerlink" title="部分支持事务"></a>部分支持事务</h2><p>意思就是说redis的事务并不像oracle那样要求强一致性。</p><p>事务否能执行的两种情况：</p><ol><li>如果在开启事务后某条命令错误，没有加入队列，在exec提交事务的时候，整个事务会失败，不会执行。</li><li>如果在开启事务后命令没有出错并加入了队列，但是最后提交事务的时候发现这条命令没有正确的结果，那么除了这条命令不会被执行外，其它命令都会被提交，执行。</li></ol><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><p>表锁：在执行命令时将整张表锁了，不允许别人操作。有益于数据的一致性，但并发性不好</p><p>行锁：在执行命令时只锁要修改的那一条数据，其它数据允许别人操作。并发性好，数据一致性不好</p><p>悲观锁：对数据进行操作前都会上锁，包括行锁，表锁等</p><p>乐观锁：对数据进行操作前不会上锁，而且给要操作的数据添加一个version的标签，提交之后version会增加一，所以在提交时会进行判断，只有提交后版本大于当前版本才能提交成功。这就保证了在提交过程中没有其它人操作数据</p><h2 id="watch-amp-unwatch"><a href="#watch-amp-unwatch" class="headerlink" title="watch&amp;unwatch"></a>watch&amp;unwatch</h2><p>watch监控是与事务搭配起来用的，它保证了在watch之后，事务的执行完成前（开启事务，提交之前）这些数据不会被别人修改。</p><p><code>watch key1 key2....</code>：监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</p><p><code>unwatch</code>：取消已经监控的key。如果在watch开启之后，事务执行之前这个key被改动了，那么事务会失败。需要unwatch之前监控的key之后，才能再次重启监控。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set user1 libai</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch user1# 开启监控</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set user1 diaochang# 监控对象被修改</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi# 开启事务</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set user1 daqiao</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec# 事务执行失败</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get user1</span><br><span class="line">"diaochang"</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; unwatch# 取消监控</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch user1# 再次监控</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi# 开始事务</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set user1 daqiao</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec# 执行事务</span><br><span class="line">1) OK</span><br><span class="line">127.0.0.1:6379&gt; get user1# 事务执行成功</span><br><span class="line">"daqiao"</span><br></pre></td></tr></table></figure><p>也就是说监控一旦开启之后，在事务执行执行完成前都不允许对监控对象进行修改，否则事务就失败。</p>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>redis-配置</title>
      <link href="/2020/02/12/redis-%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/02/12/redis-%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下所有默认均指的是树莓派上安装的redis3.2.6，并不是通用的</p></blockquote><h1 id="安全security"><a href="#安全security" class="headerlink" title="安全security"></a>安全security</h1><p>redis默认没有设置密码，如果想要设置密码有两种方式</p><ol><li><p>在配置文件中添加<code>requirepass some_password</code></p></li><li><p>在客户端添加密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">config get requirepass# 查看是否有密码</span><br><span class="line">config set requirepass 123456# 设置密码，设置之后如果不输入密码就无法操作了</span><br><span class="line">ping# 测试是否连接上</span><br></pre></td></tr></table></figure><p>添加密码后，即刻就失去了redis的操作权限，无法使用命令，输入密码的方式有两种</p><ul><li><p>直接在客户端输入<code>auth some_password</code>即可</p></li><li><p>退出客户端，在连接时输入密码，当然这种方式不推荐</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec -it redis redis-cli -a 123456</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="限制limits"><a href="#限制limits" class="headerlink" title="限制limits"></a>限制limits</h1><ol><li><p>最大连接数：<code>maxclients</code>默认为10000</p></li><li><p>最大内存使用量：<code>maxmemory</code></p></li><li><p>最大内存使用量策略：<code>maxmemory-policy</code>默认的为永不过期，是不可能用于实际生产中的，因为数据不会自动移出，只可能越来越多，最后内存溢出报错。正确的做法是将不常使用的数据从内存中移除。如果将来有一天内存想硬盘一样便宜了，或者硬盘的速度赶上内存了，那么这个设置便失去了意义，甚至redis也会失去意义。</p><p>推荐使用的策略：</p><ul><li><code>volatile-lru</code>：使用lru算法移除设置了过期时间的数据。lru：less recent use</li><li><code>allkeys-lru</code>：使用lru算法移除最近最少使用的数据。</li></ul></li><li><p>最大采样：<code>maxmemory-samples</code>默认为5，比较精确的采样不需要修改</p></li></ol><h1 id="守护进程daemon"><a href="#守护进程daemon" class="headerlink" title="守护进程daemon"></a>守护进程daemon</h1><p>设置为守护进程启动：<code>daemonize yes</code></p><h1 id="端口port"><a href="#端口port" class="headerlink" title="端口port"></a>端口port</h1><p>默认为6379：<code>port 6379</code></p><h1 id="超时设置timeout"><a href="#超时设置timeout" class="headerlink" title="超时设置timeout"></a>超时设置timeout</h1><p>默认永不超时：<code>timeout 0</code></p><h1 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h1><p>默认为notice：<code>loglevel notice</code></p><h1 id="日志位置"><a href="#日志位置" class="headerlink" title="日志位置"></a>日志位置</h1><p>默认为：<code>logfile /var/log/redis/redis-server.log</code></p><h1 id="绑定主机bind"><a href="#绑定主机bind" class="headerlink" title="绑定主机bind"></a>绑定主机bind</h1><p>默认为本机：<code>bind 127.0.0.1</code>，如果需要远程连接，需要注释掉</p><h1 id="数据库存放位置"><a href="#数据库存放位置" class="headerlink" title="数据库存放位置"></a>数据库存放位置</h1><p>默认为：<code>dir /var/lib/redis</code>，需要指定一个目录而不是文件</p>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>redis-持久化</title>
      <link href="/2020/02/12/redis-%E6%8C%81%E4%B9%85%E5%8C%96/"/>
      <url>/2020/02/12/redis-%E6%8C%81%E4%B9%85%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h1><p>redis dbtabase：在指定时间间隔内，将内存中的数据写入磁盘，相当于一个snapshot快照。恢复时将快照读入内存</p><h2 id="工作原理："><a href="#工作原理：" class="headerlink" title="工作原理："></a>工作原理：</h2><ol><li>fork一个与原进程一样的进程用来进行数据备份（同步、持久化）。由于fork出来的进程的所有数据与原来的一致，所以会出现两个结果：<ul><li>占用内存增加一倍，也就是说开启RDB之后，最大内存限制必须小于实际内存的一半</li><li>由于数据的备份是通过fork出来的进程，所以不会影响父进程的io操作，确保了redis的稳定高效性</li></ul></li></ol><h2 id="保存文件："><a href="#保存文件：" class="headerlink" title="保存文件："></a>保存文件：</h2><p>备份的文件为redis.conf中指定的文件名<code>dbfilename dump.rdb</code>：dump.rdb</p><p>保存的路径为redis.conf中指定的路径<code>dir /var/lib/redis</code>：/var/lib/redis</p><h2 id="恢复文件："><a href="#恢复文件：" class="headerlink" title="恢复文件："></a>恢复文件：</h2><p>在redis重启后，会按照配置文件中给定dir的路径去寻找备份文件dump.rdb，并自动读入内存</p><h2 id="备份策略："><a href="#备份策略：" class="headerlink" title="备份策略："></a>备份策略：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">保存时间 操作数</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure><ol><li>在一定时间内操作数达到规定值后，会触发数据备份</li><li>在提交实务后也会触发同步，例如flushall，save等</li></ol><h2 id="禁用RDB："><a href="#禁用RDB：" class="headerlink" title="禁用RDB："></a>禁用RDB：</h2><p>在客户端查看配置：<code>config get save</code></p><p>设置禁用：在配置文件中将save指令注释掉，同时将<code>save &quot;&quot;</code>去掉注释</p><h2 id="优势："><a href="#优势：" class="headerlink" title="优势："></a>优势：</h2><ol><li>数据备份是fork出来的新进程，io与主进程无关，提高了稳定性</li><li>数据恢复速度快，重新将dump文件读入内存即可</li></ol><h2 id="劣势："><a href="#劣势：" class="headerlink" title="劣势："></a>劣势：</h2><ol><li>数据备份fork出了一个子进程，内存占用会增加一倍</li><li>按照备份策略，并不是所有的数据都备份到了，在出现意外时，最后一段时间的数据可能没有备份</li></ol><h1 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h1><p>append only file，为了弥补RDB无法保证完整备份的缺陷。</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>如何避免RDB所带来的数据丢失的问题？</p><p>因为RDB备份的条件是操作数在规定时间内达到规定值才会触发，总不能通过降低触发条件，毕竟备份也很浪费计算机资源，会增加内存容量负担，cpu压缩文件带来的性能损耗。</p><p>数据在内存中，要保存到磁盘中，又不可能实时同步，那样不是会降低计算机性能吗？似乎是一个不可避免的矛盾，我觉得是不是可以采用overlayfs的思想，实现不完全的同步？</p><p>不过redis采用了更加高级的思想，并不是眼光局限在数据本身上，而是站在了更高的角度去看待问题。从整个过程去思考。首先是我们发出指令去插入/修改数据，然后数据才被写入内存，最后才有数据同步问题。如果我们将所有指令保存下来，那么就不会出现前面的问题了。由于指令存在重复的，便可以简化。</p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>将所有的写指令，不包括读指令写入到一个文件中，在redis重启时会读取这个文件，重新执行一遍命令，恢复所有数据。</p><h2 id="启用"><a href="#启用" class="headerlink" title="启用"></a>启用</h2><p>默认不启用，启用修改配置为：<code>appendonly yes</code></p><h2 id="保存文件"><a href="#保存文件" class="headerlink" title="保存文件"></a>保存文件</h2><p>配置文件中设置：<code>appendfilename &quot;appendonly.aof&quot;</code></p><p>文件位置和dump.rdb的位置一样</p><h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><p>如果同时存在appendonly.aof和dump.rdb，那么会优先读取aof文件。</p><p>如果dump.rdb被删掉了，只存在appendonly.aof那么通过systemd来启动会报错，使用redis-server /etc/redis/redis.conf可以成功启动</p><h2 id="错误修复"><a href="#错误修复" class="headerlink" title="错误修复"></a>错误修复</h2><p>如果由于意外情况aof文件中有一些错误数据也是无法启动的，可以通过命令<code>redis-check-aof</code>修复</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-check-aof --fix /etc/redis/appendonly.aof</span><br></pre></td></tr></table></figure><h2 id="同步策略"><a href="#同步策略" class="headerlink" title="同步策略"></a>同步策略</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">appendfsync always# 实时同步，没必要</span><br><span class="line"></span><br><span class="line">appendfsync everysec# 默认，首选</span><br><span class="line"></span><br><span class="line">appendfsync no# 不同步，不选</span><br></pre></td></tr></table></figure><h2 id="AOF文件的重写"><a href="#AOF文件的重写" class="headerlink" title="AOF文件的重写"></a>AOF文件的重写</h2><p>AOF文件会越来越大，达到配置的值时会触发重写。清空之前的AOF文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto-aof-rewrite-percentage 100# 默认为上次重写时的一倍大小时</span><br><span class="line">auto-aof-rewrite-min-size 64mb# 默认最小为64M，业务比较大时，会设置为几个G</span><br></pre></td></tr></table></figure><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>数据完整性好</p><p>内存消耗少</p><h2 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h2><ol><li><p>文件大小大于dump.rdb</p></li><li><p>恢复速度慢于RDB</p></li><li><p>重启恢复时会有大量的指令执行，占用内存以及大量io操作（触发RDB）</p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>建议两种都开启</p>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>redis-命令</title>
      <link href="/2020/02/12/redis-%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/02/12/redis-%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="切换数据库"><a href="#切换数据库" class="headerlink" title="切换数据库"></a>切换数据库</h1><p>默认有16个数据库0-15，切换数据库使用<code>select</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 15</span><br></pre></td></tr></table></figure><h1 id="删除与保存"><a href="#删除与保存" class="headerlink" title="删除与保存"></a>删除与保存</h1><p><code>flushall</code>：删除所有数据</p><p><code>save</code>：保存，上一条命令的结果即刻同步数据到硬盘</p><p><code>bgsave</code>：和save一样的作用，不同点在于save是停止当前所有的写操作，先进行备份同步，而bgsave是可以一边写一边保存</p><p>这两个命令和sql中的提交commit作用一样，会立即生效即同步数据到硬盘</p><h1 id="key键"><a href="#key键" class="headerlink" title="key键"></a>key键</h1><h2 id="key命令-适用于所有的数据类型的命令"><a href="#key命令-适用于所有的数据类型的命令" class="headerlink" title="key命令:适用于所有的数据类型的命令"></a>key命令:适用于所有的数据类型的命令</h2><p><code>keys *</code>查看所有的key ——————————–&gt; <strong>keys命令支持正则匹配</strong></p><p><code>exists key</code>是否存在key，存在返回1，否则返回0</p><p><code>expire key time</code>设置key的过期时间，单位秒</p><p><code>pexpire key time</code>设置key的过期时间，单位毫秒</p><p><code>persist key</code>撤销过期设置</p><p><code>ttl key</code>查看过期时间time to live，-1为永不过期，-2为已近销毁</p><p><code>pttl key</code>查看过期时间，单位毫秒</p><p><code>del key</code>删除key</p><p><code>rename key newkey</code>重命名key</p><p><code>move key dbindex</code>将key移到其它数据库（默认16个：0-15）</p><p><code>randomkey</code>随机返回一个key</p><p><code>type key</code>查看key对应值的存储类型</p><h2 id="key命名规范"><a href="#key命名规范" class="headerlink" title="key命名规范"></a>key命名规范</h2><ol><li><p>单个key支持最大512M</p></li><li><p>每个key都是唯一的</p></li><li><p>key区分大小写</p></li><li><p>key使用统一的命名格式，使用冒号分隔，用来区分数据以及分类</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">school:student:1</span><br><span class="line">school:student:2</span><br><span class="line">school:teacher:1</span><br><span class="line">school:teacher:2</span><br></pre></td></tr></table></figure><p>每个key都做到了唯一，而且易于区分，加快查询速度，比如要查询所有的老师信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keys school:teacher*</span><br></pre></td></tr></table></figure></li></ol><h1 id="value数据类型"><a href="#value数据类型" class="headerlink" title="value数据类型"></a>value数据类型</h1><p>redis支持五种不同的数据类型：</p><ul><li>string：用来存放字符串</li><li>list：value为list的有序集合，存储list集合，当值被清空后，键也不复存在了。不存在空的list</li><li>set：无序不重复数据，与list一样为集合，只不过不允许list中出现重复的数据，而且数据无序</li><li>zset：有序不重复数据，与set类似，不过是有序的集合。通过给每个元素添加一个score，来判断顺序，元素不可重复，但是score可以重复</li><li>hash：其value为hash的key-value键值对，适合用来存储对象，这也是最接近sql的一种数据类型，如果比作sql的话就像将字段与值对应起来的关系</li></ul><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><p>最大同样可以存储512M</p><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><p><code>set key value</code>：key唯一，后面的重复key会覆盖前面的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set school:user:1 lanzhan</span><br></pre></td></tr></table></figure><p><code>setnx key value</code>：表示set if not exist，当没有出现过的key才赋值，这样比较安全，推荐使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setnx school:user:1 zhansan</span><br></pre></td></tr></table></figure><p><code>setex key time value</code>：表示set expire，赋值的同时设置过期时间，time单位为秒</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setex school:user:2 libai</span><br></pre></td></tr></table></figure><p><code>setrange key offset value</code>：从偏移offset开始覆盖指定key的value值，偏移值从0开始计数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set school:user:3 libai</span><br><span class="line">127.0.0.1:6379&gt; setrange school:user:3 2 shishi</span><br><span class="line">127.0.0.1:6379&gt; get school:user:3</span><br><span class="line">"lishishi"</span><br></pre></td></tr></table></figure><p><code>mset key1 value1 key2 value2....</code>：同时设置一个或多个 key-value 对</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mset user1 libai user2 hanxing user3 gonsunli</span><br></pre></td></tr></table></figure><p><code>msetnx key1 value1 key2 value2....</code>：如果不存在就赋值if not exists，同理</p><p>如果其中一个已经存在，那么整条命令都不会执行</p><h3 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h3><p><code>get key</code>：获取指定key的值</p><p><code>getrange key start end</code>：获取key中字符串的子字符串，范围取值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set school:user:baijuyi 12345678</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get school:user:baijuyi</span><br><span class="line">"12345678"</span><br><span class="line">127.0.0.1:6379&gt; getrange school:user:baijuyi 0 3</span><br><span class="line">"1234"</span><br></pre></td></tr></table></figure><p><code>mget key1 key2 ...</code>：获取所有(一个或多个)给定 key 的值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mget user1 user2 user3</span><br></pre></td></tr></table></figure><h3 id="数字递增-减"><a href="#数字递增-减" class="headerlink" title="数字递增/减"></a>数字递增/减</h3><p>将value为数字的这种进行增加或减少，目前来看它的作用在于统计数字</p><p><code>incr key</code>：递增1</p><p><code>decr key</code>：递减1</p><p><code>incrby key num</code>：递增num个</p><p><code>decrby key num</code>：递减num个</p><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><h3 id="赋值-1"><a href="#赋值-1" class="headerlink" title="赋值"></a>赋值</h3><p><code>lpush key member1 member2 member3</code>：按照顺序将这个list插入数据库，将一个或多个值插入到列表<strong>头部</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lpush user1 1 2 3 4 5</span><br></pre></td></tr></table></figure><p><code>rpush key member1 member2 member3</code>：在列表中添加一个或多个值，尾部</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpush user2 1 2 3 4 5</span><br></pre></td></tr></table></figure><h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><p><code>linsert key before/after pivot member</code>：在某个pivot元素前/后插入数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange user1 0 -1</span><br><span class="line">1) "1"</span><br><span class="line">2) "2"</span><br><span class="line">3) "3"</span><br><span class="line">127.0.0.1:6379&gt; linsert user1 before 2 a</span><br><span class="line">127.0.0.1:6379&gt; lrange user1 0 -1</span><br><span class="line">1) "1"</span><br><span class="line">2) "a"</span><br><span class="line">3) "2"</span><br><span class="line">4) "3"</span><br></pre></td></tr></table></figure><h3 id="取值-1"><a href="#取值-1" class="headerlink" title="取值"></a>取值</h3><p><code>lrange key start end</code>：查看列表指定范围内的元素</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange user1 0 2</span><br><span class="line">1) "5"</span><br><span class="line">2) "4"</span><br><span class="line">3) "3"</span><br></pre></td></tr></table></figure><p><code>lrange key 0 -1</code>：查看整条数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange user1 0 -1</span><br><span class="line">1) "5"</span><br><span class="line">2) "4"</span><br><span class="line">3) "3"</span><br><span class="line">4) "2"</span><br><span class="line">5) "1"</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange user2 0 -1</span><br><span class="line">1) "1"</span><br><span class="line">2) "2"</span><br><span class="line">3) "3"</span><br><span class="line">4) "4"</span><br><span class="line">5) "5"</span><br></pre></td></tr></table></figure><p>需要注意lpush与rpush的顺序不同，lpush相当于从栈的底部传入数据，最先传入的数据最后到了栈顶</p><p>lrange并不属于栈的操作，所以只是简单的将这个list从左到右的显示出来</p><p><code>lindex key index</code>：通过索引获取列表中的元素</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange user1 0 -1</span><br><span class="line">1) "4"</span><br><span class="line">2) "3"</span><br><span class="line">3) "2"</span><br><span class="line">127.0.0.1:6379&gt; lindex user1 0</span><br><span class="line">"4"</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p><code>lpop key</code>：这个不同于lrange，它属于栈操作，会将数据取出来，并且删除。从栈底取数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpop user1</span><br><span class="line">"5"</span><br><span class="line">127.0.0.1:6379&gt; lrange user1 0 -1</span><br><span class="line">1) "4"</span><br><span class="line">2) "3"</span><br><span class="line">3) "2"</span><br><span class="line">4) "1"</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; lpop user2</span><br><span class="line">"1"</span><br></pre></td></tr></table></figure><p><code>rpop key</code>：栈顶取数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpop user1</span><br><span class="line">"1"</span><br><span class="line">127.0.0.1:6379&gt; lrange user1 0 -1</span><br><span class="line">1) "4"</span><br><span class="line">2) "3"</span><br><span class="line">3) "2"</span><br></pre></td></tr></table></figure><p><code>lrem key count member</code>：删除count个value值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush user3 1 2 2 3 3 3</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; lrange user3 0 -1</span><br><span class="line">1) "1"</span><br><span class="line">2) "2"</span><br><span class="line">3) "2"</span><br><span class="line">4) "3"</span><br><span class="line">5) "3"</span><br><span class="line">6) "3"</span><br><span class="line">127.0.0.1:6379&gt; lrem user3 2 3   # 删除2个3</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; lrange user3 0 -1</span><br><span class="line">1) "1"</span><br><span class="line">2) "2"</span><br><span class="line">3) "2"</span><br><span class="line">4) "3"</span><br></pre></td></tr></table></figure><p><code>ltrim key start_index end_index</code>:对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush user4 1 2 3 4 5 6</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; lrange user4 0 -1</span><br><span class="line">1) "1"</span><br><span class="line">2) "2"</span><br><span class="line">3) "3"</span><br><span class="line">4) "4"</span><br><span class="line">5) "5"</span><br><span class="line">6) "6"</span><br><span class="line">127.0.0.1:6379&gt; ltrim user4 2 4# 只保留索引为2到4的元素</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange user4 0 -1</span><br><span class="line">1) "3"</span><br><span class="line">2) "4"</span><br><span class="line">3) "5"</span><br></pre></td></tr></table></figure><p><code>rpoplpush source destination</code>：移出source的栈顶元素，并加入到destination的栈底</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush user1 1 2 3 4</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; rpush user2 1 2 3 4</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; lrange user1 0 -1</span><br><span class="line">1) "1"</span><br><span class="line">2) "2"</span><br><span class="line">3) "3"</span><br><span class="line">4) "4"</span><br><span class="line">127.0.0.1:6379&gt; lrange user2 0 -1</span><br><span class="line">1) "1"</span><br><span class="line">2) "2"</span><br><span class="line">3) "3"</span><br><span class="line">4) "4"</span><br><span class="line">127.0.0.1:6379&gt; rpoplpush user1 user2</span><br><span class="line">"4"</span><br><span class="line">127.0.0.1:6379&gt; lrange user1 0 -1</span><br><span class="line">1) "1"</span><br><span class="line">2) "2"</span><br><span class="line">3) "3"</span><br><span class="line">127.0.0.1:6379&gt; lrange user2 0 -1</span><br><span class="line">1) "4"</span><br><span class="line">2) "1"</span><br><span class="line">3) "2"</span><br><span class="line">4) "3"</span><br><span class="line">5) "4"</span><br></pre></td></tr></table></figure><h3 id="列表长度"><a href="#列表长度" class="headerlink" title="列表长度"></a>列表长度</h3><p><code>llen key</code>：获取列表长度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange user2 0 -1</span><br><span class="line">1) "2"</span><br><span class="line">2) "3"</span><br><span class="line">3) "4"</span><br><span class="line">4) "5"</span><br><span class="line">127.0.0.1:6379&gt; llen user2</span><br><span class="line">(integer) 4</span><br></pre></td></tr></table></figure><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><h3 id="增加-1"><a href="#增加-1" class="headerlink" title="增加"></a>增加</h3><p><code>sadd key member1 member2 member3</code>：value不允许重复，如果有重复则会自动去掉多余的重复数据。在给之前存在的key添加值时，如果出现重复数据也会自动忽略这些重复数据，只添加不重复的那些数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd user1 1 2 2 3 3 3</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; smembers user1</span><br><span class="line">1) "1"</span><br><span class="line">2) "2"</span><br><span class="line">3) "3"</span><br></pre></td></tr></table></figure><h3 id="取值-2"><a href="#取值-2" class="headerlink" title="取值"></a>取值</h3><p><code>smembers key</code>：查看key的value值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smembers user1</span><br></pre></td></tr></table></figure><p><code>srandmember key num</code>：从集合中随机去num个元素</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers user1</span><br><span class="line">1) "1"</span><br><span class="line">2) "3"</span><br><span class="line">127.0.0.1:6379&gt; srandmember user1 1</span><br><span class="line">1) "3"</span><br></pre></td></tr></table></figure><h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><p><code>sinmember key member</code>：判断某个元素value是否属于key，存在返回1，否则返回0</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers user1</span><br><span class="line">1) "1"</span><br><span class="line">2) "2"</span><br><span class="line">3) "3"</span><br><span class="line">127.0.0.1:6379&gt; sismember user1 1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sismember user1 4</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure><h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h3><p><code>srem key member</code>：删除集合中指定的元素</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers user1</span><br><span class="line">1) "1"</span><br><span class="line">2) "2"</span><br><span class="line">3) "3"</span><br><span class="line">127.0.0.1:6379&gt; srem user1 2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers user1</span><br><span class="line">1) "1"</span><br><span class="line">2) "3"</span><br></pre></td></tr></table></figure><p><code>spop key</code>：与list的pop操作不同，这里的pop是随机删除一个元素</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spop user1</span><br></pre></td></tr></table></figure><h3 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h3><p><code>smove key1 key2 member</code>：将key1中的value移到key2中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd user1 1 2 3</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; sadd user2 2 3 4</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; smove user1 user2 1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers user1</span><br><span class="line">1) "2"</span><br><span class="line">2) "3"</span><br><span class="line">127.0.0.1:6379&gt; smembers user2</span><br><span class="line">1) "1"</span><br><span class="line">2) "2"</span><br><span class="line">3) "3"</span><br><span class="line">4) "4"</span><br></pre></td></tr></table></figure><h3 id="集合长度"><a href="#集合长度" class="headerlink" title="集合长度"></a>集合长度</h3><p><code>scard key</code>：获取集合元素个数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; scard user1</span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure><h3 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h3><p>会自动去重</p><p><code>sdiff key1 key2</code>：差集，key1 差 key2</p><p><code>sinter key1 key2</code>：交集， key1 交 key2</p><p><code>sunion key1 key2</code>：并集，key1 并 key2</p><h2 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h2><h3 id="增加、更新"><a href="#增加、更新" class="headerlink" title="增加、更新"></a>增加、更新</h3><p><code>zadd key score1 member1 score2 member2</code>：向有序集合添加一个或多个成员，或者更新已存在成员的分数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zadd user3 10 a 20 b 20 c 40 d</span><br></pre></td></tr></table></figure><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><p><code>zrange key index_start index_end</code>：查看范围内的元素</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrange user3 0 -1</span><br><span class="line">1) "a"</span><br><span class="line">2) "b"</span><br><span class="line">3) "c"</span><br><span class="line">4) "d"</span><br></pre></td></tr></table></figure><p><code>zrevrange key index_start index_end</code>：查看范围内的元素，倒序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrevrange user3 0 -1</span><br><span class="line">1) "c"</span><br><span class="line">2) "b"</span><br><span class="line">3) "a"</span><br></pre></td></tr></table></figure><p><code>zrange key index_start index_end withscores</code>：查看范围内的元素，以及成员分数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrange user3 0 -1 withscores</span><br><span class="line">1) "a"</span><br><span class="line">2) "10"</span><br><span class="line">3) "b"</span><br><span class="line">4) "20"</span><br><span class="line">5) "c"</span><br><span class="line">6) "20"</span><br><span class="line">7) "d"</span><br><span class="line">8) "40"</span><br></pre></td></tr></table></figure><p><code>zrangebyscore key min_score max_score limit index count</code>：查看分数范围内的成员(可选用limit来再次筛选)，score为闭合区间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrangebyscore user3 20 40</span><br><span class="line">1) "b"</span><br><span class="line">2) "c"</span><br><span class="line">3) "d"</span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore user3 20 40 limit 0 1</span><br><span class="line">1) "b"</span><br></pre></td></tr></table></figure><p>如果要不闭合使用<code>(</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrangebyscore user3 (20 40</span><br><span class="line">1) "d"</span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore user3 (20 (40</span><br><span class="line">(empty list or set)</span><br></pre></td></tr></table></figure><p><code>zrevrangebyscore key max_score min_score limit index count</code>：先倒叙再查看分数范围内的成员(可选用limit来再次筛选)，score为闭合区间</p><p><code>zrank key member</code>：查看元素的index</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrange user3 0 -1</span><br><span class="line">1) "a"</span><br><span class="line">2) "b"</span><br><span class="line">3) "c"</span><br><span class="line">127.0.0.1:6379&gt; zrank user3 c</span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure><p><code>zrevrank key member</code>：先倒序，再查看其索引</p><p><code>zscore key score</code>：查看元素对应的score</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrange user3 0 -1 withscores</span><br><span class="line">1) "a"</span><br><span class="line">2) "10"</span><br><span class="line">3) "b"</span><br><span class="line">4) "20"</span><br><span class="line">5) "c"</span><br><span class="line">6) "20"</span><br><span class="line">127.0.0.1:6379&gt; zscore user3 a</span><br><span class="line">"10"</span><br></pre></td></tr></table></figure><h3 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h3><p><code>zrem key member</code>：删除指定memeber元素，连同score一起删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrem user3 d</span><br></pre></td></tr></table></figure><h3 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h3><p><code>zcard key</code>：计算集合长度，不包含score</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zcard user3</span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure><p><code>zcount key min_score max_score</code>：计算指定分数内的成员数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrangebyscore user3 20 40</span><br><span class="line">1) "b"</span><br><span class="line">2) "c"</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; zcount user3 20 40</span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure><h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><h3 id="增加、更新-1"><a href="#增加、更新-1" class="headerlink" title="增加、更新"></a>增加、更新</h3><p>由于field也为key关键字，所以也不能重复，重复会覆盖</p><p><code>hset key field value</code>：一个一个的赋值</p><p><code>hsetnx key field value</code>：不存在的话再赋值if not exists</p><p><code>hmset key field1 value1 field2 value2...</code>：可一次进行多个赋值，更加实用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hmset user10 id 1 name libai age 18</span><br></pre></td></tr></table></figure><p><code>hincrby key field num</code>：对整数的value进行num个数的增加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hget user10 id</span><br><span class="line">"1"</span><br><span class="line">127.0.0.1:6379&gt; hincrby user10 id 3</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; hget user10 id</span><br><span class="line">"4"</span><br></pre></td></tr></table></figure><p><code>hincrfloat key field num</code>：对浮点数进行num个数的增加</p><h3 id="取值-3"><a href="#取值-3" class="headerlink" title="取值"></a>取值</h3><p><code>hget key filed</code>：一个一个的取值</p><p><code>hmget key field1 field2....</code>：可一次取多个值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hmget user10 id name age</span><br></pre></td></tr></table></figure><p><code>hgetall key</code>：一次获取所有键值对</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgetall user10</span><br></pre></td></tr></table></figure><p><code>hkeys key</code>：查看所有的field</p><p><code>hvals key</code>：查看所有的value</p><h3 id="删除-3"><a href="#删除-3" class="headerlink" title="删除"></a>删除</h3><p><code>hdel key field1 field2</code>：删除hash中的指定键值对</p><p><code>del key</code>：删除所有键值对</p><h3 id="判断-1"><a href="#判断-1" class="headerlink" title="判断"></a>判断</h3><p><code>hexists key field</code>：判断是否有此field的键值对</p><h3 id="长度-1"><a href="#长度-1" class="headerlink" title="长度"></a>长度</h3><p><code>hlen key</code>：查看键值对的个数</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>学了这些数据类型之后发现redis真的可以替代oracle，mysql这些，因为它可以存储它们所能存储的数据，而且更好。</p><p>我觉得使用的最多的是hash，其次是string，然后是list，至于set和zset使用的应该比较少吧</p><p>不过我还是有些不懂的，前面所学的都是针对一条记录来操作的，那么sql中那些复杂的查询语句，在redis中如何才能查询到结果呢，总不能用循环来一条一条的查吧，有没有对多列数据的操作命令呢？</p>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>redis-远程</title>
      <link href="/2020/02/10/redis-%E8%BF%9C%E7%A8%8B/"/>
      <url>/2020/02/10/redis-%E8%BF%9C%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>默认的配置文件可以让我们在本地操作redis数据库，但是如果要远程连接，就需要修改一些默认配置</p></blockquote><h1 id="配置文件修改"><a href="#配置文件修改" class="headerlink" title="配置文件修改"></a>配置文件修改</h1><p><code>/etc/redis/redis.conf</code>，我们可以直接修改这个配置文件，也可以将配置文件复制到需要的目录，然后在启动redis时指定配置文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server ./redis.conf</span><br></pre></td></tr></table></figure><h1 id="取消连接ip限制"><a href="#取消连接ip限制" class="headerlink" title="取消连接ip限制"></a>取消连接ip限制</h1><p>默认配置文件中只允许本机访问，注释掉这一行即可开启远程连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 注释掉指定ip</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">bind</span> 127.0.0.1</span></span><br></pre></td></tr></table></figure><h1 id="设置为守护进程"><a href="#设置为守护进程" class="headerlink" title="设置为守护进程"></a>设置为守护进程</h1><p>我的配置里默认为守护进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes</span><br></pre></td></tr></table></figure><h1 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requirepass 123456</span><br></pre></td></tr></table></figure><h1 id="命令行连接"><a href="#命令行连接" class="headerlink" title="命令行连接"></a>命令行连接</h1><p>可以使用命令行来远程连接，不过前提是安装了客户端，否则就要使用特定的软件来连接。其实软件连接更好操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h host_ip -p port -a password </span><br><span class="line">eg:</span><br><span class="line">redis-cli -h 192.168.0.102 -p 6379 -a 123456</span><br></pre></td></tr></table></figure><h1 id="下载图形redis操作软件"><a href="#下载图形redis操作软件" class="headerlink" title="下载图形redis操作软件"></a>下载图形redis操作软件</h1><p>archlinux下安装，据说windows上这个软件是收费的。可惜我的dbevaer不支持连接redis，还要下载这个软件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S redis-desktop-manager</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis-内存</title>
      <link href="/2020/02/10/redis-%E5%86%85%E5%AD%98/"/>
      <url>/2020/02/10/redis-%E5%86%85%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>如你所说，任何事情都不是绝对的。虽然说是内存数据库，但是真的是所有数据都放到内存中吗？应该是这样的吧，否则还叫什么内存数据库，其实错了，任何事情都有轻重缓急，而且内存不可能有硬盘那么大，不必要的数据还是放在了硬盘上面。</p></blockquote><p>目标只有一个：提升速度。</p><p>那么就没必要将不经常使用的数据放内存里了，毕竟数据多了速度也会变慢。同时一些没必要存储的数据其实可以直接在内存中销毁，没必要写入磁盘。所以有两种策略来实现这一目标</p><h1 id="设置过期时间–-gt-临时数据自动销毁"><a href="#设置过期时间–-gt-临时数据自动销毁" class="headerlink" title="设置过期时间–&gt;临时数据自动销毁"></a>设置过期时间–&gt;临时数据自动销毁</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">expire key time # time单位为秒</span><br><span class="line">setex(string key,int seconds,string value)  # 字符串使用（特例）</span><br><span class="line"></span><br><span class="line">ttl key# 查看过期时间</span><br></pre></td></tr></table></figure><p>撤销设置的过期时间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">persist key# 如果不想销毁，可以撤销</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">127.0.0.1:6379&gt; set name lanzhan# 插入数据key-value，name-&gt;lanzhan</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ttl name# 查看过期时间，-1为永不过期</span><br><span class="line">(integer) -1</span><br><span class="line">127.0.0.1:6379&gt; expire name 20# 设置过期时间为20s</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; persist name# 撤销过期时间</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl name# 现在又为永不过期</span><br><span class="line">(integer) -1</span><br><span class="line">127.0.0.1:6379&gt; expire name 2# 设置过期时间为2s</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl name# 已经过期，-2为已过期</span><br><span class="line">(integer) -2</span><br><span class="line">127.0.0.1:6379&gt; keys *# 数据已销毁，不存在了</span><br><span class="line">(empty list or set)</span><br></pre></td></tr></table></figure><p>适合场景：临时数据（验证码），中间数据（类似与oracle中建的那些临时表）</p><h1 id="LRU动态算法–-gt-不用数据不加载到内存"><a href="#LRU动态算法–-gt-不用数据不加载到内存" class="headerlink" title="LRU动态算法–&gt;不用数据不加载到内存"></a>LRU动态算法–&gt;不用数据不加载到内存</h1><p>redis启动时默认会将所有数据都加载到内存中，lru算法会将不常用数据在内存中销毁，需要时才会从硬盘中再次读取</p>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本权限</title>
      <link href="/2020/02/10/shell%E8%84%9A%E6%9C%AC%E6%9D%83%E9%99%90/"/>
      <url>/2020/02/10/shell%E8%84%9A%E6%9C%AC%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<blockquote><p>有时候在shell的脚本中需要使用到sudo，但是输入不了密码</p></blockquote><h1 id="脚本中的命令需要root权限"><a href="#脚本中的命令需要root权限" class="headerlink" title="脚本中的命令需要root权限"></a>脚本中的命令需要root权限</h1><p>出现这种情况的话，有两个方法可以解决</p><ol><li><p>将密码传给sudo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo "password" | sudo -S command</span><br><span class="line">eg:</span><br><span class="line">echo "123456" | sudo -S docker images</span><br></pre></td></tr></table></figure></li><li><p>通过修改配置文件，提升命令的权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/sudoer</span><br><span class="line">username ALL=(ALL) NOPASSWD: /command_position</span><br><span class="line">eg:</span><br><span class="line">lanzhan ALL=(ALL) NOPASSWD: /usr/bin/docker</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>如果不想将脚本中的命令加入无密码执行，可以修改脚本本身的权限。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/sudoer</span><br><span class="line">lanzhan ALL=(ALL) NOPASSWD: /home/lanzhan/.local/bin/mypowertop</span><br></pre></td></tr></table></figure><p>两个注意点：</p><ul><li><p>修改脚本后执行使用sudo，然后并不需要输入密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mypowertop</span><br></pre></td></tr></table></figure></li><li><p>脚本中本来需要写sudo的命令不需要使用sudo了，因为脚本已经拥有了root权限。因为脚本中的命令本来就是脚本fork出来的一个子进程，自然不需要加sudo了。</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis-安装</title>
      <link href="/2020/02/10/redis-%E5%AE%89%E8%A3%85/"/>
      <url>/2020/02/10/redis-%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<blockquote><p>redis</p></blockquote><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ol><li><p>redis为内存数据库，数据存储在内存中，访问速度快</p></li><li><p>redis为key-value的键值对，数据结构比较简单</p></li><li><p>可实现数据的持久化，保证数据不会丢失</p></li></ol><h1 id="安装-amp-运行"><a href="#安装-amp-运行" class="headerlink" title="安装&amp;运行"></a>安装&amp;运行</h1><ol><li><p>archlinux安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S redis</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start redis</span><br><span class="line">redis# 客户端</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>raspberrypi 安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install redis-server</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start redis</span><br><span class="line">redis-cli</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>docker安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull redis</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --name redis -p 6379:6379 -d redis</span><br><span class="line">sudo docker exec -it redis redis-cli</span><br></pre></td></tr></table></figure></li></ol><h1 id="关闭redis服务"><a href="#关闭redis服务" class="headerlink" title="关闭redis服务"></a>关闭redis服务</h1><p>如果已经给数据库中插入数据，那么正确的关闭方法是在客户端使用<code>shutdown</code>来关闭redis服务，这样数据才会同步到硬盘中，否则有可能丢失</p><p>在redis的配置中可以查看到默认的同步策略：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">save 900 1 # 1条数据的变动会在900s后同步硬盘</span><br><span class="line">save 300 10 # 10条数据的变动会在300s后同步硬盘</span><br><span class="line">save 60 10000 # 10000条数据的变动会在60s后同步硬盘</span><br></pre></td></tr></table></figure><p>可以看出数据并不是实时同步的，只有到了一定时间才会保存到硬盘中</p><h1 id="主要配置"><a href="#主要配置" class="headerlink" title="主要配置"></a>主要配置</h1><p>配置文件:<code>/etc/redis/redis.conf</code></p><h1 id="随想"><a href="#随想" class="headerlink" title="随想"></a>随想</h1><p>虽然说现在也不算很懂，但是很久之前发生的事我还记忆尤新。那是我入职不久发生的一件事，有个同事在我后入职的，大概28岁左右，主要是做技术方面的。当时他就需要给我们讲redis，zookeeper这些。当时大家讨论的很多，那个同事估计也没想到会问那么多深奥的问题。总之呢，我是没听懂，也不知道这个键值对的内存数据库是如何存储数据的。因为在oracle或者mysql中不是会有database，table这些吗，而且每个表还有那么多的字段，一个key-value怎么存储这么多东西？</p><p>就拿oracle中的一条记录来说，可以拿出一个字段作为key，那么其他的字段都作为value吗，就当做字符串来存储吗？那么查询效率怎么会提升，而且也很混乱啊。总不可能把一条记录拆分了吧，那数据量也太大了。如果拿不同表的多条数据的话，如果没有表，全是数据，那么数据量不是很庞大，又如何区分？</p><p>学了一些redis后才明白，原来这个key不是简单的作为标识符的key，这个key的写法就可以看出分级类别。这个value不是简单的value，这个value可以是hash，hash会有许多的键值对来存储类似oracle中的字段，值。而且hash查询速度快，还有特定的方法来获取hash中的特定的key（字段）。所以key的作用为索引以及分类，value可以使用hash来存储对象（一条记录）。</p>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux电源管理</title>
      <link href="/2020/02/10/linux%E7%94%B5%E6%BA%90%E7%AE%A1%E7%90%86/"/>
      <url>/2020/02/10/linux%E7%94%B5%E6%BA%90%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>太过美好的事物，总是让人怀念。也或许只有到了真正失去的那一天才想起了初心，时间和距离真的很容易让人忘记许多，忘记了为之感动的那双眼眸，忘记了曾经想要守护的那个微笑。自私和贪婪逐渐掩盖了这一切，成长的代价真的很大，如果我还会遇见一个美好的人，我一定要时刻提醒自己，不忘初心。</p></blockquote><p>以前没太在意电源的管理，在意的只是如何优化磁盘，今天看了一个视频，才发现原来电源也有这么多需要注意的地方</p><p>使用到了一个软件叫<code>powertop</code>，是intel提供的，它主要是优化一些设置，在空闲状态下让指定组件进入休眠状态，进一步来降低功耗。</p><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p>这个软件需要root权限，命令行启动，便可以查看一些默认设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo powertop</span><br></pre></td></tr></table></figure><p>在tunable页可以看到许多为bad的选项，其中大部分可以优化为good。但是先不要急着修改，因为这样手动修改之后下次开机就不会生效了，所以我们需要导出修改的命令，利用脚本在开机以后去自动修改。</p><h1 id="导出报告"><a href="#导出报告" class="headerlink" title="导出报告"></a>导出报告</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo powertop -r</span><br></pre></td></tr></table></figure><p>这样便会在当前目录生成一个html的报告：<code>powertop.html</code>，我们在浏览器中打开它。可以看到已经把优化语句给出来了，如果手动开启了的话，除非下次开机，否则不会给出这些语句的。</p><h2 id="Software-Settings-in-Need-of-Tuning"><a href="#Software-Settings-in-Need-of-Tuning" class="headerlink" title="Software Settings in Need of Tuning"></a>Software Settings in Need of Tuning</h2><table><thead><tr><th>Description</th><th>Script</th></tr></thead><tbody><tr><td>VM writeback timeout</td><td>echo ‘1500’ &gt; ‘/proc/sys/vm/dirty_writeback_centisecs’;</td></tr><tr><td>Enable Audio codec power management</td><td>echo ‘1’ &gt; ‘/sys/module/snd_hda_intel/parameters/power_save’;</td></tr><tr><td>NMI watchdog should be turned off</td><td>echo ‘0’ &gt; ‘/proc/sys/kernel/nmi_watchdog’;</td></tr><tr><td>Runtime PM for I2C Adapter i2c-12 (i915 gmbus dpd)</td><td>echo ‘auto’ &gt; ‘/sys/bus/i2c/devices/i2c-12/device/power/control’;</td></tr><tr><td>Runtime PM for I2C Adapter i2c-9 (i915 gmbus dpb)</td><td>echo ‘auto’ &gt; ‘/sys/bus/i2c/devices/i2c-9/device/power/control’;</td></tr><tr><td>Runtime PM for I2C Adapter i2c-10 (i915 gmbus dpc)</td><td>echo ‘auto’ &gt; ‘/sys/bus/i2c/devices/i2c-10/device/power/control’;</td></tr><tr><td>Runtime PM for I2C Adapter i2c-11 (i915 gmbus misc)</td><td>echo ‘auto’ &gt; ‘/sys/bus/i2c/devices/i2c-11/device/power/control’;</td></tr><tr><td>Autosuspend for USB device Flash Card Reader/Writer [Generic]</td><td>echo ‘auto’ &gt; ‘/sys/bus/usb/devices/1-4/power/control’;</td></tr><tr><td>Autosuspend for USB device USB Receiver [Logitech]</td><td>echo ‘auto’ &gt; ‘/sys/bus/usb/devices/1-1/power/control’;</td></tr><tr><td>Runtime PM for PCI Device Intel Corporation SSD 660P Series</td><td>echo ‘auto’ &gt; ‘/sys/bus/pci/devices/0000:04:00.0/power/control’;</td></tr><tr><td>Runtime PM for PCI Device Intel Corporation Cannon Point-LP PCI Express Root Port #9</td><td>echo ‘auto’ &gt; ‘/sys/bus/pci/devices/0000:00:1d.0/power/control’;</td></tr><tr><td>Runtime PM for PCI Device Intel Corporation Cannon Point-LP SPI Controller</td><td>echo ‘auto’ &gt; ‘/sys/bus/pci/devices/0000:00:1f.5/power/control’;</td></tr><tr><td>Runtime PM for PCI Device Intel Corporation Cannon Point-LP High Definition Audio Controller</td><td>echo ‘auto’ &gt; ‘/sys/bus/pci/devices/0000:00:1f.3/power/control’;</td></tr><tr><td>Runtime PM for PCI Device Intel Corporation Cannon Point-LP Shared SRAM</td><td>echo ‘auto’ &gt; ‘/sys/bus/pci/devices/0000:00:14.2/power/control’;</td></tr><tr><td>Runtime PM for PCI Device Intel Corporation Cannon Point-LP CNVi [Wireless-AC]</td><td>echo ‘auto’ &gt; ‘/sys/bus/pci/devices/0000:00:14.3/power/control’;</td></tr><tr><td>Runtime PM for PCI Device Intel Corporation Cannon Point-LP LPC Controller</td><td>echo ‘auto’ &gt; ‘/sys/bus/pci/devices/0000:00:1f.0/power/control’;</td></tr><tr><td>Runtime PM for PCI Device Intel Corporation UHD Graphics 620 (Whiskey Lake)</td><td>echo ‘auto’ &gt; ‘/sys/bus/pci/devices/0000:00:02.0/power/control’;</td></tr><tr><td>Runtime PM for PCI Device Intel Corporation Coffee Lake HOST and DRAM Controller</td><td>echo ‘auto’ &gt; ‘/sys/bus/pci/devices/0000:00:00.0/power/control’;</td></tr><tr><td>Runtime PM for disk sda</td><td>echo ‘auto’ &gt; ‘/sys/block/sda/device/power/control’;</td></tr><tr><td>Runtime PM for PCI Device Intel Corporation Cannon Point-LP Thermal Controller</td><td>echo ‘auto’ &gt; ‘/sys/bus/pci/devices/0000:00:12.0/power/control’;</td></tr></tbody></table><p>这里面有一项是不能修改的，便是无线鼠标连得usb设备，否则会自动断电。创建命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.local/bin/mypowertop</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用powertop产生的报告，来优化电源的使用</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">VM writeback timeout  </span></span><br><span class="line">echo '1500' &gt; '/proc/sys/vm/dirty_writeback_centisecs';</span><br><span class="line"><span class="meta">#</span><span class="bash">Enable Audio codec power management  </span></span><br><span class="line">echo '1' &gt; '/sys/module/snd_hda_intel/parameters/power_save';</span><br><span class="line"><span class="meta">#</span><span class="bash">NMI watchdog should be turned off  </span></span><br><span class="line">echo '0' &gt; '/proc/sys/kernel/nmi_watchdog';</span><br><span class="line"><span class="meta">#</span><span class="bash">Runtime PM <span class="keyword">for</span> I2C Adapter i2c-12 (i915 gmbus dpd)  </span></span><br><span class="line">echo 'auto' &gt; '/sys/bus/i2c/devices/i2c-12/device/power/control';</span><br><span class="line"><span class="meta">#</span><span class="bash">Runtime PM <span class="keyword">for</span> I2C Adapter i2c-9 (i915 gmbus dpb)  </span></span><br><span class="line">echo 'auto' &gt; '/sys/bus/i2c/devices/i2c-9/device/power/control';</span><br><span class="line"><span class="meta">#</span><span class="bash">Runtime PM <span class="keyword">for</span> I2C Adapter i2c-10 (i915 gmbus dpc)  </span></span><br><span class="line">echo 'auto' &gt; '/sys/bus/i2c/devices/i2c-10/device/power/control';</span><br><span class="line"><span class="meta">#</span><span class="bash">Runtime PM <span class="keyword">for</span> I2C Adapter i2c-11 (i915 gmbus misc)  </span></span><br><span class="line">echo 'auto' &gt; '/sys/bus/i2c/devices/i2c-11/device/power/control';</span><br><span class="line"><span class="meta">#</span><span class="bash">Autosuspend <span class="keyword">for</span> USB device Flash Card Reader/Writer [Generic]  </span></span><br><span class="line">echo 'auto' &gt; '/sys/bus/usb/devices/1-4/power/control';</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">Autosuspend <span class="keyword">for</span> USB device USB Receiver [Logitech]  这一项不优化，否则鼠标一会不使用就会自动停止对usb供电</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">echo</span> <span class="string">'auto'</span> &gt; <span class="string">'/sys/bus/usb/devices/1-1/power/control'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">Runtime PM <span class="keyword">for</span> PCI Device Intel Corporation SSD 660P Series  </span></span><br><span class="line">echo 'auto' &gt; '/sys/bus/pci/devices/0000:04:00.0/power/control';</span><br><span class="line"><span class="meta">#</span><span class="bash">Runtime PM <span class="keyword">for</span> PCI Device Intel Corporation Cannon Point-LP PCI Express Root Port <span class="comment">#9  </span></span></span><br><span class="line">echo 'auto' &gt; '/sys/bus/pci/devices/0000:00:1d.0/power/control';</span><br><span class="line"><span class="meta">#</span><span class="bash">Runtime PM <span class="keyword">for</span> PCI Device Intel Corporation Cannon Point-LP SPI Controller  </span></span><br><span class="line">echo 'auto' &gt; '/sys/bus/pci/devices/0000:00:1f.5/power/control';</span><br><span class="line"><span class="meta">#</span><span class="bash">Runtime PM <span class="keyword">for</span> PCI Device Intel Corporation Cannon Point-LP High Definition Audio Controller  </span></span><br><span class="line">echo 'auto' &gt; '/sys/bus/pci/devices/0000:00:1f.3/power/control';</span><br><span class="line"><span class="meta">#</span><span class="bash">Runtime PM <span class="keyword">for</span> PCI Device Intel Corporation Cannon Point-LP Shared SRAM  </span></span><br><span class="line">echo 'auto' &gt; '/sys/bus/pci/devices/0000:00:14.2/power/control';</span><br><span class="line"><span class="meta">#</span><span class="bash">Runtime PM <span class="keyword">for</span> PCI Device Intel Corporation Cannon Point-LP CNVi [Wireless-AC]  </span></span><br><span class="line">echo 'auto' &gt; '/sys/bus/pci/devices/0000:00:14.3/power/control';</span><br><span class="line"><span class="meta">#</span><span class="bash">Runtime PM <span class="keyword">for</span> PCI Device Intel Corporation Cannon Point-LP LPC Controller  </span></span><br><span class="line">echo 'auto' &gt; '/sys/bus/pci/devices/0000:00:1f.0/power/control';</span><br><span class="line"><span class="meta">#</span><span class="bash">Runtime PM <span class="keyword">for</span> PCI Device Intel Corporation UHD Graphics 620 (Whiskey Lake)  </span></span><br><span class="line">echo 'auto' &gt; '/sys/bus/pci/devices/0000:00:02.0/power/control';</span><br><span class="line"><span class="meta">#</span><span class="bash">Runtime PM <span class="keyword">for</span> PCI Device Intel Corporation Coffee Lake HOST and DRAM Controller  </span></span><br><span class="line">echo 'auto' &gt; '/sys/bus/pci/devices/0000:00:00.0/power/control';</span><br><span class="line"><span class="meta">#</span><span class="bash">Runtime PM <span class="keyword">for</span> disk sda  </span></span><br><span class="line">echo 'auto' &gt; '/sys/block/sda/device/power/control';</span><br><span class="line"><span class="meta">#</span><span class="bash">Runtime PM <span class="keyword">for</span> PCI Device Intel Corporation Cannon Point-LP Thermal Controller  </span></span><br><span class="line">echo 'auto' &gt; '/sys/bus/pci/devices/0000:00:12.0/power/control';</span><br></pre></td></tr></table></figure><h1 id="启用方式"><a href="#启用方式" class="headerlink" title="启用方式"></a>启用方式</h1><ol><li>可以将命令放到<code>~/.xinitrc</code>中，在打开图形界面时调用</li></ol><p>由于需要使用到root权限，所以需要在将mypowertop这条命令改为不需要密码执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/sudoer</span><br><span class="line">narcissus ALL=(ALL) NOPASSWD: /home/narcissus/.local/bin/mypowertop</span><br></pre></td></tr></table></figure><p>将命令加入<code>.xinitrc</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mypowertop &amp;&gt;/dev/null &amp;</span><br></pre></td></tr></table></figure><p>​    </p><ol start="2"><li>也可以加入systemd，用systemd来开机时作为服务调用</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/system/powertop.service</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Powertop tunings</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/home/narcissus/.local/bin/mypowertop</span><br><span class="line">RemainAfterExit=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>使用systemd自动调用它</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable powertop</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 无聊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker</title>
      <link href="/2020/02/09/docker/"/>
      <url>/2020/02/09/docker/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Docker </p></blockquote><h1 id="docker优点："><a href="#docker优点：" class="headerlink" title="docker优点："></a>docker优点：</h1><ul><li><p>启动速度很快</p></li><li><p>运行需要的内存占用小</p></li><li><p>可移植性很好：</p><p>比如我们做了一个web app，按照以前的做法，自然是先写代码，再测试，然后在实际的环境中去运行。然后实际的环境与测试的环境并不一致，这就会出现很多问题。而docker不同，它把代码，运行的环境，依赖这些统统封装好了，打包为一个image，在实际的环境中只要安装docker，跑一下这个image就可以了，不会存在环境不同，缺少依赖等等问题。这就好像运行一个独立的虚拟机一样，但是比虚拟机更好。</p></li></ul><h1 id="docker-vs-virtual-machine"><a href="#docker-vs-virtual-machine" class="headerlink" title="docker vs virtual machine"></a>docker vs virtual machine</h1><p>docker的运行速度与大小比虚拟机都小很多，那么他们之间的差异是怎么形成的？</p><p>docker与virtual machine的对比：</p><ul><li><p>virtualmachine：硬件+hypev技术+os操作系统（linux+software）</p></li><li><p>docker：硬件+（共享）系统linux内核+docker+software（不同os所需的lib等+software）</p></li></ul><ol><li><p>总结一下，虚拟机使用了hyperv技术，让不同的操作系统运行在虚拟机上。而docker则是共享正在运行的系统的linux内核，然后在docker上运行不同docker所需的软件，环境配置，库，依赖等。</p></li><li><p>所以虚拟机运行的是独立的操作系统，docker则仅仅是加载所需的库，依赖等，所以大小不同。至于启动速度也很好理解了，虚拟机需要启动一个独立的操作系统，需要的时间长；docker则不同，它依赖的就是系统本身的linux内核，等于说早就已经启动，只需要加载必要的software和依赖等就行了。</p></li><li><p>所以docker最好是运行在linux上，因为它要共享linux的内核，如果安装在windows上的话，那么docker就需要运行虚拟机，然后在虚拟机上运行docker，那么就体现不出docker的优势了。</p></li></ol><p>如果虚拟机运行的是一个完整的操作系统，那么docker就像是运行一个软件，只不过还需要加载一个不同的依赖和环境而已。弄明白了docker的工作原理，只想说I love docker</p><h1 id="image-and-docker-container"><a href="#image-and-docker-container" class="headerlink" title="image and docker container"></a>image and docker container</h1><p>image镜像是官方早就已经做好的，我们只需要下载下来，启动docker，然后运行这个image就行了。那么image运行的状态就叫docker container容器。</p><h1 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h1><p>树莓派上面叫docker.io：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install docker.io</span><br></pre></td></tr></table></figure><p>archlinux上面：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S docker</span><br></pre></td></tr></table></figure><p>查看版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker version</span><br></pre></td></tr></table></figure><h1 id="添加国内镜像地址"><a href="#添加国内镜像地址" class="headerlink" title="添加国内镜像地址"></a>添加国内镜像地址</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "registry-mirrors": ["http://hub-mirror.c.163.com"]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="启动docker服务"><a href="#启动docker服务" class="headerlink" title="启动docker服务"></a>启动docker服务</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><h1 id="搜索需要的image"><a href="#搜索需要的image" class="headerlink" title="搜索需要的image"></a>搜索需要的image</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo docker search image_name</span><br><span class="line">eg:</span><br><span class="line">sudo docker search mysql</span><br></pre></td></tr></table></figure><h1 id="下载image"><a href="#下载image" class="headerlink" title="下载image"></a>下载image</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull image_name</span><br><span class="line">eg:</span><br><span class="line">sudo docker pull mysql</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run image_name</span><br><span class="line">eg:</span><br><span class="line">sudo docker run mysql</span><br></pre></td></tr></table></figure><p>这种是直接运行一个container容器，如果还没有安装过，那么会自动下载</p><h1 id="查看已下载的images"><a href="#查看已下载的images" class="headerlink" title="查看已下载的images"></a>查看已下载的images</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker images</span><br></pre></td></tr></table></figure><h1 id="查看镜像信息"><a href="#查看镜像信息" class="headerlink" title="查看镜像信息"></a>查看镜像信息</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo docker inspect images</span><br><span class="line">eg:</span><br><span class="line">sudo docker inspect mysql</span><br><span class="line"><span class="meta">#</span><span class="bash">可查看数据存储目录，那么数据持久化就挂载到这个目录下</span></span><br><span class="line">    "Volumes": &#123;</span><br><span class="line">    "/var/lib/mysql": &#123;&#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h1 id="删除已下载images"><a href="#删除已下载images" class="headerlink" title="删除已下载images"></a>删除已下载images</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker rmi &lt;IMAGE ID&gt;</span><br></pre></td></tr></table></figure><h1 id="运行container"><a href="#运行container" class="headerlink" title="运行container"></a>运行container</h1><p>两种方式：</p><ul><li><p>attach：在终端中运行，可以看到container的运行信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run image_name:tag</span><br></pre></td></tr></table></figure><p>其中tag为lastest时可以省略，如果为其它tag则必须指定出来</p></li><li><p>detach：类似于放到后台运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d image_name</span><br><span class="line">sudo docker run -d --name NAMES image_name# 指定运行container名字</span><br><span class="line">eg:</span><br><span class="line">sudo docker run -d --name my-nginx nginx</span><br></pre></td></tr></table></figure></li></ul><h1 id="查看正在运行的container"><a href="#查看正在运行的container" class="headerlink" title="查看正在运行的container"></a>查看正在运行的container</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker ps</span><br></pre></td></tr></table></figure><h1 id="停止运行的container"><a href="#停止运行的container" class="headerlink" title="停止运行的container"></a>停止运行的container</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker stop &lt;CONTAINER ID&gt;/NAMES</span><br><span class="line">sudo docker kill &lt;CONTAINER ID&gt;/NAMES</span><br></pre></td></tr></table></figure><h1 id="重启容器"><a href="#重启容器" class="headerlink" title="重启容器"></a>重启容器</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker restart &lt;CONTAINER ID&gt;/NAMES</span><br></pre></td></tr></table></figure><h1 id="查看所有的container"><a href="#查看所有的container" class="headerlink" title="查看所有的container"></a>查看所有的container</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker ps -a</span><br></pre></td></tr></table></figure><h1 id="删除已有container"><a href="#删除已有container" class="headerlink" title="删除已有container"></a>删除已有container</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker rm &lt;CONTAINER ID&gt;/NAMES</span><br></pre></td></tr></table></figure><h1 id="删除运行container中无用的数据（包括images）"><a href="#删除运行container中无用的数据（包括images）" class="headerlink" title="删除运行container中无用的数据（包括images）"></a>删除运行container中无用的数据（包括images）</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker system prune</span><br></pre></td></tr></table></figure><h1 id="删除所有无用数据，包括停止的container"><a href="#删除所有无用数据，包括停止的container" class="headerlink" title="删除所有无用数据，包括停止的container"></a>删除所有无用数据，包括停止的container</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker system prune -a</span><br></pre></td></tr></table></figure><h1 id="删除所有docker数据"><a href="#删除所有docker数据" class="headerlink" title="删除所有docker数据"></a>删除所有docker数据</h1><p>docker数据默认存储在<code>/var/lib/docker</code>中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -R /var/lib/docker</span><br></pre></td></tr></table></figure><h1 id="container运行条件"><a href="#container运行条件" class="headerlink" title="container运行条件"></a>container运行条件</h1><p>容器能够运行一定是启动的这个container上面有程序，服务正在运行。如果没有（比如运行一个linux系统），或者这个程序停止崩溃了，那么这个container就自动退出了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run ubuntu</span><br></pre></td></tr></table></figure><p>container会自动退出，因为没有进程，或者程序运行，仅仅是一个Ubuntu系统。</p><p>如果需要它启动呢？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run ubuntu sleep 100</span><br></pre></td></tr></table></figure><h1 id="进入容器运行命令"><a href="#进入容器运行命令" class="headerlink" title="进入容器运行命令"></a>进入容器运行命令</h1><p>类似ssh远程登录container，并指定使用bash来作为解释的shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it container_name /bin/bash</span><br></pre></td></tr></table></figure><p><code>-i</code>交互模式interactive</p><p><code>-t</code>模拟tty登录</p><h1 id="指定宿主机与容器的端口映射"><a href="#指定宿主机与容器的端口映射" class="headerlink" title="指定宿主机与容器的端口映射"></a>指定宿主机与容器的端口映射</h1><p><code>-p</code>publish，发布的端口port。如果不指定则只能从容器内部访问，发布端口会将容器端口映射到主机端口，实现外部访问。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d --name NAMES -p host_port:container_port image_name </span><br><span class="line">eg:</span><br><span class="line">sudo docker run -d --name my-nginx -p 8080:80 nginx</span><br></pre></td></tr></table></figure><p>指定了访问宿主机的8080端口时，自动映射到容器的80端口</p><h1 id="容器的修改保存"><a href="#容器的修改保存" class="headerlink" title="容器的修改保存"></a>容器的修改保存</h1><p>如果不保存，那么对容器的修改不会持久化，也就是说修改不会保存到镜像中，只会保存在运行的container中。如果重新使用镜像生成容器，那么修改就没有了。</p><p>所以我们需要对修改进行提交，tag可以不写，默认为latest，如果写了，那么在创建容器时必须指定tag。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker commit -a "author" -m "message" &lt;CONTAINER ID&gt;/NAMES new_image_name:tag</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建一个容器</span></span><br><span class="line">sudo docker run -d --name my-nginx -p 80:80 nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入容器</span></span><br><span class="line">sudo docker exec -it my-nginx /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建目录</span></span><br><span class="line">sudo mkdir test</span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出容器</span></span><br><span class="line">exit</span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交修改，指定新的镜像名字和标签</span></span><br><span class="line">sudo docker commit -a "lanzhan" -m "make a test directory" my-nginx my-new-nginx:v1.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止容器</span></span><br><span class="line">sudo docker stop my-nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除容器</span></span><br><span class="line">sudo docker rm my-nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看新建的镜像</span></span><br><span class="line">sudo docker images</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用新建的镜像来创建新的容器</span></span><br><span class="line">sudo docker run -d --name my-nginx my-new-nginx:v1.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入容器，查看新建的目录存在</span></span><br><span class="line">sudo docker exec -it my-nginx /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出容器</span></span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p>所以说，对容器修改的提交，就会创建一个新的镜像，所有的修改都会保存在新的镜像中。</p><h1 id="文件、目录挂载"><a href="#文件、目录挂载" class="headerlink" title="文件、目录挂载"></a>文件、目录挂载</h1><p>将宿主机中的文件挂载到容器中，挂载之后对宿主机中文件的修改，会反应到容器中，反之也会。共享数据实现了数据的持久化，同时方便本地的开发。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d --name NAMES -p host_port:container_port -v host_file:container_file image_name</span><br><span class="line">sudo docker run -d --name NAMES -p host_port:container_port -v host_dir:container_dir image_name</span><br><span class="line">eg:</span><br><span class="line">sudo docker run -d --name nginx -p 80:80 -v /home/narcissus/index.html:/usr/share/nginx/html/index.html my-new-nginx:v1.0</span><br></pre></td></tr></table></figure><p>发现修改第二次修改之后容器中并没有发生改变，所有需要重启一下容器就正常了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker restart nginx</span><br></pre></td></tr></table></figure><h1 id="将容器中的文件复制到本地"><a href="#将容器中的文件复制到本地" class="headerlink" title="将容器中的文件复制到本地"></a>将容器中的文件复制到本地</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo docker cp NAMES:/containcer_file /host_file</span><br><span class="line">eg:</span><br><span class="line">sudo docker cp nginx:/etc/fstab /home/narcissus/fstab.txt</span><br></pre></td></tr></table></figure><h1 id="将本地文件复制到容器中"><a href="#将本地文件复制到容器中" class="headerlink" title="将本地文件复制到容器中"></a>将本地文件复制到容器中</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo docker cp /host_file NAMES:/container_file</span><br><span class="line">eg:</span><br><span class="line">sudo docker cp /etc/fstab nginx:/etc/fstab</span><br></pre></td></tr></table></figure><h1 id="mysql容器的建立"><a href="#mysql容器的建立" class="headerlink" title="mysql容器的建立"></a>mysql容器的建立</h1><ol><li><p>设置root密码 <code>-e MYSQL_ROOT_PASSWORD=my-secret-pw</code></p></li><li><p>数据同步备份 <code>-v /my/own/datadir:/var/lib/mysql</code></p></li><li><p>获取远程权限（mysql8.0之后需要）  <code>alter user &#39;root&#39;@&#39;%&#39; identified with mysql_native_password by &#39;123456&#39;;</code></p><p>查看权限 <code>select host,user,authentication_string from user;</code></p></li><li><p>端口映射 <code>-p host_port:container_port</code></p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d --name mysql -v /home/narcissus/Data/dumpfile:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -p 3306:3306 mysql</span><br></pre></td></tr></table></figure><p>然后就可以通过软件来连接docker中的mysql数据库了：</p><p>主机填写：<code>localhost</code>或者<code>127.0.0.1</code></p><p>端口为映射的主机地址：<code>3306</code></p><h1 id="容器互联"><a href="#容器互联" class="headerlink" title="容器互联"></a>容器互联</h1><p><code>--link 要被连接的容器名:在容器中的新别名</code></p><p>使用nginx去连接mysql数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d --name nginx -p 80:80 --link mysql:mysql nginx</span><br></pre></td></tr></table></figure><p>这样nginx就连接了mysql</p><h1 id="自己构建镜像"><a href="#自己构建镜像" class="headerlink" title="自己构建镜像"></a>自己构建镜像</h1><p>前面已经写过如何保存修改镜像并生成新的镜像，指的是在container的基础上对镜像的修改。这里的构建镜像指的是如何基于原始镜像构建自己所需功能的基础镜像，也可以简单说是下载一些需要的软件，修改一些端口配置文件等等，来形成自己的个性化配置镜像。本来也可以使用container来一步一步的操作，但是dockerfile提供了自动化配置。</p><p><strong>编辑dockerfile文件，通过文件来构建镜像，dockerfile分为四个部分</strong></p><ol><li><p>基础镜像信息</p><p>如果本地有image那么会使用本地的，如果没有会自动下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from image_name:tag# tag为latest时可以省略</span><br><span class="line">eg:</span><br><span class="line">from nginx</span><br></pre></td></tr></table></figure></li><li><p>维护者信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">maintainer name</span><br><span class="line">eg:</span><br><span class="line">maintainer lanzhan</span><br></pre></td></tr></table></figure></li><li><p>镜像操作指令</p><p><code>run</code></p><p>run后面的command为平常使用的shell命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">run command</span><br><span class="line">eg:</span><br><span class="line">run apt-get install sqlite3</span><br></pre></td></tr></table></figure><p>如果需要传参</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">run ['executable','param1','param2']</span><br><span class="line">eg:</span><br><span class="line">run ['./somefile.sh','66','/home/']</span><br></pre></td></tr></table></figure><p>每一个指令都会在docker上新建一层，形成当前最新的dockerimage，所以应该把指令写到一条中</p><p><code>\</code>的作用为换行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">run apt-get install sqlite3 &amp;&amp;\</span><br><span class="line">['./somefile.sh','66','/home/'] &amp;&amp;\</span><br><span class="line">echo "there command in a run instruct"</span><br></pre></td></tr></table></figure><p>这样只会新建一层镜像。</p></li></ol><hr><p>   <code>copy</code>和<code>add</code></p><p>   用于复制本机文件到docker中，在docker构建镜像时，会将要复制的文件所在目录下的所有文件先tar打包，然后发送给docker引擎，所以dockerfile所在的目录应该不包含没用的数据，如果有需要复制的文件，那么就把文件复制到dockerfile所在的目录下，而不要放一些没用的数据。</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">copy 本机文件 容器中路径</span><br><span class="line">eg:</span><br><span class="line">copy index.html /var/lib/nginx/default</span><br><span class="line">copy *.html /var/lib/nginx/default</span><br></pre></td></tr></table></figure><p>   copy和add功能类似，不同点：add会将tar类型的自动解压，同时可以访问网络，copy则不行。</p><hr><p>   <code>cmd</code></p><p>   只有最后一条起作用</p><p>   与run类似，但是运行时间点不同，run是在docker build时运行（构建镜像），cmd则是在docker run时运行（启动容器）</p><p>   作用是为container指定默认启动起来后运行的程序，不过如果自己指定了，那么会覆盖它。例如</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -it --name mysql /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里就自己指定了/bin/bash</span></span><br></pre></td></tr></table></figure><hr><p>   <code>entrypoint</code></p><p>   只有最后一条起作用</p><p>   与run类似，不同点在于不会被docker run中指定的命令覆盖</p><hr><p>   <code>label</code></p><p>   为镜像添加标识</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">label key=value key=value</span><br><span class="line">eg:</span><br><span class="line">label version='V1.0'</span><br></pre></td></tr></table></figure><hr><p>   <code>env</code></p><p>   为docker设置环境变量,后面可以使用<code>$key</code>来引用变量</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">env key value</span><br><span class="line">env key=value key=value</span><br></pre></td></tr></table></figure><hr><p>   <code>arg</code></p><p>   与env类似，不同点在于设置的变量仅对dockerfile有效（构建镜像时），对docker镜像没效</p><hr><p>   <code>volume</code></p><p>   设置默认挂载目录文件等，指定持久化目录</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volume /location1 /location2</span><br></pre></td></tr></table></figure><hr><p>   <code>expose</code></p><p>   指定要开放的端口，仅仅是告诉外部开放了那些端口可用，只用通过端口映射才真正可以从外部访问docker。</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expose port1 port2 port3</span><br></pre></td></tr></table></figure><hr><p>   <code>workdir</code></p><p>   指定的目录要提前创建好，在每次构建新的一层中它会一直存在。</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workdir /location</span><br></pre></td></tr></table></figure><hr><p>   <code>user</code></p><p>   为后续命令切换用户(和用户组)</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user user_name</span><br><span class="line">user user_name:user_group</span><br></pre></td></tr></table></figure><hr><p>   <code>healthcheck</code></p><p>   指定某个程序来监控docker运行状态</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">healthcheck option cmd command</span><br></pre></td></tr></table></figure><hr><p>   <code>onbuild</code></p><p>   当下次构建镜像时，如果以这个新构建的镜像为基础镜像时，会执行</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onbuild command</span><br></pre></td></tr></table></figure><ol start="4"><li><p>容器启动执行指令</p><p><code>cmd</code>和<code>entrypoint</code></p></li></ol><p><strong>构建镜像</strong></p><p>点表示在当前目录下，tag可以不写默认为lastest</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build -t image_name:tag .</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">docker build -f /path/to/dockerfile .</span><br></pre></td></tr></table></figure><h1 id="使用archlinux构建mariadb数据库"><a href="#使用archlinux构建mariadb数据库" class="headerlink" title="使用archlinux构建mariadb数据库"></a>使用archlinux构建mariadb数据库</h1><p>archlinux中mariadb代替了mysql</p><ul><li>新建dockerfile文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/narcissus/Data/docker</span><br><span class="line">mkdir arch-mysql</span><br><span class="line">cd arch-mysql</span><br><span class="line">touch dockerfile</span><br><span class="line">cp /etc/pacman.d/mirrorlist .# 复制本机镜像地址，提升下载速度</span><br></pre></td></tr></table></figure><ul><li>dockerfile文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from archlinux/base</span><br><span class="line">maintainer lanzhan</span><br><span class="line">add start.sh /home </span><br><span class="line">add mirrorlist /etc/pacman.d</span><br><span class="line">run pacman --noconfirm -Syy &amp;&amp;\</span><br><span class="line">pacman --noconfirm -S mysql &amp;&amp;\</span><br><span class="line">mariadb-install-db --user=mysql --basedir=/usr --datadir=/var/lib/mysql &amp;&amp;\</span><br><span class="line">chmod a+x /home/start.sh</span><br><span class="line">label version=v1.0</span><br><span class="line">volume /var/lib/mysql</span><br><span class="line">expose 3306</span><br><span class="line">entrypoint /home/start.sh</span><br></pre></td></tr></table></figure><p>不使用cmd而使用entrypoint的原因是cmd命令会被启动容器时的命令覆盖</p><ul><li><p>start.sh文件</p><p>由于entrypoint只能执行一条指令，所以启动mysql的命令需要写到文件中。通过执行脚步来运行。</p><p>本来打算使用systemd去启动，但是没有这个软件，而且安装了不知道怎么启用systemd，还有为了不让镜像太大</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">cd '/usr' ; /usr/bin/mysqld_safe --datadir='/var/lib/mysql'</span><br></pre></td></tr></table></figure><ul><li>运行dockerfile</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker build -t mariadb .</span><br></pre></td></tr></table></figure><ul><li>新建container</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d --name mariadb -p 3306:3306 mariadb</span><br></pre></td></tr></table></figure><ul><li>进入容器修改密码，设置远程登录权限</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec -it mariadb /bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line">use mysql;</span><br><span class="line">set password for root@localhost = password('123456'); </span><br><span class="line">update user set host='%' where user='root';</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>archlinux-autologin</title>
      <link href="/2020/01/26/archlinux-autologin/"/>
      <url>/2020/01/26/archlinux-autologin/</url>
      
        <content type="html"><![CDATA[<blockquote><p>实现archlinux自动登录tty，以及自动进入xmonad窗口管理器，而不需要每次都输入用户名和密码</p></blockquote><ul><li><h2 id="Automatic-login-to-virtual-console"><a href="#Automatic-login-to-virtual-console" class="headerlink" title="Automatic login to virtual console"></a>Automatic login to virtual console</h2><p>《自动登录tty》其实不需要像其它操作系统一样安装一些软件，archlinux默认安装了agetty</p><p>只需要运行命令就可以了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl edit getty@tty1</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=</span><br><span class="line">ExecStart=-/usr/bin/agetty --autologin username --noclear %I $TERM</span><br></pre></td></tr></table></figure><p>把用户名改为需要自动登录的用户名即可</p></li></ul><ul><li><h2 id="Autostart-X-at-login"><a href="#Autostart-X-at-login" class="headerlink" title="Autostart X at login"></a>Autostart X at login</h2><p>《自动进入xserver》不需要输入<code>startx</code>命令自动登录xinitrc中所指定的。如果使用bash放入<code>~/.bash_profile</code>。zsh放入<code>~/.zprofile</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zprofile</span><br><span class="line"></span><br><span class="line">if systemctl -q is-active graphical.target &amp;&amp; [[ ! $DISPLAY &amp;&amp; $XDG_VTNR -eq 1 ]]; then</span><br><span class="line">  exec startx</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>xterm终端字体</title>
      <link href="/2020/01/23/xterm%E7%BB%88%E7%AB%AF%E5%AD%97%E4%BD%93/"/>
      <url>/2020/01/23/xterm%E7%BB%88%E7%AB%AF%E5%AD%97%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>更新archlinux后出现的问题</p></blockquote><p>由于要安装virtualbox，所以对系统进行了升级。重启之后发现xterm的字体间距特别的大，最终找到的解决方法是换另一种字体。第二个问题是系统出现卡死的问题</p><p>由于喜欢iosevka紧凑的字体所以重新所有了一下还有其他的iosevka字体：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">之前安装的字体</span></span><br><span class="line">archlinuxcn/ttf-iosevka 2.3.3-1</span><br><span class="line">    A slender monospace typeface. Shape: default</span><br><span class="line"><span class="meta">#</span><span class="bash">现在安装的字体</span></span><br><span class="line">archlinuxcn/ttf-iosevka-term 2.3.3-1 [installed]</span><br><span class="line">    A slender monospace typeface. Shape: default</span><br></pre></td></tr></table></figure><p>查看字体</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fc-list | grep iosevka</span><br></pre></td></tr></table></figure><p>找到合适的字体然后加入到xterm的配置中去</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/share/fonts/ttf-iosevka-term/iosevka-term-regular.ttf: Iosevka Term:style=Regular</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim .Xresources</span><br><span class="line"></span><br><span class="line">XTerm.vt100.faceName:  Iosevka Term:style=Regular</span><br></pre></td></tr></table></figure><p>重新加载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xrdb .Xresources</span><br></pre></td></tr></table></figure><p>这样字体就恢复正常间距了，估计是更新之后之前的字体出现的问题吧。</p><p>至于系统卡死的情况，之前是因为升级了intel显卡，而这次没有升级显卡，所以猜测是因为安装了virtualbox的原因。卸载之后果然没有问题了。</p><p>总之archlinux对我这个笔记本的硬件支持不怎么好，以前联想的电脑安装两个显卡驱动，一点问题都没有，而这个华硕的电脑安装N卡之后就会出现各种问题。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux-虚拟文件</title>
      <link href="/2020/01/23/linux-%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6/"/>
      <url>/2020/01/23/linux-%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>使用linux的一大乐趣在于可以修改各种配置，达到我们想要的效果。</p><p>它不像windows那样复杂，一切都是那么简单透明。</p></blockquote><p>使用网易云音乐时间久了发现cache文件非常大，都有几个G了。想着看看配置里面可不可以修改cache位置，将它修改为<code>/tmp</code>目录（一个虚拟目录，文件保存在内存中，重启则清空）。网络这么好，保存那么多的cache文件实在没有必要，而且浪费磁盘。但是没有地方可以修改，所以只能借助别的工具了。</p><p>wiki上看了一下，psd的使用中用到了tmpfs：</p><p><a href="https://en.wikipedia.org/wiki/Tmpfs" target="_blank" rel="noopener">tmpfs</a> is a temporary filesystem that resides in memory and/or swap  partition(s). Mounting directories as tmpfs can be an effective way of  speeding up accesses to their files, or to ensure that their contents  are automatically cleared upon reboot.</p><p>那么使用tmpfs就可以实现这个需求。这里也提供了配置方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/etc/fstab</span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如这里将tmp挂载到了tmpfs</span></span><br><span class="line">tmpfs   /tmp         tmpfs   rw,nodev,nosuid,size=2G          0  0</span><br></pre></td></tr></table></figure><p>所以我只需要将网易云的cache目录同样挂载到tmpfs即可</p><p><code>sudo vim /etc/fstab</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> used to relocate music cache to memory</span></span><br><span class="line">tmpfs   /home/narcissus/.cache/netease-cloud-music/CachedSongs  tmpfs   rw,nodev,nosuid,size=2G          0  0</span><br></pre></td></tr></table></figure><p>重启一下，就ok了。以后网易云下载的cache文件就到了内存中，只要关机这些文件就会自动清空。</p><p>所以占用磁盘比较大的文件，而且是不需要保存的都可以用同样的方法</p><p>使用<code>df -h</code>查看挂载文件，可以看到已经成功了。所以archlinux它不香吗？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">--- ~/Music » df -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">dev             3.8G     0  3.8G   0% /dev</span><br><span class="line">run             3.8G  1.1M  3.8G   1% /run</span><br><span class="line">/dev/nvme0n1p2   28G  6.8G   20G  26% /</span><br><span class="line">tmpfs           3.8G  101M  3.7G   3% /dev/shm</span><br><span class="line">tmpfs           3.8G     0  3.8G   0% /sys/fs/cgroup</span><br><span class="line">tmpfs           3.8G   16K  3.8G   1% /tmp</span><br><span class="line">/dev/nvme0n1p3  183G  2.1G  171G   2% /home</span><br><span class="line">tmpfs           2.0G  193M  1.9G  10% /home/narcissus/.cache/netease-cloud-music/CachedSongs</span><br><span class="line">tmpfs           778M   18M  760M   3% /run/user/1000</span><br><span class="line">overlaid        778M   18M  760M   3% /run/user/1000/narcissus-firefox-v4hukpux.default</span><br><span class="line">overlaid        778M   18M  760M   3% /run/user/1000/narcissus-firefox-cae196ex.default-release</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sqlite3-时间</title>
      <link href="/2020/01/21/sqlite3-%E6%97%B6%E9%97%B4/"/>
      <url>/2020/01/21/sqlite3-%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在sqlite3中时间函数有好几个，刚开始看着好乱，连一个系统时间都搞不定。不过学完了发现它就像模块化的组装语句，语法更口语化</p><p>如果只是随便写写，相比而言，oracle感觉简单一些，容易上手，sqlite看着就特别烦的感觉</p></blockquote><h1 id="oracle"><a href="#oracle" class="headerlink" title="oracle"></a>oracle</h1><ul><li>比如Oracle中获取系统时间使用<code>sysdate</code>，使用<code>to_date()</code>来格式化时间，基本上能满足日常使用。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select sysdate from dual;</span><br><span class="line">select to_date(sysdate,&#39;YYYYMMDDhh24miss&#39;) from dual;</span><br><span class="line">select to_date(&#39;20200101&#39;,&#39;YYYY-MM-DD&#39;) from dual;</span><br></pre></td></tr></table></figure><h1 id="sqlite"><a href="#sqlite" class="headerlink" title="sqlite"></a>sqlite</h1><p><strong><em>我觉得这个在取时间的时候localtime是一个必须的参数，因为加了这个时间才是本地时间，不然有啥用呢</em></strong></p><ul><li>在sqllite中获取时间有好几个不同的函数<ul><li><code>date(timestring, modifier, modifier, ...)</code>    获取日期 （年月日）</li><li><code>time(timestring, modifier, modifier, ...)</code> 获取时间 （时分秒）</li><li><code>datetime(timestring, modifier, modifier, ...)</code> 获取日期加时间（年月日时分秒）</li></ul></li><li>格式化时间<ul><li><code>strftime(format, timestring, modifier, modifier, ...)</code></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select date();   --select date(&#39;now&#39;);</span><br><span class="line">select time();-- select time(&#39;now&#39;);</span><br><span class="line">select datetime();--select datetime(&#39;now&#39;);</span><br><span class="line">select strftime(&#39;%Y-%m-%d %H:%M:%S&#39;,&#39;now&#39;);</span><br></pre></td></tr></table></figure><p>##　修饰符</p><ul><li><p>x days</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select date(&#39;now&#39;,&#39;+3 days&#39;);</span><br></pre></td></tr></table></figure></li><li><p>xhours</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select time(&#39;now&#39;,&#39;localtime&#39;,&#39;-1 hours&#39;);--获取系统时间</span><br></pre></td></tr></table></figure></li><li><p>x minutes</p></li><li><p>x.x seconds</p></li><li><p>x months</p></li><li><p>x years</p></li><li><p>start of month</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select date(&#39;now&#39;,&#39;start of month&#39;);</span><br></pre></td></tr></table></figure></li><li><p>start of year</p></li><li><p>start of day</p></li><li><p>weekday N</p></li><li><p>unixepoch</p></li><li><p>localtime</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select time(&#39;now&#39;,&#39;localtime&#39;)</span><br></pre></td></tr></table></figure></li><li><p>utc</p></li></ul><hr><p><code>time,datetime</code>默认取的是子午线所在的时间，但是会发现这个时间（小时）与我们系统（东八区）时间并不相同。所以需要修饰符modifier</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select time(&#39;now&#39;,&#39;localtime&#39;);--获取正确本地时间，可以看出localtime是一个modifier，now是一个timestring</span><br><span class="line"></span><br><span class="line">select time(current_timestamp,&#39;localtime&#39;); --current_timestamp也是一个timestring</span><br><span class="line">select datetime(current_timestamp,&#39;localtime&#39;);</span><br><span class="line">select date(&#39;now&#39;,&#39;+1 month&#39;,&#39;start of month&#39;,&#39;-1 day&#39;); --一个月最后一天</span><br></pre></td></tr></table></figure><h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><table><thead><tr><th>替换</th><th>描述</th></tr></thead><tbody><tr><td>%Y</td><td>年，YYYY</td></tr><tr><td>%m</td><td>月，00-12</td></tr><tr><td>%d</td><td>一月中的第几天，01-31</td></tr><tr><td>%H</td><td>小时，00-23</td></tr><tr><td>%M</td><td>分，00-59</td></tr><tr><td>%S</td><td>秒，00-59</td></tr><tr><td>%f</td><td>带小数部分的秒，SS.SSS</td></tr><tr><td>%s</td><td>从 1970-01-01 算起的秒数</td></tr><tr><td>%j</td><td>一年中的第几天，001-366</td></tr><tr><td>%w</td><td>一周中的第几天，0-6 (0 is Sunday)</td></tr><tr><td>%W</td><td>一年中的第几周，01-53</td></tr><tr><td>%%</td><td>% symbol</td></tr></tbody></table><p>格式化日期<code>strftime(format, timestring, modifier, modifier, ...)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select strftime(&#39;%Y-%m-%d %H:%M:%S&#39;,&#39;now&#39;); </span><br><span class="line">select strftime(&#39;%Y-%m-%d %H:%M:%S&#39;,&#39;now&#39;，&#39;localtime&#39;); </span><br><span class="line">select strftime(&#39;%j&#39;,&#39;now&#39;,&#39;localtime&#39;); </span><br><span class="line">select strftime(&#39;%w&#39;,&#39;now&#39;);</span><br><span class="line">select strftime(&#39;%W&#39;,&#39;now&#39;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sqlite3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlite3</title>
      <link href="/2020/01/16/sqlite3/"/>
      <url>/2020/01/16/sqlite3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>美好的回忆不一定就是值得留恋的，有些回忆看似美好，实则每次想起都会锋利的像一把匕首，留下伤痕。</p></blockquote><h1 id="sqlite"><a href="#sqlite" class="headerlink" title="sqlite"></a>sqlite</h1><p>本来是准备看python的，看着那些基础觉得没什么意思。就看看数据库连接，刚好看到sqlite，突然觉得有点意思。然后我觉得我又回到了大一，浑身充满了动力，不过很可惜，这些sql语句都是差不多的。所以说热情少了不少，不过很多高级知识点我还没真的搞懂，就借着这次学习sqlite，一起掌握了吧。</p><p>不管怎么说，对于sqlite的作者，我都觉得不可思议，该是怎样的一个人能写出这么小的数据库，但是功能却是那么强大。想想几个G的Oracle，和几十M的mysql，sqlite却只有几M。太可怕了</p><h1 id="学习网址"><a href="#学习网址" class="headerlink" title="学习网址"></a>学习网址</h1><p><a href="https://www.sqlitetutorial.net/" target="_blank" rel="noopener">链接</a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>linux就不用了，因为自带。windows安装的话有点麻烦，需要下载两个东西，一个tool一个dll。其实也没那么复杂，只是我不知道为什么要把这两个分开，放一块是不是简单点？</p><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p>SQLite is an open-source, <em>zero-configuration</em>, <em>self-contained</em>, <em>stand-alone</em>, <em>transaction</em> relational database engine designed to be <em>embedded</em> into an application.</p><p>那么也就就没有密码用户这些的了。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>和mysql不同的是，sqlite的操作很多都是基于命令行的。当然用软件来连接sqlite也不是不可以，但是很多有用的命令就用不了。比如说查看数据库使用命令<code>.databases</code>。而我还没找到如何使用sql语句查看数据库的。</p><ul><li>sqlite有许多命令，这些命令以点开头。使用<code>.help</code>查看命令</li><li>所有sql语句以分号结尾（和其它sql一样）</li><li>sqlite有两种使用模式，第一种直接在终端输入<code>sqlite3</code>。这样进入sqlite后的所有数据（建表，插入数据等等）都是在内存中的，并不会保存到硬盘上</li><li>第二种<code>sqlite3 somedatabasename.db</code>。这样就会在当前目录下生成一个数据库文件，之后的数据会保存到硬盘上</li></ul><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p><code>.help</code>列出所有命令</p><p><code>.help command</code>查看具体命令帮助</p><p><code>.databases</code>查看所有数据库</p><p><code>.tables</code>查看表</p><p><code>.head on</code>查询结果显示表头（字段名）</p><p><code>.mode columns</code>查询结果显示间隔整齐一些</p><p><code>.mode insert</code>查看数据的sql（insert）语句</p><p><code>.schema tablename</code>查看建表语句</p><h1 id="python使用sqlite3"><a href="#python使用sqlite3" class="headerlink" title="python使用sqlite3"></a>python使用sqlite3</h1><p>不写sql语法了，因为和mysql，oracle的差不多。其实关系型数据库的语法大部分都一样，不同的地方大多在于函数不同吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">conn = sqlite3.connect(<span class="string">':memory:'</span>)<span class="comment"># 使用内存，不保存到硬盘</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">conn = sqlite3.connect(<span class="string">'tett.db'</span>)<span class="comment"># 不使用内存，保存到硬盘</span></span><br><span class="line"></span><br><span class="line">c = conn.cursor()<span class="comment"># 获取游标</span></span><br><span class="line"></span><br><span class="line">c.execute(<span class="string">"sql语句"</span>)<span class="comment"># 执行sql语句，语句有多行时，使用三个引号</span></span><br><span class="line"></span><br><span class="line">c.fetchone()<span class="comment"># 获取一行数据</span></span><br><span class="line">c.fetchmany(num)<span class="comment"># 或者num行数据</span></span><br><span class="line">c.fetchall()<span class="comment"># 获取所有查询到的数据</span></span><br><span class="line"></span><br><span class="line">conn.commit()<span class="comment"># 提交</span></span><br><span class="line"></span><br><span class="line">conn.close()<span class="comment"># 关闭数据库连接</span></span><br></pre></td></tr></table></figure><p><strong>注意到上面何时使用cursor，何时使用connect。在帮助手册可以看到</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">builtins.object</span><br><span class="line">       Connection</span><br><span class="line">       Cursor</span><br><span class="line">       PrepareProtocol</span><br><span class="line">       Row</span><br></pre></td></tr></table></figure><p><code>connection</code>和<code>cursor</code>都是内置对象。而且很多命令都是重复的，可以看到connection也有commit方法，但是后面注明了不是标准语法。cursor才是标准做法，所以语句的执行是使用的cursor</p><p><strong>另外，我们的sql语句实际情况并不是固定的，而是需要使用python变量传递参数</strong></p><p>传参的三种方式（其实正确的只有两种）：</p><ul><li><p><code>{}</code>使用<code>.format</code>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c.execute(<span class="string">"insert into sometable values('&#123;&#125;','&#123;&#125;','&#123;&#125;')"</span>.format(variable1,variable2,variable3))</span><br></pre></td></tr></table></figure><p>这种方式不好，容易导致sql注入攻击，原因是因为<code>&#39;&#39;</code>容易导致闭合语句。所以不建议使用</p></li><li><p><code>?</code>使用tuple元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c.execute(<span class="string">"insert into sometable values(?,?,?)"</span>,(variable1,variable2,variable3))</span><br></pre></td></tr></table></figure></li><li><p><code>:</code>使用dictionary字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c.execute(<span class="string">"insert into sometable values(:var1,:var2,:var3)"</span>,&#123;<span class="string">'var1'</span>:variable1,<span class="string">'var2'</span>:variable2,<span class="string">'var3'</span>:variable3&#125;)</span><br></pre></td></tr></table></figure></li></ul><hr><p>最近几个月不知道是不是因为冬天太冷了，还是啥，学习没什么激情。虽然学的很乱，东一点西一点，不过不管怎么说，只要还在学习，就是不错的。不管学的有用没用，总在进步嘛</p><p>听了这么多的歌，很多歌听着听着就腻了，不过王大毛的歌声始终听不腻。总能从歌声中听到青春的热情，活力。有什么不开心的事也就不会觉得不开心了。</p>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sqlite3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于awk以及正则的一点知识</title>
      <link href="/2020/01/13/%E5%85%B3%E4%BA%8Eawk%E4%BB%A5%E5%8F%8A%E6%AD%A3%E5%88%99%E7%9A%84%E4%B8%80%E7%82%B9%E7%9F%A5%E8%AF%86/"/>
      <url>/2020/01/13/%E5%85%B3%E4%BA%8Eawk%E4%BB%A5%E5%8F%8A%E6%AD%A3%E5%88%99%E7%9A%84%E4%B8%80%E7%82%B9%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>毕业也已经半年有余了，都说只要出了大学的校门，都会被这个社会所改变。更多指的是人会变得圆滑，但是我怎么觉得我一点也没变。我还是那个我，不知道我是进步了还是退步了。</p></blockquote><h1 id="awk忽略某一列的显示"><a href="#awk忽略某一列的显示" class="headerlink" title="awk忽略某一列的显示"></a>awk忽略某一列的显示</h1><p>awk也算一个比较常用的命令了，但是呢，高级的语法我也没怎么学。目前用到了一个功能特别好用，所以需要记录一下。</p><p>需求是这样的：我需要将数据中的第一列删除，仅仅显示其余的列。当然了，也可以写<code>$2,$3..$n</code>但是列很多啊，所以有没有好一点的方法？那就是将第一列指定为空</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk '&#123;$1=''; print $0&#125;' somefile</span><br></pre></td></tr></table></figure><h1 id="正则中-的作用"><a href="#正则中-的作用" class="headerlink" title="正则中[]的作用"></a>正则中[]的作用</h1><p>之前只知道<code>[0-9a-zA-Z]</code>这样的正则写法，表示这个字符可能是数字或者大小写字母。理解的有限，所以在实际运用中就不会写了。</p><p>当然，这个例子是oracle中的正则：我需要从很长的数据中去掉以冒号开头的那些字符</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> regexp_replace(<span class="string">':dfsa_kj^dfk_a+234^:jkj_2+34.^we09'</span>,<span class="string">':[0-9a-zA-Z_.+-]+'</span>,<span class="string">''</span>) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure><p>这样就把冒号开头的那些奇奇怪怪的没有规律的字符全部替换为空。括号中表示的是这些字符中的某一个，后面的加号就代表每一个位置都可能是这样的字符。所以连起来就是以冒号开头的出现括号中任意字符的连续字符串，都替换为空。</p><p><code>[]</code>表示括号中随机无序的任意一个字符，它和<code>+</code>连起来就极好了，就可以表示每一个位置都可能出现这些字符中任意一个的这样的连续字串。</p><h1 id="这次的shadowsock脚本加上了速度判断"><a href="#这次的shadowsock脚本加上了速度判断" class="headerlink" title="这次的shadowsock脚本加上了速度判断"></a>这次的shadowsock脚本加上了速度判断</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/zsh</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">clear screen and give a choice to choose,yes to catch a new file </span></span><br><span class="line">clear</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">go to the script dir and scratch all of information to a tmp file</span></span><br><span class="line">realdir=`whereis sslink | awk -F ":" '&#123;print $2&#125;' | xargs ls -l | awk -F "&gt;" '&#123;print $2&#125;' | xargs dirname`</span><br><span class="line">cd $realdir</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">product the <span class="built_in">command</span> line to a list</span></span><br><span class="line">if [[ -e ss.html ]];then</span><br><span class="line">    echo -e "\033[32m &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; the file exist, do you wanna to get a new one?(default no) &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  \033[0m"</span><br><span class="line">    echo -e -n "\033[32m &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  \033[0m"</span><br><span class="line">    read answer</span><br><span class="line">    if [[ $answer == 'yes' ]];then</span><br><span class="line">        cat ./ss.html | grep  '&lt;td align=' | grep -v 'class' | grep -E '^&lt;' | awk -F'&gt;|&lt;' '&#123;print $3&#125;' &gt; ss.hl</span><br><span class="line">    fi</span><br><span class="line">elif [[ ! -e ss.html ]];then</span><br><span class="line">    echo -e "\033[32m &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; the file doesn't exist,you need to get it &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   \033[0m"</span><br><span class="line">    echo -e -n "\033[32m &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  \033[0m"</span><br><span class="line">    exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo -e "\033[32m &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; do you wanna to retest and get the faster one?(default no) &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  \033[0m"</span><br><span class="line">echo -e -n "\033[32m &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  \033[0m"</span><br><span class="line">read choose</span><br><span class="line">if [[ $choose == "yes" ]];then</span><br><span class="line">    :&gt;ss.tmp &amp;&amp; :&gt;ss.final</span><br><span class="line">    i=1 &amp;&amp; j=`cat ss.hl | wc -l`</span><br><span class="line">    while [[ $j -gt 0 ]]</span><br><span class="line">    do</span><br><span class="line">        s=`sed -n ''"$i"'p' ss.hl ` &amp;&amp; ((i++))</span><br><span class="line">        p=`sed -n ''"$i"'p' ss.hl ` &amp;&amp; ((i++))</span><br><span class="line">        k=`sed -n ''"$i"'p' ss.hl ` &amp;&amp; ((i++))</span><br><span class="line">        m=`sed -n ''"$i"'p' ss.hl ` &amp;&amp; ((i++))</span><br><span class="line">        ss="sslocal -s $s -p $p -k $k -m $m -l 1080"</span><br><span class="line"></span><br><span class="line">        eval $ss 2&gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">        sleep 2</span><br><span class="line">        unset start &amp;&amp; unset stop &amp;&amp; unset tm &amp;&amp; start=`date +%S`</span><br><span class="line">        timeout 6 proxychains -q curl www.google.com &gt;/dev/null 2&gt;&amp;1 </span><br><span class="line">        stop=`date +%S` </span><br><span class="line"></span><br><span class="line">        tm=$((stop-start))</span><br><span class="line">        if [[ $tm -gt 0 &amp;&amp; $tm -lt 6 ]];then</span><br><span class="line">            if [[ $tm -lt 0 ]];then</span><br><span class="line">                tm=$((tm+60))</span><br><span class="line">            fi</span><br><span class="line">            ss="$tm sslocal -s $s -p $p -k $k -m $m -l 1080"</span><br><span class="line">            echo $ss &gt;&gt; ss.tmp</span><br><span class="line">        fi </span><br><span class="line">        j=$((j-4))</span><br><span class="line">        killall sslocal 2&gt;/dev/null</span><br><span class="line">        killall proxychains 2&gt;/dev/null</span><br><span class="line">    done</span><br><span class="line">    sort -g ss.tmp | awk '&#123;$1="";print $0&#125;' &gt; ss.final</span><br><span class="line">else</span><br><span class="line">    cat ss.final</span><br><span class="line">    total=`cat ss.final | wc -l`</span><br><span class="line">    while :</span><br><span class="line">    do</span><br><span class="line">        echo -e "\033[32m &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; choose the one you wanna to connect or the app to be proxyed &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; \033[0m"</span><br><span class="line">        echo -e -n "\033[32m &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  \033[0m"</span><br><span class="line">        read info</span><br><span class="line">        if [[ $info -gt 0 &amp;&amp; $info -le $total ]];then</span><br><span class="line">            command=`sed -n ''$info'p' ss.final`</span><br><span class="line">            killall sslocal 2&gt;/dev/null</span><br><span class="line">            eval $command &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">        elif [[ $info == 'exit' ]];then</span><br><span class="line">            exit</span><br><span class="line">        elif [[ $info == 'clear' ]];then</span><br><span class="line">            clear</span><br><span class="line">        elif [[ $info == 'menu' ]];then</span><br><span class="line">            cat ss.final</span><br><span class="line">        elif [[ $info -gt $total ]];then</span><br><span class="line">            echo "total:$total,can not greater than $total"</span><br><span class="line">        else</span><br><span class="line">            which $info &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">            if [[ $? == 0 ]];then</span><br><span class="line">                proxychains -q $info &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">            fi</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>这个脚本并不完美，因为网页中有图片识别码，所以我无法获取到数据，只能手动下载。所以后面需要做的是用python来识别图片，进行网页源码的下载。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh免密登录</title>
      <link href="/2020/01/12/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"/>
      <url>/2020/01/12/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>ssh-keygen</p><p>ssh-copy-id</p></blockquote><p><code>ssh-keygen</code>：生成id_rsa私匙，id_rsa.pub公匙</p><p><code>ssh-copy-id localhost</code>：生成authorized_keys文件，用来存放需要免密登录主机的公匙</p><p>现在需要在archlinux上通过ssh免密登录树莓派：</p><ol><li>在archlinux上通过<code>ssh-keygen</code>生成公匙</li><li>在树莓派上通过<code>ssh-copy-id localhost</code>生成存放archlinux公匙的文件</li><li>将archlinux上的公匙导入到树莓派的authorized_keys文件中</li><li>生成的文件存放在<code>~/.ssh/</code>目录下</li></ol><p>这样在archlinux上用ssh连接树莓派的时候就会用存储的公匙进行认证，而不需要输入密码了。</p><p>ssh-copy-id命令也可以不运行，只需要手动建立一个authorized_keys文件就好了</p><p>运行上面两个命令的时候需要启动ssh:<code>sudo systemctl start sshd</code></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> software </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell-文件数太多的查看方法</title>
      <link href="/2019/12/10/shell-%E6%96%87%E4%BB%B6%E6%95%B0%E5%A4%AA%E5%A4%9A%E7%9A%84%E6%9F%A5%E7%9C%8B%E6%96%B9%E6%B3%95/"/>
      <url>/2019/12/10/shell-%E6%96%87%E4%BB%B6%E6%95%B0%E5%A4%AA%E5%A4%9A%E7%9A%84%E6%9F%A5%E7%9C%8B%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>花接受凋零，风接受追寻</p></blockquote><p>继昨天搞定那个路径问题后，今天又遇到了一个新的问题。就是需要去某个特定的目录下，去找出一个以某个前缀开头的文件，然后复制一份出来。看着在简单不过的事，但是实际情况是这个目录下的文件多的可怕。稍微小一点的目录有几万个文件吧，大一点的我用<code>ls -l | wc -l</code>花了一分钟没计算出来到底有多少个文件。</p><p>所以我想可不可以加快一下查询速度？百度了一下，有解决办法，就是使用<code>ls</code>的时候，它是排序了的，这样花费了很多时间，所以需要让它不排序，可以加的参数就有<code>-f</code>/<code>-U</code>/<code>--sort=none</code>。然后我试了一下<code>ls -f | wc -l</code>这个命令，在查询含有几万个文件的这种目录中，速度确实得到了极大的提升，只用了2秒就计算出来了。但是那些比较大的目录中，仍然查询不出来。</p><p>我一个同事说可以使用<code>find</code>这个命令，它就不是像<code>ls</code>这样先列出所有文件，而是需要几个它就搜索几个，而我需要的就是这个功能，因为我只需要找到那么一个文件就够了，根本不需要使用<code>ls</code>去把所有的文件列一遍。这有点像正则里面的贪婪匹配一样</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name 'prefix*' -type f | head -n1</span><br></pre></td></tr></table></figure><p>问题得到了解决，但是我觉得我linux用了几年了，<code>ls</code>用的太多，就像windows用户无聊老是右键刷新一样。而忘记了它的工作原理，所有的文件，都是内存中的一个数据块，而我们使用<code>ls</code>的时候，就是在这个数据块中去找出这些文件来然后打印出来，我还加了一个<code>-l</code>的参数，加了这个参数之后，它需要做更多的事了，需要找它的权限，所有者，所属组，计算文件大小等等工作，也难怪它那么慢。但是<code>find</code>这个命令就不一样了，它是从一堆数据块中去找某些数据，找到一个返回一个，并不需要全部找到后才可以。所以这就是为什么<code>find</code>运行起来速度那么快的原因。</p><hr><p>公司聚餐，有点远，花了8块钱的地铁费。本来是不准备去的，但是说不去要罚款，所以还是去了，虽然吃的东西很好，但是我感觉来来回回的特别累。相比于那些丰盛的蛋白质，我更喜欢自己做的宇宙级好吃的面条。如果有下次我不想去了</p>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 累噢 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell-目录判断</title>
      <link href="/2019/12/09/shell-%E7%9B%AE%E5%BD%95%E5%88%A4%E6%96%AD/"/>
      <url>/2019/12/09/shell-%E7%9B%AE%E5%BD%95%E5%88%A4%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<blockquote><p>兜兜转转好像又回到了之前的那个问题：命令行中能执行的东西，脚本可不一定能够执行。可能shell不同，或者那种比较隐蔽的问题，比如$COLS这种变量只在命令行中才起作用。继之前发现的这些问题后，今天又遇到了一个关于路径的问题。</p></blockquote><p>问题都是因为使用了<code>～</code>这个符号来代表家目录导致的。</p><p>这是一个存储路径的文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">~/Desktop</span></span><br><span class="line"><span class="meta">#</span><span class="bash">~/Documents</span></span><br><span class="line"><span class="meta">#</span><span class="bash">~/Downloads</span></span><br><span class="line"><span class="meta">#</span><span class="bash">~/Music</span></span><br><span class="line"><span class="meta">#</span><span class="bash">~/Pictures</span></span><br><span class="line"><span class="meta">#</span><span class="bash">~/Software</span></span><br><span class="line"><span class="meta">#</span><span class="bash">~/Videos</span></span><br><span class="line"><span class="meta">#</span><span class="bash">~/下载</span></span><br></pre></td></tr></table></figure><p>我需要从这个文件中读取，并判断是否存在这个目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">cat file.txt | while read line</span><br><span class="line">do</span><br><span class="line">    d=`echo $line | awk -v FS='#' '&#123;print $2&#125;'`</span><br><span class="line">    if [ -d $d ];then</span><br><span class="line">        echo $d</span><br><span class="line">    else</span><br><span class="line">        echo "not a dir"</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>看着一点毛病都挑不出来是不是，可是运行脚本的结果是全部不存在这些目录，但是这些目录真的就存在。</p><p>好吧，<code>sh -x my.sh</code>进行调试，显示没有问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+ read line</span><br><span class="line">++ echo '#~/下载'</span><br><span class="line">++ awk -v FS=# '&#123;print $2&#125;'</span><br><span class="line">+ d='~/下载'</span><br><span class="line">+ '[' -d '~/下载' ']'</span><br><span class="line">+ echo 'not a dir'</span><br><span class="line">not a dir</span><br></pre></td></tr></table></figure><p>明明就有这个目录啊，为什么判断的结果是不存在呢？苦思不得其解，在终端执行这个语句也没有问题，我就奇怪了，难怪是加了单引号的问题？于是在脚本中为找到的字符串加了双引号，但是却没有任何效果。</p><p>后来突然想到是不是路径问题，可能需要使用绝对路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">/home/narcissus/Desktop</span></span><br><span class="line"><span class="meta">#</span><span class="bash">/home/narcissus/Documents</span></span><br><span class="line"><span class="meta">#</span><span class="bash">/home/narcissus/Downloads</span></span><br><span class="line"><span class="meta">#</span><span class="bash">/home/narcissus/Music</span></span><br><span class="line"><span class="meta">#</span><span class="bash">/home/narcissus/Pictures</span></span><br><span class="line"><span class="meta">#</span><span class="bash">/home/narcissus/Software</span></span><br><span class="line"><span class="meta">#</span><span class="bash">/home/narcissus/Videos</span></span><br><span class="line"><span class="meta">#</span><span class="bash">/home/narcissus/下载</span></span><br></pre></td></tr></table></figure><p>然后再运行，竟然好了！结论就是应该写绝对路径，在终端中shell帮我们把<code>～</code>解释为<code>/home/narcissus</code>。但是在脚本中进行if判断的时候，它不会进行这个解释。这个<code>～</code>在终端下进行if判断，它却能解释为绝对路径，真的是有点奇怪！shell脚本也是使用的bash进行解释的啊，为什么脚本就不行，终端却可以呢？看来脚本和终端差距还是有点大，自以为shell已经到了随手写脚本的程度，其实还是有很多不懂的地方啊！所以永远不要眼高手低，觉得它简单，只能说too young too simple</p>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> like </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>perl-总结reference</title>
      <link href="/2019/12/09/perl-%E6%80%BB%E7%BB%93reference/"/>
      <url>/2019/12/09/perl-%E6%80%BB%E7%BB%93reference/</url>
      
        <content type="html"><![CDATA[<blockquote><p>无疑，reference和deference是目前学perl中遇到的第二个麻烦。第一个是变量符号的使用，之前学的时候也是似懂非懂，迷迷糊糊的。百度看了许多教程，发现好多教程也没将明白。我也学了这么多天了，天天在想着如何理解使用它，现在算是比较懂了，所以理清一下思路</p></blockquote><h1 id="创建reference的三种方式"><a href="#创建reference的三种方式" class="headerlink" title="创建reference的三种方式"></a>创建reference的三种方式</h1><ol><li>使用<code>\</code>符号来创建reference</li><li>数组使用<code>[]</code>，哈希使用<code>{}</code>来创建匿名reference</li><li>使用<code>-&gt;</code>来创建reference</li></ol><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"></span><br><span class="line">@simple = (<span class="number">1</span>..<span class="number">5</span>);</span><br><span class="line">$simpleref = \@simple;</span><br><span class="line"><span class="keyword">print</span> <span class="keyword">ref</span>($simpleref),<span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">print</span> $simpleref,<span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">print</span> $simpleref -&gt; [<span class="number">0</span>],<span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">print</span> @$simpleref,<span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">$list = [<span class="number">1</span>..<span class="number">5</span>];</span><br><span class="line"><span class="keyword">print</span> <span class="keyword">ref</span>($list),<span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">print</span> $list,<span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">print</span> $list -&gt; [<span class="number">0</span>],<span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">print</span> @$list,<span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">$array -&gt; [<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">@$array[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">@$array[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">@$array[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line">@$array[<span class="number">4</span>] = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">print</span> <span class="keyword">ref</span>($array),<span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">print</span> $array,<span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">print</span> $array-&gt; [<span class="number">0</span>],<span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">print</span> @$array,<span class="string">"\n"</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ARRAY</span><br><span class="line">ARRAY(0x5646b50e5470)</span><br><span class="line">1</span><br><span class="line">12345</span><br><span class="line">ARRAY</span><br><span class="line">ARRAY(0x5646b5107ec0)</span><br><span class="line">1</span><br><span class="line">12345</span><br><span class="line">ARRAY</span><br><span class="line">ARRAY(0x5646b5112710)</span><br><span class="line">1</span><br><span class="line">12345</span><br></pre></td></tr></table></figure><h1 id="dereference的唯一方式"><a href="#dereference的唯一方式" class="headerlink" title="dereference的唯一方式"></a>dereference的唯一方式</h1><p>一个reference创建后，可以通过reference去取到某一个值，但是要取到全部的值，就的dereference了，并且只有这一种方式，便是在reference前加<code>@</code>或<code>%</code>。</p><p>区别：数组用<code>@</code>，哈希用<code>%</code></p><p>dereference后的好处就是可以像使用数组或者哈希变量那样来操作数据，它的使用和变量一样</p><p><em>这里需要注意的地方就是使用符号<code>-&gt;</code>创建的reference，由于创建时最多只能指定一个值，然后这个reference就被创建了出来，由于reference的名字不能重复，所以之后添加数据需要先dereference</em></p><h1 id="用reference取值的唯一方式"><a href="#用reference取值的唯一方式" class="headerlink" title="用reference取值的唯一方式"></a>用reference取值的唯一方式</h1><p>由于reference是一个内存地址，所以取值方式比较特殊，如果不想通过dereference后去取值的话，则使用符号<code>-&gt;</code>来取值。</p><p>使用<code>-&gt;</code>取值时，数组指定index索引，哈希指定key键</p><h1 id="用到-gt-的地方"><a href="#用到-gt-的地方" class="headerlink" title="用到-&gt;的地方"></a>用到<code>-&gt;</code>的地方</h1><ol><li>在创建reference的时候，用的比较多的方式就是通过<code>-&gt;</code>符号来创建</li><li>所有方式创建的reference，需要通过reference来取值的时候需要用到<code>-&gt;</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> perl </category>
          
      </categories>
      
      
        <tags>
            
            <tag> like </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim-自动补全插件安装</title>
      <link href="/2019/12/09/vim-%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
      <url>/2019/12/09/vim-%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<blockquote><p>YouCompleteMe</p></blockquote><p>安装了一个atom，主要是看中了它的自动补全功能，但是又带来了另外一个问题：无法直接运行写的脚本，虽然安装了一个script插件，但是只能作为测试语法问题，并不能实际运行。所以就想在vim中安装一个自动补全的插件了。</p><h1 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h1><p>由于使用的是vim-plug插件管理器，所以在<code>~/.vimrc</code>中添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plug 'Valloric/YouCompleteMe', &#123; 'do': './install.py' &#125;</span><br></pre></td></tr></table></figure><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>由于下载速度很慢，所以要使用使用代理<code>proxychains zsh</code></p><p>打开vim，执行<code>:PlugInstall</code></p><h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>上面这些步骤之后，很多时候都是不能成功安装的，比如缺少<code>cmake</code>，就只是把插件下载了下来。所以还需要手动编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.vim/plugged/YouCompleteMe</span><br><span class="line">./install.py</span><br></pre></td></tr></table></figure><p>编译的时候提示需要<code>cmake</code>。但是我电脑上没有安装，所以先安装<code>cmake</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S cmake</span><br></pre></td></tr></table></figure><p>再编译一下就可以了，然后打开vim就可以正常补全了</p>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> like </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>perl-面向对象</title>
      <link href="/2019/12/09/perl-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2019/12/09/perl-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我看这个教程，也是觉得有点意思。面向对象一页就将完了？但是仔细去一看，却又无比清晰，我甚至觉得我python面向对象学的有点问题。因为关于实例化一个对象的过程，理解的没有这里深刻。而他仅仅只用了几句话就讲清楚了事物的本质。</p></blockquote><p>所以有必要重新认识一下OOP：</p><h1 id="OOP的目的是什么"><a href="#OOP的目的是什么" class="headerlink" title="OOP的目的是什么"></a>OOP的目的是什么</h1><p>除了相比于perl中的模块或者python中的函数而言，一个重要的特性是支持：继承，封装，多态，当然perl中的模块也具有封装的特点。可以看出OOP对代码的复用率更高。</p><h2 id="Object对象："><a href="#Object对象：" class="headerlink" title="Object对象："></a>Object对象：</h2><p>我觉得这个解释特别好：</p><p>An object is a single entity that combines both data and code. Object is described in the following terms:</p><ul><li><em>Actions</em> or <em>methods</em> describe what it can do. It is the code part of the object.</li><li><em>Attributes</em> or <em>properties</em> describe what information the object conveys. It is the data part of the object.</li></ul><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><p>A class is a blueprint or template of similar objects.</p><h2 id="封装继承多态的解释："><a href="#封装继承多态的解释：" class="headerlink" title="封装继承多态的解释："></a>封装继承多态的解释：</h2><h3 id="Encapsulation"><a href="#Encapsulation" class="headerlink" title="Encapsulation"></a>Encapsulation</h3><p>Through object, you can hide its complexity which is known as <em>abstraction</em> or <em>encapsulation</em> in object oriented programming. It means the client of the object does  not need to care about the internal logic of the object but still can  use the object through its interfaces (methods).</p><h3 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h3><p>Inheritance means one class inherits both attributes and methods from another  class. Inheritance enables you to reuse and extend existing classes  without <em>copy-n-paste</em> <em>the code</em> or <em>re-invent the wheel</em>.</p><ul><li>A class that other classes inherit from is called base class or superclass.</li><li>A class that inherits from other class called subclass or derived class.</li></ul><h3 id="Polymorphism"><a href="#Polymorphism" class="headerlink" title="Polymorphism"></a>Polymorphism</h3><p>Polymorphism means “<em>many forms*” in *Greek</em>. It means a method call can behave differently depending on the type of the object that calls it.</p><hr><p>以上属于通用oop的理解。下面是perl中的oop。</p><h1 id="perl中的oop"><a href="#perl中的oop" class="headerlink" title="perl中的oop"></a>perl中的oop</h1><p>这里对象的解释一语道破类与对象的本质区别。类只是一个框架模板，而对象则是一个reference，一个内存地址，就是为了知道它是属于那个类的。</p><h2 id="Perl-OOP-rules"><a href="#Perl-OOP-rules" class="headerlink" title="Perl OOP rules"></a>Perl OOP rules</h2><p>可以看出从结构上与module差别不是很大。</p><p>There are three important rules in Perl object oriented programming:</p><ul><li>A class is a <a href="http://www.perltutorial.org/perl-module/" target="_blank" rel="noopener">package</a>.</li><li>An object is a <a href="http://www.perltutorial.org/perl-reference/" target="_blank" rel="noopener">reference </a>that knows its class.</li><li>A method is a <a href="http://www.perltutorial.org/perl-subroutine/" target="_blank" rel="noopener">subroutine</a>.</li></ul><h2 id="定义perl的class"><a href="#定义perl的class" class="headerlink" title="定义perl的class"></a>定义perl的class</h2><p>在perl中class指的就是一个package，和模块一样。</p><ol><li>选定好一个class的名字：<code>Product</code></li><li>新建文件：<code>Product.pm</code></li></ol><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Product;</span><br></pre></td></tr></table></figure><h2 id="构建perl的object"><a href="#构建perl的object" class="headerlink" title="构建perl的object"></a>构建perl的object</h2><p>这里与python差别可是有点大。perl中使用一个子程序、函数来构建object。一般来说我们会使用<code>new</code>作为函数的名称，比较容易辨别。当然了其它任何名字都是可以的。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">new</span></span>&#123;</span><br><span class="line"><span class="keyword">my</span>($class_name,$args) = @_;</span><br><span class="line"><span class="keyword">my</span> $self = <span class="keyword">bless</span> &#123;</span><br><span class="line"><span class="string">serial =&gt;</span> $args -&gt; <span class="string">&#123;serial&#125;</span>,</span><br><span class="line"><span class="string">name =&gt;</span> $args -&gt; <span class="string">&#123;name&#125;</span>,</span><br><span class="line"><span class="string">price =&gt;</span> $args -&gt; <span class="string">&#123;price&#125;</span>,</span><br><span class="line">&#125;,$class;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>和模块不同，每当我们调用<code>new()</code>方法的时候，perl就会自动的将类的名字<code>Product</code>作为第一个参数传入到了特殊变量<code>@_</code>中。</p></li><li><p>当我们创建一个object时，实际上是创建了一个reference，告诉它属于那个类。而内建的函数<code>bless</code>就是用来创建一个类的reference，同时返回一个类的实例。</p></li><li><p><code>bless()</code> 函数的语法:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object = <span class="keyword">bless</span> reference, classname;</span><br></pre></td></tr></table></figure><p>We’ve passed a <a href="http://www.perltutorial.org/perl-hash/" target="_blank" rel="noopener">hash reference</a> to the <code>bless()</code>function. You can pass any kind of reference to the bless function e.g., array  reference, however, it is much easier to work with a hash reference.</p></li></ol><h2 id="调用这个Product类"><a href="#调用这个Product类" class="headerlink" title="调用这个Product类"></a>调用这个Product类</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"><span class="keyword">use</span> strict;</span><br><span class="line"><span class="keyword">use</span> warnings;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">use</span> Product;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">my</span> $iphone = Product-&gt;new(&#123;</span><br><span class="line">                          <span class="string">serial =&gt;</span><span class="string">"100"</span>,</span><br><span class="line">                          <span class="string">name =&gt;</span> <span class="string">"iPhone 5"</span>, </span><br><span class="line">                          <span class="string">price =&gt;</span> <span class="number">650.00</span>&#125;);</span><br></pre></td></tr></table></figure><p>We called the method <code>new()</code>of the <code>Product</code>class and get an object  <em><code>$iphone</code>.</em> We passed a hash reference to the <code>new()</code> method containing <code>serial</code>, <code>name</code>and <code>price</code>.</p><h1 id="完整的事例"><a href="#完整的事例" class="headerlink" title="完整的事例"></a>完整的事例</h1><p>定义一个Product类</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Product;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">use</span> strict;</span><br><span class="line"><span class="keyword">use</span> warnings;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># init product with serial, name and price</span></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">new</span></span>&#123;</span><br><span class="line">    <span class="keyword">my</span> ($class,$args) = @_;</span><br><span class="line">    <span class="keyword">my</span> $self = <span class="keyword">bless</span> &#123; <span class="string">serial =&gt;</span> $args-&gt;&#123;serial&#125;,</span><br><span class="line">                       <span class="string">name =&gt;</span> $args-&gt;&#123;name&#125;, </span><br><span class="line">                       <span class="string">price =&gt;</span> $args-&gt;&#123;price&#125;</span><br><span class="line">                     &#125;, $class;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># get name of the product</span></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">get_name</span></span>&#123;</span><br><span class="line">   <span class="keyword">my</span> $self = <span class="keyword">shift</span>;</span><br><span class="line">   <span class="keyword">return</span> $self-&gt;&#123;name&#125;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># set new name for the product</span></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">set_name</span></span>&#123;</span><br><span class="line">   <span class="keyword">my</span> ($self,$new_name) = @_;</span><br><span class="line">   $self-&gt;&#123;name&#125; = $new_name;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># get price of the product</span></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">get_price</span></span>&#123;</span><br><span class="line">   <span class="keyword">my</span> $self = <span class="keyword">shift</span>;</span><br><span class="line">   <span class="keyword">return</span> $self-&gt;&#123;price&#125;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># set price for the product</span></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">set_price</span></span>&#123;</span><br><span class="line">   <span class="keyword">my</span> ($self,$new_price) = @_;</span><br><span class="line">   $self-&gt;&#123;price&#125; = $new_price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># get serial</span></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">get_serial</span></span>&#123;</span><br><span class="line">   <span class="keyword">my</span> $self = <span class="keyword">shift</span>;</span><br><span class="line">   <span class="keyword">return</span> $self-&gt;&#123;serial&#125;;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># set serial</span></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">set_serial</span></span>&#123;</span><br><span class="line">   <span class="keyword">my</span> ($self,$new_price) = @_;</span><br><span class="line">   $self-&gt;&#123;price&#125; = $new_price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># return formatted string of the product</span></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">to_string</span></span>&#123;</span><br><span class="line">   <span class="keyword">my</span> $self = <span class="keyword">shift</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"Serial: $self-&gt;&#123;serial&#125;\nName: $self-&gt;&#123;name&#125;\nPrice: $self-&gt;&#123;price&#125;USD\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>使用Product类</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"><span class="keyword">use</span> strict;</span><br><span class="line"><span class="keyword">use</span> warnings;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">use</span> Product;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">my</span> $iphone = Product-&gt;new(&#123;</span><br><span class="line">                          <span class="string">serial =&gt;</span><span class="string">"100"</span>,</span><br><span class="line">                          <span class="string">name =&gt;</span> <span class="string">"iPhone"</span>, </span><br><span class="line">                           <span class="string">price =&gt;</span> <span class="number">650.00</span>&#125;);</span><br><span class="line"><span class="keyword">my</span> $nexus = Product-&gt;new(&#123; <span class="string">serial =&gt;</span><span class="string">"101"</span>,</span><br><span class="line">                           <span class="string">name =&gt;</span> <span class="string">"Nexus"</span>,</span><br><span class="line">                           <span class="string">price =&gt;</span> <span class="number">299.00</span>&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> $iphone-&gt;to_string();</span><br><span class="line"><span class="keyword">print</span> $nexus-&gt;to_string();</span><br></pre></td></tr></table></figure><p>这里还是有许多不是很明白的地方，以后边用边加深理解。</p><p>另外我安装了一个atom，因为我的vim总感觉缺点啥，可能是没有自动补全吧。没有安装sublime是因为在windows上老是弹出需要购买的信息。看着不是很舒服</p>]]></content>
      
      
      <categories>
          
          <category> perl </category>
          
      </categories>
      
      
        <tags>
            
            <tag> like </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>perl-模块</title>
      <link href="/2019/12/09/perl-%E6%A8%A1%E5%9D%97/"/>
      <url>/2019/12/09/perl-%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>发现一个规律，早上学习效率高，下午效率低，晚上效率又高起来了。很开心的发现一件事，就是我现在可以拿perl写简单的程序了，不知不觉中，感觉很快。不知道这是偏爱还是我学的太过肤浅。不管那么多了，以后多写perl程序。</p></blockquote><h1 id="module"><a href="#module" class="headerlink" title="module"></a>module</h1><p>模块是什么：是一个可重复执行的代码段，这个代码段里包含了必要的属性和方法用来实现特定的功能。</p><p>那么perl的模块就是放在了[cpan](<a href="http://www.cpan.org/" target="_blank" rel="noopener">Comprehensive Perl Archive Network </a>)上面。[搜索页面](<a href="http://search.cpan.org/" target="_blank" rel="noopener">CPAN Search</a> )可以搜索到相关模块。</p><h1 id="创建自己的module"><a href="#创建自己的module" class="headerlink" title="创建自己的module"></a>创建自己的module</h1><ol><li>取名：<code>modulename.pm</code></li><li>在文件开头写<code>package modulename</code>，这样会让模块成为一个package</li><li>在文件最后写<code>1；</code>，让文件返回为true</li></ol><h1 id="模块的导入和使用"><a href="#模块的导入和使用" class="headerlink" title="模块的导入和使用"></a>模块的导入和使用</h1><p>三种导入方式：</p><ol><li><code>do</code>：从<code>@INC</code>路径搜索模块，如果没找到，会自动忽略</li><li><code>require</code>：如果没找到模块会报错，重复导入会忽略</li><li><code>use</code>：在程序启动之前导入模块，这也是最常用的</li></ol><p>调用函数：</p><p>使用双冒号，但是perl6中改为使用点了。</p><p><code>module_name::subroutine_name</code></p><h1 id="日志模块举例"><a href="#日志模块举例" class="headerlink" title="日志模块举例"></a>日志模块举例</h1><h2 id="新建模块"><a href="#新建模块" class="headerlink" title="新建模块"></a>新建模块</h2><ol><li>首先确定好模块名字：<code>FileLogger</code></li><li>建模块文件<code>FileLogger.pm</code></li></ol><p>第一种写法：这里省去了很多的接受参数的步骤，而是使用了默认取值方式</p><p>函数接受到的参数默认放入了<code>@_</code>数组中，所以可以通过索引取值<code>$_[index]</code></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> FileLogger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $LEVEL = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">set_level</span></span>&#123;</span><br><span class="line">$LEVEL = $_[<span class="number">0</span>] <span class="keyword">if</span>($_[<span class="number">0</span>] =~ <span class="regexp">/^\d+$/</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">open</span></span>&#123;</span><br><span class="line"><span class="keyword">open</span>(LFH,<span class="string">'&gt;&gt;'</span>,$_[<span class="number">0</span>]) <span class="keyword">or</span> <span class="keyword">die</span> <span class="string">"cann’t open file $_:$!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">log</span></span>&#123;</span><br><span class="line"><span class="keyword">print</span>(LFH,$_[<span class="number">1</span>],<span class="string">"\n"</span>) <span class="keyword">if</span>($_[<span class="number">0</span>] &gt;= $LEVEL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">close</span></span>&#123;</span><br><span class="line">   <span class="keyword">close</span> LFH; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>第二种写法：这里就使用了<code>shift</code>来接受参数重新赋值给变量，以及将<code>@_</code>重新赋值给了数组。等于说是复制了一份，这么做的好处就是不会对传进来的源数据有任何影响。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> FileLogger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $LEVEL = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">set_level</span></span>&#123;</span><br><span class="line">    <span class="keyword">my</span> $level = <span class="keyword">shift</span>;</span><br><span class="line">    $LEVEL = $level <span class="keyword">if</span>($level =~ <span class="regexp">/^\d+$/</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">open</span></span>&#123;</span><br><span class="line">    <span class="keyword">my</span> $log = <span class="keyword">shift</span>;</span><br><span class="line">    <span class="keyword">open</span>(LFH,<span class="string">'&gt;&gt;'</span>,$log) <span class="keyword">or</span> <span class="keyword">die</span> <span class="string">"cann‘t open file $log:$!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">log</span></span>&#123;</span><br><span class="line">    <span class="keyword">my</span>($level,$msg) = @_;</span><br><span class="line">    <span class="keyword">print</span>(LFH $msg,<span class="string">"\n"</span>) <span class="keyword">if</span>($level &gt;= $LEVEL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">close</span></span>&#123;</span><br><span class="line">   <span class="keyword">close</span>(LFH); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="使用模块"><a href="#使用模块" class="headerlink" title="使用模块"></a>使用模块</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> lib <span class="string">'/home/narcissus/Documents/script/perl'</span>;</span><br><span class="line"><span class="keyword">use</span> FileLogger;</span><br><span class="line"></span><br><span class="line">FileLogger::set_level(<span class="number">3</span>);</span><br><span class="line">FileLogger::<span class="keyword">open</span>(<span class="string">'test.log'</span>);</span><br><span class="line">FileLogger::<span class="keyword">log</span>(<span class="number">4</span>,<span class="string">'like iu'</span>);</span><br><span class="line">FileLogger::<span class="keyword">log</span>(<span class="number">2</span>,<span class="string">'not like iu'</span>);</span><br><span class="line">FileLOgger::<span class="keyword">close</span>;</span><br></pre></td></tr></table></figure><p>除了使用函数的方法值得注意外，如何指定模块是一个很重要的步骤。因为如果仅仅只写<code>use FileLogger</code>那么运行时会报错，说无法找到这个模块。</p><p>所以我们需要使用<code>use lib 模块所在目录</code>来指定从哪里找到它。不过这仅仅是说自己写的模块，如果是下载的，那么系统早已将模块加入到了它可以找到的路径。</p><p>指定模块位置的方法：</p><ol><li><p>在<code>~/.xinitrc</code>中加入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PERL5LIB=/home/narcissus/Documents/script/perl</span><br></pre></td></tr></table></figure></li><li><p>在脚本中指定位置：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> lib <span class="string">'/home/narcissus/Documents/script/perl'</span>;</span><br></pre></td></tr></table></figure></li></ol><hr><p>下一个目标是haskell，因为我的xmonad的topbar失效了，我又找不到失效的原因，所以这次打算好好学学，真真正正的自己写出满意的桌面来。</p>]]></content>
      
      
      <categories>
          
          <category> perl </category>
          
      </categories>
      
      
        <tags>
            
            <tag> like </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>perl-子程序</title>
      <link href="/2019/12/07/perl-%E5%AD%90%E7%A8%8B%E5%BA%8F/"/>
      <url>/2019/12/07/perl-%E5%AD%90%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>自从学完reference就感觉轻松了不少！</p></blockquote><h1 id="subroutine"><a href="#subroutine" class="headerlink" title="subroutine"></a>subroutine</h1><h2 id="子程序（函数）："><a href="#子程序（函数）：" class="headerlink" title="子程序（函数）："></a>子程序（函数）：</h2><ul><li>一个代码块。A Perl function or subroutine is a group of statements that together perform a specific task</li><li>perl中可以放到任意位置，并不像shell中必须放到最开头。还可以跨文件访问：使用<code>use</code>或<code>do</code>或<code>require</code></li></ul><h2 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">NAME</span>  <span class="title">PROTOTYPES</span> <span class="title">ATTRIBUTES</span> <span class="title">BLOCK</span></span></span><br></pre></td></tr></table></figure><ol><li><p>sub：表示这是一个函数</p></li><li><p>name：函数名称，它有自己独立的命名空间，所以可以使用已有的标量变量的名称，并不冲突。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">$scale = <span class="string">'iu'</span>;</span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">scale</span> = </span>&#123;....&#125;</span><br></pre></td></tr></table></figure></li><li><p>prototypes：函数期望什么参数，并不常用</p></li><li><p>attribute：属性，包含了<code>locked</code>, <code>method</code>and <code>lvalue</code>，并不常用</p></li><li><p>block：放函数主体</p></li></ol><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">say_something</span></span>&#123;</span><br><span class="line">     <span class="keyword">print</span> <span class="string">"Hi, this is the first subroutine\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调用："><a href="#调用：" class="headerlink" title="调用："></a>调用：</h2><p>使用<code>&amp;subroutine_name</code>或者<code>subroutine_name()</code></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&amp;say_something;</span><br><span class="line">say_something();</span><br></pre></td></tr></table></figure><p>但是<code>&amp;</code>更为通用，比如说在reference时：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$say_somethingRef = \&amp;say_something;</span><br></pre></td></tr></table></figure><p>dereference：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;\$say_somethingRef</span><br></pre></td></tr></table></figure><h1 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h1><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (@_)&#123;</span><br><span class="line">        <span class="keyword">print</span> $_,<span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>&amp;subroutine_name</code>写法时：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接将参数传过去，其它的写法不行</span></span><br><span class="line">&amp;test(<span class="number">1</span>..<span class="number">9</span>);</span><br></pre></td></tr></table></figure><p>使用<code>subroutine_name()</code>写法时：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 各种都支持</span></span><br><span class="line"><span class="comment"># 直接传参数</span></span><br><span class="line">test(<span class="number">1</span>..<span class="number">9</span>);</span><br><span class="line"><span class="comment"># 通过数组</span></span><br><span class="line">@list = (<span class="number">1</span>..<span class="number">9</span>);</span><br><span class="line">test(@list);</span><br><span class="line"><span class="comment"># 通过reference</span></span><br><span class="line">$list = \@list;</span><br><span class="line">test($list);</span><br><span class="line"><span class="comment"># 通过dereference</span></span><br><span class="line">$list = \@list;</span><br><span class="line">test(@$list);</span><br></pre></td></tr></table></figure><p>注意点：</p><ol><li><p>由于在函数外定义的变量为全局变量，所以如果在函数中对其数据就行了修改，会影响原始数据，这个与python差别就很大了。这被称为通过reference传值</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">getreference</span></span>&#123;</span><br><span class="line">$_[<span class="number">0</span>] = <span class="string">'iu'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>那么如何避免修改函数外部的变量，定义函数内部的变量，将函数外部传进来的值重新变为函数内部的。这被称为通过value传值</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">getvalue</span></span>&#123;</span><br><span class="line"><span class="keyword">my</span> @list = @_;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"><span class="comment"># 将两个列表合并为一个</span></span><br><span class="line"></span><br><span class="line">@one = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">@two = (<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>);</span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">conn</span></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (@_)&#123;</span><br><span class="line">       <span class="keyword">push</span>(@three,$_); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> @three;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@list = conn(@one,@two);</span><br><span class="line"><span class="keyword">print</span> @list,<span class="string">"\n"</span>;</span><br></pre></td></tr></table></figure><p>当然，如果要是合并两个数组，并不需要这么写，可以直接合并</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@one = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">@two = (<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>);</span><br><span class="line">@there = (@one,@two);</span><br></pre></td></tr></table></figure><h1 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h1><ol><li><p>默认返回最后一个执行的语句。不需要写<code>return</code></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> &amp;say_hi , <span class="string">"\n"</span>;</span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">say_hi</span></span>&#123;</span><br><span class="line">    <span class="keyword">my</span> $name = <span class="string">'Bob'</span>;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Hi $name \n"</span>;</span><br><span class="line">    $name;<span class="comment">#默认返回这个语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>也可以使用<code>return</code>来显式的说明要返回值，return可以写在函数内部任意位置，但是return之后的语句不会执行</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">say_hi</span></span>&#123;</span><br><span class="line">    <span class="keyword">my</span> $name = <span class="string">'Bob'</span>;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Hi $name \n"</span>;</span><br><span class="line">    <span class="keyword">return</span> $name;   <span class="comment">#用return返回值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="参数校验"><a href="#参数校验" class="headerlink" title="参数校验"></a>参数校验</h1><p>我们一般会在函数中对传进来的值进行校验，如果不存在那么就返回一个<code>undef</code>，可以配合调用函数时的<code>if</code>检测是否传值正确。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">test</span></span>&#123;</span><br><span class="line"><span class="comment">#使用shift取到一个参数</span></span><br><span class="line">    $arg = <span class="keyword">shift</span>;</span><br><span class="line">    <span class="comment">#进行判断</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">undef</span> <span class="keyword">unless</span> <span class="keyword">defined</span> $arg;</span><br><span class="line">    <span class="keyword">foreach</span> (@_)&#123;</span><br><span class="line">        <span class="keyword">print</span> $_,<span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@list = (<span class="number">1</span>..<span class="number">9</span>);</span><br><span class="line">$test = test(@list);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">defined</span> $test)&#123;</span><br><span class="line">    <span class="keyword">print</span> $test;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"undeined"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 也可以简化写为</span></span><br><span class="line"><span class="keyword">print</span> $test <span class="keyword">if</span>(<span class="keyword">defined</span> $test);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> perl </category>
          
      </categories>
      
      
        <tags>
            
            <tag> like </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>perl-reference</title>
      <link href="/2019/12/07/perl-reference/"/>
      <url>/2019/12/07/perl-reference/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一个星期学完perl基础知识点，感觉效率有点高啊。不过还是有一些没完全搞懂的地方，其实之前也断断续续的学习了一段时间perl的。学习了perl发现，它并没有人们所说的那么难，可能是一些定义比较难懂，或者说更接近基础，更接近c语言吧。</p></blockquote><p>我觉得这个<code>reference</code>是perl的精髓，虽然大家都说正则才是它的特色。</p><p>由于这一节基本都是对数据的操作，所以先复习一下各种数据类型的声明方式：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># array</span></span><br><span class="line">@array = (value1,value2,....);</span><br><span class="line"></span><br><span class="line"><span class="comment"># hash</span></span><br><span class="line">%hash =(<span class="string">key1 =&gt;</span> value1, <span class="string">key2 =&gt;</span> value2,.......);</span><br></pre></td></tr></table></figure><h1 id="reference的作用"><a href="#reference的作用" class="headerlink" title="reference的作用"></a>reference的作用</h1><p>由于list和hash只能存放标量变量，所以不能写嵌套的list和hash，但是却可以通过reference来将list和hash放入list或者hash中，因为reference是一个标量变量。它的作用就是为了构建复杂的数据结构</p><p><strong><em>之前在这里的理解不对，这里所说的list和hash只能存放变量指的是这个list或者hash中的数据类型就只能是变量，不能将一个list或者hash直接放这个里面作为一个嵌套的list或者hash，这里的嵌套指的是层次上的嵌套</em></strong></p><p>比如：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@list = (<span class="number">1</span>,</span><br><span class="line">---------<span class="number">2</span>,</span><br><span class="line">---------@sublist(<span class="string">'a'</span>,</span><br><span class="line">------------------<span class="string">'b'</span></span><br><span class="line">------------------)</span><br><span class="line">---------)</span><br></pre></td></tr></table></figure><p>那么如果把list或者hash放入这个里面的结果是什么呢？就是list或者hash会展开，例如数据合并，这种方法在python中用的很多，反而觉得理所应当了。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@list = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>))</span><br></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@nums = (-<span class="number">4</span>,-<span class="number">3</span>,-<span class="number">2</span>,-<span class="number">1</span>);</span><br><span class="line">@list = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,@nums);</span><br><span class="line"><span class="keyword">print</span> @list;</span><br><span class="line"><span class="comment"># -4,-3,-2,-1,1,2,3,4</span></span><br></pre></td></tr></table></figure><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p>In Perl, we use variables to access data stored in a memory location(all data and functions are stored in memory). Variables are assigned with  data values which are used in various operations. <strong>Perl Reference</strong> is a way to access the same data but with a different variable. A reference in Perl is a <a href="https://www.geeksforgeeks.org/perl-scalars/" target="_blank" rel="noopener">scalar </a>data type which holds the location of another variable. Another variable can be scalar, hashes, arrays, function name etc. Nested data structure can be created easily as a user can create a list which contains the  references to another list that can further contain the references to  arrays, <a href="https://www.geeksforgeeks.org/perl-scalars/" target="_blank" rel="noopener">scalar </a>or hashes etc.</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 四种类型的normal reference</span></span><br><span class="line">$varRef = \$var</span><br><span class="line">$listRef = \@list</span><br><span class="line">$hashRef = \%hash</span><br><span class="line">$subroutineRef = \&amp;subroutine</span><br></pre></td></tr></table></figure><p>reference比较难懂，它实际是存放的一个内存地址，指向的是变量。可以说是变量的一个alias.那么refere2ence的数据的操作与变量对数据的操作效果一样。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"></span><br><span class="line">$var = <span class="string">'hello wolrd'</span>;</span><br><span class="line">$varRef = \$var;</span><br><span class="line">$$varRef = <span class="string">'ref change'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> $var,<span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">print</span> $varRef,<span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">print</span> $$varRef,<span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"---------------\n"</span>;</span><br><span class="line">$var = <span class="string">'origon change'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> $var,<span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">print</span> $varRef,<span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">print</span> $$varRef,<span class="string">"\n"</span>;</span><br></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ref</span> change</span><br><span class="line">SCALAR(<span class="number">0x55d88b2f40f8</span>)</span><br><span class="line"><span class="keyword">ref</span> change</span><br><span class="line">---------------</span><br><span class="line">origon change</span><br><span class="line">SCALAR(<span class="number">0x55d88b2f40f8</span>)</span><br><span class="line">origon change</span><br></pre></td></tr></table></figure><h1 id="dereference"><a href="#dereference" class="headerlink" title="dereference"></a>dereference</h1><p>前面reference只是生成了一个保存有数据内存地址的变量，然而要真正操作数据（这里的操作是指对数据的修改等，引用不属于），还需要dereference。dereference后就与变量一样了</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 四种类型的dereference</span></span><br><span class="line">$$varRef</span><br><span class="line">@$listRef</span><br><span class="line">%$hashRef</span><br><span class="line">&amp;$subroutineRef</span><br></pre></td></tr></table></figure><h1 id="取值方式"><a href="#取值方式" class="headerlink" title="取值方式"></a>取值方式</h1><p>数组list</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@list = (<span class="number">1</span>..<span class="number">5</span>);</span><br><span class="line"><span class="comment">#变量取值</span></span><br><span class="line">$list[<span class="number">0</span>];</span><br><span class="line"><span class="comment">#reference取值</span></span><br><span class="line">$listRef = \@list;</span><br><span class="line">$listRef -&gt; [<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>哈希hash</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%hash = (<span class="string">'a'</span> =&gt; <span class="string">'1'</span>,<span class="string">'b'</span> =&gt; <span class="string">'2'</span>);</span><br><span class="line"><span class="comment">#变量取值</span></span><br><span class="line">$hash&#123;<span class="string">'a'</span>&#125;;</span><br><span class="line"><span class="comment">#reference取值</span></span><br><span class="line">$hashRef = \%hash;</span><br><span class="line">$hashRef -&gt; &#123;<span class="string">'a'</span>&#125;;</span><br></pre></td></tr></table></figure><h1 id="anonymous-reference"><a href="#anonymous-reference" class="headerlink" title="anonymous reference"></a>anonymous reference</h1><p>前面的reference都是通过指向已经存在的变量。其实还可以直接指向数据，这就是anonymous reference</p><h2 id="list-anonymous-reference使用"><a href="#list-anonymous-reference使用" class="headerlink" title="list anonymous reference使用[]"></a>list anonymous reference使用<code>[]</code></h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># list anonymous reference,数组不使用()而是使用[]</span></span><br><span class="line">$listRef = [<span class="number">1</span>..<span class="number">5</span>];</span><br></pre></td></tr></table></figure><h2 id="hash-anonymous-reference使用"><a href="#hash-anonymous-reference使用" class="headerlink" title="hash anonymous reference使用{}"></a>hash anonymous reference使用<code>{}</code></h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hash anonymous reference,数组不使用()而是使用&#123;&#125;</span></span><br><span class="line">$hashRef = &#123;<span class="string">'a'</span> =&gt; <span class="number">1</span>,<span class="string">'b'</span> =&gt; <span class="number">2</span>&#125;;</span><br></pre></td></tr></table></figure><h1 id="symbolic-reference"><a href="#symbolic-reference" class="headerlink" title="symbolic reference"></a>symbolic reference</h1><p>这种不常用，而且只能用于标量，同时use stricts时，无法通过编译。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不reference，直接dereference</span></span><br><span class="line"><span class="keyword">my</span> $foo = <span class="string">"bar"</span>;</span><br><span class="line">$$foo = <span class="string">"whatever"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> $foo,<span class="string">"\n"</span>; <span class="comment"># bar</span></span><br><span class="line"><span class="keyword">print</span> $$foo , <span class="string">"\n"</span>; <span class="comment"># whatever</span></span><br><span class="line"><span class="keyword">print</span> $bar, <span class="string">"\n"</span>; <span class="comment"># whatever</span></span><br></pre></td></tr></table></figure><p>可以发现，它使用了标量的值作为一个reference了。我是没发现这样做有啥用处</p><h1 id="autovivification"><a href="#autovivification" class="headerlink" title="autovivification"></a>autovivification</h1><p>前面的symbolic reference是直接dereference一个存在值的标量变量。那么autovivification则是直接“dereference”一个不存在值的变量。它可以用于scalar，list，hash。而且是perl独有的特性，可以说相当强大。</p><p>对dereference理解：autovivification的dereference不是加<code>\</code></p><p><em>Autovivification only works on undefined values. If you have a scalar  without a value and use it like it’s an array reference, Perl makes it  an array reference</em></p><p>autovivification的方式：</p><ul><li>Perl autovivifies when you use an undefined value like it’s a reference </li><li>An undefined value in <code>exists</code> autovivifies </li><li>Perl can autovivify when you store a value or fetch a value </li></ul><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 并不存在hash，却使用了不存在hash的匿名reference赋值</span></span><br><span class="line"><span class="keyword">my</span> $foo-&gt;&#123;address&#125;-&gt;&#123;building&#125; = <span class="number">1000</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> $foo, <span class="string">"\n"</span>; <span class="comment"># HASH(0x3bad24)</span></span><br><span class="line"><span class="keyword">print</span> $foo-&gt;&#123;address&#125;, , <span class="string">"\n"</span>; <span class="comment"># HASH(0x3bae04)</span></span><br><span class="line"><span class="keyword">print</span> $foo-&gt;&#123;address&#125;-&gt;&#123;building&#125;,<span class="string">"\n"</span>; <span class="comment"># 1000</span></span><br></pre></td></tr></table></figure><p>这两个例子就可以看出autovivification的优势，不需要先声明一个数据结构，可以直接使用。在数据结构比较复杂的时候写出来却非常简单，不知道用什么言语来形容对它的喜爱。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@list = ();</span><br><span class="line">$list[<span class="number">3</span>] = <span class="string">'define'</span>;</span><br><span class="line"><span class="keyword">print</span> @list,<span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">$array[<span class="number">3</span>] = <span class="string">'define and assign value'</span>;</span><br><span class="line"><span class="keyword">print</span> @array,<span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">$listRef -&gt; [<span class="number">3</span>] = <span class="string">'autovivification'</span>;</span><br><span class="line"><span class="keyword">print</span> @$listRef,<span class="string">"\n"</span>;</span><br></pre></td></tr></table></figure><p><strong>在数组中，初始数组的长度为autovivication时指定索引的长度。</strong></p><p>以上是简单的介绍，至于说详细怎么使用，那就比较灵活了。别人已经写的超级好了，我就不写了，<a href="https://www.effectiveperlprogramming.com/2011/04/understand-autovivification/" target="_blank" rel="noopener">链接</a></p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>数据结构的使用：</p><p>普通声明：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># array</span></span><br><span class="line">@array = (value1,value2,....);</span><br><span class="line"></span><br><span class="line"><span class="comment"># hash</span></span><br><span class="line">%hash =(<span class="string">key1 =&gt;</span> value1, <span class="string">key2 =&gt;</span> value2,.......);</span><br></pre></td></tr></table></figure><p>匿名声明：使用了reference</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># array</span></span><br><span class="line">$array = [value1,value2,.....];</span><br><span class="line"></span><br><span class="line"><span class="comment"># hash</span></span><br><span class="line">$hash = &#123;<span class="string">key1 =&gt;</span> value1, <span class="string">key2 =&gt;</span> value2,...&#125;;</span><br></pre></td></tr></table></figure><p>autovivification：使用了referenece和dereference</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># array</span></span><br><span class="line">$array -&gt; [<span class="number">0</span>] = value1;</span><br><span class="line"><span class="comment"># 由于autovivification是用于未使用的变量，所以其它的值需要dereference后添加，毕竟它的作用主要是自动生成复杂数据结构</span></span><br><span class="line">@$array -&gt; [<span class="number">1</span>] =value2;</span><br><span class="line"></span><br><span class="line"><span class="comment"># hash</span></span><br><span class="line">$hash -&gt; <span class="string">&#123;key1&#125;</span> = value1;</span><br><span class="line">%$hash -&gt; <span class="string">&#123;key2&#125;</span> = value2;</span><br></pre></td></tr></table></figure><hr><p>终于把reference学完了，之前学了还有许多不懂的地方，这次看了很多资料，总算理解了。可能是我c语言忘的差不多了（大一学的选修课），所以在内存中数据如何存储的地方有很多疑惑。</p>]]></content>
      
      
      <categories>
          
          <category> perl </category>
          
      </categories>
      
      
        <tags>
            
            <tag> like </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言中内存划分</title>
      <link href="/2019/12/07/c%E8%AF%AD%E8%A8%80%E4%B8%AD%E5%86%85%E5%AD%98%E5%88%92%E5%88%86/"/>
      <url>/2019/12/07/c%E8%AF%AD%E8%A8%80%E4%B8%AD%E5%86%85%E5%AD%98%E5%88%92%E5%88%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>For those future visitors who may be interested in knowing about those  memory segments, I am writing important points about 5 memory segments  in C:</p></blockquote><p>在学perl时，不知道变量以及reference，他们自身存储在哪里。找了c语言中关于变量自身如何存储的知识。</p><p>Some heads up:</p><ol><li>Whenever a C program is executed some memory is allocated in the RAM for the program execution. This memory is used for storing the  frequently executed code (binary data), program variables, etc. The  below memory segments talks about the same:</li><li>Typically there are three types of variables: <ul><li>Local variables (also called as automatic variables in C)</li><li>Global variables</li><li>Static variables</li><li>You can have global static or local static variables, but the above three are the parent types.</li></ul></li></ol><p><strong>5 Memory Segments in C:</strong></p><h1 id="1-Code-Segment"><a href="#1-Code-Segment" class="headerlink" title="1. Code Segment"></a>1. Code Segment</h1><ul><li>The code segment, also referred as the text segment, is the area of memory which contains the frequently executed code.</li><li>The code segment is often read-only to avoid risk of getting overridden by programming bugs like buffer-overflow, etc.</li><li>The code segment does not contain program variables like local variable (<em>also called as automatic variables in C</em>), global variables, etc.</li><li>Based on the C implementation, the code segment can also contain read-only string literals. For example, when you do <code>printf(&quot;Hello, world&quot;)</code> then string “Hello, world” gets created in the code/text segment. You can verify this using <code>size</code> command in Linux OS.</li><li><a href="https://en.wikipedia.org/wiki/Code_segment" target="_blank" rel="noopener">Further reading</a></li></ul><h1 id="Data-Segment"><a href="#Data-Segment" class="headerlink" title="Data Segment"></a>Data Segment</h1><p>The data segment is divided in the below two parts and typically lies below the heap area or in some implementations above the stack, but the data segment never lies between the heap and stack area.</p><h2 id="2-Uninitialized-data-segment"><a href="#2-Uninitialized-data-segment" class="headerlink" title="2. Uninitialized data segment"></a>2. Uninitialized data segment</h2><ul><li>This segment is also known as <strong>bss</strong>.</li><li>This is the portion of memory which contains: <ol><li><strong>Uninitialized global variables</strong> <strong><em>(including pointer variables)\</em></strong></li><li><strong>Uninitialized constant global variables</strong>.</li><li><strong>Uninitialized local static variables</strong>.</li></ol></li><li>Any global or static local variable which is not initialized will be stored in the uninitialized data segment</li><li>For example: global variable <code>int globalVar;</code> or static local variable <code>static int localStatic;</code> will be stored in the uninitialized data segment.</li><li>If you declare a global variable and initialize it as <code>0</code> or <code>NULL</code> then still it would go to uninitialized data segment or bss.</li><li><a href="https://en.wikipedia.org/wiki/.bss" target="_blank" rel="noopener">Further reading</a></li></ul><h2 id="3-Initialized-data-segment"><a href="#3-Initialized-data-segment" class="headerlink" title="3. Initialized data segment"></a>3. Initialized data segment</h2><ul><li>This segment stores: <ol><li><strong>Initialized global variables</strong>  <strong><em>(including pointer variables)\</em></strong></li><li><strong>Initialized constant global variables</strong>.</li><li><strong>Initialized local static variables</strong>.</li></ol></li><li>For example: global variable <code>int globalVar = 1;</code> or static local variable <code>static int localStatic = 1;</code> will be stored in initialized data segment.</li><li>This segment can be <strong>further classified into initialized read-only area and initialized read-write area</strong>. <em>Initialized constant global variables will go in the initialized read-only area  while variables whose values can be modified at runtime will go in the  initialized read-write area</em>.</li><li><strong><em>The size of this segment is determined by the size of the values in the program’s source code, and does not change at run time\</em></strong>.</li><li><a href="https://en.wikipedia.org/wiki/Data_segment" target="_blank" rel="noopener">Further reading</a></li></ul><h1 id="4-Stack-Segment"><a href="#4-Stack-Segment" class="headerlink" title="4. Stack Segment"></a>4. Stack Segment</h1><ul><li><p>Stack segment is used to store variables which are created inside functions (</p><p>function could be main function or user-defined function</p><p>), variable like </p><ol><li><strong>Local variables</strong> of the function <strong><em>(including pointer variables)\</em></strong></li><li><strong>Arguments passed to function</strong></li><li><strong>Return address</strong></li></ol></li><li><p>Variables stored in the stack will be removed as soon as the function execution finishes.</p></li><li><p><a href="https://en.wikipedia.org/wiki/Stack-based_memory_allocation" target="_blank" rel="noopener">Further reading</a></p></li></ul><h1 id="5-Heap-Segment"><a href="#5-Heap-Segment" class="headerlink" title="5. Heap Segment"></a>5. Heap Segment</h1><ul><li>This segment is to support dynamic memory allocation. If the  programmer wants to allocate some memory dynamically then in C it is  done using the <code>malloc</code>, <code>calloc</code>, or <code>realloc</code> methods.</li><li>For example, when <code>int* prt = malloc(sizeof(int) * 2)</code> then eight bytes will be allocated in heap and memory address of that location will be returned and stored in <code>ptr</code> variable. The <code>ptr</code> variable  will be on either the stack or data segment depending on the way it is declared/used.</li><li><a href="https://en.wikipedia.org/wiki/Memory_management#HEAP" target="_blank" rel="noopener">Further reading</a></li></ul><h1 id="总结一下："><a href="#总结一下：" class="headerlink" title="总结一下："></a>总结一下：</h1><ul><li><p>程序初始化的时候，已经将内存分为许多不同的分区了。</p></li><li><p>数据（code，data）和变量（variable）是分开存放的。</p></li><li><p>我们需要通过变量名去访问数据，变量存储的即为数据的内存地址。变量就类似与数据库中的索引，或者可以理解为一个键值对。</p></li><li><p>变量自身的存储方式很多：</p><ul><li>动态变量-&gt; heap</li><li>函数变量-&gt;stack</li><li>未初始化变量-&gt;uninitialized data segment(bss)</li><li>初始化变量<ul><li>initialized read-write area</li><li>initialized read-only area</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> perl </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>perl-数组排序</title>
      <link href="/2019/12/06/perl-%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/"/>
      <url>/2019/12/06/perl-%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>刚开始看这个的时候也是看到有点懵</p></blockquote><h1 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h1><p>数组排序使用sort函数，默认为升序。三种语法</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sort</span> list<span class="comment">#字符排序</span></span><br><span class="line"><span class="keyword">sort</span> block list<span class="comment">#数字排序</span></span><br><span class="line"><span class="keyword">sort</span> subroutine_name list<span class="comment">#复杂多排</span></span><br></pre></td></tr></table></figure><h2 id="字符排序"><a href="#字符排序" class="headerlink" title="字符排序"></a>字符排序</h2><p>默认排序为按照字符来排的</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@array = <span class="keyword">qw</span>/i have a dream hehe/</span><br><span class="line"><span class="keyword">sort</span> @array<span class="comment">#升序</span></span><br><span class="line"><span class="keyword">sort</span>&#123;$a cmp $b&#125; @array<span class="comment">#降序</span></span><br></pre></td></tr></table></figure><p>这里使用到了字符串比较<code>cmp</code>，下面数字则使用数字比较<code>&lt;=&gt;</code></p><h2 id="数字排序"><a href="#数字排序" class="headerlink" title="数字排序"></a>数字排序</h2><p>但是数字却不能这么写，不然排的不对</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@array = <span class="keyword">qw</span>/<span class="number">4</span> <span class="number">2</span> <span class="number">12</span> <span class="number">3</span> <span class="number">1</span> <span class="number">5</span> <span class="number">5</span> <span class="number">78</span>/</span><br><span class="line"><span class="keyword">sort</span>&#123;$a &lt;=&gt; $b&#125; @array</span><br></pre></td></tr></table></figure><ol><li><p><code>$a</code>,<code>$b</code>为perl提供的package variable，是默认的，不能修改。他们两的顺序代表这不同的排序方式。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sort</span>&#123;$a &lt;=&gt; $b&#125; @array<span class="comment">#升序</span></span><br><span class="line"><span class="keyword">sort</span>&#123;$b &lt;=&gt; $a&#125; @array<span class="comment">#降序</span></span><br></pre></td></tr></table></figure></li><li><p>当然降序还可以使用<code>reverse()</code>函数，对于数据量小的还行，但是如果数据量太大效率就不高，因为已经按照升序排了一次，reverse之后又要全部逆序排列一次。所以为何不使用上面的逆序一次性就排好呢</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">reverse</span> <span class="keyword">sort</span>&#123;$a &lt;=&gt; $b&#125; @array</span><br></pre></td></tr></table></figure></li></ol><h2 id="复杂多排"><a href="#复杂多排" class="headerlink" title="复杂多排"></a>复杂多排</h2><p>前面说的都是一维数组的排序方式，如果像oracle中一样有几列数据需要排序呢</p><p>如果有三列数据，先按第一列price升序排，然后按照第三列的折扣逆序排</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">my</span> @products = (</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="string">name =&gt;</span> <span class="string">'iPhone'</span>,</span><br><span class="line">      <span class="string">price =&gt;</span> <span class="number">600</span>,</span><br><span class="line">      <span class="string">discount =&gt;</span> <span class="number">0</span>.<span class="number">5</span>,     </span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="string">name =&gt;</span> <span class="string">'Nexus'</span>,</span><br><span class="line">      <span class="string">price =&gt;</span> <span class="number">299</span>,</span><br><span class="line">      <span class="string">discount =&gt;</span> <span class="number">0</span>.<span class="number">1</span>,     </span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="string">name =&gt;</span> <span class="string">'Samsung Galaxy'</span>,</span><br><span class="line">      <span class="string">price =&gt;</span> <span class="number">600</span>,</span><br><span class="line">      <span class="string">discount =&gt;</span> <span class="number">0</span>.<span class="number">8</span>,     </span><br><span class="line">   &#125;</span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line">@products = <span class="keyword">sort</span> &#123; </span><br><span class="line">   $a-&gt;&#123;price&#125; &lt;=&gt; $b-&gt;&#123;price&#125; || </span><br><span class="line">   $b-&gt;&#123;discount&#125; &lt;=&gt; $a-&gt;&#123;discount&#125;</span><br><span class="line"> &#125; @products;</span><br></pre></td></tr></table></figure><p><code>||</code>的作用是：如果前面没有相同的数据，那么不执行后面的，如果前面有相同数据，那么就执行后面的排序</p>]]></content>
      
      
      <categories>
          
          <category> perl </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习啊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>perl-数据类型</title>
      <link href="/2019/12/06/perl-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2019/12/06/perl-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天看perl竟然头疼，上午状态还好，下午刚好看到了reference，头就疼了</p></blockquote><h1 id="list"><a href="#list" class="headerlink" title="list"></a>list</h1><p>列表<code>()</code>，各个值使用逗号分隔。<code>print()</code>函数即为一个list</p><p>在perl中列表和数组是不同的概念，list指的是不可变的数据，array指的是一个指向list的变量，是一个动态存储列表的变量</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>)</span><br></pre></td></tr></table></figure><p>列表中可以包含多种数据类型</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">'a'</span>,<span class="string">'b'</span>)</span><br></pre></td></tr></table></figure><h2 id="多列表嵌套"><a href="#多列表嵌套" class="headerlink" title="多列表嵌套"></a>多列表嵌套</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure><h2 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h2><p>索引从0开始，使用<code>[]</code>指定索引</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h2 id="多索引"><a href="#多索引" class="headerlink" title="多索引"></a>多索引</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)[<span class="number">0</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h2 id="范围取值"><a href="#范围取值" class="headerlink" title="范围取值"></a>范围取值</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)[<span class="number">0</span>..<span class="number">5</span>]</span><br></pre></td></tr></table></figure><hr><h1 id="array"><a href="#array" class="headerlink" title="array"></a>array</h1><p><em>数组array：动态存储一个列表list</em></p><p>数组，使用<code>@</code>表示，列表是不可变的数据集合，为了能够操作list中的数据，就有了数组array。它用来将列表存储到array变量中</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@numbers = <span class="keyword">qw</span>/<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>/</span><br></pre></td></tr></table></figure><h2 id="取值-1"><a href="#取值-1" class="headerlink" title="取值"></a>取值</h2><p>同list，索引从0开始，使用<code>[]</code>。但是注意引用却是使用的<code>$</code></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$numbers[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>为什么会这样写？这也是我学perl中目前碰到的唯一一个超级难理解的地方。比如说我要取的不是一个值则这么写</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@numbers[<span class="number">0</span>..<span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>看了教程中的解释，觉得有点难以理解，感觉解释的不对：</p><p>the rule is that the prefix represents what you want to get not what you’ve got</p><p>我的理解是：</p><ul><li><p>如果是通过这个变量自身的操作得到的是什么类型就是什么。如果得到的是一个字符串使用<code>$</code>，如果得到的是一个数组，使用<code>@</code></p></li><li><p>如果是通过别的方法函数，那么就是就是一个数组的引用。使用<code>@</code></p></li></ul><h2 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h2><ol><li><p>将数组赋值给一个标量</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">my</span> $len = @numbers</span><br></pre></td></tr></table></figure></li><li><p>使用<code>scalar()</code>函数</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">my</span> $len = <span class="keyword">scalar</span> @numbers</span><br></pre></td></tr></table></figure></li></ol><h2 id="索引的最大值"><a href="#索引的最大值" class="headerlink" title="索引的最大值"></a>索引的最大值</h2><p><code>$#</code></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">my</span> $counter = $#numbers</span><br></pre></td></tr></table></figure><h2 id="修改数组中的值"><a href="#修改数组中的值" class="headerlink" title="修改数组中的值"></a>修改数组中的值</h2><p>支持范围操作</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@numbers[<span class="number">0</span>,<span class="number">1</span>] = <span class="keyword">qw</span>/<span class="number">8</span> <span class="number">9</span>/</span><br></pre></td></tr></table></figure><h2 id="更好用的取值赋值方式"><a href="#更好用的取值赋值方式" class="headerlink" title="更好用的取值赋值方式"></a>更好用的取值赋值方式</h2><p><code>shift</code></p><p><code>unshift</code></p><p><code>pop</code></p><p><code>push</code></p><hr><h1 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h1><p>使用<code>%</code>，使用key-value来存储数据</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">my</span> %language = <span class="string">qw(England English</span></span><br><span class="line"><span class="string">China Chinese)</span>;</span><br></pre></td></tr></table></figure><p>更通用的使用<code>=&gt;</code>符号，表示的更清晰。key的引号可省略</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">my</span> %language = (<span class="string">England =&gt;</span> <span class="string">'English'</span></span><br><span class="line"><span class="string">China   =&gt;</span> <span class="string">'Chinese'</span>);</span><br></pre></td></tr></table></figure><p>key必须唯一，否则后面的会覆盖前面的。这也是替换的方法</p><h2 id="通过key找value"><a href="#通过key找value" class="headerlink" title="通过key找value"></a>通过key找value</h2><p>使用<code>{}</code></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">my</span> $value = $language&#123;<span class="string">'China'</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$language&#123;<span class="string">'Korea'</span>&#125; = <span class="string">'Korean'</span>;</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p><code>delete()</code></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> $language&#123;<span class="string">'Korean'</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$language&#123;<span class="string">'China'</span>&#125; = <span class="string">'Fanyan'</span>;</span><br></pre></td></tr></table></figure><h2 id="取所有key"><a href="#取所有key" class="headerlink" title="取所有key"></a>取所有key</h2><p><code>keys()</code></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">my</span> %key = <span class="keyword">keys</span> %language</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> perl </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习啊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>perl-控制结构</title>
      <link href="/2019/12/06/perl-%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/"/>
      <url>/2019/12/06/perl-%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<blockquote><p>控制结构其实没什么好记的，但是perl还是在语法结构上惊艳到我了。</p></blockquote><p>提供了一种称为statement modifier的语法，支持将控制结构放到语句后面。这在控制结构简单的语句上写起来是非常简单，优雅的。</p><p><code>statement if(condition)</code></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'hello joyce'</span>) <span class="keyword">if</span> ($name = <span class="string">'jc'</span>)</span><br></pre></td></tr></table></figure><h1 id="if"><a href="#if" class="headerlink" title="if"></a>if</h1><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(expression)&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elsif</span>(expression)&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="unless"><a href="#unless" class="headerlink" title="unless"></a>unless</h1><p>为假则执行</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unless</span>(condition)&#123;</span><br><span class="line">   // code block</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">statement <span class="keyword">unless</span>(condition);</span><br></pre></td></tr></table></figure><h1 id="given"><a href="#given" class="headerlink" title="given"></a>given</h1><p>匹配给定的值，作用同c语言的switch case</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">given</span>(expr)&#123;</span><br><span class="line">     <span class="keyword">when</span>(expr1)&#123; statement;&#125;</span><br><span class="line">     <span class="keyword">when</span>(expr1)&#123; statement;&#125;</span><br><span class="line">     <span class="keyword">when</span>(expr1)&#123; statement;&#125;</span><br><span class="line">     …</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">eg：</span><br><span class="line"><span class="keyword">given</span>($color)&#123;</span><br><span class="line">     $code = <span class="string">'#FF0000'</span> <span class="keyword">when</span> <span class="string">'RED'</span>;</span><br><span class="line">     $code = <span class="string">'#00FF00'</span> <span class="keyword">when</span> <span class="string">'GREEN'</span>;</span><br><span class="line">     $code = <span class="string">'#0000FF'</span> <span class="keyword">when</span> <span class="string">'BLUE'</span>;</span><br><span class="line">     default&#123;  $code = <span class="string">''</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有<code>break</code>，<code>continue</code>控制语法</p><h1 id="for和foreach"><a href="#for和foreach" class="headerlink" title="for和foreach"></a>for和foreach</h1><p>这两个通用，作用相同</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (@a) &#123;<span class="keyword">print</span> $_&#125;</span><br><span class="line"><span class="keyword">foreach</span> (@a) &#123;....&#125;</span><br></pre></td></tr></table></figure><p>这里没有指定迭代器，而是使用了默认的<code>$_</code></p><p>也可指定迭代器</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> $i (@a)&#123;<span class="keyword">print</span> $i&#125;</span><br></pre></td></tr></table></figure><p>也可使用c语言风格的语法</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (initialization; test; step) &#123;</span><br><span class="line">    // code block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="while"><a href="#while" class="headerlink" title="while"></a>while</h1><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(condition)&#123;</span><br><span class="line">     <span class="comment"># code block</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用于接受用户输入</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> @parameter = &lt;STDIN&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> perl </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习啊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>perl-基础整理</title>
      <link href="/2019/12/06/perl-%E5%9F%BA%E7%A1%80%E6%95%B4%E7%90%86/"/>
      <url>/2019/12/06/perl-%E5%9F%BA%E7%A1%80%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 不可认识就不可认识吧！斯坦刘夫斯基总能说出一些具有哲理的话：当我沉默着的时候，我觉得充实，我将开口，同时感到空虚。</p></blockquote><p>虽然这些东西之前学了，而且有写笔记，但是还是加深点理解吧。</p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>私有变量声明使用：<code>my</code></p><p>全局变量声明使用：<code>our</code></p><hr><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="字符串引用"><a href="#字符串引用" class="headerlink" title="字符串引用"></a>字符串引用</h2><ol><li><code>&quot;&quot;</code> 等同<code>qq//</code></li><li><code>&#39;&#39;</code>等同 <code>q//</code></li></ol><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line"><span class="string">"declare"</span>;</span><br><span class="line"><span class="string">'declare'</span>;</span><br><span class="line"><span class="keyword">q</span>/declare/;</span><br><span class="line">qq/declare/;</span><br></pre></td></tr></table></figure><ol start="3"><li><code>qw</code>可以去除所有引号，逗号。使用空白分隔</li></ol><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">"a"</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">"b"</span>)</span><br><span class="line"><span class="keyword">qw</span>/a <span class="number">2</span> <span class="number">3</span> b/</span><br></pre></td></tr></table></figure><h2 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h2><p><code>length()</code></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">$a = <span class="keyword">q</span>/have a nice day/;</span><br><span class="line"><span class="keyword">length</span>($a);</span><br></pre></td></tr></table></figure><h2 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h2><p><code>lc()</code>:lower case</p><p><code>uc()</code>:upper case</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">$a=<span class="keyword">q</span>/I Have A Fridend/;</span><br><span class="line"><span class="keyword">lc</span>($a);</span><br><span class="line"><span class="keyword">uc</span>($a);</span><br></pre></td></tr></table></figure><h2 id="位置索引"><a href="#位置索引" class="headerlink" title="位置索引"></a>位置索引</h2><p>指定起始位置，第一次找到的位置</p><p><code>index()</code>：从左往右</p><p><code>rindex()</code>：从右到左</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eg：</span><br><span class="line">$string = <span class="string">"in a word"</span>;</span><br><span class="line">$substring = <span class="string">"A"</span>;</span><br><span class="line"><span class="keyword">index</span>($string,$substring);</span><br><span class="line"><span class="keyword">rindex</span>($string,$substring);</span><br></pre></td></tr></table></figure><h2 id="字符串提取"><a href="#字符串提取" class="headerlink" title="字符串提取"></a>字符串提取</h2><p><code>substr()</code></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">$a = <span class="string">"abstract some word"</span>;</span><br><span class="line"><span class="keyword">substr</span>($a,<span class="number">0</span>,<span class="number">5</span>);<span class="comment"># 索引从0开始</span></span><br><span class="line"><span class="keyword">substr</span>($a,-<span class="number">5</span>);<span class="comment">#可以负向提取</span></span><br></pre></td></tr></table></figure><h2 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h2><p><code>substr()</code></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$a = <span class="string">"abstract some word"</span>;</span><br><span class="line"><span class="keyword">substr</span>($a,<span class="number">0</span>,<span class="number">5</span>,<span class="string">"hehe"</span>);</span><br></pre></td></tr></table></figure><h2 id="字符串加密"><a href="#字符串加密" class="headerlink" title="字符串加密"></a>字符串加密</h2><p><code>crypt()</code></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">password = <span class="string">'encrypt data'</span>;</span><br><span class="line"><span class="keyword">crypt</span>($password);</span><br></pre></td></tr></table></figure><h2 id="字符串反转"><a href="#字符串反转" class="headerlink" title="字符串反转"></a>字符串反转</h2><p><code>reverse()</code></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">$a = <span class="string">"my friends"</span>;</span><br><span class="line"><span class="keyword">reverse</span>($a);</span><br></pre></td></tr></table></figure><h2 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h2><p>使用<code>.</code>操作符，在perl6中改为<code>~</code></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'a'</span>.<span class="string">'b'</span></span><br><span class="line"><span class="string">'a'</span>~<span class="string">'b'</span></span><br></pre></td></tr></table></figure><h2 id="重复操作符"><a href="#重复操作符" class="headerlink" title="重复操作符"></a>重复操作符</h2><p><code>x</code></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'a'</span>x4    <span class="comment">#结果为'aaaa'</span></span><br></pre></td></tr></table></figure><h2 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h2><p><code>sprintf()</code></p><h2 id="去除换行符"><a href="#去除换行符" class="headerlink" title="去除换行符"></a>去除换行符</h2><p><code>chomp()</code>常用于去除交互输入的换行符<code>\n</code></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">chomp</span> <span class="keyword">my</span> @array = &lt;STDIN&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h2><p><code>+</code>，<code>-</code>，<code>*</code>，<code>/</code>，<code>%</code>（取余），<code>**</code>乘方</p><p>如果将数字转换为二进制，将支持跟多的二进制操作bit wise operator</p><p><code>&amp;</code>(and)，<code>|</code>(or)，<code>~</code>(not)，<code>&gt;&gt;</code>(shift right),<code>&lt;&lt;</code></p><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p><code>==</code>，<code>!=</code>，<code>&lt;=&gt;</code>，<code>&lt;</code>，<code>&gt;</code>，<code>&lt;=</code>，<code>&gt;=</code></p><p>其中<code>&lt;=&gt;</code>操作符作用挺大，它能返回三种情况，用于排序中</p><p>$a &gt; $b    #返回1</p><p>$a = $b    #返回0</p><p>$a &lt; $b    #返回-1</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@array = <span class="keyword">qw</span>/<span class="number">1</span> <span class="number">3</span> <span class="number">11</span> <span class="number">21</span> <span class="number">14</span> <span class="number">5</span> <span class="number">7</span>/;</span><br><span class="line">@result = <span class="keyword">sort</span>&#123;$a &lt;=&gt; $b&#125; @array;</span><br><span class="line"><span class="keyword">foreach</span> (@result)&#123;</span><br><span class="line"><span class="keyword">print</span> $_,<span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h3><p><code>eq</code>,<code>ne</code>,<code>cmp</code>,<code>lt</code>,<code>gt</code>,<code>le</code>,<code>ge</code></p><p>其中<code>cmp</code>的作用同上面的<code>&lt;=&gt;</code>，不过这个用来比较字符，用于排序中。</p><hr><h1 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h1><p><code>&amp;&amp;</code>(and)，<code>||</code>(or)，<code>!</code>(not) 常用于控制语法中（if ，while，given）等</p>]]></content>
      
      
      <categories>
          
          <category> perl </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习啊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell-多进程及绑定</title>
      <link href="/2019/12/04/shell-%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%8F%8A%E7%BB%91%E5%AE%9A/"/>
      <url>/2019/12/04/shell-%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%8F%8A%E7%BB%91%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我今天学了些啥？nothing！没精神，好像又到了一轮低迷期。上一次是八月份吧，成天就想着生活的意义是啥。。。。。。</p></blockquote><h1 id="伪多进程"><a href="#伪多进程" class="headerlink" title="伪多进程"></a>伪多进程</h1><p>前几天写了个shell多进程，自我感觉良好。觉得不过如此吗？但是今天好好看了一下，实际上是伪多进程，因为在程序运行时用ps查看了一下，根本就没达到预期的进程数。而且从时间上也可以看出，正常跑下来需要三分钟，开了八个进程结果还是需要一份半。</p><p>所以分析了一下，是短板效应吧。最慢的进程拉低了总的效率，所以说是伪多进程了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 大致是这么个结构</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 接受一个进程数</span></span><br><span class="line">process=$1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 大的循环体</span></span><br><span class="line">cat somefile | while read line</span><br><span class="line">do</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行一个功能并放入后台</span></span><br><span class="line">&#123;</span><br><span class="line">somefunction</span><br><span class="line">&#125; &amp;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 判断如果达到进程数，就等待。等所有都执行完后，计数重置，进入新的循环</span></span><br><span class="line">if [[ $&#123;i:-1&#125; -eq $&#123;process&#125; ]];then</span><br><span class="line">wait</span><br><span class="line">i=0</span><br><span class="line">fi</span><br><span class="line">((i++))</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="wait等待所有"><a href="#wait等待所有" class="headerlink" title="wait等待所有"></a>wait等待所有</h2><p>这里面<code>wait</code>的作用是等待所有的后台程序都执行完，才会继续执行下面的语句。从而达到多进程的目的，不至于无法控制进程数。</p><p>但是这么写就有个问题，那就是放入后台的执行速度并不同，实际情况是大多数都已经执行完了，但是还有一个两个速度很慢，那么只能继续等待。这就是为什么达不到预期的进程数的原因。</p><hr><h1 id="真多进程"><a href="#真多进程" class="headerlink" title="真多进程"></a>真多进程</h1><p>我想要达到的效果是：每时每刻都有预期的进程数在后台执行，先执行完的继续执行下一个，只要保证总的进程数一定就行，有一个动态调整过程。</p><p>所以就用到了以前觉得没啥作用的管道文件。常常使用的都是匿名管道（<code>|</code>），不怎么常用的就是管道文件了，我也就拿来做了个terminal交互的功能（用一个terminal给另一个发送指令），没想到还可以用到多进程中。</p><p>管道嘛，有了输入，会一直等待输出，直到输出成功为止。有了输出的接收端，就会一直等待输入，直到输入数据为止。正是利用了管道输入输出阻塞的这个特性，避免了使用wait带来的全部等待。先创建进程数那么多的管道，等待输出，每循环一次，接受一个输入，将数据读出，放入后台，在这个执行完后，再生成一个管道输入，管道数为定值，所以循环想要开始就得有管道的输入。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 接受一个进程数</span></span><br><span class="line">process=$1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 接受ctrl+c的中断</span></span><br><span class="line">trap "exec 6&lt;&gt;&amp;-;exit 0" 2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成管道文件</span></span><br><span class="line">tmpfifo=/tmp/$$.fifo</span><br><span class="line">mkfifo $tmpfifo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新绑定管道输入输出为6。这个数字不能为0，1，2。因为0，1,2已经被系统占用了，分别为标准输入，标准输出，错误输出</span></span><br><span class="line">exec 6&lt;&gt;$&#123;tmpfifo&#125;</span><br><span class="line">rm -rf $&#123;tmpfifo&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成进程数那么多的管道输入并等待输出</span></span><br><span class="line">for (( i=i;i&lt;=$&#123;process&#125;;i++ ))</span><br><span class="line">do</span><br><span class="line">echo &gt;&amp;6</span><br><span class="line">done </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 大的循环体</span></span><br><span class="line">cat somefile | while read line</span><br><span class="line">do</span><br><span class="line"><span class="meta">#</span><span class="bash"> 读取一个输入，并放入后台</span></span><br><span class="line">read -u6</span><br><span class="line">&#123;</span><br><span class="line">somefunction</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行完后再次生成一个管道</span></span><br><span class="line">echo &gt;&amp;6</span><br><span class="line">&#125; &amp;</span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span><span class="bash"> 等待所有进程结束</span></span><br><span class="line">wait</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解除绑定，关闭6描述符</span></span><br><span class="line">exec 6&gt;&amp;-</span><br></pre></td></tr></table></figure><p>这里我搞不懂为什么要把fifo文件删除掉，删除了为什么不影响绑定？</p><p>这样运行之后，使用ps查看确实是保持着预期的进程数，而且在开了八个进程后时间由三分多钟缩短为20多秒。so it is true multi process</p><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">/dev/null<span class="comment">#标准输出写入/dev/null</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">/dev/null 2&gt;&amp;1<span class="comment">#标准错误重定向标准输出，标准输出再写入/dev/null</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&amp; /dev/null<span class="comment">#上面的简写</span></span></span><br><span class="line"></span><br><span class="line">n&lt;&amp;- #将 n 号输入关闭</span><br><span class="line">&lt;&amp;- #关闭标准输入（键盘）</span><br><span class="line"><span class="meta">n&gt;</span><span class="bash">&amp;- <span class="comment">#将 n 号输出关闭</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&amp;- <span class="comment">#将标准输出关闭</span></span></span><br></pre></td></tr></table></figure><p>上面的输入，输出重定向,只对当前那条指令是有效的。如果需要在绑定之后，接下来的所有命令都支持的话。就需要用exec命令永久绑定。</p><hr><h1 id="exec绑定"><a href="#exec绑定" class="headerlink" title="exec绑定"></a>exec绑定</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec 文件描述符[n] &lt;或&gt; file或文件描述符或设备</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 例如：将标准输出绑定到文件</span></span><br><span class="line">exec 1&gt;test.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 绑定后在终端输入命令就没有输出了，输出全部重定向到了test.txt文件中</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 恢复,将1绑定到2.因为2和1一样都是将信息输出到屏幕</span></span><br><span class="line">exec 1&gt;&amp;2</span><br></pre></td></tr></table></figure><p>利用这个特性，可以做许多很多奇特的事，比如我们在脚本中需要将许多输出写入一个文件，之前不是需要在这么写吗<code>echo &quot;something&quot; &gt;/log/somelogfile</code>,<code>grep &#39;someword&#39; somefile &gt;/log/somelogfile</code>。是不是有点麻烦，现在可以把标准输出重定向到文件中，再也不需要写重定向了，标准输出自动重定向，很神奇。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">eg：</span><br><span class="line">exec 1&gt;/log/somelogfile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这样不需要再写重定向了，它会自动重定向的</span></span><br><span class="line">echo "hello joyce"</span><br><span class="line">echo "i like iu"</span><br><span class="line">ls -l | awk '&#123;print $3&#125;'</span><br><span class="line">...</span><br><span class="line"><span class="meta">#</span><span class="bash"> 最后再恢复就ok了</span></span><br><span class="line">exec 1&gt;&amp;2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>perl-读取</title>
      <link href="/2019/12/02/perl-%E8%AF%BB%E5%8F%96/"/>
      <url>/2019/12/02/perl-%E8%AF%BB%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<blockquote><p>好久没有学perl了，最近python基础已经学完了。然后在学模块，模块也不是一会能弄懂的，所以就抽空学下perl，因为最近发现shell的一个缺点，就是不能跨平台，而我想写的脚本又要支持windows，所以fighting！</p></blockquote><p>夸奖与吐槽：其实shell是真的好，写习惯了shell，再去用python或者perl时，就觉得有点麻烦。比如说读文件，修改文件，格式化等等cat，grep，sed，awk，wc，tr，xargs等等用的真的是舒服，组合一下，一两行就能搞定很多事情，根本不需要去写个函数啥的。但是在写一些较大的数据处理时，还是会觉得shell有些力不从心，比如说，就我了解的shell，就一个数组，然后没了。在涉及二维数组的时候吧，有时候用的确实麻烦，而且最多写写多进程，也没法写多线程，再一个就是不能跨平台了。好了，本来是perl的，怎么说了这么多shell</p><h1 id="读取输入"><a href="#读取输入" class="headerlink" title="读取输入"></a>读取输入</h1><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将标准输入读入到标量变量中</span></span><br><span class="line">$variables = &lt;STDIN&gt;</span><br><span class="line"><span class="keyword">my</span> $variables = &lt;STDIN&gt;</span><br><span class="line"><span class="comment"># 将标准输入读入到hash中</span></span><br><span class="line">@variables = &lt;STDIN&gt;</span><br><span class="line"><span class="keyword">my</span> @variables = &lt;STDIN&gt;</span><br></pre></td></tr></table></figure><p>使用<code>my</code>表示私有变量。这里使用到了特殊的文件句柄<code>STDIN</code>，而符号<code>&lt;&gt;</code>被称为diamond operation，可以读取所有的输入（包括文件）。而<code>STDIN</code>就是默认的一个标准输入的句柄，句柄可以理解为一个变量，用来操作传入的数据。</p><p>scalar读取的就是一个字符串，回车结束。可以用函数<code>chomp()</code>来去掉换行符，括号不是必须的</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line"><span class="keyword">chomp</span>($a = &lt;STDIN&gt;);</span><br><span class="line"><span class="keyword">chomp</span> $a = &lt;STDIN&gt;;</span><br></pre></td></tr></table></figure><p>array读取的是一个数组，ctrl+d结束。之前写shell的时候，读取了一些列参数，但是想如果读取到-p（指定进程数），这是就自动加上一个-q参数，表示quiet。但是shell读到的数据并不是一个列表，所以不能将这个参数加上去。除非写个循环转列表，但是有点麻烦，如果用perl来写就简单多了。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这么写是无法得到结果的，why？</span></span><br><span class="line"><span class="keyword">my</span> @a = &lt;STDIN&gt;;</span><br><span class="line"><span class="keyword">foreach</span> (@a)&#123;</span><br><span class="line"><span class="keyword">if</span>($_ eq <span class="string">'-p'</span>)&#123;</span><br><span class="line"><span class="keyword">push</span> @a,<span class="string">'-q'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">print</span>(@a);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这就体现了去掉换行符的重要性。默认行尾有一个换行符，去掉就行了，只不过输出有点不好看。</span></span><br><span class="line"><span class="keyword">chomp</span>(<span class="keyword">my</span> @a = &lt;STDIN&gt;);</span><br><span class="line"><span class="keyword">foreach</span> (@a)&#123;</span><br><span class="line">    <span class="keyword">if</span>($_ eq <span class="string">'-p'</span>)&#123;</span><br><span class="line">        <span class="keyword">push</span> @a,<span class="string">'-q'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">print</span>(@a);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当然了，也可以不去掉换行符，我们在匹配时加上不就好了吗,不过要使用双引号</span></span><br><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"><span class="keyword">use</span> warnings;</span><br><span class="line"><span class="keyword">use</span> strict;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> @a = &lt;STDIN&gt;;</span><br><span class="line"><span class="keyword">foreach</span> (@a)&#123;</span><br><span class="line">    <span class="keyword">if</span>($_ eq <span class="string">"-p\n"</span>)&#123;</span><br><span class="line">        <span class="keyword">push</span> @a,<span class="string">'-q'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">print</span>(@a);</span><br></pre></td></tr></table></figure><h1 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h1><h2 id="open-函数"><a href="#open-函数" class="headerlink" title="open()函数"></a><code>open()</code>函数</h2><p><code>open(filehandle,mode,filename)</code></p><ul><li><code>Filehandle</code>that associates with the file</li><li><code>Mode</code>: you can open a file for reading, writing or appending.</li><li><code>Filename</code>: the path to the file that is being opened.</li></ul><table><thead><tr><th>mode</th><th>operand</th><th>description</th></tr></thead><tbody><tr><td>read</td><td>&lt;</td><td>只读</td></tr><tr><td>write</td><td>&gt;</td><td>文件存在会覆盖，不存在则创建</td></tr><tr><td>append</td><td>&gt;&gt;</td><td>追加</td></tr></tbody></table><h2 id="close-函数"><a href="#close-函数" class="headerlink" title="close()函数"></a><code>close()</code>函数</h2><p>文件打开之后就需要关闭，如果忘记关闭，perl也会自动关闭。但是这样不好，你懂得。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> warnings;</span><br><span class="line"><span class="keyword">use</span> strict;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $filename = <span class="string">'./my.pl'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span>(FILE, <span class="string">'&lt;'</span>, $filename) <span class="keyword">or</span> <span class="keyword">die</span> $!;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(<span class="string">"file: $filename\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(&lt;FILE&gt;)&#123;</span><br><span class="line">    <span class="keyword">print</span>($_)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">close</span>(FILE);</span><br></pre></td></tr></table></figure><p><strong>句柄要大写</strong>，小写的话虽然会执行，但是会报错，而且需要使用引号括起来。</p><p><code>or die $!</code>的写法，如果文件不存在则给出错误提示。</p><ul><li>First, we used the <code>open()</code> function to <a href="http://www.perltutorial.org/perl-open-file/" target="_blank" rel="noopener">open a file</a> for reading.</li><li>Second, the syntax <code>while()</code> is equivalent to <code>while(defined($_ =  )</code><em>.</em> We read a line from a file and assigned it to the special variable <code>$_</code><em>.</em> The loop is terminated when the end of the file reached.</li><li>Third, we displayed each line of the file by passing the variable <code>$_</code> to the <code>print</code>function.*</li></ul><h1 id="简化"><a href="#简化" class="headerlink" title="简化"></a>简化</h1><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"><span class="keyword">use</span> warnings;</span><br><span class="line"><span class="keyword">use</span> strict;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span>(&lt;&gt;)&#123;</span><br><span class="line">   <span class="keyword">print</span> $_;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行它既可以读取标准输入，也可以在后面输入文件名，来读取多个文件内容。</p><p>这就是<code>&lt;&gt;</code>diamond operation的魅力。</p><hr><p>无论是在perl还是python中，读取一个文件都是需要写函数来获得的，还需要关闭，看着比shell复杂，实则这 告诉了我们一个道理，读取文件本来就不是很随意的一件事，就好像shell写多了，忽略了这一点。我发现不论是我写的脚本，还是其它人写的。完全没有考虑到效率问题。频繁的读取关闭文件是一件很浪费时间的事，因为硬盘的读取速度太慢，这也是为什么我们写的脚本执行慢的一个原因吧。所以要将需要从文件中读取的数据一次性读入内存中，然后使用。</p>]]></content>
      
      
      <categories>
          
          <category> perl </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习啊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell-不定参数</title>
      <link href="/2019/11/30/shell-%E4%B8%8D%E5%AE%9A%E5%8F%82%E6%95%B0/"/>
      <url>/2019/11/30/shell-%E4%B8%8D%E5%AE%9A%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这两天在写shell脚本，因为接到了王老板的安排。先是让我写了个触发器，然后就是将之前别人的脚本优化一下。其实我来这里没多久就把那个脚本重写了，因为之前的那个输出真的很乱，看的我眼睛疼。虽然已经有现成的了，但是距离王老板的要求（简洁、输出重要信息、屏蔽没有的信息），我自认为还差点意思。</p></blockquote><p>刚开始让我写个触发器的时候，我一脸懵，触发器是啥？然后王老板给我找了个别人写的模板，让我对着学一下。哈哈，怕给我压力，然后叫我随便玩一下，说也不重要。这么长时间了，觉得王老板这个人挺好的，等我以后离开这个地方后，我觉得真的还挺舍不得的。学了之后发现和存储过程一样简单，然后一会就写完了，因为之前学了存储过程，里面涉及取变量的操作，做起来就觉得挺简单的。不过用到了一个新的函数<code>sys.guid()</code>用来生成唯一的标识符，为了避免重复操作导致不能辨别嘛。</p><p>然后就是改这个shell脚本了，之前我改了一下，主要是改格式，之前输出没对齐，看着特别乱。然后加了一些上限值的警告，如果正常的话，会在后面输出<code>bingo！</code>哈哈。但是还是会在屏幕上输出很多信息，也就是刷屏了。然后就是这个上限警告值是写死在里面的，所以这次优化，主要是加入这些功能：</p><ol><li>help信息</li><li>-s 数字 来设置size的上限</li><li>-m 数字 来设置数量上限</li><li>-q 来设置quiet/silent模式，即不刷屏，只显示最后结果。当然想看这些信息的话，就不加这个参数咯</li></ol><p>两个点：</p><ul><li>所有这些都需要通过参数传递进去</li><li>但是如果没传参数也要有默认值</li></ul><hr><h1 id="不用if判断的赋值"><a href="#不用if判断的赋值" class="headerlink" title="不用if判断的赋值"></a>不用if判断的赋值</h1><p><code>:-</code> or<code>-</code> 如果值为空则赋值</p><p><code>:+</code>or<code>+</code> 如果值非空就赋值</p><p>也可以理解为赋默认值，其实本意是先判断再赋值。按照原意理解的话，就可以省去一个if判断变量是否为空的写法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;variable:-值&#125;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">or</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;variable-值&#125;</span></span><br><span class="line">eg：</span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;a:-2&#125;<span class="comment">#a为空则赋值2</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;b-3&#125;<span class="comment">#b为空则赋3</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;variable:+值&#125;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">or</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;variable+值&#125;</span></span><br><span class="line">a=10；b=20</span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;a:+2&#125;<span class="comment">#a值不为空，则赋值2</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;b+2&#125;<span class="comment">#b值不为空，则赋值2</span></span></span><br></pre></td></tr></table></figure><h1 id="三目运算"><a href="#三目运算" class="headerlink" title="三目运算"></a>三目运算</h1><p>程序写多了，才会发现这些语法的重要性。就好比python的lambda函数，对于一些简单的函数来说简直是好用。这里要说的是shell中的三目运算，其实好多if判断很简单，仅仅是做一个判断加一个赋值，有时候就觉得真的没必要写一个<code>if...then....fi</code>出来。但是可惜的shell的三目运算仅仅支持数字。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> a是否为20，是返回1，否则返回2</span></span><br><span class="line"><span class="meta">$</span><span class="bash">((a==20?1:2))</span></span><br><span class="line"></span><br><span class="line">a=20</span><br><span class="line"><span class="meta">#</span><span class="bash">将返回值赋值给c</span></span><br><span class="line">c=$((a==20?1:2))</span><br></pre></td></tr></table></figure><h1 id="shell中传参"><a href="#shell中传参" class="headerlink" title="shell中传参"></a>shell中传参</h1><p>我之前想的是把所有传递进去的参数作为一个列表或者字符串。因为一个参数后面要跟一个数字，为了取到这个数字，我用的是字符串截取。因为我用<code>shift</code>老是取不到想要的值。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">list=$*</span><br><span class="line">for i in $*</span><br><span class="line">do</span><br><span class="line">case $i in</span><br><span class="line">-s)</span><br><span class="line"><span class="meta">#</span><span class="bash">字符串截取，将左边到-s的字符（包括-s）全部忽略</span></span><br><span class="line">size=`echo $&#123;list#*-s&#125; | awk '&#123;print $1&#125;'`</span><br><span class="line">;;</span><br><span class="line">-m)</span><br><span class="line">number=`echo $&#123;list#*-m&#125; | awk '&#123;print $1&#125;'`</span><br><span class="line">;;</span><br><span class="line">-h | --help)</span><br><span class="line">echo "help manual"</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span><span class="bash">如果传入参数为空就赋值</span></span><br><span class="line">echo $&#123;size：-888&#125;</span><br><span class="line">echo $&#123;number：:666&#125;</span><br></pre></td></tr></table></figure><p>上面这么写没问题，本来我之前想用shift取参数的，毕竟学过perl嘛，perl就是这么做的，但是我没成功。</p><p>是我太愚蠢了：），我每次都是shift一个参数，结果第二个参数就要shift两个，第三个参数又只要shift一个参数。如果传入参数的顺序不变，那没问题。但是。。。。。。谁能保证参数顺序不变，而且程序也不能设计的这个样子吧，我自己都看不下去了。所以傻傻的我google到了正确写法：<strong>一次shift两个参数</strong> <code>shift 2</code></p><p>虽然我不知道可以一次可以shift两个参数，但是我想都不敢想，说明我傻。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">for i in $*</span><br><span class="line">do</span><br><span class="line">    case $i in</span><br><span class="line">        -s)</span><br><span class="line">            size=$&#123;2:-888&#125;</span><br><span class="line">            #一次shift两个参数，将-s和它的数字都去掉了。后面的就一样了</span><br><span class="line">            shift 2</span><br><span class="line">            ;;</span><br><span class="line">        -m)</span><br><span class="line">            number=$&#123;2:-666&#125;</span><br><span class="line">            shift 2</span><br><span class="line">            ;;</span><br><span class="line">        -h | --help)</span><br><span class="line">            echo "help manual"</span><br><span class="line">            ;;</span><br><span class="line">        *)</span><br><span class="line">            ;;</span><br><span class="line">    esac</span><br><span class="line">done</span><br><span class="line">echo $size</span><br><span class="line">echo $number</span><br></pre></td></tr></table></figure><p>这么写多帅啊，不需要字符串截取，不需要awk，不需要子进程，速度也快多了。</p><p><code>shift</code>说了这么多，还没写它的作用，它就好比从栈中（pop）取数据。不过是从左边取，不带参数的话就是一次取一个参数，取出来的参数是不会放回去的。不过<code>pop</code>有<code>push</code>可以放回去，但是shell中<code>shift</code>为什么没有<code>unshift</code>呢？perl中就有啊。</p><hr><p>不可例外的，还是要写一下这几天的总结：也算是过失吧</p><p>第一个：在写shell脚本的时候，因为要重复调用两次相同的代码，所以我就想着用一个函数写吧，这样简单不少。但是我却没考虑到写成了函数之后，它中间的变量问题。如果在函数外已经定义了变量，那好，一点问题都没有。但问题来了，他那个代码中竟然需要接受一个程序外部传进来的参数<code>$1</code>,所以始终是运行不正常的。后来才发现了这个问题，对于shell函数来说，<code>$1</code>代表的是传给函数的第一个参数：例如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function getvar()&#123;</span><br><span class="line">echo "$1 is the args of function" </span><br><span class="line">&#125;</span><br><span class="line">getvar 666</span><br></pre></td></tr></table></figure><p>最终这个<code>$1</code>接受到的就是666。所以它接受的并不是函数外部传进来的参数。所以这个教训的总结就是变量如果是从程序外部传进来的，二话不说先把这些变量保存下来，所有的都保存也好<code>$*</code>或者<code>$@</code>，一个一个的保存也好<code>$1</code>,<code>$2</code>。这样就不会出现这个问题了，这也算是一个良好的编程习惯吧。</p><p>第二个：如果是改写别人之前写的脚本，不仅要把自己的那部分功能实现，还要弄清楚别人之前写的意图，因为你改了之后就不能保证别人的还一样正确啊，比如说shell环境问题，变量问题，如果是函数的话还要考虑函数位置问题，各个模块的逻辑问题等等。总之不要只看自己写的那部分，就可以提高正确率，减少不必要的纠错时间。</p>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git使用</title>
      <link href="/2019/11/30/git%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/11/30/git%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>好像很久之前使用过git，但是不怎么常用，所以也快忘光了，这次决定写写笔记。还有就是将自己写的脚本用git管理，并托管到github上去。相信就会用的比较熟了。</p></blockquote><h1 id="git作用"><a href="#git作用" class="headerlink" title="git作用"></a>git作用</h1><ul><li><p>git是咱linux的创始人linus写出来的一个版本控制管理软件。它当然主要作用就是帮助我们管理文件了，优点就是无论修改了啥它都会有一个记录，而且我们可以回退到修改之前，并不需要备份操作。当然了它还可以多人协作，不过这功能估计一时半会我也用不上。</p></li><li><p>还有一点就是git就是一个运行在本地的软件而已，并不需要联网，它就可以帮我们管理文件了，初始化后会在目录下创建一个<code>.git</code>的目录，是它用来进行版本控制的。不要把它和github搞混了。</p></li><li><p>它与github的关系就是，我们可以通过配置，将本地的文件push到github上面去，相当于云端备份了，当然了传到github上面去后，就可以给别人看了。别人pull后就和我们拥有的一模一样，这就是所谓的多人协作。</p></li></ul><hr><h1 id="git使用"><a href="#git使用" class="headerlink" title="git使用"></a>git使用</h1><p>git的使用除了pull与push到github上之外，大多数命令都是用来在本地操作的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">git init#初始化</span><br><span class="line">git status#查看状态</span><br><span class="line">git checkout#撤销修改</span><br><span class="line">git add #添加到暂存区</span><br><span class="line">git restore#从暂存区撤销到修改状态</span><br><span class="line">git checkout#撤销修改</span><br><span class="line">git commit#添加修改到分支</span><br><span class="line">git log#查看修改log</span><br><span class="line">git reflog#查看所有log</span><br><span class="line">git reset#版本回退</span><br><span class="line"></span><br><span class="line">git branch#查看分支</span><br><span class="line">git branch branchname#创建分支</span><br><span class="line">git checkout branchname#进入分支</span><br><span class="line">git checkout -b branchname#创建分支并进入分支</span><br><span class="line">git merge branchname#合并分支</span><br><span class="line">git branch -d branchname#删除分支</span><br><span class="line"></span><br><span class="line">git tag#显示标签</span><br><span class="line">git tag tagname#创建标签</span><br><span class="line">git tag -d ragname#删除标签</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>在一个想要使用git来进行版本控制的目录下运行这个命令就可以了。它会在目录下生成一个<code>.git</code>的目录，里面的文件我们一般都不需要改，因为那是它记录我们的所有操作的。这个目录既可以是新建的，也可以是已经有文件的，都没有关系了。</p><h2 id="添加name和email"><a href="#添加name和email" class="headerlink" title="添加name和email"></a>添加name和email</h2><p>其实不添加也行，添加了在多人协作时，可以找到你嘛</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name 'somename'</span><br><span class="line">git config --global user.email 'xxxxx@qq.com'</span><br></pre></td></tr></table></figure><h2 id="加入git管理"><a href="#加入git管理" class="headerlink" title="加入git管理"></a>加入git管理</h2><p>前面已经初始化git了，接下来就是告诉git那些东西是要交给它管理的。</p><ul><li><p>这个是使用的最多的一个命令了，用来查看现在的状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure></li><li><p>然后交给git管理</p><p>可以加入目录，文件等</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add 文件/目录</span><br></pre></td></tr></table></figure><p>也可以将所有东西一次加入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add *</span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line">git add .</span><br></pre></td></tr></table></figure></li><li><p>凡是新增文件之后都需要将文件add给git repository，否则git的状态就是一个叉叉，看着不舒服。</p></li></ul><h2 id="提交修改"><a href="#提交修改" class="headerlink" title="提交修改"></a>提交修改</h2><p>当我们对文件或者目录做出了修改之后，就需要对修改进行一次提交</p><ul><li><p>可以查看一下状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure></li><li><p>看到有对文件的修改，如果我们想看看具体修改了那些东西可以使用diff</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure></li><li><p>进行提交，对子目录的修改等都视为git repository操作，所有随便哪里都可以提交</p><ul><li><p>可以添加指定的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touch 1.txt</span><br><span class="line">git add 1.txt</span><br><span class="line">git commit 1.txt -m 'add a new file'</span><br></pre></td></tr></table></figure><p><code>-m</code>对这次提交的一个说明，如果不写的话，他也会打开一个vi编辑器让你输入。当然了，我的电脑上没有安装vi，所以还是写<code>-m</code>比较简单。否则它也打不开啊</p></li><li><p>提交所有</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git commit * -m 'add a new file'</span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line">git commit . -m 'add a new file'</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="指定忽略文件"><a href="#指定忽略文件" class="headerlink" title="指定忽略文件"></a>指定忽略文件</h2><p>由于我们每次修改了之后都是使用星号，不会去指定那个文件，然后进行提交。所以如果有不想提交的目录或者文件怎么办，当然是可以的。我们可以告诉git，那些文件或者目录你不要去管。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch .gitignore</span><br></pre></td></tr></table></figure><p>然后将要忽略的目录或者文件名写到里面就行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim .gitignore</span><br><span class="line">1.txt</span><br><span class="line">2.txt</span><br><span class="line">Music</span><br></pre></td></tr></table></figure><h2 id="版本回退与恢复"><a href="#版本回退与恢复" class="headerlink" title="版本回退与恢复"></a>版本回退与恢复</h2><p>既然是版本控制，那么回退就是它的主要功能了</p><ul><li><p>查看历史版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure></li><li><p>上面是包含了详细信息，如果只看简单的信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --pretty=oneline</span><br></pre></td></tr></table></figure></li><li><p>回退到上一个版本使用<code>HEAD^</code>，上上个<code>HEAD^^</code>，回退10个版本<code>HEAD～5</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure></li><li><p>这样找到回退的几个版本还行，但是如果需要回退的版本比较多，当然就不可能一个一个去数了，<code>git reflog</code>可以查看版本数字，以及唯一索引</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure></li><li><p>比如要回退到某一版本以前，可以找到对应的数字标示，比如HEAD@{20}</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD@&#123;20&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者使用这个唯一索引，比如为</span></span><br><span class="line">git reset --hard 4761129</span><br></pre></td></tr></table></figure></li></ul><hr><p>如果回退之后又想恢复怎么办，只要指定唯一的标识符，就可以恢复。</p><ul><li><p>查看log</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure></li><li><p>随便那个版本，只要指定唯一标示，都可恢复</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">同上，上面已经写过了</span></span><br><span class="line">git reset --hard HEAD@&#123;20&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者使用这个唯一索引，比如为</span></span><br><span class="line">git reset --hard 4761129</span><br></pre></td></tr></table></figure></li></ul><h2 id="正确添加以及恢复"><a href="#正确添加以及恢复" class="headerlink" title="正确添加以及恢复"></a>正确添加以及恢复</h2><ul><li><p>修改了文件还未添加到暂存区</p><ul><li><code>git checkout</code>将修改的恢复</li></ul></li><li><p><code>git add</code>将修改后的文件添加到了暂存区stage</p><ul><li><code>git restore</code>从暂存区取回</li></ul></li><li><p><code>git commit</code>将暂存区文件添加到分支master</p><ul><li><code>git reset</code>版本恢复</li></ul></li></ul><p>注意点：如果修改了文件，并没有add到暂存区，直接commit后，就会直接添加到分支了，所以只能用git reset来版本回退了</p><h1 id="连接github"><a href="#连接github" class="headerlink" title="连接github"></a>连接github</h1><p>生成连接的ssh密匙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>然后将 <code>id_rsa.pub</code>中的内容复制到github的密匙中</p><p>与github连接：</p><ul><li><h3 id="create-a-new-repository-on-the-command-line"><a href="#create-a-new-repository-on-the-command-line" class="headerlink" title="create a new repository on the command line"></a>create a new repository on the command line</h3><p>本地先新建git仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echo "# dailyScript" &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m "first commit"</span><br><span class="line">git remote add origin https://github.com/ulomo/dailyScript.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li></ul><ul><li><h3 id="push-an-existing-repository-from-the-command-line"><a href="#push-an-existing-repository-from-the-command-line" class="headerlink" title="push an existing repository from the command line"></a>push an existing repository from the command line</h3><p>本地已近有git仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/ulomo/dailyScript.git</span><br><span class="line">git push -u origin master</span><br><span class="line"><span class="meta">#</span><span class="bash">输入github的用户名和密码就可以成功推送了</span></span><br><span class="line">Username for 'https://github.com': ulomo</span><br><span class="line">Password for 'https://ulomo@github.com': </span><br><span class="line">Enumerating objects: 79, done.</span><br><span class="line">Counting objects: 100% (79/79), done.</span><br><span class="line">Delta compression using up to 8 threads</span><br><span class="line">Compressing objects: 100% (71/71), done.</span><br><span class="line">Writing objects: 100% (79/79), 10.26 KiB | 700.00 KiB/s, done.</span><br><span class="line">Total 79 (delta 24), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (24/24), done.</span><br><span class="line">To https://github.com/ulomo/dailyScript.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line">Branch 'master' set up to track remote branch 'master' from 'origin'.</span><br></pre></td></tr></table></figure></li></ul><h1 id="从github克隆已近存在的仓库"><a href="#从github克隆已近存在的仓库" class="headerlink" title="从github克隆已近存在的仓库"></a>从github克隆已近存在的仓库</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone</span><br></pre></td></tr></table></figure><h1 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h1><ul><li><p>新建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch 分支名字</span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line">git checkout -b 分支名字</span><br></pre></td></tr></table></figure></li><li><p>切换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 分支名字</span><br></pre></td></tr></table></figure></li><li><p>查看分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure></li><li><p>合并分支</p><p>这种合并不会形成一个commit，(fast forward模式)所以如果删掉分支之后，分支是不可修复的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge 分支名字</span><br></pre></td></tr></table></figure><p>这种就会形成一个commit，即使把分支删了，仍然可以回退分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge --no-ff -m 'merge branch'</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>删除分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d 分支名字</span><br></pre></td></tr></table></figure></li></ul><h1 id="分支使用原则及解决冲突"><a href="#分支使用原则及解决冲突" class="headerlink" title="分支使用原则及解决冲突"></a>分支使用原则及解决冲突</h1><ul><li><p>创建的master分支用来merge其他分支</p></li><li><p>主要工作都在其它创建的分支上，如果也修改了master，提交的时候就会出现矛盾，太麻烦了也。</p></li><li><p>只有一个master分支和另外一个副分支的话，副分支修改，主分支merge，相安无事。</p></li><li><p>如果有多个分支，那么就会涉及冲突问题。</p><ul><li><p>首先需要明白merge到底做了些啥：</p><ol><li><p>如果只有一个分支，可以理解为HEAD指针位置发生了变化</p></li><li><p>如果存在多分支，可以理解为master需要融合你想要提交给master的东西的（自己分支可以不包含全部master分支，master分支也不一定就包含全部自己的部分），所有相同的不同的在就全部包含这次子分支提交的信息中，至于说提交过后master又融合了其它分支信息造成的与自己分支信息不同，这就不是master该管的了，因为自己的commit已经提交，也与master融合。</p></li></ol></li><li><p>遇到冲突怎么解决：</p><p>冲突是什么造成的，就是内容不同造成的，那么融合做了什么，无非就是合并信息，那么只要把不同的地方修改成相同的。这些不同的信息，会有提示，按照提示进行修改就行。修改完后，再提交修改，这就等于进行了融合。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m 'merge branch add/change some information'</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="将当前分支临时存储起来"><a href="#将当前分支临时存储起来" class="headerlink" title="将当前分支临时存储起来"></a>将当前分支临时存储起来</h1><p>如果分支内容没有完成，还不能提交。而我们又需要到别的分支去，那我们就要将当前状态存储起来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure><p>查看存储的stash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure><p>重新读取存储的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git stash apply stash@&#123;数字&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后手动删除存储的状态</span></span><br><span class="line">git stash drop</span><br></pre></td></tr></table></figure><p>下面这种方式就可以取出内容的同时，删掉stash状态，因为用了<code>pop</code>啊</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash pop</span><br></pre></td></tr></table></figure><h1 id="远程多人协作的push与pull"><a href="#远程多人协作的push与pull" class="headerlink" title="远程多人协作的push与pull"></a>远程多人协作的push与pull</h1><p>查看远程信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p>推送到远程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push origion master</span><br><span class="line"><span class="meta">#</span><span class="bash">也可以推送其它分支,比如创建了一个<span class="built_in">test</span>的分支</span></span><br><span class="line">git push origion test</span><br></pre></td></tr></table></figure><p>远程克隆到本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 地址</span><br></pre></td></tr></table></figure><p>这样克隆下来的，只能看到master分支信息。</p><p>使用远程的非master分支，比如test分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b test origin/test</span><br></pre></td></tr></table></figure><p>这样修改之后push也是无法成功的，因为可能别人以及提交过了。</p><p>所以先将最新的版本pull下来，直接pull也是会报错的，需要指定使用的分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream test origin/test</span><br></pre></td></tr></table></figure><p>再pull下来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><p>然后在本地将master分支与test分支的冲突解决掉，才能push成功。</p><h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><p>为什么需要标签呢？有commit不就行了吗？也不是说不行，但是想想我们是不是经常会对分支进行提交，对master进行合并，这样的话，commit信息就比较多了。而标签就是在某个特定时候对整个版本库的一个标记。比如版本发布使用的v1.0，v2.0。但是如果标签打的和commit一样多的话，也就没有意义了。</p><ul><li><p>进入要打标签的分支，一般是master</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure></li><li><p>打标签</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag [-a] 标签 [-m] 说明#-a指定标签名</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag [-s] 标签 [-m] 说明#-s用私匙签名标签</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v1.0 -m '版本1'</span><br><span class="line">git tag -s v1.0 -m '版本1'</span><br></pre></td></tr></table></figure></li><li><p>查看标签</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show v1.0</span><br></pre></td></tr></table></figure></li><li><p>对之前的某个commit打标签</p><ul><li><p>查看commit编号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure></li><li><p>打标签</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v1.0 编号 -m '版本1'</span><br></pre></td></tr></table></figure></li></ul></li><li><p>删除标签</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git tag -d 标签名</span><br><span class="line">eg：</span><br><span class="line">git tag -d v1.0</span><br></pre></td></tr></table></figure></li><li><p>push标签到远程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">推送所有标签</span></span><br><span class="line">git push origin --tags</span><br><span class="line"><span class="meta">#</span><span class="bash">推送特定标签</span></span><br><span class="line">git push origin 标签名</span><br><span class="line">eg：</span><br><span class="line">git push origin v1.0</span><br></pre></td></tr></table></figure></li><li><p>删除远程标签</p><ul><li><p>先删除本地标签</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d v1.0</span><br></pre></td></tr></table></figure></li><li><p>在同步远程进行删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push origin :refs/tags/标签名</span><br><span class="line">eg：</span><br><span class="line">git push origin :refs/tags/v1.0</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="命令设置别名"><a href="#命令设置别名" class="headerlink" title="命令设置别名"></a>命令设置别名</h1><p>如果觉得命令太难记，还可以设置别名。例如将commit设置为cm</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.cm commit</span><br></pre></td></tr></table></figure><h1 id="搭建自己的git服务器"><a href="#搭建自己的git服务器" class="headerlink" title="搭建自己的git服务器"></a>搭建自己的git服务器</h1><ol><li><p>在服务器上安装git</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure></li><li><p>加入git用户，目的是权限管理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd git -m /home/git</span><br></pre></td></tr></table></figure></li><li><p>导入允许连接的ssh key认证密匙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br><span class="line">touch ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>将需要连接git仓库的电脑的<code>~/.ssh/id_rsa.pub</code>中的信息放入上面创建的文件中</p></li><li><p>创建git仓库目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 随便创建个目录</span></span><br><span class="line">mkdir ~/git_repository</span><br><span class="line">cd ~/git_repository</span><br><span class="line"><span class="meta">#</span><span class="bash"> 给仓库取个名字</span></span><br><span class="line">git init --bare somename.git</span><br></pre></td></tr></table></figure></li><li><p>将权限全部给到git</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R git:git somename.git</span><br></pre></td></tr></table></figure></li><li><p>禁止shell登录git，为了安全</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改shell为git-shell</span></span><br><span class="line">eg:</span><br><span class="line">git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</span><br></pre></td></tr></table></figure></li><li><p>克隆仓库到自己电脑</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@server:/home/git/git_repository/somename.git</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-目录文件操作</title>
      <link href="/2019/11/28/python-%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/11/28/python-%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在写shell脚本时，使用最多的便是对文件的操作或者对输入输出的操作了：从一个文件或输出中获取某些数据，然后将得到的数据又写入文本或者数据库中。所以对文件的操作是一个很重要的操作。</p></blockquote><h1 id="os"><a href="#os" class="headerlink" title="os"></a>os</h1><p><code>os</code>operation system即为操作系统模块，可以用来在系统目录中移动</p><p><code>os.mkdir()</code>创建目录</p><p><code>os.chdir()</code>移动</p><p><code>os.listdir()</code>列出目录下文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">dir = <span class="string">'/home/narcissus/test'</span></span><br><span class="line">os.mkdir(dir,mode=<span class="number">755</span>)</span><br><span class="line">os.chdir(dir)</span><br><span class="line">list = os.listdir()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><h1 id="open"><a href="#open" class="headerlink" title="open"></a>open</h1><p>这是一个python的内置函数，所以无需导入什么模块就可以使用了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">file = open(<span class="string">'test.txt'</span>,mode=<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> file:</span><br><span class="line">    print(i)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p>以只读模式打开一个文件，如果有中文要使用<code>utf-8</code>编码格式然后获取里面的数据打印出来，最后关闭文件。</p><p>更多时候怕忘记关闭文件而是使用的下面这种写法。它会自动关闭文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'test.txt'</span>,mode=<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> file:</span><br><span class="line">        print(i)</span><br></pre></td></tr></table></figure><p>mode：</p><pre><code>- `r` 只读- `w` 写文件，如果存在则清空文件- `x` 创建文件并打开文件- `a` 写文件，append- `b` 二进制- `t` 文本，默认- `+` - `U`</code></pre><p><code>\n</code> 等于输入了换行符，否则会写到一行去</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'test.txt'</span>,mode=<span class="string">'a+'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">'hello\n'</span>)</span><br><span class="line">    file.write(<span class="string">'world\n'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-屏幕色温调节</title>
      <link href="/2019/11/28/linux-%E5%B1%8F%E5%B9%95%E8%89%B2%E6%B8%A9%E8%B0%83%E8%8A%82/"/>
      <url>/2019/11/28/linux-%E5%B1%8F%E5%B9%95%E8%89%B2%E6%B8%A9%E8%B0%83%E8%8A%82/</url>
      
        <content type="html"><![CDATA[<blockquote><p>之前用gnome的时候，用过这个功能，是gonme的一个插件。用xmonad这么久了，竟然忘记了要改一下色温，因为晚上确实颜色太冷对眼睛也不好。</p></blockquote><h1 id="xflux"><a href="#xflux" class="headerlink" title="xflux"></a>xflux</h1><p>它在桌面环境下就应该安装<code>f.lux</code>，它本来也就是这个软件名字。而我安装的<code>xflux</code>是它的x环境下的一个软件，也就是命令行软件了。现在觉得能用命令解决的事情，还是命令好用，图形界面吧有点浪费。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xflux -l 30N -g 110E</span><br></pre></td></tr></table></figure><p>这样便是指定了北纬30度，东经110度。差不多就我这的经纬度了。然后默认的色温就是3400k。看着还行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xflux -l 30N -g 110E -k 4000</span><br></pre></td></tr></table></figure><p>这样便是指定了色温为4000k</p><p>挺简单好用的一个工具，为了开机启动，需要将它放入<code>.xinitrc</code>文件中。</p><hr><p>然后就是一些闲话了，我总感觉这几天很多事情都不顺。首先是一个脚本的sql连接串忘记改，导致出错。昨天发现了问题，然后修复了，感觉终于把这点事情搞完了。可是谁知道昨天下午一个同事由于运行了一个自动删除文件的脚本，把我们的配置文件全部删除了。然后今天找了半天原因，我也是没找到。真的是万万没想到下面的文件竟然被人删了，我做梦都想不到，会是因为别人把文件删了这个问题。我一直在找的问题就是源数据过来没有，数据格式有么有问题，查看日志文件，会不会是环境配置被人改了。打死也想不到是人把文件删了，因为我觉得这些东西应该不会有人删吧，但是就是发生了。我也在想我的思维是不是太局限了，因为这个问题曾老板一下就发现了，也可能是因为这些东西不是我写的，不够了解吧，毕竟上次写的那个python也是老吴给我配的配置，中间也有好多空的文件夹，但是呢，为了安全起见我也是没动那些东西。因为多几个文件夹也不碍事，所以在工作中，一些危险的命令不要写，比如<code>rm</code> ，<code>mv</code>这些。脚本中也要尽量去避免，能备份的就备份。桃子仙女今天晚上又要加班，心疼。我也没心思学习了。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件介绍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell-获取ss账号</title>
      <link href="/2019/11/24/shell-%E8%8E%B7%E5%8F%96ss%E8%B4%A6%E5%8F%B7/"/>
      <url>/2019/11/24/shell-%E8%8E%B7%E5%8F%96ss%E8%B4%A6%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一如既往的，打开这个命令，结果发现里面的命令都乱了。想着一定是网页数据发现了变化，有点懒，今天才去修改脚本。确实是网页结构调整导致的。所以修改之后的脚本如下，显得更加简洁了。</p></blockquote><ul><li><p>这一切可行的基础还是要感想提供数据的沐风了，<a href="https://www.youneed.win/free-ss" target="_blank" rel="noopener">获取数据的网址</a></p></li><li><p>当然了这个脚本叫<code>sslink</code>，最好是取这个名字，因为别的名字那还要改脚本</p></li><li><p>配置过程：</p><ul><li><p>将代码复制下来，然后随便取个命令比如叫<code>shadowsocks</code>，然后将代码复制进去</p></li><li><p>给脚本执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x ./shadowsocks</span><br></pre></td></tr></table></figure></li><li><p>为了可以使用命令启动这个脚本，在<code>~/.local/bin</code>下建一个软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s 脚本位置 sslink</span><br></pre></td></tr></table></figure></li><li><p>然后就可以使用<code>ssllink</code>启动这个脚本了。如果你没有zsh的话，将脚本第一行替换为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><p>脚本如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/zsh</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">define a <span class="keyword">function</span> to <span class="built_in">print</span> autoline</span></span><br><span class="line">function line()</span><br><span class="line">&#123;</span><br><span class="line">    unset i</span><br><span class="line">    while [[ $i -le $COLUMNS ]]</span><br><span class="line">    do</span><br><span class="line">        echo -e -n "\e[32m.\e[0m"</span><br><span class="line">        ((i++))</span><br><span class="line">        sleep 0.01</span><br><span class="line">    done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">clear screen and give a choice to choose,yes to catch a new file </span></span><br><span class="line">clear</span><br><span class="line">echo -e -n "\033[32m do you wanna to scratch another new vpn file ? yes or no :  \033[0m"</span><br><span class="line">read wanna</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">go to the script dir and scratch all of information to a tmp file</span></span><br><span class="line">realdir=`whereis sslink | awk -F ":" '&#123;print $2&#125;' | xargs ls -l | awk -F "&gt;" '&#123;print $2&#125;' | xargs dirname`</span><br><span class="line">cd $realdir</span><br><span class="line">if [[ $wanna == "yes" ]];then</span><br><span class="line">    curl https://www.youneed.win/free-ss | grep  '&lt;td align=' | grep -v 'class' | grep -E '^&lt;' | awk -F'&gt;|&lt;' '&#123;print $3&#125;' &gt; account.txt</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">product the <span class="built_in">command</span> line to a list</span></span><br><span class="line">i=1</span><br><span class="line">j=`cat  account.txt | wc -l`</span><br><span class="line">while [[ $j -gt 0 ]]</span><br><span class="line">do</span><br><span class="line">    s=`sed -n ''"$i"'p' account.txt `</span><br><span class="line">    ((i++))</span><br><span class="line">    p=`sed -n ''"$i"'p' account.txt `</span><br><span class="line">    ((i++))</span><br><span class="line">    k=`sed -n ''"$i"'p' account.txt `</span><br><span class="line">    ((i++))</span><br><span class="line">    m=`sed -n ''"$i"'p' account.txt `</span><br><span class="line">    ((i++))</span><br><span class="line">    ss="sslocal -s $s -p $p -k $k -m $m -l 1080"</span><br><span class="line">    sum[$i]=$&#123;ss&#125;</span><br><span class="line">    ((j--))</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">print</span> all of the commands <span class="keyword">for</span> ur choice,the one u choose will work <span class="keyword">in</span> <span class="built_in">bg</span></span></span><br><span class="line">select m in $&#123;sum[*]&#125;</span><br><span class="line">do</span><br><span class="line">    for (( k=1;k&lt;$&#123;#sum[@]&#125;;k++ ))</span><br><span class="line">    do</span><br><span class="line">        case $m in </span><br><span class="line">            $&#123;sum[k]&#125;)</span><br><span class="line">                id=`ps -ef | grep sslocal | grep -v grep | awk '&#123;print $2&#125;'`</span><br><span class="line">                if [[ $id -gt 0 ]];then</span><br><span class="line">                    killall sslocal </span><br><span class="line">                    echo -e "\033[32m the sslocal process has been killed successfully \033[0m"</span><br><span class="line">                fi</span><br><span class="line">                eval $m 2&gt;/dev/null 1&gt;&amp;2 &amp;</span><br><span class="line">                line</span><br><span class="line">                ;;</span><br><span class="line">        esac</span><br><span class="line">    done</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 呵呵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell-远程连接</title>
      <link href="/2019/11/23/shell-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
      <url>/2019/11/23/shell-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="何时需要远程连接"><a href="#何时需要远程连接" class="headerlink" title="何时需要远程连接"></a>何时需要远程连接</h1><p>远程连接嘛，自然是本机访问不了了。这种情况还是比较常见的，比如服务器上的数据库，远端的主机等情况。</p><p>如果仅仅只是连接一次啥的，那就没必要下面的那些东西，因为手动输入反而简单一些。</p><h1 id="连接方式"><a href="#连接方式" class="headerlink" title="连接方式"></a>连接方式</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>需要脚本的一个原因是要可以重复执行，另一个原因是连接上去之后的步骤比较多。如果是使用数据库的话，Oracle，mysql，mariadb等都可以直接写语句，语句间用分号隔开，它便会一个语句一个语句的执行，所以不需要担心啥</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mariadb -h192.168.0.102 -upi -p123456 -Dmytestdb &lt;&lt;EOF | sed -n '2p' |xargs -n1|sed -n '2,12p'</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span> ssacount;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> ssacount <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">5</span>;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>可以将查询出来的数据进行过滤，这样就会直接显示出来，如果写的是个脚本，其实啥也得不到，所以得把输出存入变量。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data=`mariadb -h192.168.0.102 -upi -p123456 -Dmytestdb &lt;&lt;EOF | sed -n '2p' |xargs -n1|sed -n '2,12p'</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span> ssacount;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> ssacount <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">5</span>;</span><br><span class="line">EOF`</span><br></pre></td></tr></table></figure><p>这样便把数据存入了变量data中，数据库操作还是比较简单的。</p><h2 id="ssh连接"><a href="#ssh连接" class="headerlink" title="ssh连接"></a>ssh连接</h2><p>这个就稍微复杂点了，因为它不像数据库那样，可以一次执行许多语句。而且最后得到数据也是比较麻烦，虽然我电脑上可以使用重定向来得到，但是公司的怎么写都不行，可能版本不同吧。为了连接主机后执行许多步骤那就得使用一个工具了：<code>expect</code></p><p><code>expect</code>是一个工具套装，有它自己的语法，所以不能把它简简单单的看做只是一个shell命令。有的电脑上可能还没有这个东西，比如我的电脑。所以首先要安装它</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S expect</span><br></pre></td></tr></table></figure><p>有了它就和使用sqlplus以及mariadb等的连接方式一样了，因为借助expect，可以执行许多命令。</p><p>网上看到许多教程，里面写的都是直接使用expect来为脚本解释的。例如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/expect</span></span><br><span class="line"><span class="meta">#</span><span class="bash">然后写其他的巴拉巴拉</span></span><br></pre></td></tr></table></figure><p>这么写，我总觉得不是很好，除非我们就仅仅去连一下主机，然后也无法使用shell命令来操作得到的数据，因为它根本不是使用的shell来解释的，也可以理解为这不是一个shell脚本吧。除非我们再写一个shell脚本，在脚本中调用这个expect脚本。这样不是多此一举吗？所以来个大杂烩吧</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">这里我们仍然指定shell脚本，使用bash来解释</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">这里调用工具套件expect，前面说了它有自己的语法，所以记住就行了</span></span><br><span class="line">/usr/bin/expect &lt;&lt;EOF</span><br><span class="line"><span class="meta">#</span><span class="bash">设置连接超时</span></span><br><span class="line">set time 30</span><br><span class="line"><span class="meta">#</span><span class="bash">spawn新开一个进程，-q表示quiet模式，会减少不必要的错误提示信息</span></span><br><span class="line">spawn ssh -q pi@192.168.0.102</span><br><span class="line"><span class="meta">#</span><span class="bash">expect捕获出现的数据 </span></span><br><span class="line">expect &#123;</span><br><span class="line">"*yes/no*" &#123;send "yes\r";exp_continue&#125;</span><br><span class="line">"*password*" &#123;send "123456\r"&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">这里就是捕获提示符，要看具体的环境了，大多数是～提示符吧。</span></span><br><span class="line">expect "*@"</span><br><span class="line"><span class="meta">#</span><span class="bash">使用send来发送指令，\r来表示回车</span></span><br><span class="line">send "cd /home/pi\r"</span><br><span class="line">expect "*@"</span><br><span class="line">send "ls \r"</span><br><span class="line"><span class="meta">#</span><span class="bash">将所有的显示的数据保存为一个<span class="built_in">log</span>文件</span></span><br><span class="line">log_file mylogfile.txt</span><br><span class="line">expect "*@"</span><br><span class="line"><span class="meta">#</span><span class="bash">退出连接</span></span><br><span class="line">send "exit\r"</span><br><span class="line"><span class="meta">#</span><span class="bash">捕获结束</span></span><br><span class="line">expect eof</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>如果是我的这个电脑的话是支持重定向的，就可以不用写log文件了，其实一样</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">/usr/bin/expect &lt;&lt;EOF &gt;logfile.txt</span><br><span class="line">set time 30</span><br><span class="line">spawn ssh -q pi@192.168.0.102</span><br><span class="line">expect &#123;</span><br><span class="line">"*yes/no*" &#123;send "yes\r";exp_continue&#125;</span><br><span class="line">"*password*" &#123;send "123456\r"&#125;</span><br><span class="line">&#125;</span><br><span class="line">expect "*@"</span><br><span class="line">send "cd /home/pi\r"</span><br><span class="line">expect "*@"</span><br><span class="line">send "ls \r"</span><br><span class="line">expect "*@"</span><br><span class="line">send "exit\r"</span><br><span class="line">expect eof</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>然后就可以在本地对保存的文件进行数据提取和过滤了。</p>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell-解释器以及集合运算</title>
      <link href="/2019/11/22/shell-%E8%A7%A3%E9%87%8A%E5%99%A8%E4%BB%A5%E5%8F%8A%E9%9B%86%E5%90%88%E8%BF%90%E7%AE%97/"/>
      <url>/2019/11/22/shell-%E8%A7%A3%E9%87%8A%E5%99%A8%E4%BB%A5%E5%8F%8A%E9%9B%86%E5%90%88%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="选择合适的shell"><a href="#选择合适的shell" class="headerlink" title="选择合适的shell"></a>选择合适的shell</h1><p>众所周知的linux下有许多不同的shell可供选择，比如作为默认shell的bash，以及我们挚爱的zsh和fish。虽然他们的种类很多，但是都是一个解释器，即把我们在终端输入的命令解释为内核可以理解的东西。而shell也就是作为了一个我们和系统内核沟通的桥梁。</p><p>不同种类shell存在一个重要原因就是都有自己的特点，个性化，易于使用。比如zsh就支持个性化配置，可以做的比较好看，fish呢是配置比较简单，但是fish的语法与bash差异太大，所以我没有继续使用。</p><p>虽然知道这些，我还是被忽悠了。而且这个问题如果不是经常写shell脚本，就很难发现的一个问题。比如工作中使用的ksh，不是我喜欢这个shell，而是默认就是这个。加上我对shell的数组没有太多的了解，所以问题也就发生了。        </p><hr><p>之前学过，shell中数组是使用的<code>()</code>来表示的，而且元素之间的分隔是采用的空格。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num=(1 2 3 4 5)</span><br></pre></td></tr></table></figure><p>但是在ksh中，却可以这样使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num=&#123;1,2,3,4,5&#125;</span><br></pre></td></tr></table></figure><p>由于语句都是拿来在shell(ksh)中直接进行测试的，表示出来的结果也正确</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num=&#123;1,2,3,4,5&#125;</span><br><span class="line">echo $num</span><br><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure><p>所以我就这样写了，还以为shell中数组真的可以这么写，但是我的脚本指定的是bash，而在bash中并不支持这么写</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num=&#123;1,2,3,4,5&#125;</span><br><span class="line">echo $num</span><br><span class="line">&#123;1,2,3,4,5&#125;</span><br></pre></td></tr></table></figure><p>所以总结一下教训就是我们最好是使用bash来进行shell编写，因为它的语法是通用的。还有重要的一点就是如果我们对语法不够清晰，那么在测试的时候，还是要使用bash。</p><h1 id="数组问题"><a href="#数组问题" class="headerlink" title="数组问题"></a>数组问题</h1><p>现在需要明确的一点就是bash中数组写法就是这么唯一的一种，使用<code>()</code>，另外要表示所有的元素要使用<code>${数组名[@]}</code>或者<code>${数组名[*]}</code>。而使用<code>${数组名}</code>表示的却是第一个元素。虽然知道这个，但是在写的时候还是容易犯错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num=(1 2 3 4 5)</span><br><span class="line">echo $&#123;num[@]&#125;</span><br><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure><p>比如说要表示一个集合中所有元素就是很容易犯错的地方</p><h1 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h1><p>在写shell的时候很多时候就是要对比数据，那么就是两组数据的对比，比如说我要找出那些在另外一组数据中没有的东西，容易想到的一个方法就是循环去查找</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 现在要找到在b在a中没有的数据，很显然是1</span></span><br><span class="line">a=(1 2 3)</span><br><span class="line">b=(2 3 4)</span><br><span class="line"><span class="meta">#</span><span class="bash">这里在表示a这个数组就很容易错误的表示成<span class="variable">$a</span></span></span><br><span class="line">for i in $&#123;a[@]&#125;</span><br><span class="line">do</span><br><span class="line">for j in $&#123;b[@]&#125;</span><br><span class="line">do</span><br><span class="line">if [[ $i == $j ]];then</span><br><span class="line">break</span><br><span class="line">else</span><br><span class="line">echo "cannot find $i"</span><br><span class="line">fi</span><br><span class="line">done</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">运行结果</span></span><br><span class="line">cannot find 1</span><br><span class="line">cannot find 1</span><br><span class="line">cannot find 1</span><br><span class="line">cannot find 3</span><br></pre></td></tr></table></figure><p>这么写有两个问题，一是比如说1在第一轮i的循环中都是找不到的，可是它会输出3次找不到1。第二个问题，即使3存在这个里面，但是在j的第一次循环中，2与3不等，会判断找不到3。</p><p>那么既然问题这么多，为何不使用集合运算呢。刚开始我以为是没有集合运算的，因为我也没有在书中看到集合运算的这种操作。但是还真的可以做到，工具就那么几个可是在不同人的手中发挥出来的功能却完全不同。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=(1 2 3)</span><br><span class="line">b=(2 3 4)</span><br><span class="line">echo $&#123;a[@]&#125; $&#123;b[@]&#125; $&#123;b[@]&#125; | xargs -n1 | sort | uniq -u</span><br></pre></td></tr></table></figure><p>没错就是这么简单的一行解决了上面的问题！</p><p>下面解释一下为什么这么写：</p><ul><li>首先是这个数组中所有元素的表示是一个知识点</li><li>那么为什么要写两个b的所有元素，这就是精髓所在了，所以的先介绍一下uniq的用法<ul><li>uniq 不带任何参数表示去重</li><li>uniq -u 表示找出只出现一次的数据</li><li>uniq -d 表示重复出现的数据，出现次数&gt;=2</li></ul></li><li>这样就很好理解了，如果仅仅只写一次b数组的所有元素，那么b数组中的4也是符合条件的，它也只出现了一次。那么写两次b数组，既b中所有元素都至少出现了两次，再与a一起进行比较时，除了a中有b中没有的元素外，b中所有元素自动过滤掉了。</li><li>如果仅仅知道上面的东西，还是无法写出来，为什么，因为uniq在比较的时候是按行来比较的。而且它只会比较相邻的两行间是否存在重复。这就是为什么使用<code>xargs -n1</code>来将行转为列，以及使用<code>sort</code>进行排序的原因了。</li></ul><p>至此集合运算算是说完了，写法比较简单，很容易学习。但是真正的要把集合运算的思想融入编程中，却并不是一朝一夕很够做到的，需要牢记的一点就是集合运算真的是一把利器，用的好，威力无穷。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下面是这几中集合的运算</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 并集</span></span><br><span class="line">echo $&#123;a[@]&#125;  $&#123;b[@]&#125; | xargs -n1 | sort | uniq </span><br><span class="line"><span class="meta">#</span><span class="bash"> 交集</span></span><br><span class="line">echo $&#123;a[@]&#125;  $&#123;b[@]&#125; | xargs -n1 | sort | uniq -d</span><br><span class="line"><span class="meta">#</span><span class="bash"> 差集</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> a差b</span></span><br><span class="line">echo $&#123;a[@]&#125; $&#123;b[@]&#125; $&#123;b[@]&#125; | xargs -n1 | sort | uniq -u</span><br><span class="line"><span class="meta">#</span><span class="bash"> b差a</span></span><br><span class="line">echo $&#123;a[@]&#125; $&#123;a[@]&#125; $&#123;b[@]&#125; | xargs -n1 | sort | uniq -u</span><br><span class="line"><span class="meta">#</span><span class="bash"> 交集的补集</span></span><br><span class="line">echo $&#123;a[@]&#125;  $&#123;b[@]&#125; | xargs -n1 | sort | uniq -u</span><br></pre></td></tr></table></figure><h1 id="闲话"><a href="#闲话" class="headerlink" title="闲话"></a>闲话</h1><p>这几天遇到了许多的烦心事，真的是及其让人不舒服。首先是一起租房子的人，人搬家了，一句话不说，之前我垫付的电费也没给我，这也就不说了，关键是问他的时候，它拒绝我发消息，把我屏蔽了。就冲他这做事的态度我想我也是必须把钱要回来的，还好现在钱已经还我了，有事得找管家，总得给他点压力这样人才老实啊。虽然一起租房子几个月了，我也是和他一句话没说过，果然人是时间久了才能看出好恶。所以在社会上不要没事打算用爱去温暖整个世界，就像贺函说的：“其实每个人只要管好自己的事，也就相安无事，天下太平了”</p><p>第二件事就是在淘宝买了个毛毯，一个星期没有发货，打算联系一下客服，可是联系好几次都是一个机器人，所以就退款了。可是呢，竟然被商家拒绝退款了，眼看东西都又寄回去了还是一个拒绝退款的状态，真的是担心，所以另外一个快递我就收了，然后退款流程也就撤销了，想着就算丢那也只丢一样吧，这个拿着好了。可是呢，物流竟然要我把货又给退回去，说是商家是这么留言的。来来回回折腾了好久，终于找到一个可以说话的客服，但是这个客服沟通起来也是有点难，总之就是心累。我也知道淘宝鱼龙混杂，我也没这个精力去分辨那些店家是好的，哪些是坏的。所以我还是用京东吧，京东还没怎么让我失望过。</p>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 怎一个愁字了得 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell-子进程</title>
      <link href="/2019/11/21/shell-%E5%AD%90%E8%BF%9B%E7%A8%8B/"/>
      <url>/2019/11/21/shell-%E5%AD%90%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近写shell脚本，发现了许多之前没搞懂的东西。就比如说子程序这个问题，以为自己弄懂了，但是写脚本才发现自己没搞懂。</p></blockquote><h1 id="COLUMNS变量问题"><a href="#COLUMNS变量问题" class="headerlink" title="COLUMNS变量问题"></a>COLUMNS变量问题</h1><p>第一个问题就是这个<code>$COLUMNS</code>变量问题，之前写了一个类似的脚本，需要计算当前终端的宽度，然后动态调整显示的宽度。当时是使用<code>tput cols</code>与<code>tput lines</code>来获取终端的宽高的。后来发现<code>$COLUMNS</code>与<code>$LINES</code>可同样可以获取这些值，所以这次打算使用这个来写，结果就是程序报错了，后来才发现是这个变量没能获取到值。</p><p>我就很奇怪了，明明在终端可以执行的命令为什么不能在脚本中执行了。后来才知道这两个变量并不是环境变量，而是说它是某些shell才会开启的功能。它是动态计算的，而且只能在当前使用的shell中才行，并不能用做shell在后台执行。</p><p>所以如果要在脚本中获取这个变量的话就还是使用tput吧</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tput lines</span><br><span class="line">tput cols</span><br></pre></td></tr></table></figure><h1 id="子进程问题"><a href="#子进程问题" class="headerlink" title="子进程问题"></a>子进程问题</h1><p>之前写脚本时，如果涉及到目录移动的话，也没太在意，因为最后我总是会加上<code>cd -</code>来回到之前的目录。所以这次真的想写个脚本来改变当前shell的目录时才发现这并不行。虽然我知道子进程这个知识，但是还是算没弄清楚吧。</p><p>如果运行一个脚本的话，那么就会在当前shell下fork一个子shell，而在子shell中的操作并不会影响到当前的shell。</p><p>这也就是说我们在shell中指定的变量，即使是使用了<code>export</code>也不会在当前shell中有值，也就是说子进程不会影响父进程。但是反过来却可以，父进程会影响子进程，比如父进程中的变量就会传入子进程，这点也需要注意，在以后写shell脚本时，如果设计到比较通用变量名（比如i）的话，还是要先<code>unset</code>一下才行。</p><p>如果非要做到这个功能的话（使用脚本来改变当前shell的目录），也是可以做到的，那么就需要使用<code>source</code>这个命令，它会将子shell的命令拿来在当前shell中运行，这是它的一个很重要的功能。不仅如此，它还可以会影响其父进程，所以说全部都会受到影响。这也是为什么我们修改了<code>.bashrc</code>等初始化的文件后source一下就可以的原因。之前无脑使用source命令很多次了，但是却没有发现其真正作用。就好比我最常用的<code>source .Xresources</code>命令，用来重新加载urxvt和xterm配置。</p>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 呵呵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctags</title>
      <link href="/2019/11/20/ctags/"/>
      <url>/2019/11/20/ctags/</url>
      
        <content type="html"><![CDATA[<h1 id="ctags"><a href="#ctags" class="headerlink" title="ctags"></a>ctags</h1><blockquote><p>看到一个视频介绍vim的，看到视频中使用ctags，可以很快速的在定义的类跳转，所以对于编程来说，确实是一个非常好用的功能。</p></blockquote><h2 id="ctags是什么"><a href="#ctags是什么" class="headerlink" title="ctags是什么"></a>ctags是什么</h2><p><a href="http://ctags.sourceforge.net/" target="_blank" rel="noopener">Ctags</a> is a tool that makes it easy to navigate large source code projects. It provides some of the features that you may be used to using in Eclipse  or other IDEs, such as the ability to jump from the current source file  to definitions of functions and structures in other files. Ctags will  make it much easier to find the Linux kernel files that you have to  modify for your CSE 451 projects. Ctags also supports many <a href="http://ctags.sourceforge.net/languages.html" target="_blank" rel="noopener">languages</a> besides C, so you may find it useful for future projects.</p><p>Ctags should already be installed on CSE instructional servers such as <code>forkbomb</code> and <code>attu</code>. Ctags is first run on its own to generate a “tags” file, then it is  invoked from within another Linux text editor such as Emacs or Vim.</p><p>简单点说就是对编程中定义的类的一种标记</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>前面说了它是一个工具，所以需要安装了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Ss ctags</span><br><span class="line">extra/ctags 1:r20190522+g3fdf28bc-1</span><br><span class="line">    Generates an index file of language objects found in source files</span><br><span class="line"></span><br><span class="line">sudo pacman -S ctags</span><br></pre></td></tr></table></figure><h2 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h2><p>这些ctags从哪里来，当然需要手动生成了</p><p><code>cd</code> to the root directory of your code:</p><p>Run Ctags recursively over the entire directory to generate the <code>tags</code> file.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctags -R .</span><br></pre></td></tr></table></figure><p>例如在我的目录下生成ctags</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Documents/code</span><br><span class="line">ctags -R .</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在vim中可以使用<code>ctrl+n</code>来进行补全，它会搜索之前出现过得单词。</p><p>但是我只想找ctags呢？使用<code>ctrl+x ctrl+]</code>进行ctags的补全。</p><p>跳转到ctags使用<code>ctrl+]</code></p><p>回到跳转前的位置<code>ctrl+o</code>或者使用默认标记<strong>``</strong></p><p>这样还不够好，因为每次都只能在生成之后才有ctags，也就是说在编写程序时，无法找到新添加的类等</p><p>所以加入一个自动化执行生成ctags的命令到vimrc文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">au BufWritePost *.sh,*.hs,*.py silent! !ctags -R &amp;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xmonad使用手册</title>
      <link href="/2019/11/19/xmonad%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
      <url>/2019/11/19/xmonad%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>archlinux+xmonad是一个比较轻量级的搭配。gnome桌面确实是相当豪华，但是有点耗资源了。相比于i3，xmonad可定制性更好，而且也很稳定，这就是比较喜欢它的点了</p></blockquote><hr><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>modkey默认为win，在这里被我设置为了capslock，因为winkey实在是用起来不顺手</p><h5 id="重新映射键位："><a href="#重新映射键位：" class="headerlink" title="重新映射键位："></a>重新映射键位：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ cat ~/.Xmodmap   </span><br><span class="line">!clear Lock  </span><br><span class="line">!keysym Caps_Lock = Escape  </span><br><span class="line">!keysym Escape = Caps_Lock  </span><br><span class="line">!add Lock = Caps_Lock</span><br><span class="line">!delete fake super key</span><br><span class="line">keycode 133 =</span><br><span class="line">keycode 134 =</span><br><span class="line">!change Caps_Lock to Super_L</span><br><span class="line">keycode 66 = Super_L</span><br><span class="line">!clear lock</span><br><span class="line">clear lock</span><br><span class="line">!clear all mod_s with Super key</span><br><span class="line">clear mod4</span><br><span class="line">! add our new Super key</span><br><span class="line">add mod4 = Super_L</span><br></pre></td></tr></table></figure><h5 id="刷新退出及编译"><a href="#刷新退出及编译" class="headerlink" title="刷新退出及编译"></a>刷新退出及编译</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">====================================================================================================</span><br><span class="line">xmonad --recompile#这是每次修改配置文件后都需要编译的一步</span><br><span class="line">modkey+q#然后刷新配置</span><br><span class="line">modkey+shift+q#退出xmonad</span><br></pre></td></tr></table></figure><hr><h4 id="日常使用的一些快捷键"><a href="#日常使用的一些快捷键" class="headerlink" title="日常使用的一些快捷键"></a>日常使用的一些快捷键</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">====================================================================================================</span><br><span class="line">modkey+数字1-9  #切换1-9个桌面</span><br><span class="line">modkey+F11#volume-5</span><br><span class="line">modkey+F12#volume+5</span><br><span class="line">modkey+F9#屏幕亮度减2</span><br><span class="line">modkey+F10#屏幕亮度加2</span><br><span class="line">modkey+F6#禁用触摸板</span><br><span class="line">modkey+n#打开mate-terminal</span><br><span class="line">modkey+r#打开rofi搜索软件</span><br><span class="line">modkey+b#切换polybar任务栏</span><br><span class="line"></span><br><span class="line">====================================================================================================</span><br><span class="line">modkey+j#窗口定位向下移动</span><br><span class="line">modkey+k#窗口定位向上移动</span><br><span class="line">modkey+l#窗口定位右移动</span><br><span class="line">modkey+h#窗口定位左移动</span><br><span class="line">modkey+alt+i#垂直窗口压缩</span><br><span class="line">modkey+alt+o#垂直窗口增加</span><br><span class="line">modkey+alt+h#水平窗口压缩</span><br><span class="line">modkey+alt+l#水平窗口增加</span><br><span class="line">modkey+shift+m#将当前窗口移动到主窗口</span><br><span class="line">modkey+y#将窗口隐藏</span><br><span class="line">modkey+shift+y#将隐藏窗口调出</span><br><span class="line">modkey+g#切换窗口边框</span><br><span class="line">modkey+f#窗口最大化切换</span><br><span class="line">alt+tab#在最近两个桌面切换</span><br><span class="line">modkey+t#切换桌面布局</span><br><span class="line">modkey+backspace#删除一个窗口</span><br><span class="line">modkey+blankspace#切换布局</span><br><span class="line">modkey+鼠标  #移动窗口或缩放</span><br><span class="line"></span><br><span class="line">====================================================================================================</span><br><span class="line">modkey+u#调出一个各桌面公用的终端，类似于scratchpad</span><br><span class="line">modkey+p</span><br><span class="line">modkey+i</span><br><span class="line">modkey+o</span><br><span class="line">modkey+v</span><br></pre></td></tr></table></figure><hr><h4 id="下面是一些功能键"><a href="#下面是一些功能键" class="headerlink" title="下面是一些功能键"></a>下面是一些功能键</h4><p>在按下modkey和功能键之后，可以松开按键然后选择其他的键</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">====================================================================================================</span><br><span class="line">功能键 s</span><br><span class="line">modkey+s</span><br><span class="line">j#下一个桌面</span><br><span class="line">k#上一个桌面</span><br><span class="line">l#将当前窗口移动到后一个桌面</span><br><span class="line">h#将当前窗口移动到前一个桌面</span><br><span class="line">f#快捷启动firefox</span><br><span class="line">m#静音</span><br><span class="line">p#打开截图工具flameshot</span><br><span class="line">t#将所有悬浮窗口取消悬浮</span><br><span class="line">backspace#删除此桌面所有窗口</span><br><span class="line">c#在支持切换布局的桌面可切换布局</span><br><span class="line"></span><br><span class="line">====================================================================================================</span><br><span class="line">功能键 d</span><br><span class="line">modkey+d</span><br><span class="line">h#向左合并窗口</span><br><span class="line">l#向右合并窗口</span><br><span class="line">k#向上合并窗口</span><br><span class="line">j#向下合并窗口</span><br><span class="line">m#合并所有窗口</span><br><span class="line">u#取消合并</span><br><span class="line">。   #聚焦上面的窗口</span><br><span class="line">，   #聚焦下面的窗口</span><br><span class="line">p#开启动态切换壁纸</span><br><span class="line">o#关闭动态切换壁纸</span><br><span class="line">r#重新加载polybar状态栏</span><br><span class="line"></span><br><span class="line">====================================================================================================</span><br><span class="line">功能键 a</span><br><span class="line">modkey+a</span><br><span class="line">g#切换布局</span><br><span class="line">c</span><br><span class="line">t</span><br><span class="line">d</span><br><span class="line">o</span><br><span class="line">f</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xmonad </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim-编辑多个文件及标记</title>
      <link href="/2019/11/19/vim-%E7%BC%96%E8%BE%91%E5%A4%9A%E4%B8%AA%E6%96%87%E4%BB%B6%E5%8F%8A%E6%A0%87%E8%AE%B0/"/>
      <url>/2019/11/19/vim-%E7%BC%96%E8%BE%91%E5%A4%9A%E4%B8%AA%E6%96%87%E4%BB%B6%E5%8F%8A%E6%A0%87%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近一段时间，就没怎么学习，至于说原因是为什么，我还不是特别清楚，但是有几个感受。觉得没有什么学习的伙伴，没有人交流或者讨论。想学的东西太多，说这个我熟悉吗？我好像挺熟悉，但是又不是真的很熟，所以有点犹豫到底该不该花时间来学习这个。还有就是一天挺累的，不像之前那样有空闲的时间还可以学习一个oracle啊，python啊，现在每天都是各种有难度的事，回家了只想坐在那啥也不想，啥也不敢。可能是我颓废了吧，现在不把目标定那么高那么多了，就是简简单单的把vim学好，学透。其它的暂时不管了！</p></blockquote><p>今天要学的是如何打开多个文件编辑，想想vim是个文本编辑器额，这都做不到，那还怎么玩啊</p><hr><h4 id="首先是在已打开的vim中去编辑另外一个文件"><a href="#首先是在已打开的vim中去编辑另外一个文件" class="headerlink" title="首先是在已打开的vim中去编辑另外一个文件"></a>首先是在已打开的vim中去编辑另外一个文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">:edit 文件名 #会关闭当前文件去打开另一个文件</span><br><span class="line">:e 文件名#简写</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">如果当前编辑的文件没有保存需要先保存</span></span><br><span class="line">:write</span><br><span class="line">:w#简写</span><br><span class="line"><span class="meta">#</span><span class="bash">如果并不想保存当前更改呢？</span></span><br><span class="line">:e!文件名#这就是:!e 丢弃所有更改，回到最初编辑的状体的来源了吧</span><br><span class="line">:hide edit 文件名#当然了这是另外一个方式，丢弃当前更改，变成隐藏的缓冲区</span><br></pre></td></tr></table></figure><hr><h4 id="在启动的时候就打开多个文件"><a href="#在启动的时候就打开多个文件" class="headerlink" title="在启动的时候就打开多个文件"></a>在启动的时候就打开多个文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">vim 文件1 文件2#同时打开了几个文件</span><br><span class="line">:next#在不同的文件中移动</span><br><span class="line">:previous</span><br><span class="line"></span><br><span class="line">:next!#放弃当前修改直接编辑下一个文件</span><br><span class="line">:wnext#先保存再编辑另一个文件</span><br><span class="line">:wprevious</span><br><span class="line">:firest#直接到第一个</span><br><span class="line">:last#到最后一个</span><br><span class="line">:2next#支持带数字的操作</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">快速在多个文件中移动</span></span><br><span class="line">ctrl+^</span><br><span class="line"></span><br><span class="line">:argument#显示当前编辑的文件是那个</span><br><span class="line">:args#简写</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">编辑另外一个文件列表</span></span><br><span class="line">:args 文件3 文件4</span><br><span class="line">:args *.txt#支持通配符</span><br><span class="line">:args! 文件3 文件4#不保存当前文件，打开另外文件</span><br></pre></td></tr></table></figure><h3 id="使用寄存器："><a href="#使用寄存器：" class="headerlink" title="使用寄存器："></a>使用寄存器：</h3><hr><h4 id="文件标记："><a href="#文件标记：" class="headerlink" title="文件标记："></a>文件标记：</h4><p>在同时编辑多个文件时，可以通过标记直接跳回到之前编辑的文件的位置（全局标记）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m+大写字母#设置标记</span><br><span class="line">`+大写字母#跳转标记</span><br></pre></td></tr></table></figure><p>局部标记：只在本文件中有用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m+小写字母#设置标记例如ma</span><br><span class="line">`+小写字母#回到标记例如`a</span><br></pre></td></tr></table></figure><p>为标记设置注释</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">先设置标记，再注释</span></span><br><span class="line">mh</span><br><span class="line">:marks head</span><br><span class="line"><span class="meta">#</span><span class="bash">然后可以输入:marks head就可以知道标记的含义了</span></span><br><span class="line">:marks head</span><br><span class="line">mark line  col file/text</span><br><span class="line"> a      1    0 i want to go home,did you?</span><br></pre></td></tr></table></figure><p>标记使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">不仅仅可以用来作为跳转</span></span><br><span class="line">:marks#显示所有标记</span><br><span class="line">:delmarks!#删除所有标记</span><br><span class="line">``或者''#在两个最近的跳转中移动</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">删除到标记行</span></span><br><span class="line">d`a</span><br><span class="line"><span class="meta">#</span><span class="bash">复制到标记行</span></span><br><span class="line">y`a</span><br></pre></td></tr></table></figure><hr><h4 id="vim提供了寄存器来存储放入到缓冲区中的内容"><a href="#vim提供了寄存器来存储放入到缓冲区中的内容" class="headerlink" title="vim提供了寄存器来存储放入到缓冲区中的内容"></a>vim提供了寄存器来存储放入到缓冲区中的内容</h4><p>在同时编辑多个文件时，我们可以在不同的文件中复制内容。但是如果需要从一个文件中复制几段内容呢？是不是需要不停的切换文件，不停的复制粘贴。并不是：可以通过寄存器将需要复制的多段内容存储起来，避免了不停的在不同文件中来回跳转复制</p><p>yank将内容复制到了缓冲区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"寄存器名字y#复制</span><br><span class="line">eg:"ayy#复制当前行到寄存器a中</span><br><span class="line">"寄存器名字p#粘贴</span><br><span class="line">eg:"ap#将寄存器a中的内容粘贴出来</span><br></pre></td></tr></table></figure><p>delete将内容删除到了缓冲区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"cdd#将当前行内容删除到了寄存器c中</span><br><span class="line">"fdaw#将一个word删除到了寄存器f中</span><br><span class="line">"gx#将一个字符删除到了寄存器g中</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 一生所爱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim-备份保存重命名等</title>
      <link href="/2019/11/19/vim-%E5%A4%87%E4%BB%BD%E4%BF%9D%E5%AD%98%E9%87%8D%E5%91%BD%E5%90%8D%E7%AD%89/"/>
      <url>/2019/11/19/vim-%E5%A4%87%E4%BB%BD%E4%BF%9D%E5%AD%98%E9%87%8D%E5%91%BD%E5%90%8D%E7%AD%89/</url>
      
        <content type="html"><![CDATA[<h4 id="vim自身不会自动备份"><a href="#vim自身不会自动备份" class="headerlink" title="vim自身不会自动备份"></a>vim自身不会自动备份</h4><p><strong><em>所有文件操作只会在当前文件路径下新建文件</em></strong></p><p>​    </p><p>备份文件会在每次写文件时覆盖之前的备份文件，保留最新的备份文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:set backup#开启备份，后缀默认为~</span><br><span class="line">:set backupext=.bak#backupextend自定义备份名后缀</span><br></pre></td></tr></table></figure><hr><h4 id="保留原始文件"><a href="#保留原始文件" class="headerlink" title="保留原始文件"></a>保留原始文件</h4><p>设置之后会在此时生成一个原始文件，此后的修改不会对它产生影响</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:set patchmode=.orig#开启保留原始文件，并且设置原件后缀为.orig</span><br></pre></td></tr></table></figure><hr><h4 id="设置自动保存"><a href="#设置自动保存" class="headerlink" title="设置自动保存"></a>设置自动保存</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:set autowrite#设置自动保存</span><br><span class="line">:set noautowrite#取消自动保存</span><br></pre></td></tr></table></figure><hr><h4 id="以只读方式打开文件"><a href="#以只读方式打开文件" class="headerlink" title="以只读方式打开文件"></a>以只读方式打开文件</h4><p>避免对文件进行了修改，虽然可以使用<code>:e!</code>来撤销所有修改，但明显下面这种方式更加保险</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim -R file#可以强制修改</span><br><span class="line">vim -M file#无法强制修改</span><br></pre></td></tr></table></figure><hr><h4 id="文件另存为"><a href="#文件另存为" class="headerlink" title="文件另存为"></a>文件另存为</h4><p>另存为更符合实际，对文件进行修改后运行命令会将当前修改后的内容另存为另一个给定的文件名，并且打开这个文件，可以对其进行编辑。原文件如果没有保存的话会回到修改之前的内容，并不会保存这些修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:saveas 文件名</span><br><span class="line">:file 文件名</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 一生所爱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim-分隔窗口</title>
      <link href="/2019/11/19/vim-%E5%88%86%E9%9A%94%E7%AA%97%E5%8F%A3/"/>
      <url>/2019/11/19/vim-%E5%88%86%E9%9A%94%E7%AA%97%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p>vim的多窗口操作虽然目前没怎么用到过，但是觉得作用还是挺大的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---&gt;</span><span class="bash">打开or关闭</span></span><br><span class="line">vim -ofile1file2#水平打开</span><br><span class="line">vim -Ofile1file2#垂直打开</span><br><span class="line">:split#水平分割</span><br><span class="line">:vsplit#垂直分割</span><br><span class="line">:close#关闭分割</span><br><span class="line">:qall#关闭所有</span><br><span class="line">:wall#保存所有</span><br><span class="line">:wqall#保存关闭所有</span><br><span class="line">:qall!#不保存关闭所有</span><br><span class="line">:only#关闭除当前的其它窗口</span><br><span class="line">:new#水平打开新的空窗口</span><br><span class="line">:vnew#垂直打开</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">---&gt;</span><span class="bash">窗口大小</span></span><br><span class="line">:5split#指定打开窗口的高度</span><br><span class="line">ctrl-w+/-#改变已有窗口高度</span><br><span class="line"></span><br><span class="line"><span class="meta">---&gt;</span><span class="bash">窗口切换</span></span><br><span class="line">crol-w w#快速切换窗口</span><br><span class="line">CTRL-W h #到左边的窗口</span><br><span class="line">CTRL-W j #到下面的窗口</span><br><span class="line">CTRL-W k #到上面的窗口</span><br><span class="line">CTRL-W l #到右边的窗口</span><br><span class="line">CTRL-W t #到顶部窗口</span><br><span class="line">CTRL-W b #到底部窗口</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 一生所爱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim-vimdiff比较</title>
      <link href="/2019/11/19/vim-vimdiff%E6%AF%94%E8%BE%83/"/>
      <url>/2019/11/19/vim-vimdiff%E6%AF%94%E8%BE%83/</url>
      
        <content type="html"><![CDATA[<p>之前用过shell的diff命令，觉得对比不够清晰，后来用到了colordiff，觉得有颜色了还不错，直到遇到了vimdiff，我才发现vim的强大之处。这个对比工具绝对秒杀其他对比工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---&gt;</span><span class="bash"> 打开</span></span><br><span class="line">vimdifffile1 file2#直接使用vimdiff打开</span><br><span class="line">:edit file2#vim中打开，编辑另一文件</span><br><span class="line">:vertical diffsplit file2#选择垂直分割比较</span><br><span class="line"></span><br><span class="line">:set noscrollbind#取消同步滚动</span><br><span class="line">]c#跳转下一个相同之处</span><br><span class="line">[c#跳转上一个相同之处</span><br><span class="line"></span><br><span class="line">:diffupdate#刷新比较结果</span><br><span class="line">dp#diff put</span><br><span class="line">do#diff obtain</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 一生所爱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim-读写以及执行shell命令</title>
      <link href="/2019/11/19/vim-%E8%AF%BB%E5%86%99%E4%BB%A5%E5%8F%8A%E6%89%A7%E8%A1%8Cshell%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/11/19/vim-%E8%AF%BB%E5%86%99%E4%BB%A5%E5%8F%8A%E6%89%A7%E8%A1%8Cshell%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h1><p><code>read</code>，简写<code>r</code>应该是最为实用的命令之一了。因为它可以在不关闭vim的情况下，去读取一个文件内容或者shell命令的输出到文件中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eg：</span><br><span class="line"><span class="meta">#</span><span class="bash">读取当前目录下的文件</span></span><br><span class="line">:read !ls</span><br><span class="line"><span class="meta">#</span><span class="bash">读取指定文件</span></span><br><span class="line">:r note</span><br></pre></td></tr></table></figure><p>这样执行的时候会将读取的内容置于当前行下。当然还可以指定读取到那一行下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line"><span class="meta">#</span><span class="bash">读取到文件开头</span></span><br><span class="line">:0r !ls</span><br><span class="line"><span class="meta">#</span><span class="bash">读取到指定行下</span></span><br><span class="line">:5r !ip -c a</span><br></pre></td></tr></table></figure><h1 id="执行shell命令"><a href="#执行shell命令" class="headerlink" title="执行shell命令"></a>执行shell命令</h1><p><code>！{motion}{program}</code>：将motion指定的文本块通过管道传送给shell的program处理。</p><p>使用<code>！</code>来执行shell命令，可以和read搭配使用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line"><span class="meta">#</span><span class="bash">读取shell输出</span></span><br><span class="line">:r !echo $PATH | awk -v FS=':' '&#123;print $1&#125;'</span><br></pre></td></tr></table></figure><p>motion指的是文本块，所以范围由motion指定。其实在键入！后，进行的移动会被转化为一个数字表示的范围。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eg：</span><br><span class="line"><span class="meta">#</span><span class="bash">对一到五行的内容实行排序</span></span><br><span class="line">!5Gsort#首先gg移动到文本的第一行，然后执行命令</span><br><span class="line"><span class="meta">#</span><span class="bash">当然了可以自己指定要操作的行</span></span><br><span class="line">5,10！sort</span><br></pre></td></tr></table></figure><h1 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h1><p><code>write</code>，简写为<code>w</code>，将当前文件中的内容写入磁盘（保存）或另一个文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">eg：</span><br><span class="line"><span class="meta">#</span><span class="bash">将vim中编辑的内容保存到磁盘中</span></span><br><span class="line">:w</span><br><span class="line"><span class="meta">#</span><span class="bash">将编辑内容写入另一个文件</span></span><br><span class="line">:w note</span><br><span class="line"><span class="meta">#</span><span class="bash">指定那些写入到另一个文件</span></span><br><span class="line">:.,$w note#将当前行到文件末尾的内容写入note文件中</span><br><span class="line"><span class="meta">#</span><span class="bash">追加到另一文件中</span></span><br><span class="line">:.w &gt;&gt; note#仅仅将当前行追加另一个文件中</span><br></pre></td></tr></table></figure><p>还可以和<code>！</code>搭配起来使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eg：</span><br><span class="line"><span class="meta">#</span><span class="bash">统计文本中的字数</span></span><br><span class="line">:w !wc -l</span><br></pre></td></tr></table></figure><h1 id="格式化文本"><a href="#格式化文本" class="headerlink" title="格式化文本"></a>格式化文本</h1><p><code>gq</code>加上要格式化的范围，这个范围由移动等范围操作动作组成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">eg：</span><br><span class="line"><span class="meta">#</span><span class="bash">格式化一段文本</span></span><br><span class="line">gqap#gq加ap，ap代表a paragraph</span><br><span class="line"><span class="meta">#</span><span class="bash">格式化整个文本</span></span><br><span class="line">gggqG#gg移动到文本开头，gq加G，G代表文本末尾</span><br><span class="line"><span class="meta">#</span><span class="bash">格式化三行</span></span><br><span class="line">gq3j</span><br></pre></td></tr></table></figure><h1 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h1><p><code>gU</code>加范围动作，小写转大写</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eg：</span><br><span class="line"><span class="meta">#</span><span class="bash">将整个文本都全部变为大写</span></span><br><span class="line">gggUG#gg移动到文件开头，gU格式化，G指定一直到文件末尾</span><br><span class="line"><span class="meta">#</span><span class="bash">将右边三个单词变为大写</span></span><br><span class="line">gU3w#gU格式化，3w右边三个单词</span><br></pre></td></tr></table></figure><p><code>gu</code>加范围动作，大写转小写</p><p><code>g~</code>加范围动作，大小写反转</p><p><strong><em>tips:</em></strong>使用ctrl+L可以重新绘制屏幕。比如说在打开了一个很大的文件后，vim不会全部渲染，只会渲染当前的文本段，有时候会出现语法高亮绘制错误的情况，只需要ctrl+l刷新一下就可以了</p>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 一生所爱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim-技巧</title>
      <link href="/2019/11/19/vim-%E6%8A%80%E5%B7%A7/"/>
      <url>/2019/11/19/vim-%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="反转行序"><a href="#反转行序" class="headerlink" title="反转行序"></a>反转行序</h1><p><code>global</code>与<code>move</code>命令结合使用，将所有行移到第一行的前面，实现了反转行序的排列</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:global/^/m 0</span><br></pre></td></tr></table></figure><p><code>^</code>匹配一行的开头，所有即使是空行也能匹配到。<code>move</code>将匹配到的行总是移动到第0行之后（即为第一行），一行一行的往下执行，即实现了反转的效果</p><h1 id="统计字数"><a href="#统计字数" class="headerlink" title="统计字数"></a>统计字数</h1><p>1.先按g，再按ctrl+g</p><p>2.使用命令读取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:r !wc %</span><br></pre></td></tr></table></figure><p><code>%</code>表示编辑的文件本身</p><h1 id="使用帮助手册"><a href="#使用帮助手册" class="headerlink" title="使用帮助手册"></a>使用帮助手册</h1><p>在关键字上按下<code>shift+k</code></p><h1 id="消除多余空格"><a href="#消除多余空格" class="headerlink" title="消除多余空格"></a>消除多余空格</h1><p>消除行尾的空格</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s+\s\+$++</span><br></pre></td></tr></table></figure><p><code>\s</code>表示空白字符，<code>+</code>表示重复1到正无穷次，<code>$</code>表示行尾。整个表示行尾的空白字符。然后使用了替换，将这些空白替换为无。</p><h1 id="消除空行"><a href="#消除空行" class="headerlink" title="消除空行"></a>消除空行</h1><p>使用了<code>global</code>与<code>delete</code>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:g/^$/d</span><br></pre></td></tr></table></figure><p><code>^$</code>匹配一行的开头和结尾，一行只有开头和结尾，中间没有其他的字符，那么匹配到的就是空行了，然后用<code>delete</code>将其删除</p><h1 id="vim搭配grep打开包括某些字符的文件"><a href="#vim搭配grep打开包括某些字符的文件" class="headerlink" title="vim搭配grep打开包括某些字符的文件"></a>vim搭配grep打开包括某些字符的文件</h1><p>由于<code>grep</code>的参数<code>-l</code>返回的是包含查找字符的文件名。所以可以和vim搭配起来使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim `grep -l -w -i "print" ./*.py`</span><br></pre></td></tr></table></figure><p><code>-w</code>匹配整个词</p><p><code>-i</code>忽略大小写</p><p><code>-l</code>返回查找到的文件名</p><p><code>./*.py</code>查找当前目录下的所有py文件</p><h1 id="回到上次编辑的位置"><a href="#回到上次编辑的位置" class="headerlink" title="回到上次编辑的位置"></a>回到上次编辑的位置</h1><p><code>ctrl+o+o</code></p><h1 id="文本对齐的格式化"><a href="#文本对齐的格式化" class="headerlink" title="文本对齐的格式化"></a>文本对齐的格式化</h1><p>1.范围内居中，并不是全文的左右居中，只在一个指定宽度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:&#123;range&#125;center [width]#width指定在某个范围内居中</span><br></pre></td></tr></table></figure><p>2.右对齐，同样是在某个宽度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:&#123;range&#125;right width</span><br></pre></td></tr></table></figure><p>3.左对齐，表示左边留白的宽度。不指定为0，不留空白</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:&#123;range&#125;left [margin]</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">1,3center 100#1,2,3行居中，宽度为100</span><br><span class="line">1,$right 80#全文居右，宽度80</span><br><span class="line">.,$left 4#当前行到末尾居左，留四个字符宽度</span><br><span class="line">.,+4left#当前行以及接下来的4行居左，不留空白</span><br></pre></td></tr></table></figure><p>4.没有左右对齐，可以借助shell命令实现</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%!fmt</span><br></pre></td></tr></table></figure><h1 id="取消折行"><a href="#取消折行" class="headerlink" title="取消折行"></a>取消折行</h1><p>将一行的内容只显示在一行中，不折行显示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:set nowrap</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">zh 向右滚动</span><br><span class="line">4zh 向右滚动4个字符</span><br><span class="line">zH 向右滚动半个窗口的宽度</span><br><span class="line">ze 向右移动使当前光标成为最右端的可见字符</span><br><span class="line">zl 向左滚动</span><br><span class="line">4zl 向左滚动4个字符</span><br><span class="line">zL 向左滚动半个窗口</span><br><span class="line">zs 向左移动使当前光标成为最左边的可见字符</span><br><span class="line"></span><br><span class="line">g0 到窗口内的第一个字符</span><br><span class="line">g^ 到当前窗口内第一个非空白字符</span><br><span class="line">gm 到当前窗口中间的字符上</span><br><span class="line"><span class="meta">g$</span><span class="bash"> 到当前窗口的最后一个字符上</span></span><br></pre></td></tr></table></figure><h1 id="设置折行"><a href="#设置折行" class="headerlink" title="设置折行"></a>设置折行</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:set wrap</span><br></pre></td></tr></table></figure><p>设置折行之后保证最后的单词显示完整，不被截断显示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:set linebreak</span><br></pre></td></tr></table></figure><p>page:258</p>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 一生所爱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-静态方法类方法</title>
      <link href="/2019/11/19/python-%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E7%B1%BB%E6%96%B9%E6%B3%95/"/>
      <url>/2019/11/19/python-%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E7%B1%BB%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="静态方法和类方法"><a href="#静态方法和类方法" class="headerlink" title="静态方法和类方法"></a>静态方法和类方法</h1><ul><li><p>静态方法包装在<code>staticmethod</code>类的对象中，定义中没有<code>self</code>，可直接通过类来调用方法</p></li><li><p>类方法包装在<code>classmethod</code>类的对象中，参数为<code>cls</code>，虽然可以通过对象来调用，但是实际上<code>cls</code>还是会关联到类的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tellme</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"i am a static method,without self"</span>)</span><br><span class="line">    tellme = staticmethod(tellme)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tellme</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(<span class="string">"i am a class method,with args sls"</span>)</span><br><span class="line">    tellme = classmethod(tellme)</span><br><span class="line"></span><br><span class="line">MyClass.tellme()</span><br></pre></td></tr></table></figure><p>无需实例化，即可直接通过类来调用方法，如果不这样写，那么实例化之后是无法调用方法的，因为函数缺少了参数self</p><p>以上即为使用<code>staticmethod</code>和<code>classmethod</code>手工包装静态方法和类方法</p></li></ul><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>用来替代手工包装，可用于包装任何可调用对象，还可用于方法和函数。装饰器可以有多个，指定多个时，应用的顺序与列出的顺序相反</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tellme</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"new decorator"</span>)</span><br><span class="line">MyClass.tellme()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 一生所爱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-迭代器</title>
      <link href="/2019/11/19/python-%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
      <url>/2019/11/19/python-%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><p>iterate迭代实现了<code>__iter__</code>内置特殊方法</p><h2 id="使用迭代器与列表的区别："><a href="#使用迭代器与列表的区别：" class="headerlink" title="使用迭代器与列表的区别："></a>使用迭代器与列表的区别：</h2><ol><li><p>可能只需要返回下一个值就可以了，并不需要一次获取所有数据</p></li><li><p>列表一次获取所有值占用内存高，而迭代器一次返回一个值，占用内存低</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibs</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a = <span class="number">0</span></span><br><span class="line">        self.b = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a, self.b = self.b, self.a + self.b</span><br><span class="line">        <span class="keyword">return</span> self.a</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br></pre></td></tr></table></figure></li><li><p>实现了<code>__iter__</code>的对象是可迭代的，实现了<code>__next__</code>的对象是迭代器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fibs = Fibs()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> fibs:</span><br><span class="line">    print(f)</span><br><span class="line">    <span class="keyword">if</span> f &gt; <span class="number">1000</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="从迭代器创建序列"><a href="#从迭代器创建序列" class="headerlink" title="从迭代器创建序列"></a>从迭代器创建序列</h2><p>虽然可以使用序列，但是迭代器其实也可以创建序列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestIterator</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.a &gt; <span class="number">1000</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIterator</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">test = TestIterator()</span><br><span class="line"><span class="comment"># 使用list方法创建序列</span></span><br><span class="line">list(test)</span><br><span class="line">print(list(test))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 一生所爱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-类</title>
      <link href="/2019/11/19/python-%E7%B1%BB/"/>
      <url>/2019/11/19/python-%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>意义：归类，组织数据结构</p><p>1.多态：不需要关心对象的类型</p><p>2.封装：属于对象自己的变量</p><p>3.继承：继承父类的属性方法</p><h2 id="所有单词首字母都大写"><a href="#所有单词首字母都大写" class="headerlink" title="所有单词首字母都大写"></a>所有单词首字母都大写</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentName</span><span class="params">()</span>:</span></span><br><span class="line">    __name=<span class="string">"tangchao"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getname</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setname</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__name=name</span><br></pre></td></tr></table></figure><h2 id="私有属性方法"><a href="#私有属性方法" class="headerlink" title="私有属性方法"></a>私有属性方法</h2><p>1.类会创建独立的命名空间，<code>self</code>参数指代的是所创建的对象实例自身。每当调用类的方法时，就将对象自身（用self来指示）作为一个参数传入。self不是关键字，其实用其他的命名也是可以的。</p><p>2.私有属性（变量）和方法以两个下划线开头</p><p>3.私有方法（以及变量）通过直接调用是无法访问的，但是可以通过下划线加类名来访问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=Student()</span><br><span class="line">a.name<span class="comment">#获取不到</span></span><br><span class="line">a.getname() <span class="comment">#获取不到</span></span><br><span class="line">a._Student__name <span class="comment">#可以获取到</span></span><br><span class="line">a._Student__getname() <span class="comment">#可以获取到</span></span><br></pre></td></tr></table></figure><h2 id="对象属性何时创建"><a href="#对象属性何时创建" class="headerlink" title="对象属性何时创建"></a>对象属性何时创建</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span><span class="params">()</span>:</span></span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">(self)</span>:</span></span><br><span class="line">        Member.count+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">a = Member()</span><br><span class="line">b = Member()</span><br><span class="line">a.init</span><br><span class="line">print(a.count)</span><br><span class="line"><span class="number">2</span></span><br><span class="line">print(b.count)</span><br><span class="line"><span class="number">2</span></span><br><span class="line">b.init</span><br><span class="line">print(a.count)</span><br><span class="line"><span class="number">3</span></span><br><span class="line">print(b.count)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>可以看出a和b都是访问的同一个属性count，那么对象创建时并没有克隆一份自己的变量，仍然引用类的属性。</p><p>但是如果对属性赋值，那么对象会克隆一份自己的属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a.count=<span class="string">'Two'</span></span><br><span class="line">print(a.count)</span><br><span class="line">Two</span><br><span class="line">print(b.count)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(Member)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">(self, count)</span>:</span></span><br><span class="line">        self.count = count</span><br><span class="line">        </span><br><span class="line">a = Teacher()</span><br></pre></td></tr></table></figure><ol><li><p>在类名的后面添加要继承的类的名字</p></li><li><p>继承以后可以改写父类的方法</p></li></ol><ul><li><p>查看是否为继承关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">issubclass(Teacher, Member)</span><br></pre></td></tr></table></figure></li><li><p>访问父类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Teacher.__bases__</span><br></pre></td></tr></table></figure></li><li><p>查看对象是否为类的实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isinstance(a,Teacher)</span><br><span class="line">isinstance(a,Member)</span><br></pre></td></tr></table></figure></li></ul><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>实现特定的功能，定义方法，被子类继承。需要被实现，如果不实现，那么只能被继续继承。</p><ul><li><p>访问a对象是否有方法<code>init</code>。<strong><em>方法要用引号括起来</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hasattr(a, <span class="string">'init'</span>)</span><br><span class="line">getattr(a,<span class="string">'init'</span>,<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></li><li><p>查看对象存储的所有值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.__dict__</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime <span class="keyword">as</span> dt</span><br><span class="line"></span><br><span class="line">print(dt.__dict__)</span><br></pre></td></tr></table></figure></li></ul><h2 id="抽象基类"><a href="#抽象基类" class="headerlink" title="抽象基类"></a>抽象基类</h2><p>不能被实例化的类（建议），定义子类应该实现的一组抽象方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoFenDui</span><span class="params">(ABC)</span>:</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_name</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li><p>其中<code>@abstractemthod</code>为装饰器，用来标记抽象，指定在子类中必须实现的方法</p></li><li><p>抽象类只能被继承，不能实例化。主要用来作为一种规范。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GamePlay</span><span class="params">(XiaoFenDui)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>如果没有实现父类的方法，那么它也只能被继承。不能实例化。</p></li></ul><h2 id="鸭子模型"><a href="#鸭子模型" class="headerlink" title="鸭子模型"></a>鸭子模型</h2><h3 id="1-实现超类的方法（至少是爷爷辈的）"><a href="#1-实现超类的方法（至少是爷爷辈的）" class="headerlink" title="1.实现超类的方法（至少是爷爷辈的）"></a>1.实现超类的方法（至少是爷爷辈的）</h3><p>只要实现了<code>XiaoFeiDui</code>的方法，即使不是它的对象，也可以认为是<code>XiaoFeiDui</code>的子类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Play</span><span class="params">(GamePlay)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_name</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        </span><br><span class="line">st1 = Play()</span><br><span class="line">isinstance(st1, XiaoFenDui)</span><br></pre></td></tr></table></figure><h3 id="2-注册为其子类"><a href="#2-注册为其子类" class="headerlink" title="2.注册为其子类"></a>2.注册为其子类</h3><p>即使没有继承以及实现父类的方法，只要注册为<code>XiaoFenDui</code>的子类，同样被视为它的子类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FakePlay</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(self,num)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">XiaoFenDui.register(FakePlay)</span><br><span class="line">c = FakePlay()</span><br><span class="line">print(issubclass(FakePlay,XiaoFenDui))</span><br><span class="line">print(isinstance(c, XiaoFenDui))</span><br></pre></td></tr></table></figure><h3 id="3-鸭子模型的思考"><a href="#3-鸭子模型的思考" class="headerlink" title="3.鸭子模型的思考"></a>3.鸭子模型的思考</h3><p>为什么需要鸭子模型呢？可能在别的语言看来这是不严谨的语法，大多数人是这么说的，于是我们也这么认为。但是不严谨带来的后果是啥？有人说的出来吗，但是我知道python的这种鸭子模型的优势：这么做的意义在于可以继承父类，那么也就拥有了其属性和方法。大大简化了语法，就像我们为什么要写一个函数一样，还不是为了避免写重复的东西浪费时间与字数。写个函数几个字就可以拿来引用那一段函数了。同样类也是一样，只不过其更大了，因为它包括了函数，它是一系列函数和属性的集合。</p><p>所以我们在写一个程序的时候最先应该做的不是动手去写，而是应该思考如何架构。是写一个类，一个函数，还是一个lambda表达式？或者这些都不用。思考好了永远要好一些，至少思路更加清晰。思考胜于动手啊！</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 一生所爱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-模块</title>
      <link href="/2019/11/19/python-%E6%A8%A1%E5%9D%97/"/>
      <url>/2019/11/19/python-%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><p>意义：重用代码</p><h2 id="在我们自己编写模块时，要支持对模块的检测："><a href="#在我们自己编写模块时，要支持对模块的检测：" class="headerlink" title="在我们自己编写模块时，要支持对模块的检测："></a>在我们自己编写模块时，要支持对模块的检测：</h2><p>在导入模块时检测模块是否有效。无效时打印一些字符。使用到了<code>__name__</code>方法</p><p>原理：</p><ul><li><p>在一个程序中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(__name__)<span class="comment">#返回的是__main__</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>在一个模块中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">print(datetime.__name__)<span class="comment">#返回的是模块名datetime</span></span><br></pre></td></tr></table></figure></li></ul><p>所以可以在模块中编写如下代码检测</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">"it is not import as a module"</span>)</span><br></pre></td></tr></table></figure><h2 id="模块的导入"><a href="#模块的导入" class="headerlink" title="模块的导入"></a>模块的导入</h2><h3 id="模块位置查看"><a href="#模块位置查看" class="headerlink" title="模块位置查看"></a>模块位置查看</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys, pprint</span><br><span class="line"></span><br><span class="line">pprint.pprint(sys.path)</span><br></pre></td></tr></table></figure><p><code>pprint</code>这个模块的<code>pprint</code>方法可以更好的显示长字符串</p><h2 id="添加模块路径"><a href="#添加模块路径" class="headerlink" title="添加模块路径"></a>添加模块路径</h2><ol><li><p>不常用：直接修改，需要写绝对路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">'/home/narcissus/Document/python'</span>)</span><br></pre></td></tr></table></figure></li><li><p>常用，修改环境变量pythonpath</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PYTHONPATH=$PYTHONPATH:~/Document/python</span><br></pre></td></tr></table></figure><p>没有？</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 一生所爱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-异常</title>
      <link href="/2019/11/19/python-%E5%BC%82%E5%B8%B8/"/>
      <url>/2019/11/19/python-%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p>刚开始觉得异常没多大作用，不就是报个错吗。后来在写python时才发现没了它程序就没法运行了。比如说我需要删除许多生成的临时表，但是不确定那些是有的，那些是没有的。因为程序可能中途停止了，如果不用try…expect来跳过这些错误的话，在删除的时候就可能导致程序终止。</p><h2 id="定义异常类"><a href="#定义异常类" class="headerlink" title="定义异常类"></a>定义异常类</h2><p>需要直接或间接地继承<code>Exception</code>类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyError</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="抽象异常"><a href="#抽象异常" class="headerlink" title="抽象异常"></a>抽象异常</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这样写了之后即使被除数输入了零，也不会导致程序终止，而是按照我们写的给出提示</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = int(input(<span class="string">"num1"</span>))</span><br><span class="line">    b = int(input(<span class="string">"num2"</span>))</span><br><span class="line">    print(a/b)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">"num2 can not to be zero"</span>)</span><br></pre></td></tr></table></figure><p>捕获多个异常时，使用元组将多个异常放在一起，同时可打印异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这样就把输入零，字符等错误都包含进去了</span></span><br><span class="line"><span class="keyword">except</span>(ZeroDivisionError, TypeError, NameError) <span class="keyword">as</span> e:</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><p>什么都不写时，可捕获除<code>Exception</code>父类<code>BaseException</code>的异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"wrong"</span>)</span><br></pre></td></tr></table></figure><p>捕获所有异常的情况下，打印错误信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br></pre></td></tr></table></figure><p>加上<code>else</code>可实现循环：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>无论是否发送错误，都将执行<code>finally</code>之后的语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">del</span> a, b</span><br></pre></td></tr></table></figure><p>完整格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    something</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    something</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    do something</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 一生所爱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-包</title>
      <link href="/2019/11/19/python-%E5%8C%85/"/>
      <url>/2019/11/19/python-%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="包package"><a href="#包package" class="headerlink" title="包package"></a>包package</h1><ul><li><p>意义：组织模块</p></li><li><p>条件：要被视为包，目录中需要包含<code>__init__.py</code>文件</p></li></ul><h2 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h2><p>导入整个包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br></pre></td></tr></table></figure><p>导入包中的模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime.datetime<span class="comment">#这种方式，在使用模块时是要写全名datetime.datetime</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime<span class="comment">#大多时候使用这种方式</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime <span class="keyword">as</span> dt <span class="comment">#取别名</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> *<span class="comment">#这种将只导入__all__变量中定义的所有公共接口</span></span><br></pre></td></tr></table></figure><h2 id="查看包中所有属性（包括类，方法，变量）"><a href="#查看包中所有属性（包括类，方法，变量）" class="headerlink" title="查看包中所有属性（包括类，方法，变量）"></a>查看包中所有属性（包括类，方法，变量）</h2><h3 id="dir"><a href="#dir" class="headerlink" title="dir()"></a><code>dir()</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  datetime <span class="keyword">as</span> dt</span><br></pre></td></tr></table></figure><p>直接使用dir(dt)会出现许多以下划线开头的私有方法变量等，所以需要使用列表推导式来过滤一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [n <span class="keyword">for</span> n <span class="keyword">in</span> dir(dt) <span class="keyword">if</span> <span class="keyword">not</span> n.startswith(<span class="string">'_'</span>)]</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><h3 id="help"><a href="#help" class="headerlink" title="help"></a><code>help</code></h3><p>查看详细帮助说明</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">help(dt)</span><br><span class="line">help(dt.datetime)</span><br></pre></td></tr></table></figure><h3 id="doc"><a href="#doc" class="headerlink" title="__doc__"></a><code>__doc__</code></h3><p>查看具体的函数文档</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(range.__doc__)</span><br></pre></td></tr></table></figure><h3 id="file"><a href="#file" class="headerlink" title="__file__"></a><code>__file__</code></h3><p>查看源代码位置</p><p>找到路径，如果使用pycharm的话，就不需要这么做，只需要ctrl+单击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(dt.datime.__file__)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 一生所爱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-函数</title>
      <link href="/2019/11/19/python-%E5%87%BD%E6%95%B0/"/>
      <url>/2019/11/19/python-%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="函数："><a href="#函数：" class="headerlink" title="函数："></a>函数：</h1><p>意义：复用代码，用在需要重复调用的地方。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunction</span><span class="params">(someargs)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> somevalue</span><br></pre></td></tr></table></figure><p>1.大部分情况下函数是为了返回一个值的，用<code>return</code>来返回，当然也可以什么都不返回（没有return）。</p><p>2.函数传参需要写一些参数到括号中，当然也可以不传参，那么括号中不写参数。</p><h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><p>全部采用小写，有多个单词时，用下划线连接。私有函数，可以使用下划线开头。</p><h2 id="参数修改："><a href="#参数修改：" class="headerlink" title="参数修改："></a>参数修改：</h2><p>传参之后对参数（传进来的变量）的修改：python中没法通过赋值这种方式来修改参数，只能通过修改参数对象本身的方式。（涉及参数作用域）</p><p>函数内部的作用域与函数外部的作用域不同，内部的作用域对函数外部没有影响，前提是不修改值。</p><p>如果只是对变量重新赋值，那么是相同值的不同引用，但是如果修改了值，那么函数外部的值也会变化。</p><p>如果参数本身不可修改，那么修改参数的方法：将参数变为可变的，比如放入列表中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_value</span><span class="params">(x)</span>:</span></span><br><span class="line">    x[<span class="number">0</span>]=x[<span class="number">0</span>]+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"><span class="comment">#需要将列表作为参数传入：</span></span><br><span class="line">a=[<span class="number">10</span>]</span><br><span class="line">changeValue(a)</span><br><span class="line"><span class="comment">#结果为[11],同时a也被修改为[11]</span></span><br></pre></td></tr></table></figure><h2 id="位置参数，关键字参数"><a href="#位置参数，关键字参数" class="headerlink" title="位置参数，关键字参数"></a>位置参数，关键字参数</h2><p>参数分为位置参数和关键字参数，上面的都是位置参数。</p><p>关键字参数：使用名称指定的参数</p><p>关键字参数的优点：可以设置默认值，所以调用函数可以不传入参数（不会报错），或者传入部分参数都是可以的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">total</span><span class="params">(num1=<span class="number">0</span>,num2=<span class="number">0</span>)</span>:</span></span><br><span class="line">    total=num1+num2</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line">print(total())<span class="comment">#返回0</span></span><br><span class="line">print(total(<span class="number">1</span>,<span class="number">2</span>))<span class="comment">#返回3</span></span><br></pre></td></tr></table></figure><h2 id="收集参数"><a href="#收集参数" class="headerlink" title="收集参数"></a>收集参数</h2><p>如果传入参数个数不定，将不定个参数放入元组（参数前面加一个星号）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(*num)</span>:</span></span><br><span class="line">    sum=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> num:</span><br><span class="line">        sum=sum+i</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">print(sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">print(sum(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>))</span><br></pre></td></tr></table></figure><p>星号之前的所有位置参数会放入元组，之后的即使是位置参数，也会被作为关键字参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这个如果没有给出className会报错</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">our_class</span><span class="params">(*studentName,className)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> className,studentName</span><br><span class="line">print(ourclass(<span class="number">1</span>,<span class="number">2</span>,className=<span class="string">'one'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#这个因为已经给了默认值，所以即使不写className也不会报错</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ourClass</span><span class="params">(*studentName,className=<span class="string">'xiaofendui'</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> className,studentName</span><br><span class="line">print(courclass(<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>如果要将关键字参数也放入元组，那么加两个星号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">courclass</span><span class="params">(**studentname,classname=<span class="string">'xiaofendui'</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> classname,studentname</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ourclass</span><span class="params">(**studentname,classname)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> classname,studentname</span><br></pre></td></tr></table></figure><h2 id="分解参数"><a href="#分解参数" class="headerlink" title="分解参数"></a>分解参数</h2><p>前面写的是函数如何接受不确定个数的参数，但是如果传进来的参数是一个数组或者字典呢？同样也可以在传入参数中分解参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line">print(count(*a))</span><br></pre></td></tr></table></figure><p>一个星号可以分解数组，两个星号可以分解字典</p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>namespace调用每一个函数时都会创建一个局部命名空间，只要不修改传入变量的值，函数外部的变量不会变。</p><p>函数中可以调用全局变量，但是普通的直接调用容易引起问题，比如函数中存在同名参数或变量。所以需要global访问全局变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime <span class="keyword">as</span> dt</span><br><span class="line"></span><br><span class="line">today=dt.datetime.now().strftime(<span class="string">"%F"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_time</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> globals()[<span class="string">"today"</span>]</span><br><span class="line">print(get_time())</span><br><span class="line"><span class="number">2019</span><span class="number">-11</span><span class="number">-14</span></span><br></pre></td></tr></table></figure><p>函数内部改变外部变量的方法除了前面说的改变值本身之外，还可以显式的引用全局变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    x+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">print(change())</span><br><span class="line"><span class="number">3</span></span><br><span class="line">print(x)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>1.嵌套在函数中的内部函数。</p><p>2.外部作用域的变量可被内部函数使用</p><p>3.修改外部作用域变量使用<code>nonlocal</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mult</span><span class="params">(a)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(b)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> a * b<span class="comment">#不能挨着写？？？？</span></span><br><span class="line">    <span class="keyword">return</span> plus</span><br><span class="line">print(mult(<span class="number">2</span>)(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 一生所爱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-内置函数</title>
      <link href="/2019/11/19/python-%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/"/>
      <url>/2019/11/19/python-%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><h2 id="init"><a href="#init" class="headerlink" title="__init__"></a><code>__init__</code></h2><p>作用：在对象创建时自动调用。不需要手动调用函数，常用于初始化一些变量，属性。使用内置<code>__init__</code>特殊方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.num = <span class="number">30</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_num</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.num</span><br><span class="line"></span><br><span class="line"><span class="comment"># B继承与A，可以重写A的init方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"have not use A's init method"</span>)</span><br></pre></td></tr></table></figure><p>如果B是继承与A，同时又重写了A的init方法，但是其它的方法中需要用到初始化A的数据（self.num），那么必须包含初始化A的init语句，否则会报错。因为改写的B中没有这个变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这样写表示在B的init方法中调用A的init方法，B中其它方法如果需要使用到self.num时就不会报错</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        A.__init__(self)</span><br></pre></td></tr></table></figure><p>上面这种写法是2.x版本写法，3.x版本写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br></pre></td></tr></table></figure><p>使用到了<code>super</code>函数，而且没有使用<code>self</code>，优点在于有多个超类的时候只需要写一个就行。它返回一个<code>super对象</code>，访问其属性时，它会在所有的超类中寻找。</p><h1 id="其他内置方法"><a href="#其他内置方法" class="headerlink" title="其他内置方法"></a>其他内置方法</h1><p>实现序列，要求不使用get，set方法，一个对象既可以设值，也可以取值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_index</span><span class="params">(key)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(key, int):</span><br><span class="line">        <span class="keyword">raise</span> TypeError</span><br><span class="line">    <span class="keyword">if</span> key &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> IndexError</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mylist</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 初始化变量，字典</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, start=<span class="number">0</span>, step=<span class="number">1</span>)</span>:</span></span><br><span class="line">        self.start = start</span><br><span class="line">        self.step = step</span><br><span class="line">        self.changed = &#123;&#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment"># 如果只输入一个值，则查找返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(key)</span>:</span></span><br><span class="line">        check_index(key)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self.changed[key]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> self.start + self.step * key</span><br><span class="line">      </span><br><span class="line">    <span class="comment"># 如果输入两个值，则为设置值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(key, value)</span>:</span></span><br><span class="line">        check_index(key)</span><br><span class="line">        self.changed[key] = value</span><br></pre></td></tr></table></figure><h2 id="函数property"><a href="#函数property" class="headerlink" title="函数property"></a>函数property</h2><p>这个函数就可以简化上面复杂的步骤，将set和get统一为一个属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Juice</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_count</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.count</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_count</span><span class="params">(self,num)</span>:</span></span><br><span class="line">        self.count = num</span><br><span class="line">        </span><br><span class="line">    mycount = property(get_count, set_count)</span><br><span class="line"></span><br><span class="line">c = Juice()</span><br><span class="line">c.mycount</span><br></pre></td></tr></table></figure><p><strong>需要特别注意的是，上面代替get与set的名称不能写count，而要使用其他的名字比如mycount</strong></p><p>因为最终我们调用函数的时候(如果写成了count)会写<code>c.count</code>，那么当他在执行get函数的时候，会返回一个<code>self.count</code>。self指代的是对象自身，那么就又返回到调用函数<code>c.count</code>这样就形成了递归调用。</p><p>解决方法是要么修改property封装的属性名称（mycount），要么在变量前加下划线（_count/__count）。目的就是为了不形成迭代关系。</p><p><code>property</code>中的参数顺序不能错：<code>property(get, set, del)</code></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 一生所爱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim-实际应用</title>
      <link href="/2019/11/19/vim-%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/"/>
      <url>/2019/11/19/vim-%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>还是那句话，书到用时方恨少！我似乎又明白了一些呢</p></blockquote><p>今天需要将一个文件的每一行的开头都加上几个字符，本来应该是个比较简单的事，一个sed不就搞定了吗，可是。。。。。。我忘了sed咋写的了。</p><p>然后我想到了使用vim，因为几乎没啥是vim不能做的啊。当然问题得到了解决，可是我却发现我又忘记了之前学的sed用法。果然知识不学习就会忘，说明我用的并不够多，也不熟悉。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i '1,$s/^/joyce' test.txt#sed写法</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s/^/joyce/g#vim写法</span><br></pre></td></tr></table></figure><p>虽然今天的那个文件没有空行，但是如果有空行咋写呢？要在每一行前加几个字符，但是不能在空行前加？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 我用sed没有成功，可能是方法不对吧，但是用vim还是凑合做到了</span></span><br><span class="line">gg#到第一行</span><br><span class="line">ctrl+v#块模式</span><br><span class="line">G#选到最后一行</span><br><span class="line">y#复制</span><br><span class="line">shift+i#在行的最开头insert</span><br><span class="line">ctrl+o#insert normal模式，用来执行normal下的p命令</span><br><span class="line">p#粘贴</span><br><span class="line"><span class="meta">#</span><span class="bash">前面做的这么多，就是因为替换时会覆盖第一个字符，所有才多复制一个出来</span></span><br><span class="line">:%s+^\S+joyce+g#这里是找到以字符开头的行（排除空行），并用joyce来替换</span><br></pre></td></tr></table></figure><p>sed就做不到了，因为像上面这样替换的时候会将第一个字符覆盖掉。</p><p><strong>最好的方法：</strong></p><p>使用global去匹配，使用substitute去替换。如果仅仅使用substitute的话，无法做到既匹配又替换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:g/./s/^/joyce</span><br></pre></td></tr></table></figure><p>现在好多东西需要学啊，python是目前最重要的，我还想学docker，还要继续学vim，然后perl忘得也差不多了，还想学haskell以及go。我咋学的过来啊？</p>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 一生所爱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim-替换</title>
      <link href="/2019/11/11/vim-%E6%9B%BF%E6%8D%A2/"/>
      <url>/2019/11/11/vim-%E6%9B%BF%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">:[range]substitute/from/to/[flags]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">range指定范围</span></span><br><span class="line"><span class="meta">#</span><span class="bash">substitute可以简写为s</span></span><br><span class="line"><span class="meta">#</span><span class="bash">用to替换from</span></span><br><span class="line"><span class="meta">#</span><span class="bash">flag指定行范围和操作</span></span><br></pre></td></tr></table></figure><h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><p>1.对一行中的第一个出现的进行替换：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:s/a/b</span><br></pre></td></tr></table></figure><p>2.对一行中出现的所有a进行替换：</p><p>需要使用到g（global）这个参数，有这个参数的话表示对一行的操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">使用flag：g</span></span><br><span class="line">:s/a/b/g</span><br></pre></td></tr></table></figure><p>3.对文中的所有a进行替换操作：</p><p>需要使用到<code>%</code>，它表示的是此文件名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s/a/b/g</span><br></pre></td></tr></table></figure><p>4.查看文中有多少个a</p><p>一般来说我们在替换一个东西之前都需要看一下它出现了多少次</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">使用flag：n</span></span><br><span class="line">:%s/a/b/gn#它并不会执行替换操作，仅仅打印出现次数</span><br></pre></td></tr></table></figure><p>5.每次替换之前都让我们确认一次</p><p>这样可以选择那些不进行替换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">使用到了flag：c</span></span><br><span class="line">:%s/a/b/gc</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">这里面出现的几个参数</span></span><br><span class="line">y替换</span><br><span class="line">n跳过这个</span><br><span class="line">a剩下的全部替换</span><br><span class="line">q结束替换，剩下的不进行替换，之前的保留</span><br><span class="line">l与q的区别在于当前这个替换之后在结束替换</span><br></pre></td></tr></table></figure><p>6.打印最后修改的行</p><p>感觉这个作用不是很大</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">使用到了flag：p</span></span><br><span class="line">:%s/a/b/gp</span><br></pre></td></tr></table></figure><h2 id="from"><a href="#from" class="headerlink" title="from"></a>from</h2><p>from支持正则表达式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eg：</span><br><span class="line">:%s/^the/these/g#将所有行首是the的替换为these</span><br></pre></td></tr></table></figure><p>如果替换中出现了<code>/</code>这个字符，需要转义</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s/\/home/\/root/g#将所有/home开头的替换为/root</span><br></pre></td></tr></table></figure><p>当然了，其实不需要写这么复杂，有<code>+</code>替代<code>/</code>，这和perl有点像啊</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s+/home+/root+g</span><br></pre></td></tr></table></figure><h2 id="range"><a href="#range" class="headerlink" title="range"></a>range</h2><p>1.没有range，只对当前行操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:s/a/b/g</span><br></pre></td></tr></table></figure><p>2.指定全文的范围</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s/a/b/g</span><br></pre></td></tr></table></figure><p>3.某行到某行之间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> m到n行，闭区间[m,n]</span></span><br><span class="line">:m,ns/a/b/g</span><br></pre></td></tr></table></figure><p>4.当前行到最后一行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">当前行使用点，这个点不能少</span></span><br><span class="line">:.,$/a/b/g</span><br></pre></td></tr></table></figure><p>5.支持相对定位</p><p>那么这个参考位置就是光标所在的当前行<code>.</code>了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:-5,.s/a/b/g#前五行到当前行的所有a替换为b</span><br><span class="line">:-5,+4s/a/b/g#前五行到后四行行的所有a替换为b</span><br><span class="line">:.,+4s/a/b/g#当前行到后四行的所有a替换为b</span><br></pre></td></tr></table></figure><p>6.还可以通过搜索模式来指定作用范围</p><p>这种也类似与第五种，只是这里没有明确的行数，需要它自己去找。在vim中查找使用的就是<code>？</code>（向文章前查找，<code>/</code>向文章后查找），?与/总是成对出现</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">这里就是寻找当前行之前以the开头的，以及当前行之后以this开头的范围间的haha并替换为hehe</span></span><br><span class="line">:?^the?,/^this/s+haha+hehe+g</span><br></pre></td></tr></table></figure><p>7.混搭5与6中的搜索定位功能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">这样加上数字之后表示不替换匹配到的行本身</span></span><br><span class="line">:?^the?+1,/^this/-1s+haha+hehe+g</span><br></pre></td></tr></table></figure><p>8.还可以通过visual模式去指定要操作的行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">shift</span>+v选择好范围后，使用冒号，范围则已经指定好了</span></span><br><span class="line">:'&lt;,'&gt;s/g/b/g</span><br></pre></td></tr></table></figure><p>这里是使用到了标记来指定范围，所以，以后我们同样可以使用自己的标记来指定范围。有点秀啊这个</p><p>9.第五点是手动输入开始结束位置，这个更厉害</p><p>当然默认是以当前行为一个开始范围，好像没有向文章开头的快捷做法，因为-已近被占用了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">当前行之后的五行</span></span><br><span class="line">5:#输入这个以后，范围已近指定好了</span><br></pre></td></tr></table></figure><h2 id="全局命令-global"><a href="#全局命令-global" class="headerlink" title="全局命令:global"></a>全局命令:global</h2><p>前面的替换都是通过指定范围（数字或者匹配），然后在进行替换这些操作</p><p>但是global不仅做到了这些，它默认是作用域全文，首先通过匹配到某些行，然后对这些行进行操作。相比于之前的多了一个定位。针对的不是范围操作，而是找到指定行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:[range]global/&#123;pattern&#125;/&#123;command&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line"><span class="meta">#</span><span class="bash">将所有以//开头的中所有foobar替换为barfoo</span></span><br><span class="line">:g+^//+s/foobar/barfoo/g</span><br><span class="line"><span class="meta">#</span><span class="bash">将所有以<span class="keyword">if</span>开头的，中所有的[替换为&lt;</span></span><br><span class="line">:g/^if/+s+\[+\&lt;+g#特殊符号需要转义</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim-寄存器</title>
      <link href="/2019/11/11/vim-%E5%AF%84%E5%AD%98%E5%99%A8/"/>
      <url>/2019/11/11/vim-%E5%AF%84%E5%AD%98%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="命令的记录与回放："><a href="#命令的记录与回放：" class="headerlink" title="命令的记录与回放："></a>命令的记录与回放：</h1><p><code>.</code>命令用来重复最近的一次编辑动作</p><h2 id="使用寄存器："><a href="#使用寄存器：" class="headerlink" title="使用寄存器："></a>使用寄存器：</h2><p>有26个寄存器可用</p><p>q[a-zA-Z]q</p><h2 id="调用寄存器：-q-a-zA-Z"><a href="#调用寄存器：-q-a-zA-Z" class="headerlink" title="调用寄存器：@q[a-zA-Z]"></a>调用寄存器：@q[a-zA-Z]</h2><p>然后就可以使用@@重复调用了，或者指定调动多少次：num@q[a-zA-Z]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">eg：使用一个a的寄存器</span><br><span class="line">qa#开始</span><br><span class="line"><span class="meta">#</span><span class="bash">然后就是一些vim的操作</span></span><br><span class="line">q#停止</span><br><span class="line">@a#调用</span><br><span class="line">10@a#调用寄存器中的操作10次</span><br></pre></td></tr></table></figure><h2 id="寄存器中的内容编辑："><a href="#寄存器中的内容编辑：" class="headerlink" title="寄存器中的内容编辑："></a>寄存器中的内容编辑：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"ap#查看寄存器a的内容</span><br><span class="line"><span class="meta">#</span><span class="bash">然后可以像修改文本一样的修改这些内容</span></span><br><span class="line">0#回到行首</span><br><span class="line">"ay$#将修改后的内容放回寄存器中</span><br></pre></td></tr></table></figure><h2 id="寄存器中内容的追加"><a href="#寄存器中内容的追加" class="headerlink" title="寄存器中内容的追加"></a>寄存器中内容的追加</h2><p>大写的寄存器是对小写寄存器的追加，或者小写的也能修改大写的寄存器。表示的都是修改的意思</p>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim-visual模式</title>
      <link href="/2019/11/11/vim-visual%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/11/11/vim-visual%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="插入数据："><a href="#插入数据：" class="headerlink" title="插入数据："></a>插入数据：</h1><p>使用到了visual模式的块选择、编辑（ctrl+v）</p><p>按下ctrl+v选择块，一般我们会做的操作是插入一些数据。</p><p>A、I、G、C的特殊用法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">eg：</span><br><span class="line"><span class="meta">#</span><span class="bash">现在要在一些行的开头添加<span class="comment">#进行注释</span></span></span><br><span class="line">ctrl+v选择第一行第一个字符，j选择一些行后，按下I，写入#，按下ESC。然后会自动在剩下的行填充#</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">现在要将整个文本添加注释，它支持所有的移动命令</span></span><br><span class="line">ctrl+v选择第一行第一个字符，按下G，按下I，写入#，按下ESC。然后会自动在剩下的行填充#</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">现在要在一些行后添加句号，这里使用<span class="built_in">shift</span>是不行的</span></span><br><span class="line">ctrl+v选择某些行后，按下$，会选择整个行，按下A，写入。，按下ESC。然后会自动在剩下的行填充。</span><br><span class="line"><span class="meta">#</span><span class="bash">现在要将选择块后面的全部删掉，然后加入新的字符</span></span><br><span class="line">ctrl+v选择某些行，C，键入hehe，，按下ESC。然后会自动在剩下的行填充。</span><br></pre></td></tr></table></figure><p>其它的剪切，删除等命令都是可以用的。ctrl+v只是起到了一个选择的作用</p><h1 id="设置缩进："><a href="#设置缩进：" class="headerlink" title="设置缩进："></a>设置缩进：</h1><p>个人觉得&lt;&gt;的主要作用是用来设置缩进，当然也可以用在行中，来排版</p><p>shift+v选择某些需要缩进的行，按<code>&gt;</code>增加缩进；按<code>&lt;</code>减少缩进</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">这个取决与你怎么用了，会用的就比较厉害了</span></span><br><span class="line">eg：</span><br><span class="line"><span class="meta">#</span><span class="bash">简单来个代码块缩进</span></span><br><span class="line">shift+v&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">再来个高级的缩进，选择指定的行缩进,使用global命令进行选择包含s的行，缩进一个单位</span></span><br><span class="line">shift+v选择范围:g/s/&gt;</span><br></pre></td></tr></table></figure><p>设置缩进的单位：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:set shiftwidth=4</span><br></pre></td></tr></table></figure><h1 id="块合并："><a href="#块合并：" class="headerlink" title="块合并："></a>块合并：</h1><p>将选择的一些行合并为一行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shift+vJ#合并为一行，去掉所有行开头的空格</span><br><span class="line">shift+vgJ#合并为一行，保留所有行开头的空格</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下搜狗输入法皮肤安装</title>
      <link href="/2019/11/11/linux%E4%B8%8B%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E7%9A%AE%E8%82%A4%E5%AE%89%E8%A3%85/"/>
      <url>/2019/11/11/linux%E4%B8%8B%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E7%9A%AE%E8%82%A4%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="下载皮肤"><a href="#下载皮肤" class="headerlink" title="下载皮肤"></a>下载皮肤</h1><p>这个就不用说了，直接在浏览器中去搜，找到喜欢的直接下载下来就行了。下载下来的有两种文件之中是以<code>.ssf</code>结尾的，另外一种是只有一个文件名。下面说说如何安装他们：</p><p>1.需要明白的第一点是linux不同于windows，不能直接双击安装，没这种操作。第二就是这些皮肤本来就是以<code>.ssf</code>结尾的。所以下载下来没有后缀的直接改个后缀就行。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>2.找到安装位置，可能每个人的安装位置都不一样吧。所以只能找了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find ~ -name '*.ssf'</span><br><span class="line"><span class="meta">#</span><span class="bash">我的在这个位置</span></span><br><span class="line">~/.config/sogou-qimpanel/skin</span><br></pre></td></tr></table></figure><p>3.建文件夹，将文件复制过去</p><p>举例我下载的：<code>简约彩虹.ssf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.config/sogou-qimpanel/skin </span><br><span class="line">mkdir 简约彩虹</span><br><span class="line">cp ~/Downloads/简约彩虹.ssf ~/.config/sogou-qimpanel/skin/简约彩虹</span><br></pre></td></tr></table></figure><p>4.现在仍然是使用不了的，因为缺少了配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">之前这里不是有很多皮肤吗？复制一个配置文件过去就ok了</span></span><br><span class="line">cp Mac黑键盘/skin.ini 简约彩虹/</span><br></pre></td></tr></table></figure><p>5.这样就可以使用这个皮肤了。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>archlinux安装方法总结</title>
      <link href="/2019/11/09/archlinux%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/2019/11/09/archlinux%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="重启之前"><a href="#重启之前" class="headerlink" title="重启之前"></a>重启之前</h1><p>从使用archlinux起快三年了吧，安装步骤基本没什么变化，而这次应该是史无前例。怎么说呢，arch变的更好了，因为从安装上就能看出arch更加简化其基础系统了，这也是arch的初衷，给用户最大的选择。这一次连内核都是可选项目了，firmware，dhcpcd，nano等许多都是要自己手动选择的。不过这次我的安装并不是那么顺利，问题可能在于显卡驱动吧，或者我少安装了一些必要的软件吗？然后加上xmonad这次也在升级，导致我的topbar的配置也不起作用了。两个事情叠在一起真的是有点头疼。</p><h2 id="在基础系统的安装方面"><a href="#在基础系统的安装方面" class="headerlink" title="在基础系统的安装方面"></a>在基础系统的安装方面</h2><p>按照archwiki上的步骤就足够了，为什么不写，因为发现步骤变了，所以没有一个特定的方法。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S wpa_supplicant dialog netctl dhcpcd</span><br></pre></td></tr></table></figure><p>在安装dhcpcd的时候会有一个选择项，需要选择默认的，否则连接网络会出错</p><h2 id="连接网咯："><a href="#连接网咯：" class="headerlink" title="连接网咯："></a>连接网咯：</h2><p>这里用到了dhcpcd来获取动态ip，同时使用了netctl（wifi-menu是其中一个组件）网络管理器，netctl同样可以设置静态ip（没有选择标配的NetworkManager大块头，因为我一个用WM的安装它没多大必要。当然了如果是安装DE的话，这个还是标配）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wifi-menu</span><br></pre></td></tr></table></figure><p>连接成功后，会在<code>/etc/netctl</code>目录下生成对应的连接配置文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/netctl</span><br><span class="line">netctl enable 连接的配置文件名#这里需要写文件名，而不是路径</span><br></pre></td></tr></table></figure><p>这样就可以自动连接了。</p><h2 id="设置静态ip："><a href="#设置静态ip：" class="headerlink" title="设置静态ip："></a>设置静态ip：</h2><p>同样使用netctl网络管理器来设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">netctl网络管理软件的example目录下包括了配置文件模板，复制过去再修改即可</span></span><br><span class="line">sudo cp /etc/netctl/examples/wireless-wpa-static /etc/netctl</span><br><span class="line"><span class="meta">#</span><span class="bash">修改为如下即可，需要注意的地方是ip后面必须接一个/24，否则可能连接不上</span></span><br><span class="line">Description='A simple WPA encrypted wireless connection using a static IP'</span><br><span class="line">Interface=wlo1</span><br><span class="line">Connection=wireless</span><br><span class="line">Security=wpa</span><br><span class="line">ESSID='wifi名字'</span><br><span class="line">Key='thepasswd'</span><br><span class="line">IP=static</span><br><span class="line">Address='192.168.0.104/24'</span><br><span class="line">Gateway='192.168.0.1'</span><br><span class="line">DNS=('114.114.114.114')</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">修改完配置文件之后就是需要让它生效并自动启动了，由于之前已经配置了自动启动另一个wifi连接，所以需要将另外一个禁用，否则会报错</span></span><br><span class="line">netctl disable 之前的wifi配置文件名</span><br><span class="line">netctl enable wireless-wpa-static</span><br><span class="line"><span class="meta">#</span><span class="bash">然后可以重启服务，或者重启电脑</span></span><br><span class="line">netctl restart wireless-wpa-static</span><br></pre></td></tr></table></figure><hr><h1 id="重启之后"><a href="#重启之后" class="headerlink" title="重启之后"></a>重启之后</h1><h2 id="由于很多东西base都不提供了，连man手册都没有"><a href="#由于很多东西base都不提供了，连man手册都没有" class="headerlink" title="由于很多东西base都不提供了，连man手册都没有"></a>由于很多东西base都不提供了，连man手册都没有</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S vim#喜欢的编辑器，vi不默认提供，反正我也不用</span><br><span class="line">sudo pacman -S man#安装了才能用man命令</span><br><span class="line">sudo pacman -S sudo#安装了才能用sudo命令</span><br><span class="line">sudo pacman -S fish#shell，尝试这个，不按照zsh了</span><br></pre></td></tr></table></figure><p>将<code>.vimrc</code>配置文件复制到～/下，其它扩展复制到<code>~/.vim</code>下</p><p>fish的配置，基于网页的配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fish_config</span><br></pre></td></tr></table></figure><p>用了几天的fish之后发现还是zsh比较适合我，主要原因就是fish的shell语法和bash，zsh这些差异太大了，而我还是用通用的吧，所以还是用zsh了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S zsh oh-my-zsh-git</span><br></pre></td></tr></table></figure><h2 id="修改grub-theme"><a href="#修改grub-theme" class="headerlink" title="修改grub theme"></a>修改grub theme</h2><p>可以去网上下载gnomelook.org，或者安装本地已经下载好的，主题名字：arch-silence-master</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">unzip arch-silence-master.zip#解压</span><br><span class="line">sudo mv arch-silence-master /boot/grub/theme/#移动到theme目录下</span><br><span class="line">sudo vim /etc/default/grub#配置文件位置</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改为如下：</span></span><br><span class="line">GRUB_THEME="/boot/grub/themes/arch-silence-master/theme/theme.txt"</span><br><span class="line"><span class="meta">#</span><span class="bash">上面的配置文件修改好了就可以使用grub-mkconfig命令生成gurb.cfg配置文件</span></span><br><span class="line">sudo grub-mkcofig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><h2 id="开启boot-message"><a href="#开启boot-message" class="headerlink" title="开启boot message"></a>开启boot message</h2><p>现在grub默认关闭了boot message，启动之后就看不到加载的一些信息，可以开启它</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">同样是在gurb的配置文件中修改</span></span><br><span class="line">sudo vim /etc/default/grub</span><br><span class="line"><span class="meta">#</span><span class="bash">默认设置为了这个</span></span><br><span class="line">GRUB_CMDLINE_LINUX_DEFAULT="loglevel=3 quiet"</span><br><span class="line"><span class="meta">#</span><span class="bash">将quiet去掉即可，loglevel分为0-7个等级，7是最为详细的debug信息</span></span><br><span class="line">GRUB_CMDLINE_LINUX_DEFAULT="loglevel=3"</span><br><span class="line"><span class="meta">#</span><span class="bash">最后重新生成配置文件（其实也可以直接在配置文件中改，但是下次生成的时候会覆盖修改的地方）</span></span><br><span class="line">sudo grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><h2 id="添加用户，加入组"><a href="#添加用户，加入组" class="headerlink" title="添加用户，加入组"></a>添加用户，加入组</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">groupadd sudo#添加sudo组</span><br><span class="line">vim /etc/sudoers#取消sudo前面的注释</span><br><span class="line">useradd -m -G sudo -s /usr/bin/fish narcissus</span><br></pre></td></tr></table></figure><h2 id="安装显示服务"><a href="#安装显示服务" class="headerlink" title="安装显示服务"></a>安装显示服务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S xorg-server#安装xorg</span><br><span class="line">sudo pacman -S xf86-video-vesa#发现intel或者invidia都很卡，只能用这个</span><br><span class="line">sudo pacman -S pulseaudio pulseaudio-alsa#声音驱动</span><br><span class="line">sudo pacman -S xorg-xinit#安装了才能用startx进入GUI</span><br><span class="line">sudo pacman -S xorg-xbacklight#安装了才能调节屏幕亮度，但是我发现这个我也用不了了</span><br><span class="line"><span class="meta">#</span><span class="bash">手动调节背光</span></span><br><span class="line">vim /sys/class/backlight/intel_backlight</span><br></pre></td></tr></table></figure><p>后来发现好多东西都缺，所以干脆一次性把xorg全安装了(全部安装也才100M不到)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S xorg</span><br></pre></td></tr></table></figure><h2 id="安装窗口管理器"><a href="#安装窗口管理器" class="headerlink" title="安装窗口管理器"></a>安装窗口管理器</h2><p>简简单单的就好，不需要桌面环境，gnome虽然豪华，但是耗资源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">我发现现在这个也有问题，之前的配置有问题了，不知道是不是因为升级了版本0.15的原因</span></span><br><span class="line">sudo pacman -S xmonad xmonad-contrib</span><br><span class="line">sudo pacman -S xterm#xmonad默认使用xterm，需要安装</span><br><span class="line"><span class="meta">#</span><span class="bash">将xterm的配置文件.Xresources复制到～/下</span></span><br><span class="line">xrdb ~/.Xresources#使配置生效</span><br></pre></td></tr></table></figure><p>复制xmonad配置文件然后编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.xmonad/xmonad.hs#配置文件位置</span><br><span class="line">xmonad --recompile</span><br></pre></td></tr></table></figure><p>设置登录xmond</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/X11/xinit/xinitrc ～/.xinitrc#复制配置文件</span><br><span class="line">exec xmonad#添加启动xmonad</span><br></pre></td></tr></table></figure><h2 id="进入桌面环境"><a href="#进入桌面环境" class="headerlink" title="进入桌面环境"></a>进入桌面环境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startx#进入xmonad</span><br></pre></td></tr></table></figure><h2 id="pacman下载命令结果颜色显示"><a href="#pacman下载命令结果颜色显示" class="headerlink" title="pacman下载命令结果颜色显示"></a>pacman下载命令结果颜色显示</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/pacman.conf #uncomment color，让pacman搜索出来的结果显示颜色</span><br></pre></td></tr></table></figure><h2 id="添加镜像服务器"><a href="#添加镜像服务器" class="headerlink" title="添加镜像服务器"></a>添加镜像服务器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 添加china服务器（网易），这样下载速度快一些，而且可以用国内的仓库中的软件</span></span></span><br><span class="line">[archlinuxcn]</span><br><span class="line">Server = https://mirrors.163.com/archlinux-cn/$arch</span><br></pre></td></tr></table></figure><p>安装keyring</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure><h2 id="安装aur下载软件yay"><a href="#安装aur下载软件yay" class="headerlink" title="安装aur下载软件yay"></a>安装aur下载软件<code>yay</code></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S yay</span><br></pre></td></tr></table></figure><h2 id="下载常用软件"><a href="#下载常用软件" class="headerlink" title="下载常用软件"></a>下载常用软件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S screenfetch#查看系统参数</span><br><span class="line">sudo pacman -S htop#资源管理器</span><br><span class="line">sudo pacman -S feh#查看图片，设置桌面背景图</span><br><span class="line"></span><br><span class="line">sudo pacman -S ranger#终端文件浏览器，图片是基于w3m显示的</span><br><span class="line">sudo pacman -S w3m#终端浏览器，安装这个后ranger才能显示图片</span><br><span class="line"></span><br><span class="line">sudo pacman -S typora#markdown编辑器</span><br><span class="line"></span><br><span class="line">sudo pacman -S firefox#浏览器</span><br><span class="line">sudo pacman -S wqy-microhei#浏览器显示中文</span><br><span class="line"></span><br><span class="line">sudo pacman -S openssh#使用ssh远程连接服务器</span><br><span class="line">sudo pacman -S mplayer#视频软件</span><br><span class="line"></span><br><span class="line">sudo pacman -S baidupcs-go#百度云终端下载软件，不限速</span><br><span class="line"></span><br><span class="line">sudo pacman -S netease-cloud-music#网易云播放器</span><br><span class="line"></span><br><span class="line">sudo pacman -S ttf-iosevka#安装字体</span><br><span class="line">sudo pacman -S flameshot#安装截图软件</span><br><span class="line">sudo pacman -S unzip#解压软件zip格式</span><br><span class="line"></span><br><span class="line">sudo pacman -S dbeaver#数据库sql</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S obs-studio#录屏软件</span><br><span class="line">    libfdk-aac: FDK AAC codec support</span><br><span class="line">    libxcomposite: XComposite capture support [installed]</span><br><span class="line">    libva-intel-driver: hardware encoding</span><br><span class="line">    libva-mesa-driver: hardware encoding</span><br><span class="line">    luajit: scripting support</span><br><span class="line">    python: scripting support [installed]</span><br><span class="line">    vlc: VLC Media Source support</span><br></pre></td></tr></table></figure><h2 id="安装输入法："><a href="#安装输入法：" class="headerlink" title="安装输入法："></a>安装输入法：</h2><h3 id="安装google拼音输入"><a href="#安装google拼音输入" class="headerlink" title="安装google拼音输入"></a>安装google拼音输入</h3><p>发现搜狗输入法太矫情，明明就是按照文档步骤走的，可是总有点问题，所以安装google输入法了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S fcitx fcitx-configtool fcitx-im fcitx-googlepinyin</span><br></pre></td></tr></table></figure><p>添加配置文件，这个文件很重要，如果没有它，那么在terminal中用不了中文输入（包括vim中）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.pam_environment</span><br><span class="line">GTK_IM_MODULE=fcitx</span><br><span class="line">QT_IM_MODULE=fcitx</span><br><span class="line">XMODIFIERS=@im=fcitx</span><br></pre></td></tr></table></figure><p>添加启动命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.xinitrc</span><br><span class="line">fcitx &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><hr><h3 id="还是搜狗输入法好用啊"><a href="#还是搜狗输入法好用啊" class="headerlink" title="还是搜狗输入法好用啊"></a>还是搜狗输入法好用啊</h3><p>我好像打脸了，用了几天的google输入法，又想念搜狗输入法的联想和记忆输入了。不是搜狗输入法矫情，是我的问题，我承认是我的问题：）</p><p>这也是第一次发现wiki需要更新了啊，在关于汉语输入法这里真的需要更新一下了，因为发现fcitx-qt4被移出了fcitx-im包。同时fcitx被这个fcitx-lilydjwg-git取代了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装wiki上说的安装fcitx-im就应该包含qt4的，其实之前安装的时候本来就又qt4的，只是现在没了</span></span><br><span class="line">narcissus ~&gt; sudo pacman -S fcitx-im                                 </span><br><span class="line">:: There are 4 members in group fcitx-im:</span><br><span class="line">:: Repository community</span><br><span class="line">   1) fcitx  2) fcitx-gtk2  3) fcitx-gtk3  4) fcitx-qt5</span><br><span class="line"><span class="meta">#</span><span class="bash">之前没有注意看，确实少了一个qt4的包</span></span><br></pre></td></tr></table></figure><p>所以从这里开始才是搜狗输入法的正确安装方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S fcitx-gtk2 fcitx-gtk3 fcitx-qt4 fcitx-qt5</span><br><span class="line">resolving dependencies...</span><br><span class="line">looking for conflicting packages...</span><br><span class="line">warning: removing 'fcitx-gtk2' from target list because it conflicts with 'fcitx-lilydjwg-git'</span><br><span class="line">warning: removing 'fcitx-gtk3' from target list because it conflicts with 'fcitx-lilydjwg-git'</span><br><span class="line">:: fcitx-lilydjwg-git and fcitx are in conflict. Remove fcitx? [y/N] y</span><br><span class="line"></span><br><span class="line">Packages (3) fcitx-4.2.9.7-1 [removal]  fcitx-lilydjwg-git-2:4.2.9.7.20191107-1  fcitx-qt5-1.2.3-11</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S fcitx-sogoupinyin fcitx-configtool</span><br></pre></td></tr></table></figure><p>然后打开fcitx-configtool将搜狗输入法加入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">添加环境变量这里写到了本地，也可以写入系统环境变量/etc/environment</span></span><br><span class="line">vim ~/.pam_environment</span><br><span class="line">GTK_IM_MODULE=fcitx</span><br><span class="line">QT_IM_MODULE=fcitx</span><br><span class="line">XMODIFIERS=@im=fcitx</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">加入xinit启动</span></span><br><span class="line">vim ~/.xinitrc</span><br><span class="line">fcitx &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>最后需要退出登录或者重启一下，就可以使用搜狗输入法了</p><h2 id="禁用触摸板，碍事"><a href="#禁用触摸板，碍事" class="headerlink" title="禁用触摸板，碍事"></a>禁用触摸板，碍事</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S xorg-xinput</span><br></pre></td></tr></table></figure><p>添加启动自动禁用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim .xinitrc</span><br><span class="line">xinput disable 14</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xinput enable 14#想要启动也很简单</span><br></pre></td></tr></table></figure><h2 id="设置鼠标样式为指针"><a href="#设置鼠标样式为指针" class="headerlink" title="设置鼠标样式为指针"></a>设置鼠标样式为指针</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S xorg-xsetroot</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim .xinitrc</span><br><span class="line">xsetroot -cursor_name left_ptr</span><br></pre></td></tr></table></figure><h2 id="挂载ntfs格式文件时让普通用户有权限"><a href="#挂载ntfs格式文件时让普通用户有权限" class="headerlink" title="挂载ntfs格式文件时让普通用户有权限"></a>挂载ntfs格式文件时让普通用户有权限</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S ntfs-3g#标准挂载ntfs格式文件</span><br><span class="line">eg:</span><br><span class="line">sudo mount -t ntfs-3g /dev/sda1 /mnt</span><br></pre></td></tr></table></figure><h2 id="安装终端复制软件（剪切板）"><a href="#安装终端复制软件（剪切板）" class="headerlink" title="安装终端复制软件（剪切板）"></a>安装终端复制软件（剪切板）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S xclip</span><br><span class="line">使用eg：</span><br><span class="line">echo "some text" | xclip</span><br><span class="line">xclip -o</span><br></pre></td></tr></table></figure><h2 id="安装xmonad的其它必须配件"><a href="#安装xmonad的其它必须配件" class="headerlink" title="安装xmonad的其它必须配件"></a>安装xmonad的其它必须配件</h2><p>其实也不是必须配件，只是我的配置都是基于下面这些的，不安装有些功能都没有，所以也勉强算个三件套吧</p><h3 id="状态栏：polybar"><a href="#状态栏：polybar" class="headerlink" title="状态栏：polybar"></a>状态栏：polybar</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S polybar</span><br><span class="line">sudo pacman -S awesome-terminal-fonts#安装这个之后才能显示图标</span><br></pre></td></tr></table></figure><p>然后将配置文件复制到对应目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.config/polybar/config</span><br></pre></td></tr></table></figure><p>添加自动启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim .xinitrc</span><br><span class="line">polybar mybar &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h3 id="搜索软件"><a href="#搜索软件" class="headerlink" title="搜索软件"></a>搜索软件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S rofi</span><br></pre></td></tr></table></figure><h3 id="安装渐变及设置透明效果的软件"><a href="#安装渐变及设置透明效果的软件" class="headerlink" title="安装渐变及设置透明效果的软件"></a>安装渐变及设置透明效果的软件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S compton</span><br></pre></td></tr></table></figure><p>添加自动自动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim .xinitrc</span><br><span class="line">compton &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h2 id="使用shoadowsocks上google"><a href="#使用shoadowsocks上google" class="headerlink" title="使用shoadowsocks上google"></a>使用shoadowsocks上google</h2><p>安装shadowsocks代理以及proxychains协议转换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S proxychains-ng shadowsocks</span><br></pre></td></tr></table></figure><p>修改proxychains配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/proxychains.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">socks4         127.0.0.1 9050<span class="comment">#注释</span></span></span><br><span class="line">socks5  127.0.0.1 1080#添加</span><br></pre></td></tr></table></figure><p>添加本地域名解析</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/hosts</span><br><span class="line"><span class="meta">#</span><span class="bash">添加</span></span><br><span class="line">104.31.74.55  youneed.win</span><br><span class="line">104.31.74.54  www.youneed.win</span><br></pre></td></tr></table></figure><p><em>添加脚本变量路径</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim .xinitrc</span><br><span class="line">export PATH=$PATH:~/.local/bin</span><br></pre></td></tr></table></figure><p>在<code>~/.local/bin</code>下建立软链接，指向脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.local/bin</span><br><span class="line">ln -s ~/Documents/script/shell/shadowshocks.sh sslink</span><br></pre></td></tr></table></figure><p>运行脚本启动代理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxychains firefox#浏览器代理</span><br><span class="line">proxychains bash#终端代理</span><br></pre></td></tr></table></figure><h2 id="安装终端翻译软件"><a href="#安装终端翻译软件" class="headerlink" title="安装终端翻译软件"></a>安装终端翻译软件</h2><p>这两个脚本（manual，translate）都有声音，要使用amixer命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S alsa-utils#安装之后可以使用amixer命令</span><br><span class="line">sudo pacman -S ydcv-rs-git</span><br></pre></td></tr></table></figure><p>并将脚本<code>translate</code>复制到<code>~/.local/bin</code>下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">脚本：</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">翻译单词并拼读出来</span></span><br><span class="line"><span class="meta">#</span><span class="bash">author:narcissus</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">获取系统音量大小</span></span><br><span class="line">volume=`amixer sget Master | tr -d '[a-zA-Z][:punct:]' | awk '&#123;print $2&#125;' | sed -n '$p'`</span><br><span class="line"><span class="meta">#</span><span class="bash">通过在线语音拼读</span></span><br><span class="line">mplayer -volume $&#123;volume&#125; http://dict.youdao.com/dictvoice\?audio\=$&#123;1&#125; &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">通过ydcv程序来对单词进行翻译</span></span><br><span class="line">ydcv $&#123;1&#125;</span><br></pre></td></tr></table></figure><h2 id="安装网页下载工具，并实现终端在线命令"><a href="#安装网页下载工具，并实现终端在线命令" class="headerlink" title="安装网页下载工具，并实现终端在线命令"></a>安装网页下载工具，并实现终端在线命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S curl</span><br></pre></td></tr></table></figure><p>将脚本<code>manual</code>复制到<code>~/.local/bin</code>下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">脚本：</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">ps:之前使用的是<span class="built_in">help</span>命名的，但是fish shell中的帮助信息为<span class="built_in">help</span>与这个脚本名冲突了，所以改为了manual</span></span><br><span class="line">curl cht.sh/$&#123;1&#125;</span><br><span class="line">volume=`amixer sget Master | tr -d '[a-zA-Z][:punct:]' | awk '&#123;print $2&#125;' | sed -n '$p'`</span><br><span class="line">mplayer -volume $&#123;volume&#125; http://dict.youdao.com/dictvoice\?audio\=find%20following%20commands%20of%20$&#123;1&#125; &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure><h2 id="安装virtualbox"><a href="#安装virtualbox" class="headerlink" title="安装virtualbox"></a>安装virtualbox</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">由于使用的是linux内核，所以选择virtualbox-host-modules-arch </span></span><br><span class="line">sudo pacman -S virtualbox virtualbox-host-modules-arch </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">可选安装组件</span></span><br><span class="line">Optional dependencies for virtualbox</span><br><span class="line">    vde2: Virtual Distributed Ethernet support</span><br><span class="line">    virtualbox-guest-iso: Guest Additions CD</span><br><span class="line">    image</span><br><span class="line">    virtualbox-ext-vnc: VNC server support</span><br><span class="line">    virtualbox-sdk: Developer kit</span><br></pre></td></tr></table></figure><p>在启动虚拟机之前，需要加载模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modprobe vboxdrv</span><br></pre></td></tr></table></figure><p>启动virtualbox的几种方式：</p><p>1.GUI图形界面的启动，这也是大部分时候都在使用的方式，即运行virtualbox软件</p><p>2.命令启动，即使用命令无界面启动。后来发现这种方式启动和xmonad很搭，因为不会存在热键冲突的问题，那么xmonad中的所有窗口操作的快捷键依然有效。大爱啊</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vboxsdl --startvm 'kali linux'#由于系统名字中有空格，所以要使用引号</span><br></pre></td></tr></table></figure><p>3.同样是命令启动，但这种大多数时候是作为服务器使用的方式，即没有任何界面，只能通过ssh去连接主机（就像在windows中使用xshell一个意思）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vboxheadless -s 'kali linux'</span><br></pre></td></tr></table></figure><h2 id="蓝牙安装配置"><a href="#蓝牙安装配置" class="headerlink" title="蓝牙安装配置"></a>蓝牙安装配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装软件：</span></span><br><span class="line">sudo pacman -S bluez#提供协议</span><br><span class="line">sudo pacman -S bluez-utils#提供bluetoothctl组件</span><br></pre></td></tr></table></figure><p>查看内核是否加载btusb驱动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep btusb</span><br></pre></td></tr></table></figure><p>没有的话手动加载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo modprobe btusb</span><br></pre></td></tr></table></figure><p>启动蓝牙服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start bluetooth.service</span><br></pre></td></tr></table></figure><p>开始连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bluetoothctl#控制界面</span><br><span class="line">agent on</span><br><span class="line">power on#每次启动都要设置，因为关闭后会自动断电</span><br><span class="line">scan on#扫描</span><br><span class="line">pair 设备mac地址#匹配</span><br><span class="line">connect 设备mac地址#连接</span><br><span class="line">trust 设备mac地址#加入信任</span><br></pre></td></tr></table></figure><p>安装声音支持</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S pulseaudio-bluetooth</span><br></pre></td></tr></table></figure><h2 id="解决xorg问题"><a href="#解决xorg问题" class="headerlink" title="解决xorg问题"></a>解决xorg问题</h2><p>自从安装系统之后就发现一个问题，那就是xorg每次启动都要花个20多秒。所以首先是查看日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">xorg的日志在家目录下</span></span><br><span class="line">vim .local/share/xorg/Xorg.0.log</span><br><span class="line"><span class="meta">#</span><span class="bash">然后查看EE报错的地方，发现每次都是在启动nouveau驱动的时候卡了20多秒，然后启动失败了</span></span><br><span class="line"><span class="meta">#</span><span class="bash">原因是我没有安装nouveau驱动，没有安装的原因就是安装之后启动倒是挺迅速的，但是退出xorg之后，或者想要关机的时候就会卡住。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">我想为什么就不能让它不去检测这个驱动呢？终于google到了答案：就是强制让xorg使用intel显卡，而忽略n卡</span></span><br><span class="line"></span><br><span class="line">cd /etc/X11/xorg.conf.d/</span><br><span class="line">touch nonvidia.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">添加如下代码：</span></span><br><span class="line">Section "Device"</span><br><span class="line">    Identifier  "Intel Card"</span><br><span class="line">    Driver      "intel"</span><br><span class="line">EndSection</span><br><span class="line"></span><br><span class="line">Section "Device"</span><br><span class="line">    Identifier  "Nvidia Card"</span><br><span class="line">    Driver      "nouveau"</span><br><span class="line">EndSection</span><br><span class="line"></span><br><span class="line">Section "Screen"</span><br><span class="line">    Identifier  "My Screen"</span><br><span class="line">    Device      "Intel Card"</span><br><span class="line">EndSection</span><br></pre></td></tr></table></figure><p>然后reboot，startx，果然一下子就打开了图形界面，虽然查看了一下日志，依然有报错，但是它直接跳过之后的等待以及检测了。以上介绍在wiki上也有讲，只是我不知道咋写啊。这也算是基本完成了系统安装以及之后的错误修复了吧！</p><h2 id="安装系统之后博客迁移"><a href="#安装系统之后博客迁移" class="headerlink" title="安装系统之后博客迁移"></a>安装系统之后博客迁移</h2><p>安装必要软件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">这些都要安装</span></span><br><span class="line">sudo pacman -S git nodejs npm</span><br><span class="line">sudo npm install -g hexo-cli</span><br><span class="line">npm install --save hexo-deployer-git</span><br><span class="line">npm audit fix</span><br><span class="line">npm audit fix --force</span><br><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>当然我又安装了这个加密插件，结果我错了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt#然后我哭了</span><br></pre></td></tr></table></figure><p>搞了半天老是报错，什么tostring不能为空，我的密码明明有啊，查看了一下js配置文件，发现确实有password.tostring()这个</p><p>然后我用数字做密码试了一下不报错，但是我之前加密的文章全部没加密了？我觉得这是一个bug，至少前面应该做一下判断。所以去你的加密，索性不用了，然后一切都好了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>然后在github设置中将sshkey添加进去</p><p>当然这后面还有两步，如果没有这两步，推送的时候会提示的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email "2935549510@qq.com"</span><br><span class="line">git config --global user.name "narcissus"</span><br></pre></td></tr></table></figure><p>再编译，推送</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><hr><p>好了，先到这了。累了啊，心累。现在的生活怎么说呢，不能让自己停下来，要一直忙的没有心思去想，可是有时候还是在想做这一切又是为了什么呢？生活中总有很多事情让人觉得不满意，不顺心。之前总有一种错误的想法，那就是做it的人呢都是和我一样的，没有什么其它的想法，能想到的无非就是技术，最多还包括女朋友吧。可是我发现并不是这样，人呢，在哪里都是形形色色的。听别人说这个人有点凶，说话确实是这样，但是后来发现这人倒是挺直爽。另一个人看上去笑眯眯的很和蔼，可是却在背地里说你的坏话。人呢，果真是相处久了才了解啊。我应该是很冷的那种人，因为我相信用心感受到的比用眼睛更加真实。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RE正则</title>
      <link href="/2019/10/13/RE%E6%AD%A3%E5%88%99/"/>
      <url>/2019/10/13/RE%E6%AD%A3%E5%88%99/</url>
      
        <content type="html"><![CDATA[<blockquote><p>RE（regular expression）称为正则表达式。实现对字符串的匹配。至于说匹配到了之后要做啥，那就取决于具体情况了，RE所做的只是提供一套规则，实现对字符的匹配。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">类似于占位的符号--&gt;元字符</span><br><span class="line">.#匹配单个字符，不匹配\n(换行)。1</span><br><span class="line"></span><br><span class="line">以下都是对前一位进行的匹配--&gt;量词，重复次数</span><br><span class="line">?#前一项出现一次或者不出现0/1  </span><br><span class="line">eg: abc? 匹配ab或abc</span><br><span class="line">+#前一项出现一次或者以上[1,+∞)</span><br><span class="line">*#前一项出现0次或者0次以上[0,+∞)</span><br><span class="line">eg:.*可以匹配任意字符任意次数，不包含换行符号</span><br><span class="line">&#123;m,n&#125;#前一项出现的次数范围[m,n]</span><br><span class="line">&#123;m,&#125;[m,+∞)</span><br><span class="line">&#123;m&#125;m次</span><br><span class="line"></span><br><span class="line">分组--&gt;前面说的都是针对单个字符，括号可以作用于字符串</span><br><span class="line">()#对模式进行分组。</span><br><span class="line">eg:(hello)? 可以匹配 hello 或者 hellohello</span><br><span class="line">分组的命名</span><br><span class="line">(?&lt;groupname&gt;expression)#expression为表达式，groupname为组的命名</span><br><span class="line">eg: (?&lt;a1&gt;[^=]+)</span><br><span class="line">匹配expression，但是不捕获匹配文本，也不给分组编号。可以方便的去除不需要的分组信息</span><br><span class="line">(?:expression)</span><br><span class="line"></span><br><span class="line">选择</span><br><span class="line">|# (a|b)</span><br><span class="line">eg: 0\d&#123;2&#125;-\d&#123;8&#125;|0\d&#123;3&#125;-\d&#123;7&#125;#匹配011-12345678或者0718-1234567这样的电话号码</span><br><span class="line"></span><br><span class="line">指定字符</span><br><span class="line">[abcdefg]#匹配其中任意一个字符</span><br><span class="line">[^abcdefg]#匹配非其中任意一个字符，不需要使用|</span><br><span class="line"></span><br><span class="line">范围字符</span><br><span class="line">-</span><br><span class="line">eg:[a-zA-Z]#匹配任意一个字母</span><br><span class="line">[0-9]#匹配任意一个数字</span><br><span class="line"></span><br><span class="line">取反</span><br><span class="line">^</span><br><span class="line">[^a-z]#取非小写字母</span><br><span class="line"></span><br><span class="line">以下也有类似占位的作用</span><br><span class="line">简写</span><br><span class="line">\n#空格</span><br><span class="line">\t#table</span><br><span class="line">\r#换行</span><br><span class="line">\f#form-feed</span><br><span class="line"></span><br><span class="line">\d#数字</span><br><span class="line">\D#非数字</span><br><span class="line">\w#单词(字母、数字、下划线、汉字)</span><br><span class="line">\W#非单词</span><br><span class="line">\s#空白，等于 [\n\t\r\f]</span><br><span class="line">\S#非空白</span><br><span class="line">eg:[\d\D] 可以指任意字符，包括换行符号</span><br><span class="line"></span><br><span class="line">锚定archor</span><br><span class="line">行锚定：</span><br><span class="line">^#开头</span><br><span class="line"><span class="meta">$</span><span class="bash"><span class="comment">#结尾</span></span></span><br><span class="line">词锚定：</span><br><span class="line">\bword\b#匹配完整单词</span><br><span class="line">\bword#匹配单词开头</span><br><span class="line">word\b#匹配单词结尾</span><br><span class="line">\bword\B#匹配非word</span><br><span class="line">\B#非界词锚定</span><br><span class="line"></span><br><span class="line">非贪婪数量词</span><br><span class="line">?#尽可能少的匹配。找到第一个满足的匹配就停止匹配，让匹配速度变快</span><br><span class="line">eg: abcdbeb</span><br><span class="line">abc.*?b#只会匹配abcdb</span><br><span class="line"></span><br><span class="line">零宽断言</span><br><span class="line">刚好今天写的oracle语句中regexp_substr中需要这个东西，没办法，不知道这个用法，弄了好久没写出来，因为我需要的是某个字段，但是用于匹配的这个字符串又不是我需要的。最后还是将查询出来的结果作为一个新的表，再在字段上进行分隔。</span><br><span class="line">eg: 例如从某字段adgsaf sdfasd source=somewordneed jkjl dest_name=somewordfind alkslkk23kjl中找出somewordneed和somewordfind</span><br><span class="line"></span><br><span class="line">select f1,f2,regexp_substr(source,'[^=]+',1,2),regexp_substr(dest,'[^=]+',1,2) </span><br><span class="line">from (</span><br><span class="line">select t.name f1,p.name f2,</span><br><span class="line">regexp_substr(p.args,'source=\S*',1,1) source,regexp_substr(p.args,'dest_name=\S*',1,1) dest</span><br><span class="line">from sometable1 t left join sometable2 p </span><br><span class="line">on t.m=p.m and t.o=p.o</span><br><span class="line">where t.m=(select m from sometable1 where name like 'someword' and o is null)</span><br><span class="line">and t.o is not null and p.s='1' </span><br><span class="line">order by t.name,p.name</span><br><span class="line">desc</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">零宽断言的作用在于我在匹配字符串的时候需要用到某些字符作为标志，但是我需要的部分呢，又不包含这个标志，而是这个标志匹配到的其它部分。</span><br><span class="line">1.正预测先行断言，后面为匹配表达式部分</span><br><span class="line">?=expression</span><br><span class="line">eg:i have a dream</span><br><span class="line">\b\w+(?=ve\b)#匹配ha，后面的ve不显示</span><br><span class="line">2.正回顾后发断言，前面为匹配表达式部分</span><br><span class="line">?&lt;=expression</span><br><span class="line">eg: 前面的oracle中匹配部分可这样写</span><br><span class="line">regexp_substr(p.args,'\b(?&lt;=source=)\w+\b',1,1) source#这样就可以直接取出source=后面的部分，而source=不会被取出来。</span><br><span class="line">不过oracle并不支持这个语法。</span><br><span class="line"></span><br><span class="line">3.负向零宽断言，即正向零宽断言的否定</span><br><span class="line">?!expression</span><br><span class="line">\b\w+q(?!u)\w+\b#匹配q后面有字母，但是字母不是u的词</span><br><span class="line">?&lt;!expression</span><br><span class="line">\b\w(?&lt;!q)u\w+\b#匹配u前面有字母，但是字母不是q的词</span><br><span class="line"></span><br><span class="line">后向引用</span><br><span class="line">简单说就是再次引用前面分组的内容</span><br><span class="line">如果没有命名分组，那么就只能用数字引用</span><br><span class="line">\b(\w+)(\d+)(\1)(\2)\b</span><br><span class="line">等于\b(\w+)(\d+)(\w+)(\d+)\b</span><br><span class="line"></span><br><span class="line">有命名的分组使用分组名</span><br><span class="line">\b(?&lt;name&gt;\w+)(\k&lt;name&gt;)\b</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>perl_list_hash</title>
      <link href="/2019/09/25/perl-list-hash/"/>
      <url>/2019/09/25/perl-list-hash/</url>
      
        <content type="html"><![CDATA[<h3 id="数组：list"><a href="#数组：list" class="headerlink" title="数组：list"></a>数组：list</h3><p>数组与列表可指代同一个东西，但是列表侧重于数据，而数组表示对数据的引用。</p><h4 id="索引：从0开始"><a href="#索引：从0开始" class="headerlink" title="索引：从0开始"></a>索引：从0开始</h4><h4 id="数组间各元素以-分隔"><a href="#数组间各元素以-分隔" class="headerlink" title="数组间各元素以,分隔"></a>数组间各元素以<code>,</code>分隔</h4><h4 id="数组用-括起来"><a href="#数组用-括起来" class="headerlink" title="数组用()括起来"></a>数组用<code>()</code>括起来</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h4 id="范围操作符：num-num"><a href="#范围操作符：num-num" class="headerlink" title="范围操作符：num..num"></a>范围操作符：<code>num..num</code></h4><h4 id="数组的引用："><a href="#数组的引用：" class="headerlink" title="数组的引用：@"></a>数组的引用：<code>@</code></h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@a=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">@b=(<span class="number">1</span>..<span class="number">5</span>)</span><br><span class="line"><span class="comment">#@a与@b相等</span></span><br></pre></td></tr></table></figure><h4 id="qw（quote-word）简写"><a href="#qw（quote-word）简写" class="headerlink" title="qw（quote word）简写"></a>qw（quote word）简写</h4><p>qw函数在llist中可以省去重复的字符串</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这两个相同</span></span><br><span class="line">@num=<span class="string">qw(1 3 5)</span></span><br><span class="line">@num=(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line"><span class="comment">#同样的这个括号也是可选则别的</span></span><br></pre></td></tr></table></figure><h4 id="列表的赋值"><a href="#列表的赋值" class="headerlink" title="列表的赋值"></a>列表的赋值</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">($a,$b)=(<span class="string">"sunshine"</span>,<span class="string">"girl"</span>)</span><br></pre></td></tr></table></figure><p>交换两个变量</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这是我见过最快的交换两个变量的值的方法了，不需要借助中间变量</span></span><br><span class="line">($a,$b)=($b,$a)</span><br></pre></td></tr></table></figure><h3 id="取数组中的值"><a href="#取数组中的值" class="headerlink" title="取数组中的值"></a>取数组中的值</h3><h4 id="下标、函数"><a href="#下标、函数" class="headerlink" title="下标、函数"></a>下标、函数</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@a=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="comment">#可使用下标取值的方式,与python、shell不同，下标并不用[]。</span></span><br><span class="line">$a<span class="string">&#123;0&#125;</span>,$a<span class="string">&#123;2&#125;</span></span><br><span class="line"><span class="comment">#更加常用的方式，将数据从数组中取出来，数组长度变短</span></span><br><span class="line"><span class="keyword">shift</span>/<span class="keyword">unshift</span> <span class="comment">#从头依次取出、添加数据</span></span><br><span class="line"><span class="keyword">shift</span>(@a);--&gt;<span class="number">1</span> </span><br><span class="line"><span class="keyword">unshift</span>(@a，<span class="number">0</span>);</span><br><span class="line"><span class="keyword">pop</span>/<span class="keyword">push</span><span class="comment">#从尾依次取出、添加数据</span></span><br><span class="line"><span class="keyword">pop</span>(@a);--&gt;<span class="number">5</span></span><br><span class="line"><span class="keyword">push</span>(@a,<span class="number">6</span>);</span><br></pre></td></tr></table></figure><h4 id="foreach循环所有值"><a href="#foreach循环所有值" class="headerlink" title="foreach循环所有值"></a><code>foreach</code>循环所有值</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#循环所有值</span></span><br><span class="line"><span class="keyword">foreach</span> $a(<span class="number">1</span>..<span class="number">10</span>)&#123;</span><br><span class="line"><span class="keyword">print</span> $a,<span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@a=(<span class="number">1</span>..<span class="number">10</span>);</span><br><span class="line"><span class="keyword">foreach</span> $a(@a)&#123;</span><br><span class="line"><span class="keyword">print</span> $a,<span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#$a或者$_是控制变量，控制变量依次迭代从列表中取一个新值。</span></span><br><span class="line"><span class="keyword">foreach</span> $_(@a)&#123;</span><br><span class="line"><span class="keyword">print</span> $_,<span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#控制变量可以不写，默认变量$_</span></span><br><span class="line"><span class="keyword">foreach</span> (@a)&#123;</span><br><span class="line"><span class="keyword">print</span> $_,<span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="reverse逆序"><a href="#reverse逆序" class="headerlink" title="reverse逆序"></a><code>reverse</code>逆序</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@a=(<span class="number">1</span>..<span class="number">10</span>);</span><br><span class="line">@b=<span class="keyword">reverse</span>(@a);</span><br><span class="line"><span class="comment">#括号可以省略</span></span><br><span class="line">@b=<span class="keyword">reverse</span> @a;</span><br><span class="line"><span class="comment">#范围操作符也可省略括号</span></span><br><span class="line">@b=<span class="keyword">reverse</span> <span class="number">1</span>..<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------perl中所有没有必要的括号都可以省略--------------</span></span><br></pre></td></tr></table></figure><h4 id="scalar强制转换列表为标量"><a href="#scalar强制转换列表为标量" class="headerlink" title="scalar强制转换列表为标量"></a><code>scalar</code>强制转换列表为标量</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@a=(<span class="number">1</span>..<span class="number">10</span>)</span><br><span class="line"><span class="keyword">scalar</span> @a;--&gt;<span class="number">10</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> perl </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>perl终于开始了</title>
      <link href="/2019/09/19/perl%E7%BB%88%E4%BA%8E%E5%BC%80%E5%A7%8B%E4%BA%86/"/>
      <url>/2019/09/19/perl%E7%BB%88%E4%BA%8E%E5%BC%80%E5%A7%8B%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>有时候觉得一个人是如此的渺小，渺小到历史根本不会记得你，渺小到你的三百六十五天与其它人毫无关系。所以啊，是否名垂千古，与我的关系似乎都不大。而我，想要的其实很简单，欣赏每个日出与黄昏，享受宁静的夜色与黎明，至少在自己的世界里无所不能，有着喜欢的歌，有着期待的人，有着狭小的胸襟和渺小的梦，只希望不辜负看似平淡却很值得珍惜的everyday。</p></blockquote><p>似乎在犹豫什么，是因为到目前为止还没有真正的派上用场，但是每次学习perl都被他那无拘无束的，意想不到的，不同于其他语言的语法感到惊讶。学习perl恐怕要改变以往的固定的语法思维，什么是浮点数，什么是整数，什么是字符串，在perl的世界里都一样，不都是二进制文件么？是的，就是这么傲娇，而确定他们的条件就是context（上下文环境）。所以学习perl会觉得没有什么是不可能，而且会改变思维习惯。</p><h4 id="perl的核心思想："><a href="#perl的核心思想：" class="headerlink" title="perl的核心思想："></a>perl的核心思想：</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 没有不必要的限制</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 解决问题的方法不止一个</span><br></pre></td></tr></table></figure><hr><h4 id="开头"><a href="#开头" class="headerlink" title="开头:"></a>开头:</h4><p>脚本都需要一个开头声明是使用的啥脚本语言，shell？perl？python？</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br></pre></td></tr></table></figure><h4 id="关于文件命名规则："><a href="#关于文件命名规则：" class="headerlink" title="关于文件命名规则："></a>关于文件命名规则：</h4><p>perl是不赞成把perl脚本写成.pl等等啥的。</p><h4 id="字符串连接："><a href="#字符串连接：" class="headerlink" title="字符串连接：."></a>字符串连接：<code>.</code></h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"hello"</span>.<span class="string">"world"</span>--&gt;<span class="string">"helloworld"</span></span><br><span class="line"><span class="string">"a"</span>.<span class="string">"b"</span>--&gt;<span class="string">"ab"</span></span><br></pre></td></tr></table></figure><h4 id="字符串重复操作符：x"><a href="#字符串重复操作符：x" class="headerlink" title="字符串重复操作符：x"></a>字符串重复操作符：<code>x</code></h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"a"</span>x3--&gt;<span class="string">"aaa"</span></span><br><span class="line"><span class="string">"hello"</span>x3--&gt;<span class="string">"hellohellohello"</span></span><br></pre></td></tr></table></figure><h4 id="数字比较："><a href="#数字比较：" class="headerlink" title="数字比较："></a>数字比较：</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt; &lt;= &gt; &gt;= == !=</span><br></pre></td></tr></table></figure><h4 id="字符串比较："><a href="#字符串比较：" class="headerlink" title="字符串比较："></a>字符串比较：</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lt</span> le   <span class="keyword">gt</span> ge eq <span class="keyword">ne</span></span><br></pre></td></tr></table></figure><hr><h4 id="数字和字符串都作为一个东西：标量变量"><a href="#数字和字符串都作为一个东西：标量变量" class="headerlink" title="数字和字符串都作为一个东西：标量变量"></a>数字和字符串都作为一个东西：标量变量</h4><p>数字都以双精度存储。可以以_分隔，并不影响数字</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123456789</span>=<span class="number">123_456_789</span></span><br></pre></td></tr></table></figure><h4 id="标量变量都以-开头"><a href="#标量变量都以-开头" class="headerlink" title="标量变量都以$开头"></a>标量变量都以$开头</h4><p>标量或者说变量其实都是指的同一个东西。可以说标量、变量、标量变量。</p><p>与其它语言不同，比如python定义了一个变量就可以直接使用变量名来使用变量。但是perl不同，只有以$开头的才被认为是标量变量。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比如赋值语句中变量必须以$开头</span></span><br><span class="line">$num = <span class="number">5</span></span><br><span class="line"><span class="comment"># 比如if判断语句中</span></span><br><span class="line"><span class="keyword">if</span>($num &gt; <span class="number">5</span>)&#123;</span><br><span class="line"><span class="keyword">print</span> <span class="string">"great than 5"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="标量不需要初始化undef"><a href="#标量不需要初始化undef" class="headerlink" title="标量不需要初始化undef"></a>标量不需要初始化undef</h4><p>这就是perl的哲学思想，省去不必要的麻烦，定义标量不就是拿来用的吗，既然这样又何必每次都需要声明变量赋初值，直接拿来用不是简单一些。所以：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数字--&gt;表现为<span class="number">0</span></span><br><span class="line">字符串--&gt;表现为空</span><br></pre></td></tr></table></figure><h4 id="perl中括号是可选的"><a href="#perl中括号是可选的" class="headerlink" title="perl中括号是可选的"></a>perl中括号是可选的</h4><p>除非移除他们含义会变，否则都可以不写括号。循环控制结构中括号不可省（for、while循环等，if判断等）</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span>(<span class="string">"it seems that i have a dream\n"</span>);</span><br><span class="line"><span class="keyword">print</span> <span class="string">"it seems that i have a dream"</span>,<span class="string">'\n'</span>;</span><br></pre></td></tr></table></figure><h4 id="简单的输入与输出"><a href="#简单的输入与输出" class="headerlink" title="简单的输入与输出"></a>简单的输入与输出</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$变量 = &lt;STDIN&gt;; <span class="comment">#读取输入，变量不需要初始化</span></span><br><span class="line"><span class="keyword">chomp</span>($变量); <span class="comment"># 去掉换行符，从标准输入（键盘）读取时会将换行符一起读入</span></span><br><span class="line"><span class="keyword">chomp</span>($变量=&lt;STDIN&gt;); <span class="comment"># 合起来写</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">chomp</span>($num=&lt;STDIN&gt;);</span><br><span class="line"><span class="keyword">chomp</span> $num=&lt;STDIN&gt;; <span class="comment">#括号不是必须的</span></span><br></pre></td></tr></table></figure><p>所有语句都以<code>;</code>结尾</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">"hello"</span>;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> perl </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vim-代码折叠</title>
      <link href="/2019/09/18/vim-%E4%BB%A3%E7%A0%81%E6%8A%98%E5%8F%A0/"/>
      <url>/2019/09/18/vim-%E4%BB%A3%E7%A0%81%E6%8A%98%E5%8F%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="定义折叠的六种方式"><a href="#定义折叠的六种方式" class="headerlink" title="定义折叠的六种方式"></a>定义折叠的六种方式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">manual          手工定义折叠         </span><br><span class="line">indent           更多的缩进表示更高级别的折叠         </span><br><span class="line">expr              用表达式来定义折叠         </span><br><span class="line">syntax           用语法高亮来定义折叠         </span><br><span class="line">diff                对没有更改的文本进行折叠         </span><br><span class="line">marker           对文中的标志折叠</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">marker则是指对&#123;&#123;&#123;&#125;&#125;&#125;中的内容进行折叠</span><br></pre></td></tr></table></figure><p>用的最多的是最后一种</p><h3 id="设置折叠"><a href="#设置折叠" class="headerlink" title="设置折叠"></a>设置折叠</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set fdm=marker</span><br></pre></td></tr></table></figure><p>将上面写入<code>~/.vimrc</code>后会自动显示折叠</p><h3 id="折叠的创建-删除快捷键"><a href="#折叠的创建-删除快捷键" class="headerlink" title="折叠的创建/删除快捷键"></a>折叠的创建/删除快捷键</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zf 新增折叠</span><br><span class="line">zd 删除折叠</span><br><span class="line">zD 删除嵌套折叠</span><br><span class="line">zE 删除所有折叠</span><br></pre></td></tr></table></figure><h3 id="折叠块的操作"><a href="#折叠块的操作" class="headerlink" title="折叠块的操作"></a>折叠块的操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">zo 打开折叠</span><br><span class="line">zc 关闭折叠</span><br><span class="line">zO 打开所有折叠</span><br><span class="line">zC 关闭所有折叠</span><br><span class="line">zj 下个折叠块</span><br><span class="line">zk 上个折叠块</span><br><span class="line">[z 到折叠开始处</span><br><span class="line">]z 到折叠结尾处</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SSD性能优化</title>
      <link href="/2019/09/18/SSD%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2019/09/18/SSD%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<blockquote><p>SSD固态硬盘的使用寿命其实挺高的，高到电脑坏了硬盘还是好的。可是，这毕竟是理论上的，我还是想更加优化它的性能，而且还能提升应用响应时间。</p></blockquote><h3 id="修改ext4系统文件信息的统计"><a href="#修改ext4系统文件信息的统计" class="headerlink" title="修改ext4系统文件信息的统计"></a>修改ext4系统文件信息的统计</h3><p>The <em>ext4</em> file system records information about when a file was last accessed and there is a cost associated with recording it. With the <code>noatime</code> option, the access timestamps on the filesystem are not updated.</p><p>修改<code>relatime</code>为<code>noatime</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fstab</span><br><span class="line"><span class="meta">#</span><span class="bash"> /dev/nvme0n1p5</span></span><br><span class="line">UUID=ef088753-8f19-40a7-bcbf-a6849aa8d7ff       /               ext4            rw,noatime      0 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> /dev/nvme0n1p6</span></span><br><span class="line">UUID=650ad4a2-cbea-4bc2-af3a-01fdfa7b02f5       /home           ext4            rw,noatime      0 2</span><br></pre></td></tr></table></figure><h3 id="增加commit时间"><a href="#增加commit时间" class="headerlink" title="增加commit时间"></a>增加commit时间</h3><p>The default 5 sec means that if the power is lost, one will lose as much as the latest 5 seconds of work.<br>It forces a full sync of all data/journal to physical media every 5 seconds.</p><p>将默认的5s改为60s</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> /dev/nvme0n1p5</span></span><br><span class="line">UUID=ef088753-8f19-40a7-bcbf-a6849aa8d7ff       /               ext4            rw,noatime,commit=60    0 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> /dev/nvme0n1p6</span></span><br><span class="line">UUID=650ad4a2-cbea-4bc2-af3a-01fdfa7b02f5       /home           ext4            rw,noatime,commit=60    0 2</span><br></pre></td></tr></table></figure><hr><h3 id="将临时文件载入内存中"><a href="#将临时文件载入内存中" class="headerlink" title="将临时文件载入内存中"></a>将临时文件载入内存中</h3><p><a href="https://en.wikipedia.org/wiki/Tmpfs" target="_blank" rel="noopener">tmpfs</a>  is a temporary filesystem that resides in memory and/or swap partition(s). Mounting directories as tmpfs can be an effective way of speeding up accesses to their files, or to ensure that their contents are automatically cleared upon reboot.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">由于使用了systemd，它已经将tmpfs自动挂载到了/tmp下</span></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">dev             3.8G     0  3.8G   0% /dev</span><br><span class="line">run             3.9G  1.2M  3.9G   1% /run</span><br><span class="line">/dev/nvme0n1p5   30G   12G   17G  43% /</span><br><span class="line">tmpfs           3.9G   91M  3.8G   3% /dev/shm</span><br><span class="line">tmpfs           3.9G     0  3.9G   0% /sys/fs/cgroup</span><br><span class="line">tmpfs           3.9G   12K  3.9G   1% /tmp</span><br><span class="line">/dev/nvme0n1p6  203G   22G  172G  12% /home</span><br><span class="line">tmpfs           779M   20K  779M   1% /run/user/1000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> systemctl status tmp.mount</span></span><br></pre></td></tr></table></figure><p>如果没有则手动添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmpfs   /tmp         tmpfs   rw,nodev,nosuid,size=2G          0  0</span><br></pre></td></tr></table></figure><hr><h3 id="浏览器firefox优化"><a href="#浏览器firefox优化" class="headerlink" title="浏览器firefox优化"></a>浏览器firefox优化</h3><h5 id="关闭磁盘缓存"><a href="#关闭磁盘缓存" class="headerlink" title="关闭磁盘缓存"></a>关闭磁盘缓存</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">An alternative approach is to use about:config settings:</span><br><span class="line"></span><br><span class="line">    Set browser.cache.disk.enable to false</span><br><span class="line">    Verify that browser.cache.memory.enable is set to true</span><br><span class="line">    Add the entry (right click &gt; new &gt; integer) browser.cache.memory.capacity and set it to the amount of KB you want to spare, or to -1 for automatic cache size selection (skipping this step has the same effect as setting the value to -1)</span><br></pre></td></tr></table></figure><h5 id="增加会话保存时间间隔（或者关闭）"><a href="#增加会话保存时间间隔（或者关闭）" class="headerlink" title="增加会话保存时间间隔（或者关闭）"></a>增加会话保存时间间隔（或者关闭）</h5><p>Firefox stores the current session status (opened urls, cookies, historyand form data) to the disk on a regular basis. It is used to recover a previous session in case of crash.The default setting is to save the session every 15 seconds, resulting<br>in frequent disk access. </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">To increase the save interval to 10 minutes (600000 milliseconds) for example, change in about:config the setting of browser.sessionstore.interval to 600000</span><br><span class="line"></span><br><span class="line">To disable completely this feature, change browser.sessionstore.resume_from_crash to false</span><br></pre></td></tr></table></figure><h5 id="Disable-Pocket"><a href="#Disable-Pocket" class="headerlink" title="Disable Pocket"></a>Disable Pocket</h5><p>If you do not use the Pocket-service, you may want to disable it by setting <code>extensions.pocket.enabled</code> to <em>false</em> in <code>about:config</code>. </p><hr><h5 id="Profile-sync-daemon（psd）：通过tmpfs将所有文件放入内存，Cache-the-entire-profile-into-RAM-via-tmpfs"><a href="#Profile-sync-daemon（psd）：通过tmpfs将所有文件放入内存，Cache-the-entire-profile-into-RAM-via-tmpfs" class="headerlink" title="Profile-sync-daemon（psd）：通过tmpfs将所有文件放入内存，Cache the entire profile into RAM via tmpfs"></a>Profile-sync-daemon（psd）：通过tmpfs将所有文件放入内存，Cache the entire profile into RAM via tmpfs</h5><h6 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S profile-sync-daemon</span><br></pre></td></tr></table></figure><h6 id="首次运行："><a href="#首次运行：" class="headerlink" title="首次运行："></a>首次运行：</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">psd</span><br><span class="line">First time running psd so please edit /home/jc/.config/psd/psd.conf to your liking and run again.</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">添加firefox</span></span><br><span class="line">vim .config/psd/psd.conf</span><br><span class="line">BROWSERS="firefox"</span><br></pre></td></tr></table></figure><h6 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl --user start psd.service</span><br><span class="line">systemctl --user enable psd.service</span><br><span class="line">Created symlink /home/jc/.config/systemd/user/default.target.wants/psd.service → /usr/lib/systemd/user/psd.service.</span><br></pre></td></tr></table></figure><h6 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">psd p</span><br><span class="line"></span><br><span class="line">Profile-sync-daemon v6.34 on Arch Linux</span><br><span class="line"></span><br><span class="line"> Systemd service is currently active.</span><br><span class="line"> Systemd resync-timer is currently active.</span><br><span class="line"> Overlayfs technology is currently inactive.</span><br><span class="line"></span><br><span class="line">Psd will manage the following per /home/jc/.config/psd/psd.conf:</span><br><span class="line"></span><br><span class="line"> browser/psname:  firefox/firefox</span><br><span class="line"> owner/group id:  jc/1001</span><br><span class="line"> sync target:     /home/jc/.mozilla/firefox/1auapu8j.default</span><br><span class="line"> tmpfs dir:       /run/user/1000/jc-firefox-1auapu8j.default</span><br><span class="line"> profile size:    8.0K</span><br><span class="line"> recovery dirs:   none</span><br><span class="line"></span><br><span class="line"> browser/psname:  firefox/firefox</span><br><span class="line"> owner/group id:  jc/1001</span><br><span class="line"> sync target:     /home/jc/.mozilla/firefox/iv3atepa.default-release</span><br><span class="line"> tmpfs dir:       /run/user/1000/jc-firefox-iv3atepa.default-release</span><br><span class="line"> profile size:    31M</span><br><span class="line"> recovery dirs:   none</span><br></pre></td></tr></table></figure><hr><h3 id="anything-sync-daemon同步任意文件到内存中"><a href="#anything-sync-daemon同步任意文件到内存中" class="headerlink" title="anything-sync-daemon同步任意文件到内存中"></a><a href="https://aur.archlinux.org/packages/anything-sync-daemon" target="_blank" rel="noopener">anything-sync-daemon</a>同步任意文件到内存中</h3><h6 id="安装：-1"><a href="#安装：-1" class="headerlink" title="安装："></a>安装：</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S anything-sync-daemon</span><br></pre></td></tr></table></figure><h6 id="编辑："><a href="#编辑：" class="headerlink" title="编辑："></a>编辑：</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/asd.conf</span><br><span class="line"></span><br><span class="line">WHATTOSYNC=('/srv/http')</span><br></pre></td></tr></table></figure><h6 id="启动："><a href="#启动：" class="headerlink" title="启动："></a>启动：</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start asd.service</span><br><span class="line">sudo systemctl enable asd.service</span><br><span class="line"></span><br><span class="line">Created symlink /etc/systemd/system/multi-user.target.wants/asd.service → /usr/lib/systemd/system/asd.service.</span><br></pre></td></tr></table></figure><h6 id="查看："><a href="#查看：" class="headerlink" title="查看："></a>查看：</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asd p</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mariadb安装连接</title>
      <link href="/2019/09/17/mariadb%E5%AE%89%E8%A3%85%E8%BF%9E%E6%8E%A5/"/>
      <url>/2019/09/17/mariadb%E5%AE%89%E8%A3%85%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="下载mariadb数据库"><a href="#下载mariadb数据库" class="headerlink" title="下载mariadb数据库"></a>下载mariadb数据库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S mariadb</span><br></pre></td></tr></table></figure><h3 id="初始化安装mariadb"><a href="#初始化安装mariadb" class="headerlink" title="初始化安装mariadb"></a>初始化安装mariadb</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_install_db --user=mysql --basedir=/usr --datadir=/var/lib/mysql</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">输出信息</span></span><br><span class="line">Installing MariaDB/MySQL system tables in '/var/lib/mysql' ...</span><br><span class="line"><span class="meta">#</span><span class="bash">初始化生成两个用户root，mysql，连接都不需要密码</span></span><br><span class="line">Two all-privilege accounts were created.</span><br><span class="line"><span class="meta">#</span><span class="bash">root user连接需要成为root用户</span></span><br><span class="line">One is root@localhost, it has no password, but you need to be system 'root' user to connect. </span><br><span class="line"><span class="meta">#</span><span class="bash">mysql user连接需要成为mysql用户，可以将当前用户加入mysql用户组</span></span><br><span class="line">The second is mysql@localhost, it has no password either, but you need to be the system 'mysql' user to connect.</span><br></pre></td></tr></table></figure><h3 id="开启mysql服务"><a href="#开启mysql服务" class="headerlink" title="开启mysql服务"></a>开启mysql服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start mysqld</span><br></pre></td></tr></table></figure><h3 id="终端以root用户去启动mariadb"><a href="#终端以root用户去启动mariadb" class="headerlink" title="终端以root用户去启动mariadb"></a>终端以root用户去启动mariadb</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su</span><br><span class="line">mysql -u root -p</span><br><span class="line"><span class="meta">#</span><span class="bash">不需要输入密码，回车就行</span></span><br></pre></td></tr></table></figure><h3 id="查看数据库默认用户和密码"><a href="#查看数据库默认用户和密码" class="headerlink" title="查看数据库默认用户和密码"></a>查看数据库默认用户和密码</h3><p>默认用户和密码存在mysql数据库的user表中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br><span class="line">use mysql;</span><br><span class="line">select user,host,password from user;</span><br></pre></td></tr></table></figure><h3 id="建立新用户并赋予权限，刷新权限"><a href="#建立新用户并赋予权限，刷新权限" class="headerlink" title="建立新用户并赋予权限，刷新权限"></a>建立新用户并赋予权限，刷新权限</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create user 'jc'@'localhost' identified by 'dvezmei';</span><br><span class="line">grant all privileges on ×.* to 'jc'@'localhost';</span><br><span class="line"><span class="meta">#</span><span class="bash">所有权限用all，所有数据库用 *.* 所有的ip用%，但是为了安全不会使用%，而是指定ip或者只指定本机ip(localhost)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">grant all privileges on ×.* to <span class="string">'jc'</span>@<span class="string">'%'</span>;--不建议这么使用</span></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h3 id="更新密码"><a href="#更新密码" class="headerlink" title="更新密码"></a>更新密码</h3><p>如果忘记密码，或者需要设置root密码。使用普通命令更新密码会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update user set password&#x3D;PASSWORD(&#39;123456&#39;) where user&#x3D;&#39;root&#39;;</span><br><span class="line">ERROR 1348 (HY000): Column &#39;Password&#39; is not updatable</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#官方使用的方法是：需要使用如下命令去更新root密码或者用户密码</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#39;YourUserName&#39;@&#39;ip&#39; IDENTIFIED BY &quot;YourPassword&quot;;</span><br><span class="line">#ip可以选择localhost，或者其他运行连接的远程ip地址</span><br><span class="line">#更新权限，然后重新连接数据库</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><hr><h3 id="安装dbeaver软件"><a href="#安装dbeaver软件" class="headerlink" title="安装dbeaver软件"></a>安装dbeaver软件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S dbeaver</span><br></pre></td></tr></table></figure><h3 id="使用软件连接mariadb"><a href="#使用软件连接mariadb" class="headerlink" title="使用软件连接mariadb"></a>使用软件连接mariadb</h3><p>用户名输入新建立的jc</p><hr><h3 id="关闭mariadb与dbeaver更新"><a href="#关闭mariadb与dbeaver更新" class="headerlink" title="关闭mariadb与dbeaver更新"></a>关闭mariadb与dbeaver更新</h3><p>由于数据库不需要经常更新，所以关闭其更新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/pacman.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">在IgnoreGroup 后添加需要忽略更新的软件包</span></span><br><span class="line">IgnoreGroup = mariadb dbeaver</span><br></pre></td></tr></table></figure><hr><h3 id="创建数据库以及插入数据"><a href="#创建数据库以及插入数据" class="headerlink" title="创建数据库以及插入数据"></a>创建数据库以及插入数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br><span class="line">#如果数据中有中文的话需要设置中文字符集，否则中文数据无法插入</span><br><span class="line">create database mytestdb default CHARACTER set utf8;</span><br><span class="line">use mytestdb;</span><br><span class="line">show tables;</span><br><span class="line">create table student(</span><br><span class="line">name varchar(20),</span><br><span class="line">age int(20)</span><br><span class="line">);</span><br><span class="line">select * from student;</span><br><span class="line">insert into student values(&#39;李白&#39;,20);</span><br><span class="line">insert into student values(&#39;杜甫&#39;,18);</span><br><span class="line">insert into student values(&#39;李清照&#39;,25);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>oracle-字符串</title>
      <link href="/2019/09/17/oracle-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2019/09/17/oracle-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>就像池昌旭在the k2中说的一句话一样，战争久了，人们便忘记了战争的理由。数据库是用来做啥的呢，存储数据，为何不能用文本来存取？当然可以了，而且linux中还有那么多的文本处理工具，awk，sed，grep，tr，xargs等，都挺好用，但是却没有数据库处理的速度快，格式也没有那么规范。所以需要数据库啊，而且数据库用起来很方便。</p></blockquote><p>那么对数据的存取就是一个基础了，今天主要记录一下，从数据库中取出想要的字符串。</p><h3 id="substr-instr找出所需字段子串"><a href="#substr-instr找出所需字段子串" class="headerlink" title="substr+instr找出所需字段子串"></a>substr+instr找出所需字段子串</h3><h4 id="substr-char-position-length"><a href="#substr-char-position-length" class="headerlink" title="substr(char,position,length)"></a>substr(char,position,length)</h4><p>根据长度找字符串。指定字符串，开始位置，长度就可以了，但是实际的数据操作中，往往都不是这么简单的，比如说要取的那个字段为ip:端口，那么ip长度不定。所以需要下面这个函数帮助</p><h4 id="instr-string-substring-position-occurrence"><a href="#instr-string-substring-position-occurrence" class="headerlink" title="instr(string,substring,position,occurrence)"></a>instr(string,substring,position,occurrence)</h4><p>根据字符串找位置。指定字符串，需要查找的子字符串，开始位置，重复出现的次数。就能找到字符串所在的位置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ip_addr</span><br><span class="line">10.25.18.11:123</span><br><span class="line">10.5.18.23:23</span><br><span class="line">10.45.130.234:245</span><br></pre></td></tr></table></figure><p>需要取出所有的ip，由于冒号的位置不定，所以需要instr()函数去找出位置。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">substr</span>(ip_addr,<span class="number">0</span>,<span class="keyword">instr</span>(ip_addr,<span class="string">':'</span>,<span class="number">0</span>,<span class="number">1</span>)<span class="number">-1</span>) <span class="keyword">as</span> ip <span class="keyword">from</span> sometable;</span><br></pre></td></tr></table></figure><hr><h3 id="正则的加入"><a href="#正则的加入" class="headerlink" title="正则的加入"></a>正则的加入</h3><p><strong>正则匹配后面有许多参数，这些参数是可选的，不一定都要写，但是如果需要后面的参数，那么前面的参数必须都要写。</strong></p><p>上面的<code>substr</code>和<code>instr</code>搭配起来用感觉已经很强了，但是这还不能满足苛刻的查找条件，那么正则表达式就可以做到这一切，至于regular expression如何强大就不需要说了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--返回搜索的字符串自身</span></span><br><span class="line">regexp_substr(source_char,pattern,position,occurrence,return_param,subexpr)</span><br><span class="line"><span class="comment">--返回搜索的字符串位置</span></span><br><span class="line">regexp_instr(source_char,pattern,position,occurrence,return_param,subexpr)</span><br><span class="line"><span class="comment">--return_param含义：</span></span><br><span class="line"><span class="comment">--返回匹配字符串的开头0</span></span><br><span class="line"><span class="comment">--返回匹配字符串的开头结尾1</span></span><br></pre></td></tr></table></figure><h3 id="regexp-like正则模糊匹配"><a href="#regexp-like正则模糊匹配" class="headerlink" title="regexp_like正则模糊匹配"></a><code>regexp_like</code>正则模糊匹配</h3><p>现在需要查询出今天6点到14点的数据的和。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">regexp_like(source_char,pattern,match_param)</span><br><span class="line"><span class="comment">--不用正则的写法</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(money)</span><br><span class="line"><span class="keyword">from</span> sometable</span><br><span class="line"><span class="keyword">where</span> to_char(<span class="built_in">time</span>,<span class="string">'yyyymmddhh24'</span>)=<span class="string">'2019091606'</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(money)</span><br><span class="line"><span class="keyword">from</span> sometable</span><br><span class="line"><span class="keyword">where</span> to_char(<span class="built_in">time</span>,<span class="string">'yyyymmddhh24'</span>)=<span class="string">'2019091607'</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(money)</span><br><span class="line"><span class="keyword">from</span> sometable</span><br><span class="line"><span class="keyword">where</span> to_char(<span class="built_in">time</span>,<span class="string">'yyyymmddhh24'</span>)=<span class="string">'2019091608'</span>;</span><br><span class="line"><span class="comment">--....等等等等。然后把结果加起来</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--用正则来匹配</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(money)</span><br><span class="line"><span class="keyword">from</span> sometable</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">regexp_like</span>(to_char(<span class="built_in">time</span>,<span class="string">'yyyymmddhh24'</span>),<span class="string">'201909160[6-9] | 1[0-4]'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--match_param参数含义：</span></span><br><span class="line">    'i' specifies case-insensitive matching.</span><br><span class="line"></span><br><span class="line">    'c' specifies case-sensitive matching.</span><br><span class="line"></span><br><span class="line">    'n' allows the period (.), which is the match-any-character character, to match the newline character. If you omit this parameter, then the period does not match the newline character.</span><br><span class="line"></span><br><span class="line">    'm' treats the source string as multiple lines. Oracle interprets the caret ( ^) and dollar sign ($) as the <span class="keyword">start</span> <span class="keyword">and</span> <span class="keyword">end</span>, respectively, <span class="keyword">of</span> <span class="keyword">any</span> line anywhere <span class="keyword">in</span> the <span class="keyword">source</span> <span class="keyword">string</span>, rather <span class="keyword">than</span> <span class="keyword">only</span> <span class="keyword">at</span> the <span class="keyword">start</span> <span class="keyword">or</span> <span class="keyword">end</span> <span class="keyword">of</span> the entire <span class="keyword">source</span> string. <span class="keyword">If</span> you omit this parameter, <span class="keyword">then</span> <span class="keyword">Oracle</span> treats the <span class="keyword">source</span> <span class="keyword">string</span> <span class="keyword">as</span> a single line.</span><br><span class="line"></span><br><span class="line">    <span class="string">'x'</span> ignores <span class="keyword">whitespace</span> characters. <span class="keyword">By</span> <span class="keyword">default</span>, <span class="keyword">whitespace</span> <span class="keyword">characters</span> <span class="keyword">match</span> themselves.</span><br></pre></td></tr></table></figure><h3 id="regexp-count-正则计算出现次数"><a href="#regexp-count-正则计算出现次数" class="headerlink" title="regexp_count`正则计算出现次数"></a>regexp_count`正则计算出现次数</h3><p>是对<code>regexp_instr</code>的一个完善，可以计算指定字符出现了多少次</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">regexp_count(source_char,pattern,position,match_param)</span><br><span class="line"><span class="comment">--计算123出现次数</span></span><br><span class="line"><span class="keyword">SELECT</span> REGEXP_COUNT(<span class="string">'123123123123'</span>, <span class="string">'123'</span>, <span class="number">3</span>, <span class="string">'i'</span>) <span class="keyword">COUNT</span> <span class="keyword">FROM</span> DUAL; </span><br><span class="line"></span><br><span class="line">     COUNT</span><br><span class="line"><span class="comment">----------</span></span><br><span class="line">         3</span><br></pre></td></tr></table></figure><hr><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ip</span><br><span class="line">10.25.18.11</span><br><span class="line">10.5.18.23</span><br><span class="line">10.45.130.234</span><br></pre></td></tr></table></figure><p>有时不仅仅是需要取出来数据，还需要加上一些字符串进去。比如说我需要将以上ip插入到一个表中间去。那我是不是需要写许多的insert语句，然后将以上ip带入进去。其实可以用字符串拼接出我们需要的语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">'insert into sometable values=('''</span>|| ip ||<span class="string">''');'</span> <span class="keyword">from</span> sometable;</span><br><span class="line"><span class="comment">--查询出来的结果就是</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> sometalbe <span class="keyword">values</span>=(<span class="string">'10.25.18.11'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> sometalbe <span class="keyword">values</span>=(<span class="string">'10.5.18.23'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> sometalbe <span class="keyword">values</span>=(<span class="string">'10.45.130.234'</span>);</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>xmonad2.0</title>
      <link href="/2019/09/09/xmonad2-0/"/>
      <url>/2019/09/09/xmonad2-0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>1.0其实已经很不错了，但是还缺一些个性化的设置，比如自定义workspace</p></blockquote><h4 id="新增特性："><a href="#新增特性：" class="headerlink" title="新增特性："></a>新增特性：</h4><ol><li>layout的重命名，让排版简介</li><li>对layout实现快捷键绑定，可以通过快捷键切换</li><li>新增workspace的重命名</li><li>不同workspace不同layout</li><li>打开app时，发送到指定workspace并切换过去</li><li>配置workspace打开固定app，切换到指定workspace时，自动打开指定app</li><li>在上面自动打开指定app时，指定打开的位置。swapUP或者swapDown</li><li>调整main函数写法，去掉不用的xmobar配置</li><li>由于调整了main函数写法，原来的切换statusbar的快捷键失效，重新配置切换statusbar的快捷键</li><li>以及一些其他小的change</li></ol><p>总之这个版本配置的确是做到了之前想做却没做到的配置，接近完美</p><h4 id="配置代码："><a href="#配置代码：" class="headerlink" title="配置代码："></a>配置代码：</h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--&#123;&#123;&#123;</span></span><br><span class="line"><span class="comment">-------------------------------------------------------------------------------------------- import modules</span></span><br><span class="line"><span class="comment">--import XMonad</span></span><br><span class="line"><span class="keyword">import</span> System.IO</span><br><span class="line"><span class="keyword">import</span> XMonad.Actions.CycleWS  <span class="comment">--movie/cycle windows between workspaces</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Actions.SimpleDate  <span class="comment">--popup the date with dzen2</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Actions.Submap  <span class="comment">--create a sub-mapping of key bindings</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Actions.NoBorders   <span class="comment">--used in all window</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Actions.FloatKeys  <span class="comment">--position window with float</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Actions.WithAll  <span class="comment">--make effort for all windows</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Hooks.DynamicLog  <span class="comment">--for xmobar</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Hooks.InsertPosition  <span class="comment">--choose new window position</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Util.EZConfig  <span class="comment">--set shortkeys</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">qualified</span> XMonad.StackSet <span class="keyword">as</span> W</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">qualified</span> Data.Map <span class="keyword">as</span> M</span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.NoBorders    <span class="comment">--used in fullscreen</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.Spacing   <span class="comment">--set edge space of window</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.ResizableTile  <span class="comment">--adjust vertical height</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.Minimize  <span class="comment">--toggle miniscreen</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.Hidden  <span class="comment">--hide window</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.ToggleLayouts   <span class="comment">--toggle circle windows</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.NoFrillsDecoration  <span class="comment">--set windows titlebar</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.WindowNavigation  <span class="comment">--move or swap focus window between left and right</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Prompt</span><br><span class="line"><span class="keyword">import</span> XMonad.Prompt.Window</span><br><span class="line"><span class="keyword">import</span> XMonad.Prompt.AppLauncher <span class="keyword">as</span> AL <span class="comment">--search app</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Hooks.WorkspaceHistory</span><br><span class="line"></span><br><span class="line"><span class="comment">------------------------------------------------------------------------------------------- shift to window/float window/manage dock</span></span><br><span class="line"><span class="keyword">import</span> XMonad.ManageHook</span><br><span class="line"><span class="keyword">import</span> XMonad.Hooks.ManageDocks  <span class="comment">--toggle xmobar hidden</span></span><br><span class="line"><span class="keyword">import</span> Control.Monad (<span class="title">liftM2</span>)</span><br><span class="line"><span class="comment">------------------------------------------------------------------------------------------- scratchpad</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Util.NamedScratchpad</span><br><span class="line"><span class="comment">------------------------------------------------------------------------------------------- layout</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.Maximize  <span class="comment">--toggle fullscreen</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.CenteredMaster</span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.Grid</span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.Dishes</span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.OneBig</span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.Accordion</span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.ThreeColumns</span><br><span class="line"><span class="comment">------------------------------------------------------------------------------------------- toggle layout</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.ToggleLayouts</span><br><span class="line"><span class="comment">------------------------------------------------------------------------------------------- sub layout</span></span><br><span class="line"><span class="comment">--import XMonad.Util.Themes</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.SubLayouts</span><br><span class="line"><span class="comment">--import XMonad.Layout.WindowNavigation</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.Tabbed</span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.Simplest</span><br><span class="line"></span><br><span class="line"><span class="comment">------------------------------------------------------------------------------------------- jump to layout</span></span><br><span class="line"><span class="keyword">import</span> XMonad <span class="keyword">hiding</span> ( (|||) )</span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.LayoutCombinators</span><br><span class="line"></span><br><span class="line"><span class="comment">------------------------------------------------------------------------------------------- diff workspace has diff layout</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.PerWorkspace</span><br><span class="line"><span class="comment">------------------------------------------------------------------------------------------- goto workspace with apps open up</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Actions.DynamicProjects</span><br><span class="line"></span><br><span class="line"><span class="comment">------------------------------------------------------------------------------------------- runinterm for workspace</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Util.Run</span><br><span class="line"><span class="comment">---&#125;&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">----------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">-------------------------------------main funcation-------------------------------------------------</span></span><br><span class="line"><span class="comment">----------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">--this is the method to toggle status bar: main add docks and layouthook add avoidStruts then bind a key to toggle status bar ,really nice</span></span><br><span class="line"><span class="title">main</span> = <span class="keyword">do</span></span><br><span class="line">xmonad </span><br><span class="line">$ docks  </span><br><span class="line">$ dynamicProjects projects </span><br><span class="line">$ myConfig </span><br><span class="line"></span><br><span class="line"><span class="title">myConfig</span> = defaultConfig &#123; modMask = mod4Mask</span><br><span class="line">                         , terminal = myTerminal</span><br><span class="line"> , workspaces = myWorkspaces</span><br><span class="line">                         , focusFollowsMouse = <span class="type">False</span></span><br><span class="line">                         , mouseBindings = myMouseBindings </span><br><span class="line">                         , layoutHook = avoidStruts $ myLayoutHook </span><br><span class="line">                         , focusedBorderColor=<span class="string">"#1d2935"</span> <span class="comment">-- #FF7F24#d57a39</span></span><br><span class="line">                         , normalBorderColor=<span class="string">"#1d2935"</span></span><br><span class="line">                         , logHook = workspaceHistoryHook </span><br><span class="line"> , manageHook = myManageHook &lt;+&gt; manageHook defaultConfig &lt;+&gt; insertPosition <span class="type">End</span> <span class="type">Newer</span> &lt;+&gt; namedScratchpadManageHook myScratchPads</span><br><span class="line">                          &#125;`additionalKeys` myKeys</span><br><span class="line"><span class="title">myTerminal</span> = <span class="string">"xterm"</span></span><br><span class="line"><span class="title">myWorkspaces</span> = [<span class="string">"1:home"</span>,<span class="string">"2:web"</span>,<span class="string">"3:term"</span>,<span class="string">"4:term"</span>,<span class="string">"5:write"</span>,<span class="string">"6:tmp"</span>,<span class="string">"7:dvi"</span>,<span class="string">"8"</span>,<span class="string">"9:music"</span>]</span><br><span class="line"><span class="title">projects</span> :: [<span class="type">Project</span>] <span class="comment">------------------------------------------------------------------diff workspace with diff apps to start up</span></span><br><span class="line"><span class="title">projects</span> =</span><br><span class="line">  [ <span class="type">Project</span> &#123; projectName      = <span class="string">"9:music"</span></span><br><span class="line">            , projectDirectory = <span class="string">"~/Music"</span></span><br><span class="line">            , projectStartHook = <span class="type">Just</span> $ <span class="keyword">do</span> spawn <span class="string">"netease-cloud-music"</span></span><br><span class="line">                                           runInTerm <span class="string">"-name cava"</span> <span class="string">"cava"</span></span><br><span class="line">                                           runInTerm <span class="string">"-name alsamixer"</span> <span class="string">"alsamixer"</span></span><br><span class="line">            &#125;</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line"><span class="title">myManageHook</span> = composeAll</span><br><span class="line">[ className =? <span class="string">"netease-cloud-music"</span><span class="comment">--&gt; viewShift "9:music"</span></span><br><span class="line">, className =? <span class="string">"netease-cloud-music"</span><span class="comment">--&gt; doF W.swapDown  --wow it is amazing,it make windows down,and suit for workspace5,which make music in the middle,really really nice</span></span><br><span class="line">, className =? <span class="string">"Gimp"</span><span class="comment">--&gt; doFloat</span></span><br><span class="line">, className =? <span class="string">"mplayer"</span><span class="comment">--&gt; doIgnore</span></span><br><span class="line">   , className =? <span class="string">"firefox"</span> <span class="comment">--&gt; viewShift "2:web" --open window and shift to window</span></span><br><span class="line">   , className =? <span class="string">"Typora"</span> <span class="comment">--&gt; viewShift "5:write" </span></span><br><span class="line">   , className =? <span class="string">"Typora"</span> <span class="comment">--&gt; doFloat</span></span><br><span class="line">   , manageDocks</span><br><span class="line">   ]</span><br><span class="line"><span class="keyword">where</span> viewShift = doF . liftM2 (.) <span class="type">W</span>.greedyView <span class="type">W</span>.shift</span><br><span class="line"></span><br><span class="line"><span class="title">myLayoutHook</span> = hiddenWindows</span><br><span class="line">             $  maximizeWithPadding <span class="number">0</span></span><br><span class="line">             $  minimize </span><br><span class="line">             $  windowNavigation</span><br><span class="line">             $  noFrillsDeco shrinkText topBarTheme </span><br><span class="line">             $  addTabs shrinkText myTabTheme</span><br><span class="line">             $  spacingWithEdge <span class="number">5</span></span><br><span class="line"> $  subLayout [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>] (<span class="type">Simplest</span>)</span><br><span class="line"></span><br><span class="line"> $  onWorkspace <span class="string">"2:web"</span> onebig</span><br><span class="line"> $  onWorkspace <span class="string">"3:term"</span> onebig</span><br><span class="line"> $  onWorkspace <span class="string">"9:music"</span> three</span><br><span class="line"></span><br><span class="line"> $  toggleLayouts tallsame talldiff ||| <span class="type">Grid</span> ||| <span class="type">Accordion</span> ||| dishes ||| onebig ||| noBorders <span class="type">Full</span> ||| three</span><br><span class="line"><span class="title">tallsame</span> = <span class="type">ResizableTall</span> <span class="number">1</span> (<span class="number">1</span>/<span class="number">100</span>) (<span class="number">1</span>/<span class="number">2</span>) []</span><br><span class="line"><span class="title">talldiff</span> = <span class="type">ResizableTall</span> <span class="number">1</span> (<span class="number">1</span>/<span class="number">100</span>) (<span class="number">2</span>/<span class="number">3</span>) [] </span><br><span class="line"><span class="title">dishes</span> = <span class="type">Dishes</span> <span class="number">2</span> (<span class="number">1</span>/<span class="number">6</span>)</span><br><span class="line"><span class="title">onebig</span> = <span class="type">OneBig</span> (<span class="number">3</span>/<span class="number">4</span>) (<span class="number">3</span>/<span class="number">4</span>)</span><br><span class="line"><span class="title">three</span> = <span class="type">ThreeColMid</span> <span class="number">1</span> (<span class="number">3</span>/<span class="number">100</span>) (<span class="number">1</span>/<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="title">topBarTheme</span> = def</span><br><span class="line">     &#123; activeColor = <span class="string">"#FF7F24"</span></span><br><span class="line">     , activeBorderColor = <span class="string">"#FF7F24"</span></span><br><span class="line">     , activeTextColor = <span class="string">"#FF7F24"</span></span><br><span class="line">     , inactiveColor = <span class="string">"#00868B"</span></span><br><span class="line">     , inactiveBorderColor = <span class="string">"#00868B"</span></span><br><span class="line">     , inactiveTextColor = <span class="string">"#00868B"</span></span><br><span class="line">     , urgentColor = <span class="string">"#9AFF9A"</span></span><br><span class="line">     , urgentBorderColor = <span class="string">"#9AFF9A"</span></span><br><span class="line">     , urgentTextColor = <span class="string">"#C1C1C1"</span></span><br><span class="line">     , decoHeight = <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="title">myTabTheme</span> = def</span><br><span class="line">     &#123; activeColor           = <span class="string">"#FF7F24"</span></span><br><span class="line">     , inactiveColor         = <span class="string">"#00868B"</span></span><br><span class="line">     , activeBorderColor     = <span class="string">"#FF7F24"</span></span><br><span class="line">     , inactiveBorderColor   = <span class="string">"#00868B"</span></span><br><span class="line">     , activeTextColor       = <span class="string">"#FF7F24"</span> </span><br><span class="line">     , inactiveTextColor     = <span class="string">"#00868B"</span></span><br><span class="line">     , urgentColor = <span class="string">"#9AFF9A"</span></span><br><span class="line">     , urgentBorderColor = <span class="string">"#9AFF9A"</span></span><br><span class="line">     , urgentTextColor = <span class="string">"#C1C1C1"</span></span><br><span class="line">     , decoHeight = <span class="number">8</span></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-------------------------------------------------------------------------------------------- key bending</span></span><br><span class="line"><span class="title">myKeys</span> =</span><br><span class="line">    [ ((mod4Mask, xK_F11),spawn <span class="string">"amixer set Master 5%-"</span>)</span><br><span class="line">    , ((mod4Mask, xK_F12), spawn <span class="string">"amixer set Master 5%+"</span>)</span><br><span class="line">    , ((mod4Mask, xK_F9 ), spawn <span class="string">"xbacklight -dec 2"</span>)</span><br><span class="line">    , ((mod4Mask, xK_F10), spawn <span class="string">"xbacklight -inc 2"</span>)</span><br><span class="line">    , ((mod4Mask, xK_F6), spawn <span class="string">"xinput disable 14"</span>)</span><br><span class="line">    , ((mod4Mask, xK_n  ), spawn <span class="string">"mate-terminal"</span>)  <span class="comment">--new terminal</span></span><br><span class="line">    , ((mod4Mask, xK_r  ), spawn <span class="string">"rofi -show drun -theme Adapta-Nokto.rasi"</span>)  <span class="comment">--show date usr dzen2</span></span><br><span class="line">    , ((mod4Mask .|. shiftMask, xK_z), spawn <span class="string">"betterlockscreen  ~/Picture/background/healer.jpg -l -b 1 dim"</span>)  <span class="comment">--lock screen</span></span><br><span class="line">    , ((mod4Mask, xK_b), sendMessage <span class="type">ToggleStruts</span>) <span class="comment">--toggle status bar</span></span><br><span class="line"><span class="comment">-- navigate key</span></span><br><span class="line">    , ((mod4Mask, xK_l), sendMessage $ <span class="type">Go</span> <span class="type">R</span>)</span><br><span class="line">    , ((mod4Mask, xK_h), sendMessage $ <span class="type">Go</span> <span class="type">L</span>)</span><br><span class="line">    , ((mod4Mask .|. mod1Mask, xK_i  ), sendMessage <span class="type">MirrorShrink</span>)  <span class="comment">--vertical shrink window</span></span><br><span class="line">    , ((mod4Mask .|. mod1Mask, xK_o  ), sendMessage <span class="type">MirrorExpand</span>)  <span class="comment">--vertical expand window</span></span><br><span class="line">    , ((mod4Mask .|. mod1Mask, xK_h  ), sendMessage <span class="type">Shrink</span>)</span><br><span class="line">    , ((mod4Mask .|. mod1Mask, xK_l  ), sendMessage <span class="type">Expand</span>)</span><br><span class="line">    , ((mod4Mask .|. shiftMask, xK_m), windows <span class="type">W</span>.swapMaster)  <span class="comment">--move window to master</span></span><br><span class="line">    , ((mod4Mask, xK_y), withFocused hideWindow) <span class="comment">--hide window</span></span><br><span class="line">    , ((mod4Mask .|. shiftMask, xK_y), popOldestHiddenWindow) <span class="comment">-- show hidden window</span></span><br><span class="line">    , ((mod4Mask, xK_g  ), withFocused toggleBorder)  <span class="comment">--togger window border</span></span><br><span class="line">    , ((mod4Mask, xK_f  ), withFocused (sendMessage . maximizeRestore))  <span class="comment">--toggle full window</span></span><br><span class="line">    , ((mod4Mask, xK_w  ), toggleWS)  <span class="comment">--toggle workspace in order</span></span><br><span class="line">    , ((mod4Mask, xK_t), sendMessage <span class="type">ToggleLayout</span>)  <span class="comment">--toggle window frame</span></span><br><span class="line">    , ((mod4Mask, xK_BackSpace), kill)  <span class="comment">--kill window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- funcation key</span></span><br><span class="line">    , ((mod4Mask .|. shiftMask, xK_g     ), windowPrompt </span><br><span class="line">                                       def &#123; autoComplete = <span class="type">Just</span> <span class="number">500000</span> &#125;</span><br><span class="line">                                       <span class="type">Goto</span> allWindows)</span><br><span class="line">    , ((mod4Mask .|. shiftMask, xK_b     ), windowPrompt </span><br><span class="line">                                       def &#123; autoComplete = <span class="type">Just</span> <span class="number">500000</span> &#125;</span><br><span class="line">                                       <span class="type">Bring</span> allWindows)</span><br><span class="line"><span class="comment">-- scratchpad</span></span><br><span class="line">    , ((mod4Mask, xK_u  ), namedScratchpadAction myScratchPads <span class="string">"terminal"</span> )</span><br><span class="line">    , ((mod4Mask, xK_p  ), namedScratchpadAction myScratchPads <span class="string">"topTerm"</span> )</span><br><span class="line">    , ((mod4Mask, xK_i), namedScratchpadAction myScratchPads <span class="string">"bottomLeftTerm"</span> )</span><br><span class="line">    , ((mod4Mask, xK_o), namedScratchpadAction myScratchPads <span class="string">"bottomRightTerm"</span> )</span><br><span class="line">    , ((mod4Mask, xK_v), namedScratchpadAction myScratchPads <span class="string">"leftTerm"</span> )</span><br><span class="line"><span class="comment">-- sub key s ----------------------------------------------------------------------------- used for navigate</span></span><br><span class="line">    , ((mod4Mask , xK_s), submap . <span class="type">M</span>.fromList $</span><br><span class="line">       [ ((<span class="number">0</span>, xK_j), nextWS)  <span class="comment">--jump to next workspace </span></span><br><span class="line">       , ((<span class="number">0</span>, xK_k), prevWS)  <span class="comment">--jump to previous workspace </span></span><br><span class="line">       , ((<span class="number">0</span>, xK_l), shiftToNext)  <span class="comment">--shift window to next workspace </span></span><br><span class="line">       , ((<span class="number">0</span>, xK_h ), shiftToPrev)  <span class="comment">--shift window to previous workspace </span></span><br><span class="line">       , ((<span class="number">0</span>, xK_f), <span class="type">AL</span>.launchApp def <span class="string">"firefox"</span>)  <span class="comment">--a prompt search for firefox</span></span><br><span class="line">       , ((<span class="number">0</span>, xK_m), spawn <span class="string">"amixer set Master toggle"</span>)  <span class="comment">--toggle amixer mute</span></span><br><span class="line">       , ((<span class="number">0</span>, xK_p), spawn <span class="string">"flameshot &amp;"</span>)  <span class="comment">--toggle amixer mute</span></span><br><span class="line">       , ((<span class="number">0</span>, xK_t), sinkAll)  <span class="comment">--unfloat all window</span></span><br><span class="line">       , ((<span class="number">0</span>, xK_BackSpace), killAll)  <span class="comment">--kill all window</span></span><br><span class="line">       , ((<span class="number">0</span>, xK_c), sendMessage <span class="type">ToggleLayout</span>)  <span class="comment">--toggle window frame</span></span><br><span class="line">       ])</span><br><span class="line"><span class="comment">-- sub key d ----------------------------------------------------------------------------- used for sublayout</span></span><br><span class="line">    , ((mod4Mask , xK_d), submap . <span class="type">M</span>.fromList $</span><br><span class="line">       [ ((<span class="number">0</span> , xK_h), sendMessage $ pullGroup <span class="type">L</span>)</span><br><span class="line">       , ((<span class="number">0</span> , xK_l), sendMessage $ pullGroup <span class="type">R</span>)</span><br><span class="line">       , ((<span class="number">0</span> , xK_k), sendMessage $ pullGroup <span class="type">U</span>)</span><br><span class="line">       , ((<span class="number">0</span> , xK_j), sendMessage $ pullGroup <span class="type">D</span>)</span><br><span class="line">       </span><br><span class="line">       , ((<span class="number">0</span> , xK_m), withFocused (sendMessage . <span class="type">MergeAll</span>))</span><br><span class="line">       , ((<span class="number">0</span> , xK_u), withFocused (sendMessage . <span class="type">UnMerge</span>))</span><br><span class="line">       </span><br><span class="line">       , ((<span class="number">0</span> , xK_period), onGroup <span class="type">W</span>.focusUp')</span><br><span class="line">       , ((<span class="number">0</span> , xK_comma), onGroup <span class="type">W</span>.focusDown')</span><br><span class="line">       ])</span><br><span class="line"><span class="comment">-- sub key a ------------------------------------------------------------------------------- jump layout</span></span><br><span class="line">    , ((mod4Mask , xK_a), submap . <span class="type">M</span>.fromList $</span><br><span class="line">       [ ((<span class="number">0</span> , xK_g ), sendMessage $ <span class="type">JumpToLayout</span> <span class="string">"Grid"</span>)</span><br><span class="line">       , ((<span class="number">0</span> , xK_c ), sendMessage $ <span class="type">JumpToLayout</span> <span class="string">"Accordion"</span>)</span><br><span class="line">       , ((<span class="number">0</span> , xK_t ), sendMessage $ <span class="type">JumpToLayout</span> <span class="string">"talldiff"</span>)</span><br><span class="line">       , ((<span class="number">0</span> , xK_d ), sendMessage $ <span class="type">JumpToLayout</span> <span class="string">"dishes"</span>)</span><br><span class="line">       , ((<span class="number">0</span> , xK_o ), sendMessage $ <span class="type">JumpToLayout</span> <span class="string">"onebig"</span>)</span><br><span class="line">       , ((<span class="number">0</span> , xK_f ), sendMessage $ <span class="type">JumpToLayout</span> <span class="string">"Full"</span>)</span><br><span class="line">       ])</span><br><span class="line">    ]</span><br><span class="line"><span class="comment">-------------------------------------------------------------------------------------------- float window</span></span><br><span class="line"><span class="title">myMouseBindings</span> (<span class="type">XConfig</span> &#123;<span class="type">XMonad</span>.modMask = modMask&#125;) = <span class="type">M</span>.fromList $</span><br><span class="line">    [ ((modMask, button1), (\w -&gt; focus w &gt;&gt; mouseMoveWindow w))</span><br><span class="line">    , ((modMask, button3), (\w -&gt; focus w &gt;&gt; mouseResizeWindow w))]</span><br><span class="line"></span><br><span class="line"><span class="comment">-------------------------------------------------------------------------------------------- scratch window</span></span><br><span class="line"><span class="title">myScratchPads</span> = [ <span class="type">NS</span> <span class="string">"terminal"</span> spawnTerm  findTerm manageTerm</span><br><span class="line">                , <span class="type">NS</span> <span class="string">"topTerm"</span> spawnTerm1  findTerm1 manageTerm1</span><br><span class="line">                , <span class="type">NS</span> <span class="string">"bottomLeftTerm"</span> spawnTerm2  findTerm2 manageTerm2</span><br><span class="line">                , <span class="type">NS</span> <span class="string">"bottomRightTerm"</span> spawnTerm3  findTerm3 manageTerm3</span><br><span class="line">                , <span class="type">NS</span> <span class="string">"leftTerm"</span> spawnTerm4  findTerm4 manageTerm4</span><br><span class="line">        ]</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    spawnTerm = myTerminal ++  <span class="string">" -name centerTerm"</span> <span class="comment">----------------------------------------- center terminal</span></span><br><span class="line">    findTerm = resource =? <span class="string">"centerTerm"</span></span><br><span class="line">    manageTerm = customFloating $ <span class="type">W</span>.<span class="type">RationalRect</span> l t w h </span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">        h = <span class="number">0.85</span> </span><br><span class="line">        w = <span class="number">0.9</span></span><br><span class="line">        t = <span class="number">0.07</span>      <span class="comment">-- bottom edge</span></span><br><span class="line">        l = <span class="number">0.05</span>      <span class="comment">-- left</span></span><br><span class="line"></span><br><span class="line">    spawnTerm1 = myTerminal ++  <span class="string">" -name popupterm"</span> <span class="comment">----------------------------------------- command terminal</span></span><br><span class="line">    findTerm1 = resource =? <span class="string">"popupterm"</span></span><br><span class="line">    manageTerm1 = customFloating $ <span class="type">W</span>.<span class="type">RationalRect</span> l t w h </span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">        h = <span class="number">0.2</span>     <span class="comment">--hight</span></span><br><span class="line">        w = <span class="number">1.0</span>     <span class="comment">--width</span></span><br><span class="line">        t = <span class="number">0.02</span>    <span class="comment">-- bottom edge</span></span><br><span class="line">        l = <span class="number">0.0</span>     <span class="comment">-- left</span></span><br><span class="line"></span><br><span class="line">    spawnTerm2 = <span class="string">"urxvt"</span> ++  <span class="string">" -name blterm"</span> <span class="comment">----------------------------------------------- bottom left terminal</span></span><br><span class="line">    findTerm2 = resource =? <span class="string">"blterm"</span></span><br><span class="line">    manageTerm2 = customFloating $ <span class="type">W</span>.<span class="type">RationalRect</span> l t w h </span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">        h = <span class="number">0.05</span>    <span class="comment">--hight</span></span><br><span class="line">        w = <span class="number">0.5</span>     <span class="comment">--width</span></span><br><span class="line">        t = <span class="number">0.95</span>    <span class="comment">-- bottom edge</span></span><br><span class="line">        l = <span class="number">0</span>       <span class="comment">-- left</span></span><br><span class="line">    spawnTerm3 = <span class="string">"urxvt"</span> ++  <span class="string">" -name brterm"</span> <span class="comment">----------------------------------------------- bottom right terminal</span></span><br><span class="line">    findTerm3 = resource =? <span class="string">"brterm"</span></span><br><span class="line">    manageTerm3 = customFloating $ <span class="type">W</span>.<span class="type">RationalRect</span> l t w h </span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">        h = <span class="number">0.05</span>    <span class="comment">--hight</span></span><br><span class="line">        w = <span class="number">0.5</span>     <span class="comment">--width</span></span><br><span class="line">        t = <span class="number">0.95</span>   <span class="comment">-- bottom edge</span></span><br><span class="line">        l = <span class="number">0.5</span>     <span class="comment">-- left</span></span><br><span class="line">    spawnTerm4 = <span class="string">"urxvt"</span> ++  <span class="string">" -name topcterm"</span> <span class="comment">--------------------------------------------- top center terminal</span></span><br><span class="line">    findTerm4 = resource =? <span class="string">"topcterm"</span></span><br><span class="line">    manageTerm4 = customFloating $ <span class="type">W</span>.<span class="type">RationalRect</span> l t w h </span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">        h = <span class="number">0.03</span>     <span class="comment">--hight</span></span><br><span class="line">        w = <span class="number">0.6</span>     <span class="comment">--width</span></span><br><span class="line">        t = <span class="number">0.03</span>     <span class="comment">-- bottom edge</span></span><br><span class="line">        l = <span class="number">0.2</span>    <span class="comment">-- left</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>xmonad1.0</title>
      <link href="/2019/09/07/xmonad1-0/"/>
      <url>/2019/09/07/xmonad1-0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在众多的window manager中最喜欢的还是最初认识的xmonad，虽然配置很麻烦，但是却能达到自己想要的效果，所以一切付出都是值得的。经过了许许多多的修改之后，现在使用的正是一个基本能满足需求的配置，如果以后还有其他更好的功能加入的话，再写2.0版本。</p></blockquote><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S xmonad xmonad-contrib</span><br></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.xmonad</span><br><span class="line">touch ~/.xmonad/xmonad.hs</span><br></pre></td></tr></table></figure><h4 id="配置文件的编译"><a href="#配置文件的编译" class="headerlink" title="配置文件的编译"></a>配置文件的编译</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmonad --recompile</span><br></pre></td></tr></table></figure><h4 id="配置文件的重新加载"><a href="#配置文件的重新加载" class="headerlink" title="配置文件的重新加载"></a>配置文件的重新加载</h4><p><code>modkey+q</code></p><p>modkey默认为winkey</p><h4 id="退出xmonad"><a href="#退出xmonad" class="headerlink" title="退出xmonad"></a>退出xmonad</h4><p><code>modkey+shift+q</code></p><h4 id="auto-startx-at-login"><a href="#auto-startx-at-login" class="headerlink" title="auto startx at login"></a>auto startx at login</h4><p>zsh加入<code>.zprofile</code> </p><p>bash加入<code>.bash_profile</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if [[ ! $DISPLAY &amp;&amp; $XDG_VTNR -eq 1 ]];then</span><br><span class="line">exec startx</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><hr><h4 id="主要功能："><a href="#主要功能：" class="headerlink" title="主要功能："></a>主要功能：</h4><ol><li>四个layout：resizable tall，center master，full，Accordion。其中前两个可以快捷键切换</li><li>窗口之间设置gaps</li><li>最大化窗口</li><li>各个窗口自定义border</li><li>窗口sublayout合并功能，并加入加宽的border</li><li>隐藏窗口yank</li><li>自定义 scratchpad，快捷键调出</li><li>窗口水平，垂直缩放</li><li>status bar采用的是polybar，可快捷键隐藏</li><li>自定义的其他快捷键</li><li>modkey+w快速在最近两个workspace间切换</li></ol><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-------------------------------------------------------------------------------------------- import modules</span></span><br><span class="line"><span class="keyword">import</span> XMonad</span><br><span class="line"><span class="keyword">import</span> System.IO</span><br><span class="line"><span class="keyword">import</span> XMonad.Actions.CycleWS  <span class="comment">--movie/cycle windows between workspaces</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Actions.SimpleDate  <span class="comment">--popup the date with dzen2</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Actions.Submap  <span class="comment">--create a sub-mapping of key bindings</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Actions.NoBorders   <span class="comment">--used in all window</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Actions.FloatKeys  <span class="comment">--position window with float</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Actions.WithAll  <span class="comment">--make effort for all windows</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Hooks.DynamicLog  <span class="comment">--for xmobar</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Hooks.ManageDocks  <span class="comment">--toggle xmobar hidden</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Hooks.InsertPosition  <span class="comment">--choose new window position</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Util.EZConfig  <span class="comment">--set shortkeys</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">qualified</span> XMonad.StackSet <span class="keyword">as</span> W</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">qualified</span> Data.Map <span class="keyword">as</span> M</span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.NoBorders    <span class="comment">--used in fullscreen</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.Spacing   <span class="comment">--set edge space of window</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.ResizableTile  <span class="comment">--adjust vertical height</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.Maximize  <span class="comment">--toggle fullscreen</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.Minimize  <span class="comment">--toggle miniscreen</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.Hidden  <span class="comment">--hide window</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.ToggleLayouts   <span class="comment">--toggle circle windows</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.NoFrillsDecoration  <span class="comment">--set windows titlebar</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.WindowNavigation  <span class="comment">--move or swap focus window between left and right</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Prompt</span><br><span class="line"><span class="keyword">import</span> XMonad.Prompt.Window</span><br><span class="line"><span class="keyword">import</span> XMonad.Prompt.AppLauncher <span class="keyword">as</span> AL <span class="comment">--search app</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Hooks.WorkspaceHistory</span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.Accordion</span><br><span class="line"><span class="comment">------------------------------------------------------------------------------------------- scratchpad</span></span><br><span class="line"><span class="keyword">import</span> XMonad.ManageHook</span><br><span class="line"><span class="keyword">import</span> XMonad.Util.NamedScratchpad</span><br><span class="line"><span class="comment">------------------------------------------------------------------------------------------- center master</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.CenteredMaster</span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.Grid</span><br><span class="line"><span class="comment">------------------------------------------------------------------------------------------- toggle layout</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.ToggleLayouts</span><br><span class="line"><span class="comment">------------------------------------------------------------------------------------------- sub layout</span></span><br><span class="line"><span class="comment">--import XMonad.Util.Themes</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.SubLayouts</span><br><span class="line"><span class="comment">--import XMonad.Layout.WindowNavigation</span></span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.Tabbed</span><br><span class="line"><span class="keyword">import</span> XMonad.Layout.Simplest</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> = xmonad  =&lt;&lt; statusBar myBar myPP toggleStrutsKey myConfig </span><br><span class="line"><span class="title">myBar</span> = <span class="string">"polybar"</span></span><br><span class="line"><span class="title">myPP</span> = xmobarPP &#123; ppCurrent = xmobarColor <span class="string">"#7CFF00"</span> <span class="string">""</span> . wrap <span class="string">"["</span> <span class="string">"]"</span> </span><br><span class="line">                , ppOrder   = \(ws:l:t:_) -&gt; [ws]   <span class="comment">--hide other thing off the xmobar</span></span><br><span class="line">                , ppTitle = (\str -&gt; <span class="string">""</span>)</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">-- Key binding to toggle the gap for the bar.</span></span><br><span class="line"><span class="title">toggleStrutsKey</span> <span class="type">XConfig</span> &#123;<span class="type">XMonad</span>.modMask = modMask&#125; = (modMask, xK_b)</span><br><span class="line"><span class="title">myConfig</span> = defaultConfig &#123; modMask = mod4Mask</span><br><span class="line">                         , terminal = myTerminal</span><br><span class="line">                         , focusFollowsMouse = <span class="type">False</span></span><br><span class="line">                         , mouseBindings = myMouseBindings </span><br><span class="line">                         , layoutHook = myLayoutHook </span><br><span class="line">                         , focusedBorderColor=<span class="string">"#1d2935"</span> <span class="comment">-- #FF7F24#d57a39</span></span><br><span class="line">                         , normalBorderColor=<span class="string">"#1d2935"</span></span><br><span class="line">                         , logHook = workspaceHistoryHook </span><br><span class="line"> , manageHook = myManageHook &lt;+&gt; manageHook defaultConfig &lt;+&gt; insertPosition <span class="type">End</span> <span class="type">Newer</span> &lt;+&gt; namedScratchpadManageHook myScratchPads</span><br><span class="line">                          &#125;`additionalKeys` myKeys</span><br><span class="line"><span class="title">myTerminal</span> = <span class="string">"xterm"</span></span><br><span class="line"><span class="title">myManageHook</span> = composeAll</span><br><span class="line">   [ className =? <span class="string">"netease-cloud-music"</span>  <span class="comment">--&gt; doFloat</span></span><br><span class="line">   , className =? <span class="string">"Gimp"</span> <span class="comment">--&gt; doFloat</span></span><br><span class="line">   , className =? <span class="string">"mplayer"</span> <span class="comment">--&gt; doIgnore</span></span><br><span class="line">   , manageDocks</span><br><span class="line">   ]</span><br><span class="line"></span><br><span class="line"><span class="title">myLayoutHook</span> = hiddenWindows</span><br><span class="line">             $  maximizeWithPadding <span class="number">0</span></span><br><span class="line">             $  minimize </span><br><span class="line">             $  windowNavigation</span><br><span class="line">             $  noFrillsDeco shrinkText topBarTheme </span><br><span class="line">             $  addTabs shrinkText myTabTheme</span><br><span class="line">             $  spacingWithEdge <span class="number">5</span></span><br><span class="line"> <span class="comment">-- $  (toggleLayouts ( centerMaster Grid ) (subTabbed $ ResizableTall 1 (1/100) (1/2) [] ) ||| noBorders Full )</span></span><br><span class="line"> $  subLayout [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>] (<span class="type">Simplest</span>)</span><br><span class="line"> $  (toggleLayouts ( centerMaster <span class="type">Grid</span> ) ( <span class="type">ResizableTall</span> <span class="number">1</span> (<span class="number">1</span>/<span class="number">100</span>) (<span class="number">1</span>/<span class="number">2</span>) [] ) ||| (noBorders <span class="type">Full</span>) ||| <span class="type">Accordion</span>  )</span><br><span class="line"></span><br><span class="line"><span class="title">topBarTheme</span> = def</span><br><span class="line">     &#123; activeColor = <span class="string">"#FF7F24"</span></span><br><span class="line">     , activeBorderColor = <span class="string">"#FF7F24"</span></span><br><span class="line">     , activeTextColor = <span class="string">"#FF7F24"</span></span><br><span class="line">     , inactiveColor = <span class="string">"#00868B"</span></span><br><span class="line">     , inactiveBorderColor = <span class="string">"#00868B"</span></span><br><span class="line">     , inactiveTextColor = <span class="string">"#00868B"</span></span><br><span class="line">     , urgentColor = <span class="string">"#9AFF9A"</span></span><br><span class="line">     , urgentBorderColor = <span class="string">"#9AFF9A"</span></span><br><span class="line">     , urgentTextColor = <span class="string">"#C1C1C1"</span></span><br><span class="line">     , decoHeight = <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="title">myTabTheme</span> = def</span><br><span class="line">     &#123; activeColor           = <span class="string">"#FF7F24"</span></span><br><span class="line">     , inactiveColor         = <span class="string">"#00868B"</span></span><br><span class="line">     , activeBorderColor     = <span class="string">"#FF7F24"</span></span><br><span class="line">     , inactiveBorderColor   = <span class="string">"#00868B"</span></span><br><span class="line">     , activeTextColor       = <span class="string">"#FF7F24"</span> </span><br><span class="line">     , inactiveTextColor     = <span class="string">"#00868B"</span></span><br><span class="line">     , urgentColor = <span class="string">"#9AFF9A"</span></span><br><span class="line">     , urgentBorderColor = <span class="string">"#9AFF9A"</span></span><br><span class="line">     , urgentTextColor = <span class="string">"#C1C1C1"</span></span><br><span class="line">     , decoHeight = <span class="number">8</span></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-------------------------------------------------------------------------------------------- key bending</span></span><br><span class="line"><span class="title">myKeys</span> =</span><br><span class="line">    [ ((mod4Mask, xK_F11),spawn <span class="string">"amixer set Master 5%-"</span>)</span><br><span class="line">    , ((mod4Mask, xK_F12), spawn <span class="string">"amixer set Master 5%+"</span>)</span><br><span class="line">    , ((mod4Mask, xK_F9 ), spawn <span class="string">"xbacklight -dec 2"</span>)</span><br><span class="line">    , ((mod4Mask, xK_F10), spawn <span class="string">"xbacklight -inc 2"</span>)</span><br><span class="line">    , ((<span class="number">0</span> , <span class="number">0x1008ff13</span>), spawn <span class="string">"amixer set Master 5%+ unmute"</span>)   </span><br><span class="line">    , ((<span class="number">0</span> , <span class="number">0x1008ff11</span>), spawn <span class="string">"amixer set Master 5%- unmute"</span>)</span><br><span class="line">    , ((mod4Mask, xK_F6), spawn <span class="string">"xinput disable 14"</span>)</span><br><span class="line">    , ((mod4Mask, xK_n  ), spawn <span class="string">"mate-terminal"</span>)  <span class="comment">--new terminal</span></span><br><span class="line">    , ((mod4Mask, xK_r  ), spawn <span class="string">"rofi -show drun -theme Adapta-Nokto.rasi"</span>)  <span class="comment">--show date usr dzen2</span></span><br><span class="line">    , ((mod4Mask .|. shiftMask, xK_z), spawn <span class="string">"betterlockscreen  ~/Picture/background/healer.jpg -l -b 1 dim"</span>)  <span class="comment">--lock screen</span></span><br><span class="line"><span class="comment">-- navigate key</span></span><br><span class="line">    , ((mod4Mask, xK_l), sendMessage $ <span class="type">Go</span> <span class="type">R</span>)</span><br><span class="line">    , ((mod4Mask, xK_h), sendMessage $ <span class="type">Go</span> <span class="type">L</span>)</span><br><span class="line">    , ((mod4Mask .|. mod1Mask, xK_i  ), sendMessage <span class="type">MirrorShrink</span>)  <span class="comment">--vertical shrink window</span></span><br><span class="line">    , ((mod4Mask .|. mod1Mask, xK_o  ), sendMessage <span class="type">MirrorExpand</span>)  <span class="comment">--vertical expand window</span></span><br><span class="line">    , ((mod4Mask .|. mod1Mask, xK_h  ), sendMessage <span class="type">Shrink</span>)</span><br><span class="line">    , ((mod4Mask .|. mod1Mask, xK_l  ), sendMessage <span class="type">Expand</span>)</span><br><span class="line">    , ((mod4Mask .|. shiftMask, xK_m), windows <span class="type">W</span>.swapMaster)  <span class="comment">--move window to master</span></span><br><span class="line">    , ((mod4Mask, xK_y), withFocused hideWindow) <span class="comment">--hide window</span></span><br><span class="line">    , ((mod4Mask .|. shiftMask, xK_y), popOldestHiddenWindow) <span class="comment">-- show hidden window</span></span><br><span class="line">    , ((mod4Mask, xK_g  ), withFocused toggleBorder)  <span class="comment">--togger window border</span></span><br><span class="line">    , ((mod4Mask, xK_f  ), withFocused (sendMessage . maximizeRestore))  <span class="comment">--toggle full window</span></span><br><span class="line">    , ((mod4Mask, xK_w  ), toggleWS)  <span class="comment">--toggle workspace in order</span></span><br><span class="line">    , ((mod4Mask, xK_t), sendMessage <span class="type">ToggleLayout</span>)  <span class="comment">--toggle window frame</span></span><br><span class="line">    , ((mod4Mask, xK_BackSpace), kill)  <span class="comment">--kill window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- funcation key</span></span><br><span class="line">    , ((mod4Mask .|. shiftMask, xK_g     ), windowPrompt </span><br><span class="line">                                       def &#123; autoComplete = <span class="type">Just</span> <span class="number">500000</span> &#125;</span><br><span class="line">                                       <span class="type">Goto</span> allWindows)</span><br><span class="line">    , ((mod4Mask .|. shiftMask, xK_b     ), windowPrompt </span><br><span class="line">                                       def &#123; autoComplete = <span class="type">Just</span> <span class="number">500000</span> &#125;</span><br><span class="line">                                       <span class="type">Bring</span> allWindows)</span><br><span class="line"><span class="comment">-- scratchpad</span></span><br><span class="line">    , ((mod4Mask, xK_u  ), namedScratchpadAction myScratchPads <span class="string">"terminal"</span> )</span><br><span class="line">    , ((mod4Mask, xK_p  ), namedScratchpadAction myScratchPads <span class="string">"topTerm"</span> )</span><br><span class="line"><span class="comment">-- sub key s</span></span><br><span class="line">    , ((mod4Mask , xK_s), submap . <span class="type">M</span>.fromList $</span><br><span class="line">       [ ((<span class="number">0</span>, xK_j), nextWS)  <span class="comment">--jump to next workspace </span></span><br><span class="line">       , ((<span class="number">0</span>, xK_k), prevWS)  <span class="comment">--jump to previous workspace </span></span><br><span class="line">       , ((<span class="number">0</span>, xK_l), shiftToNext)  <span class="comment">--shift window to next workspace </span></span><br><span class="line">       , ((<span class="number">0</span>, xK_h ), shiftToPrev)  <span class="comment">--shift window to previous workspace </span></span><br><span class="line">       , ((<span class="number">0</span>, xK_f), <span class="type">AL</span>.launchApp def <span class="string">"firefox"</span>)  <span class="comment">--a prompt search for firefox</span></span><br><span class="line">       , ((<span class="number">0</span>, xK_m), spawn <span class="string">"amixer set Master toggle"</span>)  <span class="comment">--toggle amixer mute</span></span><br><span class="line">       , ((<span class="number">0</span>, xK_p), spawn <span class="string">"flameshot &amp;"</span>)  <span class="comment">--toggle amixer mute</span></span><br><span class="line">       , ((<span class="number">0</span>, xK_t), sinkAll)  <span class="comment">--unfloat all window</span></span><br><span class="line">       , ((<span class="number">0</span>, xK_BackSpace), killAll)  <span class="comment">--kill all window</span></span><br><span class="line">       , ((<span class="number">0</span>, xK_c), sendMessage <span class="type">ToggleLayout</span>)  <span class="comment">--toggle window frame</span></span><br><span class="line">       , ((<span class="number">0</span>, xK_i), namedScratchpadAction myScratchPads <span class="string">"bottomLeftTerm"</span> )</span><br><span class="line">       , ((<span class="number">0</span>, xK_o), namedScratchpadAction myScratchPads <span class="string">"bottomRightTerm"</span> )</span><br><span class="line">       , ((<span class="number">0</span>, xK_n), namedScratchpadAction myScratchPads <span class="string">"leftTerm"</span> )</span><br><span class="line">       ])</span><br><span class="line"><span class="comment">-- sub key d -----------------------------------------------------------------------------used for sublayout</span></span><br><span class="line">    , ((mod4Mask , xK_d), submap . <span class="type">M</span>.fromList $</span><br><span class="line">       [ ((<span class="number">0</span> , xK_h), sendMessage $ pullGroup <span class="type">L</span>)</span><br><span class="line">       , ((<span class="number">0</span> , xK_l), sendMessage $ pullGroup <span class="type">R</span>)</span><br><span class="line">       , ((<span class="number">0</span> , xK_k), sendMessage $ pullGroup <span class="type">U</span>)</span><br><span class="line">       , ((<span class="number">0</span> , xK_j), sendMessage $ pullGroup <span class="type">D</span>)</span><br><span class="line">       </span><br><span class="line">       , ((<span class="number">0</span> , xK_m), withFocused (sendMessage . <span class="type">MergeAll</span>))</span><br><span class="line">       , ((<span class="number">0</span> , xK_u), withFocused (sendMessage . <span class="type">UnMerge</span>))</span><br><span class="line">       </span><br><span class="line">       , ((<span class="number">0</span> , xK_period), onGroup <span class="type">W</span>.focusUp')</span><br><span class="line">       , ((<span class="number">0</span> , xK_comma), onGroup <span class="type">W</span>.focusDown')</span><br><span class="line">       ])</span><br><span class="line">    ]</span><br><span class="line"><span class="comment">-------------------------------------------------------------------------------------------- float window</span></span><br><span class="line"><span class="title">myMouseBindings</span> (<span class="type">XConfig</span> &#123;<span class="type">XMonad</span>.modMask = modMask&#125;) = <span class="type">M</span>.fromList $</span><br><span class="line">    [ ((modMask, button1), (\w -&gt; focus w &gt;&gt; mouseMoveWindow w))</span><br><span class="line">    , ((modMask, button3), (\w -&gt; focus w &gt;&gt; mouseResizeWindow w))]</span><br><span class="line"></span><br><span class="line"><span class="comment">-------------------------------------------------------------------------------------------- scratch window</span></span><br><span class="line"><span class="title">myScratchPads</span> = [ <span class="type">NS</span> <span class="string">"terminal"</span> spawnTerm  findTerm manageTerm</span><br><span class="line">                , <span class="type">NS</span> <span class="string">"topTerm"</span> spawnTerm1  findTerm1 manageTerm1</span><br><span class="line">                , <span class="type">NS</span> <span class="string">"bottomLeftTerm"</span> spawnTerm2  findTerm2 manageTerm2</span><br><span class="line">                , <span class="type">NS</span> <span class="string">"bottomRightTerm"</span> spawnTerm3  findTerm3 manageTerm3</span><br><span class="line">                , <span class="type">NS</span> <span class="string">"leftTerm"</span> spawnTerm4  findTerm4 manageTerm4</span><br><span class="line">        ]</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    spawnTerm = myTerminal ++  <span class="string">" -name centerTerm"</span> <span class="comment">----------------------------------------- center terminal</span></span><br><span class="line">    findTerm = resource =? <span class="string">"centerTerm"</span></span><br><span class="line">    manageTerm = customFloating $ <span class="type">W</span>.<span class="type">RationalRect</span> l t w h </span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">        h = <span class="number">0.85</span> </span><br><span class="line">        w = <span class="number">0.9</span></span><br><span class="line">        t = <span class="number">0.07</span>      <span class="comment">-- bottom edge</span></span><br><span class="line">        l = <span class="number">0.05</span>      <span class="comment">-- left</span></span><br><span class="line"></span><br><span class="line">    spawnTerm1 = myTerminal ++  <span class="string">" -name popupterm"</span> <span class="comment">----------------------------------------- command terminal</span></span><br><span class="line">    findTerm1 = resource =? <span class="string">"popupterm"</span></span><br><span class="line">    manageTerm1 = customFloating $ <span class="type">W</span>.<span class="type">RationalRect</span> l t w h </span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">        h = <span class="number">0.2</span>     <span class="comment">--hight</span></span><br><span class="line">        w = <span class="number">1.0</span>     <span class="comment">--width</span></span><br><span class="line">        t = <span class="number">0.02</span>    <span class="comment">-- bottom edge</span></span><br><span class="line">        l = <span class="number">0.0</span>     <span class="comment">-- left</span></span><br><span class="line"></span><br><span class="line">    spawnTerm2 = <span class="string">"urxvt"</span> ++  <span class="string">" -name blterm"</span> <span class="comment">----------------------------------------------- bottom left terminal</span></span><br><span class="line">    findTerm2 = resource =? <span class="string">"blterm"</span></span><br><span class="line">    manageTerm2 = customFloating $ <span class="type">W</span>.<span class="type">RationalRect</span> l t w h </span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">        h = <span class="number">0.05</span>    <span class="comment">--hight</span></span><br><span class="line">        w = <span class="number">0.5</span>     <span class="comment">--width</span></span><br><span class="line">        t = <span class="number">0.95</span>    <span class="comment">-- bottom edge</span></span><br><span class="line">        l = <span class="number">0</span>       <span class="comment">-- left</span></span><br><span class="line">    spawnTerm3 = <span class="string">"urxvt"</span> ++  <span class="string">" -name brterm"</span> <span class="comment">----------------------------------------------- bottom right terminal</span></span><br><span class="line">    findTerm3 = resource =? <span class="string">"brterm"</span></span><br><span class="line">    manageTerm3 = customFloating $ <span class="type">W</span>.<span class="type">RationalRect</span> l t w h </span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">        h = <span class="number">0.05</span>    <span class="comment">--hight</span></span><br><span class="line">        w = <span class="number">0.5</span>     <span class="comment">--width</span></span><br><span class="line">        t = <span class="number">0.95</span>   <span class="comment">-- bottom edge</span></span><br><span class="line">        l = <span class="number">0.5</span>     <span class="comment">-- left</span></span><br><span class="line">    spawnTerm4 = <span class="string">"urxvt"</span> ++  <span class="string">" -name topcterm"</span> <span class="comment">--------------------------------------------- top center terminal</span></span><br><span class="line">    findTerm4 = resource =? <span class="string">"topcterm"</span></span><br><span class="line">    manageTerm4 = customFloating $ <span class="type">W</span>.<span class="type">RationalRect</span> l t w h </span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">        h = <span class="number">0.03</span>     <span class="comment">--hight</span></span><br><span class="line">        w = <span class="number">0.6</span>     <span class="comment">--width</span></span><br><span class="line">        t = <span class="number">0.03</span>     <span class="comment">-- bottom edge</span></span><br><span class="line">        l = <span class="number">0.2</span>    <span class="comment">-- left</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>oracle-decode</title>
      <link href="/2019/09/05/oracle-decode/"/>
      <url>/2019/09/05/oracle-decode/</url>
      
        <content type="html"><![CDATA[<h4 id="decode（解码）的作用类似于if条件判断"><a href="#decode（解码）的作用类似于if条件判断" class="headerlink" title="decode（解码）的作用类似于if条件判断"></a><code>decode</code>（解码）的作用类似于if条件判断</h4><p>无论那种用法，都是对原字段的一种判断，并用其它数值进行替换</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">decode(条件,值1,返回值1,值2,返回值2,…值n,返回值n,缺省值)</span><br></pre></td></tr></table></figure><h5 id="用法1：对字段的数据进行替换"><a href="#用法1：对字段的数据进行替换" class="headerlink" title="用法1：对字段的数据进行替换"></a>用法1：对字段的数据进行替换</h5><p>对日期进行替换，如果日期与今天相等，显示汉字今天，如果日期为明天，则显示汉字明天。</p><p><em>trunc()对日期取整</em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">decode</span>(trunc(t.time),trunc(<span class="keyword">sysdate</span>),<span class="string">'今天'</span>,trunc(<span class="keyword">sysdate</span>+<span class="number">1</span>),<span class="string">'明天'</span>) <span class="keyword">as</span> <span class="built_in">date</span> </span><br><span class="line"><span class="keyword">from</span> mytime t;</span><br></pre></td></tr></table></figure><h5 id="用法2：判断字段值是否为空null"><a href="#用法2：判断字段值是否为空null" class="headerlink" title="用法2：判断字段值是否为空null"></a>用法2：判断字段值是否为空null</h5><p><em>sign(value)函数会根据value的值为0，正数，负数，分别返回0，1,-1</em></p><p>如果性别为空，显示汉字暂无数据，其它原样输出</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> t.id,</span><br><span class="line">       t.name,</span><br><span class="line">       t.age,</span><br><span class="line">       <span class="keyword">decode</span>(t.sex,<span class="literal">NULL</span>,<span class="string">'暂无数据'</span>,t.sex) <span class="keyword">as</span> sex</span><br><span class="line">  <span class="keyword">from</span> STUDENT2 t</span><br></pre></td></tr></table></figure><h5 id="用法3：比较大小做判断"><a href="#用法3：比较大小做判断" class="headerlink" title="用法3：比较大小做判断"></a>用法3：比较大小做判断</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,</span><br><span class="line">       sal,</span><br><span class="line">       <span class="keyword">decode</span>(<span class="keyword">sign</span>(sal - <span class="number">5000</span>),</span><br><span class="line">              <span class="number">1</span>,</span><br><span class="line">              <span class="string">'高薪'</span>,</span><br><span class="line">              <span class="number">0</span>,</span><br><span class="line">              <span class="string">'高薪'</span>,</span><br><span class="line">              <span class="number">-1</span>,</span><br><span class="line">              <span class="keyword">decode</span>(<span class="keyword">sign</span>(sal - <span class="number">3000</span>), <span class="number">1</span>, <span class="string">'中等'</span>, <span class="number">0</span>, <span class="string">'中等'</span>, <span class="number">-1</span>, <span class="string">'低薪'</span>)) <span class="keyword">as</span> salname</span><br><span class="line">  <span class="keyword">from</span> person;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>xclip-非常好用的剪切板</title>
      <link href="/2019/08/27/xclip-%E9%9D%9E%E5%B8%B8%E5%A5%BD%E7%94%A8%E7%9A%84%E5%89%AA%E5%88%87%E6%9D%BF/"/>
      <url>/2019/08/27/xclip-%E9%9D%9E%E5%B8%B8%E5%A5%BD%E7%94%A8%E7%9A%84%E5%89%AA%E5%88%87%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>看了一篇文章介绍xclip这个小工具，发现真的超级有用，所以记录下来。话说不就是剪切板么？用鼠标复制不是更快？不无道理，但是的看应用场景。如果需要复制的数据量比较大，那么它就很有用了。</p></blockquote><p>举个例子：需要用命令去查看主机的各项性能，而其输出超级多，在terminal中去这样复制数据看着就心累。当时我在想有没有什么好一点的方法？比如说将数据写入文件，然后通过ftp传到windows上，然后去复制，至少这样比在terminal复制舒服多了。当然上面这些步骤需要写出脚本来运行。</p><h4 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h4><h5 id="i从文件复制："><a href="#i从文件复制：" class="headerlink" title="-i从文件复制："></a><code>-i</code>从文件复制：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xclip somefile</span><br><span class="line">或者</span><br><span class="line">xclip -i somefile</span><br></pre></td></tr></table></figure><h5 id="从标准输入复制"><a href="#从标准输入复制" class="headerlink" title="|从标准输入复制"></a><code>|</code>从标准输入复制</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat somefile | xclip</span><br><span class="line">echo "somewords" | xclip</span><br><span class="line">grep 'somewords' | xclip</span><br><span class="line">tail -10 | xclip</span><br></pre></td></tr></table></figure><h5 id="o复制的数据进行输出-粘贴"><a href="#o复制的数据进行输出-粘贴" class="headerlink" title="-o复制的数据进行输出/粘贴"></a><code>-o</code>复制的数据进行输出/粘贴</h5><p>使用的并不是系统剪贴板，所以右键复制没有用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xclip -o</span><br></pre></td></tr></table></figure><p>或者鼠标中键进行粘贴</p><h4 id="sel-clip使用系统剪贴板"><a href="#sel-clip使用系统剪贴板" class="headerlink" title="-sel clip使用系统剪贴板"></a><code>-sel clip</code>使用系统剪贴板</h4><p>之前使用的是 X11 primary selection area (clipboard)，这个不能使用右键来粘贴，因为没有使用系统剪切板：使用<code>--selection</code>参数，或者简写<code>-sel</code>指定系统剪贴板</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xclip -sel clip somefile</span><br></pre></td></tr></table></figure><p>粘贴</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xclip -o -sel clip</span><br></pre></td></tr></table></figure><h4 id="图片放入剪贴板"><a href="#图片放入剪贴板" class="headerlink" title="图片放入剪贴板"></a>图片放入剪贴板</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xclip -sel clip -f image/png some.png</span><br></pre></td></tr></table></figure><p>然后在可以粘贴图片的地方右键粘贴图片，这种剪贴板为图片的就没有输出了，输出是二进制的乱码</p><h4 id="l指定可粘贴次数"><a href="#l指定可粘贴次数" class="headerlink" title="-l指定可粘贴次数"></a><code>-l</code>指定可粘贴次数</h4><p>默认为0,即不限次数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xclip -l 4</span><br></pre></td></tr></table></figure><h4 id="r单行输出去掉换行符"><a href="#r单行输出去掉换行符" class="headerlink" title="-r单行输出去掉换行符"></a><code>-r</code>单行输出去掉换行符</h4><p>他的作用应该实在脚本中才能体现吧。暂时不管了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd | xclip -r</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>shell练习-取数据作为参数</title>
      <link href="/2019/08/27/shell%E7%BB%83%E4%B9%A0-%E5%8F%96%E6%95%B0%E6%8D%AE%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0/"/>
      <url>/2019/08/27/shell%E7%BB%83%E4%B9%A0-%E5%8F%96%E6%95%B0%E6%8D%AE%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>shell练习</p></blockquote><h4 id="将网页上复制下来的ss帐号写成命令形式，将数据带入命令中。"><a href="#将网页上复制下来的ss帐号写成命令形式，将数据带入命令中。" class="headerlink" title="将网页上复制下来的ss帐号写成命令形式，将数据带入命令中。"></a>将网页上复制下来的ss帐号写成命令形式，将数据带入命令中。</h4><p>如下是ss.txt这个源文件</p><details>    <summary>源文件<展开折叠></summary>    <pre><code>    账号     端口     密码     加密方式     更新时间     国家103.29.70.102     32206     271ed59da9a79a5b7f1dcc8cd7a0e6b2     aes-256-cfb     22:12:13     JP139.162.6.191     32206     271ed59da9a79a5b7f1dcc8cd7a0e6b2     aes-256-cfb     22:12:13     SG172.104.92.92     8099     eIW0Dnk69454e6nSwuspv9DmS201tQ0D     aes-256-cfb     22:12:15     JP165.22.106.38     12268     ssx.re-59709346     aes-256-cfb     22:12:07     SG54.65.244.39     14522     y0AaQPuaNFBW     aes-256-cfb     22:12:18     JP172.105.113.18     8099     eIW0Dnk69454e6nSwuspv9DmS201tQ0D     aes-256-cfb     22:12:11     SG13.115.199.68     44471     a0WEQjO9wNTy     aes-256-cfb     22:12:19     JP172.104.62.144     8099     eIW0Dnk69454e6nSwuspv9DmS201tQ0D     aes-256-cfb     22:12:09     SG139.162.120.199     48431     qid3bMhMQpbc     aes-256-cfb     22:12:11     JP45.56.89.181     8099     eIW0Dnk69454e6nSwuspv9DmS201tQ0D     aes-256-cfb     22:12:13     US172.105.213.172     44011     iCZHrjR4PImm     aes-256-cfb     22:12:15     JP3.112.46.32     17542     yd0Us2nFg0o5     aes-256-cfb     22:12:12     JP172.104.117.45     24041     tiphUJcfPUkG     aes-256-cfb     22:12:15     JP54.248.40.96     48365     1Xb1uGAM4ffg     aes-256-cfb     22:12:16     JP172.104.47.67     14255     f55.fun-00046768     aes-256-cfb     22:12:06     SG172.105.193.166     8099     eIW0Dnk69454e6nSwuspv9DmS201tQ0D     aes-256-cfb     22:12:13     JP211.75.79.233     16505     QozzuzLs2W32     aes-256-cfb     22:12:11     TW165.22.59.104     16306     isx.yt-47347286     aes-256-cfb     22:12:06     SG139.162.102.56     10867     p89g3kMzd94m     aes-256-cfb     22:12:12     JP176.58.97.137     8099     eIW0Dnk69454e6nSwuspv9DmS201tQ0D     aes-256-cfb     22:12:06     GB5.189.224.159     993     Chup@k@br@     chacha20-ietf     22:12:13     RU172.104.131.24     8099     eIW0Dnk69454e6nSwuspv9DmS201tQ0D     aes-256-cfb     22:12:07     DE172.105.192.135     8099     eIW0Dnk69454e6nSwuspv9DmS201tQ0D     aes-256-cfb     22:02:12     JP138.68.211.85     11224     isx.yt-00202608     aes-256-cfb     22:12:05     US138.68.215.166     11603     ssx.re-80935336     aes-256-cfb     22:12:06     US5.101.49.19     18573     h4z9hVfhkb0W     aes-256-cfb     22:12:14     RU18.179.7.182     27695     moofZtTrfHCu     aes-256-cfb     22:12:19     JP52.198.243.129     20083     QyfsL3tHOiJX     aes-256-cfb     22:12:19     JP46.173.215.146     48888     t.me/ssrquiz     aes-128-ctr     22:12:15     RU23.239.20.120     8097     eIW0Dnk69454e6nSwuspv9DmS201tQ0D     aes-256-cfb     22:12:13     US172.104.94.102     49366     PyzeIgaoZ4Ir     aes-256-cfb     22:12:16     JP172.105.198.126     40549     5iZmgqWK3QlY     aes-256-cfb     22:12:15     JP172.105.234.136     24224     DkRvqDnYlgKZ     aes-256-cfb     22:12:11     JP172.105.114.11     8099     eIW0Dnk69454e6nSwuspv9DmS201tQ0D     aes-256-cfb     22:12:13     SG172.105.71.82     8099     eIW0Dnk69454e6nSwuspv9DmS201tQ0D     aes-256-cfb     22:12:10     DE52.194.229.149     25259     WExlGsrCGidB     aes-256-cfb     22:12:19     JP23.160.192.53     52133     eeiee.co     aes-256-cfb     22:12:11     US45.33.59.129     8097     eIW0Dnk69454e6nSwuspv9DmS201tQ0D     aes-256-cfb     22:12:12     US3.113.8.196     23381     qNHokwOiFO1V     aes-256-cfb     22:12:13     JP138.68.217.183     13007     isx.yt-45887006     aes-256-cfb     22:12:05     US139.162.25.76     12175     f55.fun-96432133     aes-256-cfb     22:12:05     SG172.104.70.233     8099     eIW0Dnk69454e6nSwuspv9DmS201tQ0D     aes-256-cfb     22:12:08     JP172.104.86.60     8099     eIW0Dnk69454e6nSwuspv9DmS201tQ0D     aes-256-cfb     22:12:16     JP172.104.98.136     29876     o4TVlJhZSCQ1     aes-256-cfb     22:12:13     JP172.104.178.58     8099     eIW0Dnk69454e6nSwuspv9DmS201tQ0D     aes-256-cfb     22:12:13     SG139.162.164.200     32206     271ed59da9a79a5b7f1dcc8cd7a0e6b2     aes-256-cfb     22:12:12     DE139.162.25.148     8097     eIW0Dnk69454e6nSwuspv9DmS201tQ0D     aes-256-cfb     22:12:15     SG172.105.217.74     49981     LLrOehWMQ2kC     aes-256-cfb     22:12:15     JP45.33.40.51     39888     d2yk9yMQsiPS     aes-256-cfb     22:12:06     US172.104.74.179     17698     rSrZ95bYtaIU     aes-256-cfb     22:12:16     JP52.199.152.115     30678     WCwcvzRS4UJQ     aes-256-cfb     22:12:15     JP172.105.6.200     32206     271ed59da9a79a5b7f1dcc8cd7a0e6b2     aes-256-cfb     22:12:10     CA138.68.217.45     14590     isx.yt-07667754     aes-256-cfb     22:12:05     US45.77.199.186     2133     bbaaz     aes-256-cfb     22:12:12     US172.105.113.22     8099     eIW0Dnk69454e6nSwuspv9DmS201tQ0D     aes-256-cfb     22:12:13     SG172.105.194.153     16013     hSpcjEqvUDXW     aes-256-cfb     22:12:13     JP45.77.234.231     8099     eIW0Dnk69454e6nSwuspv9DmS201tQ0D     aes-256-cfb     22:12:13     AU167.71.125.213     18785     ssx.re-86329544     aes-256-cfb     22:12:06     US172.104.152.149     8099     eIW0Dnk69454e6nSwuspv9DmS201tQ0D     aes-256-cfb     22:12:07     DE172.105.47.186     32206     271ed59da9a79a5b7f1dcc8cd7a0e6b2     aes-256-cfb     22:12:14     IN103.29.70.219     32206     271ed59da9a79a5b7f1dcc8cd7a0e6b2     aes-256-cfb     22:12:15     JP139.162.118.71     41680     vET9vDlWVDhq     aes-256-cfb     22:12:11     JP172.105.201.165     44295     ALXIkliM9l33     aes-256-cfb     22:12:13     JP45.79.91.64     8097     eIW0Dnk69454e6nSwuspv9DmS201tQ0D     aes-256-cfb     21:52:13     US97.107.142.183     19648     f55.fun-17292566     aes-256-cfb     22:12:04     US172.104.149.56     8099     eIW0Dnk69454e6nSwuspv9DmS201tQ0D     aes-256-cfb     22:12:14     DE172.105.239.252     39912     3wwJMpNXLUF8     aes-256-cfb     22:12:16     JP172.105.217.183     10361     oRdqMLDzcrDV     aes-256-cfb     22:12:14     JP172.105.205.148     29049     iPcTTGSBfDto     aes-256-cfb     22:12:11     JP185.224.249.93     9028     9eeJ2fwnZA5Fxgz8     aes-256-cfb     22:12:12     RU172.104.77.248     8099     eIW0Dnk69454e6nSwuspv9DmS201tQ0D     aes-256-cfb     22:12:08     JP139.162.112.34     46324     a93BIc3gZrBi     aes-256-cfb     22:12:06     JP172.104.117.113     35823     4eBdQR4UIdNj     aes-256-cfb     22:12:07     JP165.22.255.98     15693     isx.yt-51150396     aes-256-cfb     22:12:06     SG139.162.15.45     8099     eIW0Dnk69454e6nSwuspv9DmS201tQ0D     aes-256-cfb     22:12:13     SG172.104.85.200     35163     ckucY7iIFn6e     aes-256-cfb     22:12:15     JP23.92.27.200     8097     eIW0Dnk69454e6nSwuspv9DmS201tQ0D     aes-256-cfb     22:12:16     US172.105.115.99     13628     f55.fun-10235911     aes-256-cfb     22:12:06     SG167.71.201.26     12431     isx.yt-09693680     aes-256-cfb     22:12:06     SG</code></pre></details><h4 id="改写语句"><a href="#改写语句" class="headerlink" title="改写语句"></a>改写语句</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat ss.txt | while read line                                        </span><br><span class="line">do</span><br><span class="line">a=`echo $line|awk '&#123;print $1&#125;'`</span><br><span class="line">b=`echo $line|awk '&#123;print $2&#125;'`</span><br><span class="line">c=`echo $line|awk '&#123;print $3&#125;'`</span><br><span class="line">echo "sslocal -s $a -p $b -k $c" &gt;&gt; account.txt</span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#通过管道以及循环将数据一行一行的给变量line</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#然后通过awk取出每个需要的值，存入变量</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#将变量回插入echo的输出语句中，追加写入文件</span></span></span><br></pre></td></tr></table></figure><p>得到命令格式的输出</p><details>    <summary>命令格式输出<展开折叠></summary>        <pre><code>sslocal -s 103.29.70.102 -p 32206 -k 271ed59da9a79a5b7f1dcc8cd7a0e6b2sslocal -s 139.162.6.191 -p 32206 -k 271ed59da9a79a5b7f1dcc8cd7a0e6b2sslocal -s 172.104.92.92 -p 8099 -k eIW0Dnk69454e6nSwuspv9DmS201tQ0Dsslocal -s 165.22.106.38 -p 12268 -k ssx.re-59709346sslocal -s 54.65.244.39 -p 14522 -k y0AaQPuaNFBWsslocal -s 172.105.113.18 -p 8099 -k eIW0Dnk69454e6nSwuspv9DmS201tQ0Dsslocal -s 13.115.199.68 -p 44471 -k a0WEQjO9wNTysslocal -s 172.104.62.144 -p 8099 -k eIW0Dnk69454e6nSwuspv9DmS201tQ0Dsslocal -s 139.162.120.199 -p 48431 -k qid3bMhMQpbcsslocal -s 45.56.89.181 -p 8099 -k eIW0Dnk69454e6nSwuspv9DmS201tQ0Dsslocal -s 172.105.213.172 -p 44011 -k iCZHrjR4PImmsslocal -s 3.112.46.32 -p 17542 -k yd0Us2nFg0o5sslocal -s 172.104.117.45 -p 24041 -k tiphUJcfPUkGsslocal -s 54.248.40.96 -p 48365 -k 1Xb1uGAM4ffgsslocal -s 172.104.47.67 -p 14255 -k f55.fun-00046768sslocal -s 172.105.193.166 -p 8099 -k eIW0Dnk69454e6nSwuspv9DmS201tQ0Dsslocal -s 211.75.79.233 -p 16505 -k QozzuzLs2W32sslocal -s 165.22.59.104 -p 16306 -k isx.yt-47347286sslocal -s 139.162.102.56 -p 10867 -k p89g3kMzd94msslocal -s 176.58.97.137 -p 8099 -k eIW0Dnk69454e6nSwuspv9DmS201tQ0Dsslocal -s 5.189.224.159 -p 993 -k Chup@k@br@sslocal -s 172.104.131.24 -p 8099 -k eIW0Dnk69454e6nSwuspv9DmS201tQ0Dsslocal -s 172.105.192.135 -p 8099 -k eIW0Dnk69454e6nSwuspv9DmS201tQ0Dsslocal -s 138.68.211.85 -p 11224 -k isx.yt-00202608sslocal -s 138.68.215.166 -p 11603 -k ssx.re-80935336sslocal -s 5.101.49.19 -p 18573 -k h4z9hVfhkb0Wsslocal -s 18.179.7.182 -p 27695 -k moofZtTrfHCusslocal -s 52.198.243.129 -p 20083 -k QyfsL3tHOiJXsslocal -s 46.173.215.146 -p 48888 -k t.me/ssrquizsslocal -s 23.239.20.120 -p 8097 -k eIW0Dnk69454e6nSwuspv9DmS201tQ0Dsslocal -s 172.104.94.102 -p 49366 -k PyzeIgaoZ4Irsslocal -s 172.105.198.126 -p 40549 -k 5iZmgqWK3QlYsslocal -s 172.105.234.136 -p 24224 -k DkRvqDnYlgKZsslocal -s 172.105.114.11 -p 8099 -k eIW0Dnk69454e6nSwuspv9DmS201tQ0Dsslocal -s 172.105.71.82 -p 8099 -k eIW0Dnk69454e6nSwuspv9DmS201tQ0Dsslocal -s 52.194.229.149 -p 25259 -k WExlGsrCGidBsslocal -s 23.160.192.53 -p 52133 -k eeiee.cosslocal -s 45.33.59.129 -p 8097 -k eIW0Dnk69454e6nSwuspv9DmS201tQ0Dsslocal -s 3.113.8.196 -p 23381 -k qNHokwOiFO1Vsslocal -s 138.68.217.183 -p 13007 -k isx.yt-45887006sslocal -s 139.162.25.76 -p 12175 -k f55.fun-96432133sslocal -s 172.104.70.233 -p 8099 -k eIW0Dnk69454e6nSwuspv9DmS201tQ0Dsslocal -s 172.104.86.60 -p 8099 -k eIW0Dnk69454e6nSwuspv9DmS201tQ0Dsslocal -s 172.104.98.136 -p 29876 -k o4TVlJhZSCQ1sslocal -s 172.104.178.58 -p 8099 -k eIW0Dnk69454e6nSwuspv9DmS201tQ0Dsslocal -s 139.162.164.200 -p 32206 -k 271ed59da9a79a5b7f1dcc8cd7a0e6b2sslocal -s 139.162.25.148 -p 8097 -k eIW0Dnk69454e6nSwuspv9DmS201tQ0Dsslocal -s 172.105.217.74 -p 49981 -k LLrOehWMQ2kCsslocal -s 45.33.40.51 -p 39888 -k d2yk9yMQsiPSsslocal -s 172.104.74.179 -p 17698 -k rSrZ95bYtaIUsslocal -s 52.199.152.115 -p 30678 -k WCwcvzRS4UJQsslocal -s 172.105.6.200 -p 32206 -k 271ed59da9a79a5b7f1dcc8cd7a0e6b2sslocal -s 138.68.217.45 -p 14590 -k isx.yt-07667754sslocal -s 45.77.199.186 -p 2133 -k bbaazsslocal -s 172.105.113.22 -p 8099 -k eIW0Dnk69454e6nSwuspv9DmS201tQ0Dsslocal -s 172.105.194.153 -p 16013 -k hSpcjEqvUDXWsslocal -s 45.77.234.231 -p 8099 -k eIW0Dnk69454e6nSwuspv9DmS201tQ0Dsslocal -s 167.71.125.213 -p 18785 -k ssx.re-86329544sslocal -s 172.104.152.149 -p 8099 -k eIW0Dnk69454e6nSwuspv9DmS201tQ0Dsslocal -s 172.105.47.186 -p 32206 -k 271ed59da9a79a5b7f1dcc8cd7a0e6b2sslocal -s 103.29.70.219 -p 32206 -k 271ed59da9a79a5b7f1dcc8cd7a0e6b2sslocal -s 139.162.118.71 -p 41680 -k vET9vDlWVDhqsslocal -s 172.105.201.165 -p 44295 -k ALXIkliM9l33sslocal -s 45.79.91.64 -p 8097 -k eIW0Dnk69454e6nSwuspv9DmS201tQ0Dsslocal -s 97.107.142.183 -p 19648 -k f55.fun-17292566sslocal -s 172.104.149.56 -p 8099 -k eIW0Dnk69454e6nSwuspv9DmS201tQ0Dsslocal -s 172.105.239.252 -p 39912 -k 3wwJMpNXLUF8sslocal -s 172.105.217.183 -p 10361 -k oRdqMLDzcrDVsslocal -s 172.105.205.148 -p 29049 -k iPcTTGSBfDtosslocal -s 185.224.249.93 -p 9028 -k 9eeJ2fwnZA5Fxgz8sslocal -s 172.104.77.248 -p 8099 -k eIW0Dnk69454e6nSwuspv9DmS201tQ0Dsslocal -s 139.162.112.34 -p 46324 -k a93BIc3gZrBisslocal -s 172.104.117.113 -p 35823 -k 4eBdQR4UIdNjsslocal -s 165.22.255.98 -p 15693 -k isx.yt-51150396sslocal -s 139.162.15.45 -p 8099 -k eIW0Dnk69454e6nSwuspv9DmS201tQ0Dsslocal -s 172.104.85.200 -p 35163 -k ckucY7iIFn6esslocal -s 23.92.27.200 -p 8097 -k eIW0Dnk69454e6nSwuspv9DmS201tQ0Dsslocal -s 172.105.115.99 -p 13628 -k f55.fun-10235911sslocal -s 167.71.201.26 -p 12431 -k isx.yt-09693680        </code></pre></details>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux使用ss代理</title>
      <link href="/2019/08/16/linux%E4%BD%BF%E7%94%A8ss%E4%BB%A3%E7%90%86/"/>
      <url>/2019/08/16/linux%E4%BD%BF%E7%94%A8ss%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>好久之前就想有什么方法实现linux上的shell代理，因为有很多时候用shell下载东西的时候奇慢。今天我终于找到了，太不容易了吧</p></blockquote><p>原理：使用shadowsocks代理，代理需要提供服务器，而我们可以找到免费的vpn用，所以这个问题就解决了。第二个问题是shadowsocks使用的是socks5协议，而大多数时候我们使用的是http协议，所以需要proxychains来转换。</p><h3 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S shadowsocks proxychains-ng</span><br></pre></td></tr></table></figure><h3 id="配置shadowsocks"><a href="#配置shadowsocks" class="headerlink" title="配置shadowsocks"></a>配置shadowsocks</h3><p>shadowsocks的配置文件在<code>/etc/shadowsocks/</code>下,复制一个作为配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp example.json config.json</span><br></pre></td></tr></table></figure><p>然后在这个里面填上免费的vpn服务器信息。地址在：<a href="https://www.youneed.win/free-ss" target="_blank" rel="noopener">不需要翻墙</a> <a href="https://free-ss.site/" target="_blank" rel="noopener">需要翻墙</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "server":"23.160.193.75",</span><br><span class="line">    "server_port":2133,</span><br><span class="line">    "local_address": "127.0.0.1",</span><br><span class="line">    "local_port":1080,</span><br><span class="line">    "password":"www.eieee.cn",</span><br><span class="line">    "timeout":300,</span><br><span class="line">    "method":"aes-256-cfb",</span><br><span class="line">    "fast_open": false,</span><br><span class="line">    "workers": 1,</span><br><span class="line">    "prefer_ipv6": false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>用shadowsocks客户端启动：指定到我们的配置文件，并放到后台运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup sslocal -c /etc/shadowsocks/config.json &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>还可以不指定配置文件，直接在命令行里面指定</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sslocal -s server_address -p server_port -l local_port -k password -m encryption_method</span><br></pre></td></tr></table></figure><h3 id="使用proxychains"><a href="#使用proxychains" class="headerlink" title="使用proxychains"></a>使用proxychains</h3><p>proxychains用来实现协议的转换，并指定需要代理的软件，或者设置为全局代理</p><p>编辑proxychains的配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/proxychains.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">在最后面添加转换的地址</span></span><br><span class="line">socks5  127.0.0.1 1080</span><br></pre></td></tr></table></figure><p>然后就是使用代理了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">例如代理firefox浏览器</span></span><br><span class="line">proxychains firefox &amp;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">也可以代理shell</span></span><br><span class="line">proxychains zsh</span><br></pre></td></tr></table></figure><h3 id="既然每次都要打开网页去找免费的代理，那么何不写个自动化脚本呢？"><a href="#既然每次都要打开网页去找免费的代理，那么何不写个自动化脚本呢？" class="headerlink" title="既然每次都要打开网页去找免费的代理，那么何不写个自动化脚本呢？"></a>既然每次都要打开网页去找免费的代理，那么何不写个自动化脚本呢？</h3><p>建立一个软链接，用户自己的shell放置的位置为<code>/usr/local/bin</code>下面：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /home/jc/Document/script/shell/shadowsocks.sh /usr/local/bin/sslink</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/zsh</span></span><br><span class="line"></span><br><span class="line">clear</span><br><span class="line">echo -e -n "\033[32m do you wanna to scartch another new vpn file ? yes or no : \033[0m"</span><br><span class="line">read wanna</span><br><span class="line"></span><br><span class="line">realdir=`whereis sslink | awk -F ":" '&#123;print $2&#125;' | xargs ls -l | awk -F "&gt;" '&#123;print $2&#125;' | xargs dirname`</span><br><span class="line">cd $realdir</span><br><span class="line">if [[ $wanna == "yes" ]];then</span><br><span class="line">   #curl https://www.youneed.win/free-ss &gt; tmp.txt | sed -n '/^&lt;td/p' |  awk -F"&gt;" '&#123;print $2&#125;' | awk -F "&lt;" '&#123;print $1&#125;'  | sed -n '1,/&amp;nbsp/p' | sed 's/&amp;nbsp;/ /g' | xargs -n6 &gt; account.txt</span><br><span class="line">   curl  https://www.flywind.ml/free-ss &gt; tmp.txt | sed -n '/^&lt;td/p' |  awk -F"&gt;" '&#123;print $2&#125;' | awk -F "&lt;" '&#123;print $1&#125;'  | sed -n '1,/&amp;nbsp/p' | sed 's/&amp;nbsp;/ /g' | xargs -n6 &gt; account.txt</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">i=1</span><br><span class="line">j=`cat  account.txt | wc -l`</span><br><span class="line">while [[ $j -gt 0 ]]</span><br><span class="line">do</span><br><span class="line">s=`sed -n ''"$i"'p' account.txt | awk '&#123;print $1&#125;'`</span><br><span class="line">p=`sed -n ''"$i"'p' account.txt | awk '&#123;print $2&#125;'`</span><br><span class="line">k=`sed -n ''"$i"'p' account.txt | awk '&#123;print $3&#125;'`</span><br><span class="line">m=`sed -n ''"$i"'p' account.txt | awk '&#123;print $4&#125;'`</span><br><span class="line">c=`sed -n ''"$i"'p' account.txt | awk '&#123;print $6&#125;'`</span><br><span class="line">ss="sslocal -s $s -p $p -k $k -m $m -l 1080 &amp; #$c"</span><br><span class="line"><span class="meta">sum[$</span><span class="bash">i]=<span class="variable">$&#123;ss&#125;</span></span></span><br><span class="line">((i++))</span><br><span class="line">((j--))</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">select m in $&#123;sum[*]&#125;</span><br><span class="line">do</span><br><span class="line">for (( k=1;k&lt;$&#123;#sum[@]&#125;;k++ ))</span><br><span class="line">do</span><br><span class="line">case $m in </span><br><span class="line">$&#123;sum[k]&#125;)</span><br><span class="line">id=`ps -ef | grep sslocal | grep -v grep | awk '&#123;print $2&#125;'`</span><br><span class="line">if [[ $id -gt 0 ]];then</span><br><span class="line">   killall sslocal </span><br><span class="line">echo -e "\033[32m the sslocal process has been killed successfully \033[0m"</span><br><span class="line">fi</span><br><span class="line">echo -e "\033[32m connecting ....................................................................................... \033[0m"</span><br><span class="line">   eval $m 2&gt;/dev/null 1&gt;&amp;2 &amp;</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">done</span><br><span class="line">done</span><br><span class="line">rm  tmp.txt</span><br></pre></td></tr></table></figure><p>这样每次都只需要运行<code>sslink</code>这个命令就ok了</p>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim-进阶</title>
      <link href="/2019/08/16/vim-%E8%BF%9B%E9%98%B6/"/>
      <url>/2019/08/16/vim-%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="有用的命令："><a href="#有用的命令：" class="headerlink" title="有用的命令："></a>有用的命令：</h3><hr><h4 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h4><p>撤销：<code>u</code></p><p>反撤销：<code>ctrl+r</code></p><hr><h4 id="命令计数"><a href="#命令计数" class="headerlink" title="命令计数"></a>命令计数</h4><p>命令计数（重复执行命令）：<code>num+motion</code></p><p>例如：重复添加五个2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5a2 ESC</span><br></pre></td></tr></table></figure><hr><h4 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h4><p>退出：<code>ZZ</code></p><p>放弃所有操作退出：<code>:q!</code></p><p>放弃所有操作并恢复到开始编辑状态：<code>:e!</code></p><hr><h4 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h4><p>跳转：<code>e</code>下个词尾。<code>ge</code>上个词尾</p><p>将当前行置于开头：<code>zt</code></p><p>将当前行置于正中间：<code>zz</code></p><p>将当前行置于结尾：<code>zb</code></p><p><strong>``</strong>在最近的两次跳转中切换</p><p><code>ctrl+o</code>可多次回跳older</p><p><code>ctrl+i</code>可多次前跳</p><p><code>:jumps</code>命令会列出关于你曾经跳转过的位置的列表。你最后一个跳<br>转的位置被特别以一个<code>&gt;</code>号标记</p><h5 id="自定义标记"><a href="#自定义标记" class="headerlink" title="自定义标记"></a>自定义标记</h5><p><code>m字母</code>标记当前为字母mark</p><p><strong>`字母</strong>跳转标记处</p><hr><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><p><code>/</code>向下搜索  <code>num+n</code>并重复搜索</p><p><code>?</code>向上搜索  <code>num+N</code>并重复搜索</p><p><code>*</code>查找光标下下一次出现的单词 <code>num+*</code>查找光标下num次出现的单词</p><p><code>#</code>查找光标下前一次出现的单词 <code>num+#</code>查找光标前num次出现的单词</p><p>精确查找：<code>\&lt;词\&gt;</code>只会匹配完全包含在括号中的词 <code>\&lt;</code>匹配开头  <code>\&gt;</code>匹配结束</p><hr><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p><code>d</code>与<code>c</code>一样都是删除，不过<code>c</code>之后进入insert模式</p><p><code>x</code>代表dl(删除当前光标下的字符)<br><code>X</code>代表dh(删除当前光标左边的字符)<br><code>D</code> 代表d$(删除到行尾的内容)<br><code>C</code> 代表c$(修改到行尾的内容)<br><code>s</code> 代表cl(修改一个字符)<br><code>S</code> 代表cc(修改一整行)</p><hr><h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><p><code>num+r</code>重复替换num次</p><hr><h4 id="重复执行"><a href="#重复执行" class="headerlink" title="重复执行"></a>重复执行</h4><p><code>.</code>点命令可重复上次命令</p><hr><h4 id="put"><a href="#put" class="headerlink" title="put"></a>put</h4><p>当使用了删除后，内容被保存了起来，而<code>p</code>可取出来，<code>num+p</code>可指定取出的次数</p><hr><h4 id="交换两个字符"><a href="#交换两个字符" class="headerlink" title="交换两个字符"></a>交换两个字符</h4><p>在需要交换的字符上按<code>xp</code>即先删除字符到寄存器中再put</p><hr><h4 id="aw和is"><a href="#aw和is" class="headerlink" title="aw和is"></a>aw和is</h4><p><code>aw</code>：a word</p><p><code>is</code>：inner sentence</p><p>例如：</p><p>删除一个单词：<code>daw</code></p><p>删除一行：<code>cis</code></p><hr><h4 id="设置底部信息显示区高度"><a href="#设置底部信息显示区高度" class="headerlink" title="设置底部信息显示区高度"></a>设置底部信息显示区高度</h4><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:set cmdheight=3</span><br></pre></td></tr></table></figure><hr><h4 id="设置背景颜色"><a href="#设置背景颜色" class="headerlink" title="设置背景颜色"></a>设置背景颜色</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:set background=dark</span><br><span class="line">:set background=light</span><br></pre></td></tr></table></figure><p>并重设高亮显示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">syntax reset</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">term 黑白终端的显示属性</span><br><span class="line">cterm 彩色终端的显示属性</span><br><span class="line">ctermfg 彩色终端的前景色</span><br><span class="line">ctermbg 彩色终端的背景色</span><br><span class="line">gui GUI的显示属性</span><br><span class="line">guifg GUI的前景色</span><br><span class="line">guibg GUI的背景色</span><br></pre></td></tr></table></figure><p>例如：要让注释变为绿色</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:highlight Comment ctermfg=green guifg=green</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>i3安装配置</title>
      <link href="/2019/07/18/i3%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/07/18/i3%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以前是折腾xmond的，最近用gnome用的有点腻，很早之前就听过i3还不错。所以这次就安装了试试，结果发现确实是很好。完全没有想回到gnome的欲望，虽然gnome确实很好。因为i3已经能够满足日常使用的需要了，默认tile模式，可以切换float模式，在float模式中可以切换border，有border后，可以使用鼠标移动窗口、改变大小</p></blockquote><p><img src="/home/narcissus/.config/Typora/typora-user-images/1563457581543.png" alt="1563457581543"></p><h3 id="默认快键键"><a href="#默认快键键" class="headerlink" title="默认快键键"></a>默认快键键</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">win+enter    #打开terminal</span><br><span class="line">win+k/;         #左右切换窗口</span><br><span class="line">win+k/l         #上下切换窗口</span><br><span class="line">win+v/h        #切换水平、垂直打开新窗口</span><br><span class="line">win+shift+q  #关闭窗口</span><br><span class="line">win+shift+r   #重新加载配置文件</span><br><span class="line">win+shift+spacebar  #切换tile、float模式</span><br><span class="line">win+shift+j/;    #左右调整窗口大小</span><br><span class="line">win+shift+k/l    #上下调整窗口大小</span><br></pre></td></tr></table></figure><h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装i3</span></span><br><span class="line">pacman -S i3-wm</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">状态栏：没有安装与i3搭配使用的i3status，而是安装了polybar</span></span><br><span class="line">pacman -S polybar</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装polybar图标需要的字体库</span></span><br><span class="line">pacman -S ttf-font-awesome</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">软件搜索：没有安装与它搭配的dmenu，而是安装了rofi</span></span><br><span class="line">pacman -S rofi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装图标字体库，安装之后polybar才有图标</span></span><br><span class="line">pacman -S siji-git</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">（可选）字体库</span></span><br><span class="line">sudo pacman -S gucharmap</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装锁屏软件</span></span><br><span class="line">pacman -S betterlockscreen</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装设置壁纸所需软件</span></span><br><span class="line">pacman -S feh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">透明效果需要的软件</span></span><br><span class="line">pacman -S compton</span><br></pre></td></tr></table></figure><p><a href="https://fontawesome.com/cheatsheet?from=io" target="_blank" rel="noopener">图标字体库</a></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>在<code>.xinitrc</code> 中添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec i3</span><br></pre></td></tr></table></figure><p>然后可以使用<code>startx</code>来启动i3</p><h3 id="配置文件位置"><a href="#配置文件位置" class="headerlink" title="配置文件位置"></a>配置文件位置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> i3</span></span><br><span class="line">~/.config/i3/config</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> polybar</span></span><br><span class="line">~/.config/polybar/config</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="设置自己喜欢的terminal"><a href="#设置自己喜欢的terminal" class="headerlink" title="设置自己喜欢的terminal"></a>设置自己喜欢的terminal</h4><p>在i3的配置文件中修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bindsym $mod+Return exec mate-terminal</span><br></pre></td></tr></table></figure><h4 id="设置背景图片"><a href="#设置背景图片" class="headerlink" title="设置背景图片"></a>设置背景图片</h4><p>在i3的配置文件中添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec_always --no-startup-id feh --bg-scale "/home/narcissus/Pictures/Wallpapers/beautiful.jpg"</span><br></pre></td></tr></table></figure><h4 id="添加polybar"><a href="#添加polybar" class="headerlink" title="添加polybar"></a>添加polybar</h4><p>在<code>~/.config/polybar/</code>下新建<code>launch.sh</code>的启动文件，并添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Terminate already running bar instances</span></span><br><span class="line">killall -q polybar</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Wait until the processes have been shut down</span></span><br><span class="line">while pgrep -u $UID -x polybar &gt;/dev/null; do sleep 1; done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Launch bar1 and bar2</span></span><br><span class="line"><span class="meta">#</span><span class="bash">polybar bar1 &amp;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">polybar bar2 &amp;</span></span><br><span class="line">polybar mybar &amp;</span><br><span class="line"></span><br><span class="line">echo "Bars launched..."</span><br></pre></td></tr></table></figure><p>在i3的配置文件中添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec_always --no-startup-id /home/narcissus/.config/polybar/launch.sh</span><br></pre></td></tr></table></figure><h4 id="配置fcitx输入法"><a href="#配置fcitx输入法" class="headerlink" title="配置fcitx输入法"></a>配置fcitx输入法</h4><p>在i3的配置文件中添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec_always --no-startup-id fcitx</span><br></pre></td></tr></table></figure><h4 id="设置透明效果"><a href="#设置透明效果" class="headerlink" title="设置透明效果"></a>设置透明效果</h4><p>在i3的配置文件中添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec compton -b</span><br></pre></td></tr></table></figure><h4 id="设置rofi快捷键"><a href="#设置rofi快捷键" class="headerlink" title="设置rofi快捷键"></a>设置rofi快捷键</h4><p>在i3的配置文件中添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bindsym $mod+d exec rofi -show drun -theme mymonokai</span><br></pre></td></tr></table></figure><h4 id="设置锁屏"><a href="#设置锁屏" class="headerlink" title="设置锁屏"></a>设置锁屏</h4><p>在i3的配置文件中添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">set</span> desktop background with custom effect</span></span><br><span class="line">exec --no-startup-id betterlockscreen -w dim </span><br><span class="line"><span class="meta">#</span><span class="bash"> Alternative (<span class="built_in">set</span> last used background)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">exec</span> --no-startup-id <span class="built_in">source</span> ~/.fehbg</span></span><br><span class="line">233 bindsym $mod+shift+x exec betterlockscreen -u ~/Pictures/backgrounds/macaw-poly.jpg -l -b 1 dim</span><br></pre></td></tr></table></figure><h4 id="截屏快捷键"><a href="#截屏快捷键" class="headerlink" title="截屏快捷键"></a>截屏快捷键</h4><p>在i3的配置文件中添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bindsym $mod+p exec flameshot gui</span><br></pre></td></tr></table></figure><h4 id="设置border颜色"><a href="#设置border颜色" class="headerlink" title="设置border颜色"></a>设置border颜色</h4><p>在i3的配置文件中添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> class         border  backgr.text    indicator child_border</span></span><br><span class="line">client.focused #555555 #555555 #ffffff #2e9ef4</span><br></pre></td></tr></table></figure><h4 id="其他设置"><a href="#其他设置" class="headerlink" title="其他设置"></a>其他设置</h4><p>直接贴配置文件</p><p>i3/config：将文件重命名为<code>config</code></p><p>链接: <a href="https://pan.baidu.com/s/1uiryqNvPTLfL06K0fHIm4g" target="_blank" rel="noopener">https://pan.baidu.com/s/1uiryqNvPTLfL06K0fHIm4g</a> 提取码: pys3 </p><p>polybar/config：将文件重命名为`config</p><p>链接: <a href="https://pan.baidu.com/s/1cbGubkkyJWJfjX-FIi5t9A" target="_blank" rel="noopener">https://pan.baidu.com/s/1cbGubkkyJWJfjX-FIi5t9A</a> 提取码: q2ph </p><h4 id="技巧-配置的隐藏窗口功能"><a href="#技巧-配置的隐藏窗口功能" class="headerlink" title="技巧-配置的隐藏窗口功能"></a>技巧-配置的隐藏窗口功能</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">win+o+h#隐藏窗口</span><br><span class="line">win+o+s#显示窗口</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vim_移动</title>
      <link href="/2019/07/13/vim-%E7%A7%BB%E5%8A%A8/"/>
      <url>/2019/07/13/vim-%E7%A7%BB%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>所有快捷键前都可以加数字实现倍数跳转</p></blockquote><h4 id="查看帮助"><a href="#查看帮助" class="headerlink" title="查看帮助"></a>查看帮助</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:help 需要查询的词:help j#例如查询j的用法</span><br></pre></td></tr></table></figure><h4 id="上下左右"><a href="#上下左右" class="headerlink" title="上下左右"></a>上下左右</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">h3h</span><br><span class="line">j3j</span><br><span class="line">k3k</span><br><span class="line">l3l</span><br></pre></td></tr></table></figure><h4 id="单词跳转"><a href="#单词跳转" class="headerlink" title="单词跳转"></a>单词跳转</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">w3w#单词向前跳转，词首</span><br><span class="line">b3b#单词向后跳转</span><br><span class="line">e3e#单词向前跳转，词尾</span><br></pre></td></tr></table></figure><h4 id="定位字母"><a href="#定位字母" class="headerlink" title="定位字母"></a>定位字母</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f字母fa#这应该是一行中跳转最快的方式了，直接在一行中寻找下一个a。与分号搭配使用</span><br><span class="line">; #搭配；实现重复上一个动作</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F字母Fa#反方向查找</span><br></pre></td></tr></table></figure><h4 id="以空格为单位跳转"><a href="#以空格为单位跳转" class="headerlink" title="以空格为单位跳转"></a>以空格为单位跳转</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">W</span><br><span class="line">B</span><br><span class="line">E</span><br></pre></td></tr></table></figure><h4 id="以段落为单位跳转"><a href="#以段落为单位跳转" class="headerlink" title="以段落为单位跳转"></a>以段落为单位跳转</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(#下个段落</span><br><span class="line">)#上个段落</span><br></pre></td></tr></table></figure><h4 id="在成对括号间移动"><a href="#在成对括号间移动" class="headerlink" title="在成对括号间移动"></a>在成对括号间移动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"><span class="comment">#括号间切换</span></span></span><br></pre></td></tr></table></figure><h4 id="指定跳转到行数"><a href="#指定跳转到行数" class="headerlink" title="指定跳转到行数"></a>指定跳转到行数</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数字G12G#即跳转到第十二行</span><br></pre></td></tr></table></figure><h4 id="跳转当前相同字母"><a href="#跳转当前相同字母" class="headerlink" title="跳转当前相同字母"></a>跳转当前相同字母</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*#读取光标处字符串，并移动到再次出现的地方</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#方向相反的地方</span></span></span><br></pre></td></tr></table></figure><h4 id="屏幕移动"><a href="#屏幕移动" class="headerlink" title="屏幕移动"></a>屏幕移动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">H#屏首</span><br><span class="line">M#屏中</span><br><span class="line">L#屏末</span><br></pre></td></tr></table></figure><h4 id="翻页"><a href="#翻页" class="headerlink" title="翻页"></a>翻页</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctrl+f#下移一屏</span><br><span class="line">ctrl+b#上移一屏</span><br></pre></td></tr></table></figure><h4 id="文件首尾"><a href="#文件首尾" class="headerlink" title="文件首尾"></a>文件首尾</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gg#文件开头</span><br><span class="line">G#文件尾</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NFS安装</title>
      <link href="/2019/07/12/NFS%E5%AE%89%E8%A3%85/"/>
      <url>/2019/07/12/NFS%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<blockquote><p>首先说一下，现在已经安装好了，没想到这么简单，我已流下了激动的泪水。必须来一首歌高兴高兴： v神的<a href="http://music.163.com/#/m/song?id=410801523" target="_blank" rel="noopener">Trippy Love</a></p></blockquote><p><code>nfs</code> ：作用是通过网络挂载远程分区到本地使用。以前只知道linux可以随便挂载磁盘，觉得这已经很厉害了，没想到还能远程通过网络挂载。这也算是工作带来的收获吧，因为我就发现工作挂载的那200T磁盘有点奇怪。哈哈</p><p>操作环境：一台raspberry pi，一台我的archlinux系统（PS：由于没有网线，也没有路由器的密码，给树莓派配置ip花了老半天，包括使用nmap去找树莓派的ip）</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><h5 id="树莓派服务端："><a href="#树莓派服务端：" class="headerlink" title="树莓派服务端："></a>树莓派服务端：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nfs-kernel-server#安装nfs</span><br></pre></td></tr></table></figure><p>安装nfs时就已经安装了<code>rpsbind</code>。rpcbind的作用是使用rpc协议来统一管理nfs端口的服务，并且对外的端口统一为111。</p><p>原理：首先当NFS启动后，就会随机的使用一些端口，然后NFS就会向RPC去注册这些端口，RPC就会记录下这些端口，并且RPC会开启111端口，等待客户端RPC的请求，如果客户端有请求，那么服务器端的RPC就会将之前记录的NFS端口信息告知客户端。如此客户端就会获取NFS服务器端的端口信息，就会以实际端口进行数据的传输了。</p><p><font color=red>所以rpcbind服务要在nfs服务之前启动</font></p><h5 id="archlinx客户端"><a href="#archlinx客户端" class="headerlink" title="archlinx客户端"></a>archlinx客户端</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S nfs-utils</span><br></pre></td></tr></table></figure><p>注意到rpcbind已经自动安装且自动启动，否则需要手动安装</p><hr><h4 id="配置共享分区"><a href="#配置共享分区" class="headerlink" title="配置共享分区"></a>配置共享分区</h4><p>服务端需要配置将要共享的分区/目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/exports</span><br></pre></td></tr></table></figure><p>添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/192.168.0.108(rw,sync,no_subtree_check)</span><br></pre></td></tr></table></figure><p>格式为：<code>共享的目录    允许访问的客户端ip(共享目录的权限)</code>    ip与权限之间无空格</p><hr><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><h5 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h5><p>先启动 <code>rpsbind</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start rpcbind</span><br></pre></td></tr></table></figure><p>再启动 <code>nfs</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nfs-server</span><br></pre></td></tr></table></figure><p>可以查看nfs向rpc注册的端口信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpcinfo -p localhost</span><br></pre></td></tr></table></figure><p>查看nfs启动进程，并分析其作用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef |egrep "rpc|nfs"</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root        40     2  0 14:15 ?        00:00:00 [rpciod]</span><br><span class="line">root        45     2  0 14:15 ?        00:00:00 [nfsiod]</span><br><span class="line">root       964     1  0 14:26 ?        00:00:00 /sbin/rpcbind -f -w</span><br><span class="line">root      1172     1  0 14:26 ?        00:00:00 /usr/sbin/rpc.idmapd</span><br><span class="line">root      1173     1  0 14:26 ?        00:00:00 /usr/sbin/rpc.mountd --manage-gids</span><br><span class="line">root      1180     2  0 14:26 ?        00:00:00 [nfsd]</span><br><span class="line">root      1181     2  0 14:26 ?        00:00:00 [nfsd]</span><br><span class="line">root      1182     2  0 14:26 ?        00:00:00 [nfsd]</span><br><span class="line">root      1183     2  0 14:26 ?        00:00:00 [nfsd]</span><br><span class="line">root      1184     2  0 14:26 ?        00:00:00 [nfsd]</span><br><span class="line">root      1185     2  0 14:26 ?        00:00:00 [nfsd]</span><br><span class="line">root      1186     2  0 14:26 ?        00:00:00 [nfsd]</span><br><span class="line">root      1187     2  0 14:26 ?        00:00:00 [nfsd]</span><br><span class="line">pi        1731   678  0 15:39 pts/0    00:00:00 grep -E --color=auto rpc|nfs</span><br></pre></td></tr></table></figure><p><code>nfsd</code> ：最主要的NFS服务提供程序，这个daemon主要的功能就是管理客户端是否能够使用服务器文件系统挂载信息，其中还包含判断这个登录用户的ID</p><p><code>rpc.mountd</code>：这个daemon主要功能则是管理NFS的文件系统。当client端顺利通过rpc.nfsd登入主机后，在它可以使用NFS服务器提供规定文件之前，还会经过文件使用权限的认证程序。它会去读取NFS的配置件/etc/exports来对比客户端的权限，当通过这一关之后，client端也就取得使用NFS文件的权限。</p><h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start rpcbind</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nfs-client.target</span><br></pre></td></tr></table></figure><p>查看nfs服务器共享信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">showmount -e 192.168.0.101#192.168.0.101为服务器ip</span><br></pre></td></tr></table></figure><p>挂载远程分区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -t nfs 192.168.0.101:/ /mnt</span><br></pre></td></tr></table></figure><p>即将远程主机的<code>/</code>分区挂载到了本地的<code>/mnt</code>目录下</p><p>查看是否挂载成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -Th</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Filesystem      Type      Size  Used Avail Use<span class="comment">% Mounted on</span></span><br><span class="line">dev             devtmpfs  3.9G     0  3.9G   0<span class="comment">% /dev</span></span><br><span class="line">run             tmpfs     3.9G  1.2M  3.9G   1<span class="comment">% /run</span></span><br><span class="line">/dev/sdb3       ext4       30G   11G   18G  37<span class="comment">% /</span></span><br><span class="line">tmpfs           tmpfs     3.9G  229M  3.7G   6<span class="comment">% /dev/shm</span></span><br><span class="line">tmpfs           tmpfs     3.9G     0  3.9G   0<span class="comment">% /sys/fs/cgroup</span></span><br><span class="line">tmpfs           tmpfs     3.9G  134M  3.7G   4<span class="comment">% /tmp</span></span><br><span class="line">/dev/sdb4       ext4      151G   24G  120G  17<span class="comment">% /home</span></span><br><span class="line">overlaid        overlay   3.9G  134M  3.7G   4<span class="comment">% /tmp/asd-root/srv/http</span></span><br><span class="line">overlaid        overlay   3.9G  134M  3.7G   4<span class="comment">% /tmp/asd-narcissus/home/narcissus/.cache</span></span><br><span class="line">overlaid        overlay   3.9G  134M  3.7G   4<span class="comment">% /tmp/asd-narcissus/home/narcissus/.config/GIMP/2.10/tmp</span></span><br><span class="line">tmpfs           tmpfs     784M   38M  747M   5<span class="comment">% /run/user/1000</span></span><br><span class="line">overlaid        overlay   784M   38M  747M   5<span class="comment">% /run/user/1000/narcissus-opera</span></span><br><span class="line">overlaid        overlay   784M   38M  747M   5<span class="comment">% /run/user/1000/narcissus-google-chrome</span></span><br><span class="line">overlaid        overlay   784M   38M  747M   5<span class="comment">% /run/user/1000/narcissus-firefox-n06bwypx.default</span></span><br><span class="line">overlaid        overlay   784M   38M  747M   5<span class="comment">% /run/user/1000/narcissus-chromium</span></span><br><span class="line">overlaid        overlay   784M   38M  747M   5<span class="comment">% /run/user/1000/narcissus-google-chrome-beta</span></span><br><span class="line">overlaid        overlay   784M   38M  747M   5<span class="comment">% /run/user/1000/narcissus-epiphany</span></span><br><span class="line">overlaid        overlay   784M   38M  747M   5<span class="comment">% /run/user/1000/narcissus-google-chrome-unstable</span></span><br><span class="line">192.168.0.101:/ nfs4       15G  1.8G   12G  14<span class="comment">% /mnt</span></span><br></pre></td></tr></table></figure><hr><p>好了，大功告成，有点小激动啊，又学到了知识。</p><hr><p>但是遇到了一些问题：</p><h4 id="如何取消挂载"><a href="#如何取消挂载" class="headerlink" title="如何取消挂载"></a>如何取消挂载</h4><p>如果有进程在使用挂载的分区的话，那么我们是无法取消nfs挂载的。所以需要用到<code>fuser</code></p><p>查看挂载的文件被那些进程在使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fuser -v -m /mnt</span><br></pre></td></tr></table></figure><p>然后杀掉这些进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fuser -v -m /mnt -k</span><br></pre></td></tr></table></figure><p>再取消nfs的挂载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umount /mnt</span><br></pre></td></tr></table></figure><p>需要注意的就是取消挂载是指的nfs挂载所在的目录</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>terminal开启vi-mode</title>
      <link href="/2019/07/12/terminal%E5%BC%80%E5%90%AFvi-mode/"/>
      <url>/2019/07/12/terminal%E5%BC%80%E5%90%AFvi-mode/</url>
      
        <content type="html"><![CDATA[<h4 id="bash开启vi-mode"><a href="#bash开启vi-mode" class="headerlink" title="bash开启vi-mode"></a>bash开启vi-mode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>添加：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set -o vi</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><h4 id="zsh开启vi-mode"><a href="#zsh开启vi-mode" class="headerlink" title="zsh开启vi-mode"></a>zsh开启vi-mode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure><p>添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugins=(vi-mode)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><h4 id="esc与caps-lock交换"><a href="#esc与caps-lock交换" class="headerlink" title="esc与caps_lock交换"></a>esc与caps_lock交换</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.xmodmap</span><br></pre></td></tr></table></figure><p>添加：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">clear Lock  </span><br><span class="line">keysym Caps_Lock = Escape  </span><br><span class="line">keysym Escape = Caps_Lock  </span><br><span class="line">add Lock = Caps_Lock</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmodmap ~/.xmodmap</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>shell_xargs</title>
      <link href="/2019/07/12/shell-xargs/"/>
      <url>/2019/07/12/shell-xargs/</url>
      
        <content type="html"><![CDATA[<blockquote><p>学的东西虽然还算不少，但是却并没有很好的运用起来，在某些文章的指导下总会有一种豁然开朗的感觉，只想说一句话：我靠，还能这么用，666</p></blockquote><p>题外话：就比如说之前遇到一个删软件的问题，用<code>find</code>找到了许多文件，但是却无法传递给<code>rm</code>，因为它并不能支持读取标准输入，最后是通过写了一个脚本，通过变量的方式来让<code>rm</code>删除的。</p><p>但是今天遇到了<code>xargs</code>这个命令，可以将读取到的标准输入作为参数传递给后面的命令，真的六</p><p>但是竟然有更简单的方法，第一是<code>find</code>本身就支持<code>-exec</code>来执行操作</p><p><strong>还有就是仍然使用变量的方式，但是却是<code>rm $(find ...)</code>，我之前也学过shell中这种使用命令的方式，但是竟然没想到这个方法，这也太六了吧。当然了同样的可以这样写</strong></p><table><tr><td bgcolor=pink> rm `find ...`</td></tr></table><h4 id="我总结的xargs的作用"><a href="#我总结的xargs的作用" class="headerlink" title="我总结的xargs的作用"></a>我总结的xargs的作用</h4><p>一句话，太强大了</p><ol><li><p>最常用的便是读取标准输出作为参数传递给后面的命令</p></li><li><p>可以用来做许多格式化输出操作</p></li><li><p>不仅可以读取标准输入，还能读取文件，只需要<code>-a</code>参数就可以啦，并不需要标准输入</p></li></ol><h4 id="WHY"><a href="#WHY" class="headerlink" title="WHY"></a>WHY</h4><p>之前学过管道命令，觉得这个命令超级好用，但是后来发现了管道命令的弊端，就是很多命令根本就不支持标准输入。</p><p>比如我想一次性删除以 <code>.txt</code> 结尾的文件，但是 <code>rm</code> 不支持管道来传参,例如这样写就是错误的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls *.txt | rm</span><br></pre></td></tr></table></figure><p>但是有了 <code>xargs</code> 这个命令之后便可以做到了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls *.txt | xargs rm</span><br></pre></td></tr></table></figure><p>其实只要 <code>rm *.txt</code> 就可以了，这里只是举个例子</p><hr><h4 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">somecommand |xargs -item  command</span><br></pre></td></tr></table></figure><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat test.txt</span></span><br><span class="line">a b c d e f g h i</span><br><span class="line">j k l m n</span><br><span class="line">o p q r s t u v w x y z</span><br></pre></td></tr></table></figure><table><tr><td bgcolor=pink> 多行输入单行输出：</td></tr></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat test.txt | xargs</span></span><br><span class="line">a b c d e f g h i j k l m n o p q r s t u v w x y z</span><br></pre></td></tr></table></figure><table><tr><td bgcolor=pink> -n 指定每行的列数：</td></tr></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat test.txt | xargs -n3</span></span><br><span class="line"></span><br><span class="line">a b c</span><br><span class="line">d e f</span><br><span class="line">g h i</span><br><span class="line">j k l</span><br><span class="line">m n o</span><br><span class="line">p q r</span><br><span class="line">s t u</span><br><span class="line">v w x</span><br><span class="line">y z</span><br></pre></td></tr></table></figure><table><tr><td bgcolor=pink>-d 自定义一个定界符：</td></tr></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"nameXnameXnameXname"</span> | xargs -dX</span></span><br><span class="line"></span><br><span class="line">name name name name</span><br></pre></td></tr></table></figure><table><tr><td bgcolor=pink> -I 将值保存在{}中，并使用{}取出值：</td></tr></table><p>复制所有图片文件到 /data/images 目录下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls *.jpg | xargs -n1 -I &#123;&#125; cp &#123;&#125; /data/images</span><br></pre></td></tr></table></figure><p>当然了，其实只要使用 <code>cp *.jpg /data/images</code> 即可</p><table><tr><td bgcolor=pink> -0 将null作为分隔符：</td></tr></table><p>xargs默认是通过空格作为分隔符的，可是当一个文件名中出现了空格，或者是删选有许多空格的命令，那么就不能使用空格作为分隔符了，可以使用<code>-d</code>来指定，但是更好的是使用<code>-0</code>，这个命令就需要配合<code>find</code>命令一起使用</p><p>因为find提供了<code>print0</code>这个参数在文件名后输出null，而不是换行符（换行符会被 xargs 替换成空格）。</p><p>统计一个源代码目录中所有 php 文件的行数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -name "*.php" -print0 | xargs -0 wc -l</span><br></pre></td></tr></table></figure><table><tr><td bgcolor=pink> -p 交互模式：</td></tr></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat url-list.txt | xargs -p wget -c</span></span><br></pre></td></tr></table></figure><table><tr><td bgcolor=pink> -a 直接读取文件：</td></tr></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xargs -a url-list.txt -p wget -c</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>grub_clean_NVrom</title>
      <link href="/2019/07/10/grub-clean-NVrom/"/>
      <url>/2019/07/10/grub-clean-NVrom/</url>
      
        <content type="html"><![CDATA[<h5 id="grub安装时出错的解决方法以及安装grub主题"><a href="#grub安装时出错的解决方法以及安装grub主题" class="headerlink" title="grub安装时出错的解决方法以及安装grub主题"></a>grub安装时出错的解决方法以及安装grub主题</h5><p>正常安装步骤：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=grub</span><br></pre></td></tr></table></figure><p>可是却有如下错误信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Installing for x86_64-efi platform.</span><br><span class="line">Could not prepare Boot variable: No space left on device</span><br><span class="line">Installation finished. No error reported.</span><br></pre></td></tr></table></figure><p>之前我也遇到过这个问题，当初不知道是为啥会出这个错，还以为是权限设置的问题，所以无奈之下使用了refind启动管理器，不过今天找到了解决办法。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mount -t efivarfs /sys/firmware/efi/efivars</span><br><span class="line">rm /sys/firmware/efi/efivars/dump*</span><br></pre></td></tr></table></figure><p>然后就可以成功安装了，至于原因，就是nvrom中的文件太多了，需要清理呗。</p><hr><p>然后安装grub主题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S arch-silence-grub-theme</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">==&gt; To select the arch-silence theme you must:</span><br><span class="line">==&gt;  1. Open the file "/etc/default/grub" and inside it update the variable GRUB_THEME="/boot/grub/themes/arch-silence/theme.txt"</span><br><span class="line">==&gt;  2. Update the grub config by running "grub-mkconfig -o /boot/grub/grub.cfg"</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vim_基础</title>
      <link href="/2019/07/07/vim-%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/07/07/vim-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h5 id="指定行打开"><a href="#指定行打开" class="headerlink" title="指定行打开"></a>指定行打开</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim +num 文件名</span><br></pre></td></tr></table></figure><p>例如：打开<code>.zshrc</code> 文件并跳转到第五行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim +5 ~/.zshrc</span><br></pre></td></tr></table></figure><h5 id="回退与前进"><a href="#回退与前进" class="headerlink" title="回退与前进"></a>回退与前进</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctrl+o#回到前一次更改位置</span><br><span class="line">ctrl+i#回到后一次更改位置</span><br></pre></td></tr></table></figure><h5 id="拼写检查"><a href="#拼写检查" class="headerlink" title="拼写检查"></a>拼写检查</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">: set spell#首先开启拼写检查，然后才能使用下面功能</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctrl+x+s#在插入模式下提供候选词条</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">z+=#在普通模式下提供候选词条</span><br></pre></td></tr></table></figure><h5 id="回到之前编辑位置"><a href="#回到之前编辑位置" class="headerlink" title="回到之前编辑位置"></a>回到之前编辑位置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim#打开新的vim</span><br><span class="line">ctrl+o ctrl+o#两次</span><br></pre></td></tr></table></figure><h5 id="执行终端命令"><a href="#执行终端命令" class="headerlink" title="执行终端命令"></a>执行终端命令</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">！命令</span><br></pre></td></tr></table></figure><h5 id="读取终端命令的输出"><a href="#读取终端命令的输出" class="headerlink" title="读取终端命令的输出"></a>读取终端命令的输出</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:r !命令</span><br></pre></td></tr></table></figure><p>例如制作大的拼出的字符、单词</p><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S figlet</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim</span><br><span class="line"></span><br><span class="line">:r !figlet working</span><br></pre></td></tr></table></figure><h5 id="将编辑内容导出为html"><a href="#将编辑内容导出为html" class="headerlink" title="将编辑内容导出为html"></a>将编辑内容导出为html</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">: %TOhtml</span><br></pre></td></tr></table></figure><h5 id="数字加1"><a href="#数字加1" class="headerlink" title="数字加1"></a>数字加1</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctrl+a#将数字自增1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>终端提示符PS1</title>
      <link href="/2019/07/07/%E7%BB%88%E7%AB%AF%E6%8F%90%E7%A4%BA%E7%AC%A6PS1/"/>
      <url>/2019/07/07/%E7%BB%88%E7%AB%AF%E6%8F%90%E7%A4%BA%E7%AC%A6PS1/</url>
      
        <content type="html"><![CDATA[<h4 id="设置终端提示符"><a href="#设置终端提示符" class="headerlink" title="设置终端提示符"></a>设置终端提示符</h4><p>PS1：终端用户的环境变量，命令提示符</p><p>查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $PS1</span><br></pre></td></tr></table></figure><p>提示信息：</p><table><thead><tr><th>代码</th><th>意义</th></tr></thead><tbody><tr><td>\d</td><td>日期</td></tr><tr><td>\H</td><td>完整主机名</td></tr><tr><td>\h</td><td>主机第一个名字</td></tr><tr><td>\t</td><td>时间（24）</td></tr><tr><td>\T</td><td>时间（12）</td></tr><tr><td>\A</td><td>时间（24），没有秒</td></tr><tr><td>\u</td><td>当前用户名</td></tr><tr><td>\v</td><td>bash版本</td></tr><tr><td>\w</td><td>完整工作目录名称</td></tr><tr><td>\W</td><td>最后一个目录名称</td></tr><tr><td>\#</td><td>第几个命令</td></tr><tr><td>\$</td><td>提示字符</td></tr></tbody></table><p>颜色格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\[\e[F;Bm\]提示信息\e[m</span><br></pre></td></tr></table></figure><p>F：前景色    B：背景色</p><table><thead><tr><th>F</th><th>B</th><th>颜色</th></tr></thead><tbody><tr><td>30</td><td>40</td><td><font color=black>黑</font></td></tr><tr><td>31</td><td>41</td><td><font color=red>红</font></td></tr><tr><td>32</td><td>42</td><td><font color=green>绿</font></td></tr><tr><td>33</td><td>43</td><td><font color=yellow>黄</font></td></tr><tr><td>34</td><td>44</td><td><font color=blue>蓝</font></td></tr><tr><td>35</td><td>45</td><td><font color=purple>紫红</font></td></tr><tr><td>36</td><td>46</td><td><font color=cyanine>青蓝</font></td></tr><tr><td>37</td><td>47</td><td>白</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>shell_数组及函数</title>
      <link href="/2019/07/07/shell-%E6%95%B0%E7%BB%84%E5%8F%8A%E5%87%BD%E6%95%B0/"/>
      <url>/2019/07/07/shell-%E6%95%B0%E7%BB%84%E5%8F%8A%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A=(array1 array2 array3)</span><br></pre></td></tr></table></figure><h4 id="数组的引用"><a href="#数组的引用" class="headerlink" title="数组的引用"></a>数组的引用</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;A[index]&#125;</span></span><br></pre></td></tr></table></figure><p>index为数组下标，从0开始</p><h4 id="显示数组所有参数"><a href="#显示数组所有参数" class="headerlink" title="显示数组所有参数"></a>显示数组所有参数</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;A[@]&#125;</span></span><br></pre></td></tr></table></figure><h4 id="显示数组参数个数"><a href="#显示数组参数个数" class="headerlink" title="显示数组参数个数"></a>显示数组参数个数</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;<span class="comment">#A[@]&#125;</span></span></span><br></pre></td></tr></table></figure><h4 id="替换某个数组"><a href="#替换某个数组" class="headerlink" title="替换某个数组"></a>替换某个数组</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;A[@]/array1/array0&#125;</span></span><br></pre></td></tr></table></figure><p>将array1替换为array0</p><h4 id="删除某个数组"><a href="#删除某个数组" class="headerlink" title="删除某个数组"></a>删除某个数组</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unset A[index]</span><br></pre></td></tr></table></figure><hr><h4 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function command()</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>shell_运算判断</title>
      <link href="/2019/07/07/shell-%E8%BF%90%E7%AE%97%E5%88%A4%E6%96%AD/"/>
      <url>/2019/07/07/shell-%E8%BF%90%E7%AE%97%E5%88%A4%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<h4 id="shell中括号的意义"><a href="#shell中括号的意义" class="headerlink" title="shell中括号的意义"></a>shell中括号的意义</h4><table><thead><tr><th>-括号</th><th>-作用</th><th>-常用于</th></tr></thead><tbody><tr><td>() 命令组</td><td>（）会新开一个shell执行</td><td>shell命令及输出</td></tr><tr><td></td><td>（）中的变量不可被脚本引用</td><td></td></tr><tr><td></td><td>多个命令之间用分号隔开，最后一个命令可以没有分号</td><td></td></tr><tr><td></td><td>各个命令和括号之间不必有空格</td><td></td></tr><tr><td></td><td>$()  等同于  ``</td><td></td></tr><tr><td>(()) 整数运算</td><td>计算整数</td><td>算数运算</td></tr><tr><td></td><td>括号中的变量可以不加$</td><td></td></tr><tr><td></td><td>多个命令之间用分号隔开</td><td></td></tr><tr><td></td><td>((i=$i+$j))    等价于   i=`expr $i+$j`</td><td></td></tr><tr><td>[] 算数比较</td><td>字符串比较：==，!=</td><td>算数比较，左右留空格</td></tr><tr><td></td><td>整数比较：-gt ,  -lt   , -eq  , ne</td><td></td></tr><tr><td>[[]]</td><td>字符串比较时可以把右边作为一个模式</td><td>字符串比较</td></tr><tr><td></td><td>逻辑运算符可以防止逻辑错误</td><td></td></tr><tr><td>{}</td><td>创建匿名函数，不新开进程</td><td>快速替换，左右留空格</td></tr><tr><td></td><td>各命令用分号隔开，最后一一个也需要分号</td><td></td></tr><tr><td>``</td><td></td><td>shell命令</td></tr></tbody></table><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-eq    #等于，用于整形比较</span><br><span class="line">-ne    #不等于，用于整形比较</span><br><span class="line">-lt    #小于，用于整形比较</span><br><span class="line">-gt    #大于，用于整形比较</span><br><span class="line">-le    #小于或等于，用于整形比较</span><br><span class="line">-ge    #大于或等于，用于整形比较</span><br><span class="line">-a    #and</span><br><span class="line">-o    #or</span><br><span class="line">-z    #空字符串</span><br><span class="line">-f     #文件是否存在</span><br><span class="line">-d     #目录是否存在</span><br></pre></td></tr></table></figure><h5 id=""><a href="#" class="headerlink" title=""></a></h5>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>shell_变量及读取</title>
      <link href="/2019/07/07/shell-%E5%8F%98%E9%87%8F%E5%8F%8A%E8%AF%BB%E5%8F%96/"/>
      <url>/2019/07/07/shell-%E5%8F%98%E9%87%8F%E5%8F%8A%E8%AF%BB%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h4 id="变量分类"><a href="#变量分类" class="headerlink" title="变量分类"></a>变量分类</h4><p>局部变量：只在程序执行过程中起作用，执行完后变量回收</p><p>环境变量：变量一直存在</p><p>####　定义变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">variable=hello#如果变量中没有空格，可以不用引号</span><br><span class="line">variable='hello world'#单引号中是什么就输出什么，如果中存在变量，也不会输出变量</span><br><span class="line">variable="$url"#双引号中的变量可以正常输出</span><br></pre></td></tr></table></figure><p><em>定义变量时，赋值号（等号）左右都不能存在空格</em></p><h4 id="变量的调用"><a href="#变量的调用" class="headerlink" title="变量的调用"></a>变量的调用</h4><p>变量前面加<code>$</code>,同时变量本身加<code>{}</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;name&#125;    #当然了，大部分时候这个括号是可以省略的，只要保证后面不紧挨着其它字符</span><br></pre></td></tr></table></figure><h4 id="修改变量的值"><a href="#修改变量的值" class="headerlink" title="修改变量的值"></a>修改变量的值</h4><p><em>只需重新赋值就行，而不能加 <code>$</code> 号，只有调用变量时才能使用 <code>$</code></em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url="www.baidu.com"</span><br><span class="line">url="www.jianshu.com"</span><br></pre></td></tr></table></figure><h4 id="将命令的结果赋值给变量"><a href="#将命令的结果赋值给变量" class="headerlink" title="将命令的结果赋值给变量"></a>将命令的结果赋值给变量</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">variable=`command`</span><br><span class="line">variable=$(command)</span><br></pre></td></tr></table></figure><p>这两种方式都可以</p><h4 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h4><p>不能被修改/删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readonly variable="www.baidu.com"</span><br></pre></td></tr></table></figure><h4 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h4><p><em>只读变量不能被删除</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unset variable</span><br></pre></td></tr></table></figure><hr><h4 id="系统预置变量"><a href="#系统预置变量" class="headerlink" title="系统预置变量"></a>系统预置变量</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;0&#125;    当前程序</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;1&#125;    程序的第一个参数</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;2&#125;    程序的第二个参数</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;*&#125;    程序的所有参数</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;<span class="comment">#&#125;    程序所有参数的统计</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;?&#125;    前一个命令是否执行成功，成功为0</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;PWD&#125;    当前目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;UID&#125;    用户id，root为0</span></span><br></pre></td></tr></table></figure><hr><h4 id="终端读取变量"><a href="#终端读取变量" class="headerlink" title="终端读取变量"></a>终端读取变量</h4><p>实现一个交互的作用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read variable</span><br></pre></td></tr></table></figure><p>例如：取消挂载指定磁盘</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">echo "$(lsblk)"</span><br><span class="line">echo -e  "\033[32m which device do you want to unmount? \033[0m" </span><br><span class="line">read x y</span><br><span class="line">sudo umount /dev/sd$x$y</span><br><span class="line">if [[ $? -eq 0 ]];then</span><br><span class="line">echo -e "\033[32m the device /dev/sd$x$y has been unmounted successfully \033[0m"</span><br><span class="line">else</span><br><span class="line">echo -e "\033[32m device /dev/sd$x$y not mounted \033[0m"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>####　给终端输入数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo ""</span><br></pre></td></tr></table></figure><p>如果使用的是zsh，那么还可以使用 <code>print</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print ""</span><br></pre></td></tr></table></figure><h4 id="终端自动写入数据"><a href="#终端自动写入数据" class="headerlink" title="终端自动写入数据"></a>终端自动写入数据</h4><p>使用到了<code>spawn</code>和<code>expect</code>，其中expect是一个软件套件，而spawn是shell自带的。Except主要进行自动化的交互，Except能够模拟用户的输入，也可以读取标准输出，适合需要用户输入的场景。</p><p>安装expect：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S expect</span><br></pre></td></tr></table></figure><p>Expect中最关键的四个命令是 <code>send,expect,spawn,interact</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">send：用于向进程发送字符串。send命令接收一个字符串参数，并将该参数发送到进程。</span><br><span class="line">expect：从进程接收字符串。expect通常是用来等待一个进程的反馈</span><br><span class="line">spawn：启动新的进程。spawn命令就是用来启动新的进程的。spawn后的send和expect命令都是和spawn打开的进程进行交互的</span><br><span class="line">interact：允许用户交互。让用户参与这个进程。</span><br></pre></td></tr></table></figure><p>shell脚本第一句话为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/expect</span></span><br></pre></td></tr></table></figure><p>比如实现 一个自动填充ssh连接时的密码输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/expect</span></span><br><span class="line"></span><br><span class="line">spawn ssh root@192.168.0.195</span><br><span class="line">expect "*password:" &#123;send "123456\r"&#125;</span><br><span class="line">interact</span><br></pre></td></tr></table></figure><p><code>\r</code> 用来实现一个回车的作用</p><p>expect语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expect "pattern" &#123;send "action"&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">expect &#123;</span><br><span class="line">"pattern" &#123;send "action"&#125;</span><br><span class="line">"pattern" &#123;send "action"&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>shell_语句</title>
      <link href="/2019/07/07/shell-%E8%AF%AD%E5%8F%A5/"/>
      <url>/2019/07/07/shell-%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h4 id="if条件判断语句"><a href="#if条件判断语句" class="headerlink" title="if条件判断语句"></a>if条件判断语句</h4><p>有开头有结尾，<code>if...then..elif..then...else ...fi</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if ((10&gt;5));then    #两个括号用在if中表示判断大小，后面接分号，then</span><br><span class="line">    echo 10 is greater than 5</span><br><span class="line">elif ((10==5));then</span><br><span class="line">    echo 10 equals 5</span><br><span class="line">else</span><br><span class="line">    echo 5 is greater than 10</span><br><span class="line">fi                  #以反if结尾表示结束</span><br></pre></td></tr></table></figure><p>例子：判断目录是否存在，不存在就创建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">make directory <span class="keyword">if</span> it<span class="string">'s not exist</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">author narcissus</span></span><br><span class="line"></span><br><span class="line">if [ ! -d ./test2 ];then</span><br><span class="line">echo create direcotry test2</span><br><span class="line">mkdir test2</span><br><span class="line">else</span><br><span class="line">echo directory exists</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h4 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h4><p>例子：列出普通用户家目录所有文件、目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">打印用户家目录下的所有文件名</span></span><br><span class="line"><span class="meta">#</span><span class="bash">author narcissus木</span></span><br><span class="line"></span><br><span class="line">cd ~                              #进入家目录</span><br><span class="line">if [ $UID -eq 0 ];then            #判断如果是root用户</span><br><span class="line">for i in `ls /home/`      #列出所有普通用户</span><br><span class="line">do</span><br><span class="line">cd /home/$i       #进入普通用户目录</span><br><span class="line">for j in `ls`     #循环用户下的文件/目录</span><br><span class="line">do</span><br><span class="line">echo $j   #打印</span><br><span class="line">done</span><br><span class="line">done</span><br><span class="line">else                              #如果是普通用户</span><br><span class="line">for j in `ls`             #循环用户下的文件/目录</span><br><span class="line">do</span><br><span class="line">echo $j           #打印</span><br><span class="line">done</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h5 id=""><a href="#" class="headerlink" title=""></a></h5><hr><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while 条件</span><br><span class="line">do</span><br><span class="line">action</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>简单的循环</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">i=0</span><br><span class="line">while [[ $i -lt 10 ]]</span><br><span class="line">do</span><br><span class="line">echo "the number is $i"</span><br><span class="line">((i++))</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p> 从终端读取数字并计算数字阶乘</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">read m</span><br><span class="line">i=1</span><br><span class="line">y=1</span><br><span class="line">while [[ $i -lt $m ]]</span><br><span class="line">do</span><br><span class="line">((i++))</span><br><span class="line">((y=$y*$i))</span><br><span class="line">done</span><br><span class="line">echo "!m= $y"</span><br></pre></td></tr></table></figure><p>实现从指定文件夹读取数据并显示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">while read i</span><br><span class="line">do</span><br><span class="line">echo $i</span><br><span class="line">done &lt; ~/.zshrc</span><br></pre></td></tr></table></figure><hr><h4 id="until循环"><a href="#until循环" class="headerlink" title="until循环"></a>until循环</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until 条件</span><br><span class="line">do</span><br><span class="line">action</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>与while差不多</p><hr><h4 id="case选择"><a href="#case选择" class="headerlink" title="case选择"></a>case选择</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">case $arg in</span><br><span class="line">pattern1)</span><br><span class="line">action;;</span><br><span class="line">pattern2)</span><br><span class="line">action;;</span><br><span class="line">*)</span><br><span class="line">action;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p><code>*)</code> 代表不在选择范围内的数据，即其它</p><p>选择安装lamp</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">apache)</span><br><span class="line">echo "install apache";;</span><br><span class="line">mysql)</span><br><span class="line">echo "install mysql";;</span><br><span class="line">php)</span><br><span class="line">echo "install php";;</span><br><span class="line">*)</span><br><span class="line">echo "please choose the right package";;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p><code>$1</code> 用于读取终端输入的第一个参数</p><hr><h4 id="select选择"><a href="#select选择" class="headerlink" title="select选择"></a>select选择</h4><p>select用于从终端读取选择的数据，与case搭配起来使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select var in "arg1" "arg2" "arg3" ....</span><br><span class="line">do</span><br><span class="line">action</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>终端显示选择菜单，并读取所选菜单</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">PS3="please select the one you want to install: " </span><br><span class="line">select i in "apache" "mysql" "php"</span><br><span class="line">do</span><br><span class="line">case $i in</span><br><span class="line">apache)</span><br><span class="line">echo "install apache"</span><br><span class="line">;;</span><br><span class="line">mysql)</span><br><span class="line">echo "install mysql"</span><br><span class="line">;;</span><br><span class="line">php)</span><br><span class="line">echo "install php"</span><br><span class="line">;;</span><br><span class="line">*) </span><br><span class="line">echo "your choise is wrong"</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><code>PS3</code> 用来写提示信息</p>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>shell_字符串截取</title>
      <link href="/2019/07/07/shell-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%AA%E5%8F%96/"/>
      <url>/2019/07/07/shell-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%AA%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h4 id="字符串的截取"><a href="#字符串的截取" class="headerlink" title="字符串的截取"></a>字符串的截取</h4><h5 id="号截取，删除右边字符，保留左边字符"><a href="#号截取，删除右边字符，保留左边字符" class="headerlink" title="%号截取，删除右边字符，保留左边字符"></a>%号截取，删除右边字符，保留左边字符</h5><p><code>%t*</code>表示从右边开始，删除第一个 t及右边的字符 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i="it seems that i fall in love with you"</span><br><span class="line">echo $&#123;i%t*&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">it seems that i fall in love wi</span><br></pre></td></tr></table></figure><p><code>%%m*</code> 表示从右边开始，删除最后（最左边）一个t及右边的字符 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i="it seems that i fall in love with you"</span><br><span class="line">echo $&#123;i%%t*&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i</span><br></pre></td></tr></table></figure><hr><h5 id="号截取，删除左边字符，保留右边字符。"><a href="#号截取，删除左边字符，保留右边字符。" class="headerlink" title="#号截取，删除左边字符，保留右边字符。"></a>#号截取，删除左边字符，保留右边字符。</h5><p><code>#*t</code>表示从左边开始，删除第一个 t及左边的字符 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i="it seems that i fall in love with you"</span><br><span class="line">echo $&#123;i#*t&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seems that i fall in love with you</span><br></pre></td></tr></table></figure><p><code>##*t</code>表示从左边开始删除最后（最右边）一个t及左边的所有字符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i="it seems that i fall in love with you"</span><br><span class="line">echo $&#123;i##*t&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h you</span><br></pre></td></tr></table></figure><hr><h5 id="切片截取"><a href="#切片截取" class="headerlink" title="切片截取"></a>切片截取</h5><p>从左边第几个字符开始，总字符的个数</p><p>从第一个字符开始，总个数为4</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i="it seems that i fall in love with you"</span><br><span class="line">echo $&#123;i:0:4&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">it s</span><br></pre></td></tr></table></figure><p>从左边第几个字符开始，直到结束</p><p>从第4个开始，到结束</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i="it seems that i fall in love with you"</span><br><span class="line">echo $&#123;i:4&#125;</span><br></pre></td></tr></table></figure><hr><p>从右边第几个开始，总字符个数</p><p>从右边第三个开始算起，向右2个字符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i="it seems that i fall in love with you"</span><br><span class="line">echo $&#123;i:0-3：2&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yo</span><br></pre></td></tr></table></figure><hr><p>从右边第几个字符开始，直到结束</p><p>从右边第三个开始，向右直到结束</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i="it seems that i fall in love with you"</span><br><span class="line">echo $&#123;i:0-3&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">you</span><br></pre></td></tr></table></figure><p>例子：我需要将简书上的文章发布到网站上，我已经下载好了，可是因为有点多，需要每次都手动去一个一个的发布，太麻烦了，所以就想有什么简单的方法可以解决。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">used <span class="keyword">for</span> create hexo file and cat origin file to it</span></span><br><span class="line"><span class="meta">#</span><span class="bash">author NARCISSUS木</span></span><br><span class="line"></span><br><span class="line">cd /home/narcissus/Downloads/compressd-file/jianshu/user-9937522-1556131627/测试</span><br><span class="line">for i in `ls`</span><br><span class="line">do</span><br><span class="line">m=$&#123;i%.*&#125;</span><br><span class="line">cd /home/narcissus/Data/HexoBlog</span><br><span class="line">echo $m</span><br><span class="line">hexo n draft $m</span><br><span class="line">if [ $? -eq 0 ];then</span><br><span class="line">cat /home/narcissus/Downloads/compressd-file/jianshu/user-9937522-1556131627/测试/$i &gt;&gt; ./source/_drafts/$i</span><br><span class="line">else</span><br><span class="line">exit</span><br><span class="line">fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>shell_基础</title>
      <link href="/2019/07/07/shell-%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/07/07/shell-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h4 id="shell编程一"><a href="#shell编程一" class="headerlink" title="shell编程一"></a>shell编程一</h4><h5 id="创建shell文件"><a href="#创建shell文件" class="headerlink" title="创建shell文件"></a>创建shell文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch test.sh    #.sh用来表示这是一个shell脚本，并无特殊作用</span><br></pre></td></tr></table></figure><h5 id="shell文件的执行"><a href="#shell文件的执行" class="headerlink" title="shell文件的执行"></a>shell文件的执行</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x test.sh    #给文件添加可执行权限</span><br><span class="line">./test.sh           #表示执行当前目录下的shell脚本</span><br></pre></td></tr></table></figure><h5 id="指定执行shell及注释"><a href="#指定执行shell及注释" class="headerlink" title="指定执行shell及注释"></a>指定执行shell及注释</h5><p>文件开头写法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash    <span class="comment">#指明使用何种shell</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">这里指明shell作用、目的</span></span><br><span class="line"><span class="meta">#</span><span class="bash">指明作者</span></span><br></pre></td></tr></table></figure><h5 id="赋值语法"><a href="#赋值语法" class="headerlink" title="赋值语法"></a>赋值语法</h5><p>与其它语言不同的一点是赋值的变量与值之间是不能有空格的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=“narcissus”    #必须紧挨着</span><br></pre></td></tr></table></figure><h5 id="变量的调用"><a href="#变量的调用" class="headerlink" title="变量的调用"></a>变量的调用</h5><p>变量前面加<code>$</code>,同时变量本身加<code>{}</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;name&#125;    #当然了，大部分时候这个括号是可以省略的，只要保证后面不紧挨着其它字符</span><br></pre></td></tr></table></figure><h5 id="日期打印"><a href="#日期打印" class="headerlink" title="日期打印"></a>日期打印</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo `date +%Y%m%d`</span><br></pre></td></tr></table></figure><h5 id="shell执行时候的检查"><a href="#shell执行时候的检查" class="headerlink" title="shell执行时候的检查"></a>shell执行时候的检查</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sh -n test.sh        #检查是否有错误</span><br><span class="line">sh -x test.sh        #打印执行具体过程（每步都显示，非常有用）</span><br></pre></td></tr></table></figure><h5 id="命令放在-之间"><a href="#命令放在-之间" class="headerlink" title="命令放在``之间"></a>命令放在<strong>``</strong>之间</h5><p>例子：计算1到100的和</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/zsh</span></span><br><span class="line"></span><br><span class="line">j=0</span><br><span class="line">for ((i=1;i&lt;100;i++))</span><br><span class="line">do</span><br><span class="line">j=`expr $j + $i`</span><br><span class="line"><span class="meta">#</span><span class="bash">j=$((<span class="variable">$i</span>+<span class="variable">$j</span>))</span></span><br><span class="line">done</span><br><span class="line">echo $j</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DQL_union和limit</title>
      <link href="/2019/07/06/DQL-union%E5%92%8Climit/"/>
      <url>/2019/07/06/DQL-union%E5%92%8Climit/</url>
      
        <content type="html"><![CDATA[<h4 id="union"><a href="#union" class="headerlink" title="union"></a>union</h4><p><strong>可以将查询结果集相加（可以将两个不相关的数据拼接在一起）,两个查询结果集的字段数需要一致</strong></p><p>案例：找出工作岗位是salesman和manager的员工</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename ,job <span class="keyword">from</span> emp <span class="keyword">where</span> job=<span class="string">'SALESMAN'</span> <span class="keyword">or</span> job=<span class="string">'MANAGER'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename ,job <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="keyword">in</span> (<span class="string">'SALESMAN'</span>,<span class="string">'MANAGER'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename ,job <span class="keyword">from</span> emp <span class="keyword">where</span> job=<span class="string">'SALESMAN'</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> ename ,job <span class="keyword">from</span> emp <span class="keyword">where</span> job=<span class="string">'MANAGER'</span>;</span><br></pre></td></tr></table></figure><p>将两个不相关的数据拼接在一起</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> dname <span class="keyword">form</span> dept;</span><br></pre></td></tr></table></figure><h4 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h4><p><code>limit</code> 分页查询，mysql特有，取结果集中的部分数据，sql语句中最后执行的一个环节</p><p><code>rownum</code> 分页查询，oracle特有</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">limit startIndex,length <span class="comment">#startIndex起始位置,默认从0开始（第一条数据），length取几个</span></span><br></pre></td></tr></table></figure><p>案例：取出工资前5名的员工</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">5</span>;</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>分页通用公式：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">limit (pageNo-1)*pageSize,pageSize</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DQL_子查询</title>
      <link href="/2019/07/06/DQL-%E5%AD%90%E6%9F%A5%E8%AF%A2/"/>
      <url>/2019/07/06/DQL-%E5%AD%90%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><p>select语句中嵌套select语句，被嵌套的select语句是子查询</p><p><strong>子查询可以出现的地方</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">...(<span class="keyword">select</span>)...</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">...(<span class="keyword">select</span>)...</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">...(<span class="keyword">select</span>)...</span><br></pre></td></tr></table></figure><hr><h4 id="where子句中使用子查询"><a href="#where子句中使用子查询" class="headerlink" title="where子句中使用子查询"></a>where子句中使用子查询</h4><p>案例：找出高于品均薪资的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt; (<span class="keyword">select</span> <span class="keyword">avg</span>(sal) <span class="keyword">from</span> emp);</span><br></pre></td></tr></table></figure><hr><h4 id="from后面嵌套子查询"><a href="#from后面嵌套子查询" class="headerlink" title="from后面嵌套子查询"></a>from后面嵌套子查询</h4><p><strong>将查询出来的表作为新的表</strong>，当比较的表中有需要做计算的，将计算结果作为新的表</p><p>案例：找出每个部门平均薪水的薪资等级</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">t.*,s.grade</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(<span class="keyword">select</span> deptno,<span class="keyword">avg</span>(sal) <span class="keyword">as</span> avgsal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno) t</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">salgrade s</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">t.avgsal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal;</span><br></pre></td></tr></table></figure><p>案例：找出每个部门平均的薪水等级</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">e.deptno,<span class="keyword">avg</span>(s.grade)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">salgrade s</span><br><span class="line"><span class="keyword">on</span> </span><br><span class="line">e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">e.deptno;</span><br></pre></td></tr></table></figure><hr><h4 id="select后面嵌套子查询"><a href="#select后面嵌套子查询" class="headerlink" title="select后面嵌套子查询"></a>select后面嵌套子查询</h4><p>案例：找出每个员工所在的部门名称，要求显示员工名和部门名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">e.ename,d.dname</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">join</span> </span><br><span class="line">dept d</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.deptno=d.deptno;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">e.ename,(<span class="keyword">select</span> d.dname <span class="keyword">from</span> dept d <span class="keyword">where</span> e.deptno=d.deptno) <span class="keyword">as</span> dname</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp e;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DQL_SQL多表连接查询</title>
      <link href="/2019/07/06/DQL-SQL%E5%A4%9A%E8%A1%A8%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/"/>
      <url>/2019/07/06/DQL-SQL%E5%A4%9A%E8%A1%A8%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>多表联合查询：一般一个业务都会对应多张表，避免出现数据冗余</p></blockquote><h4 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h4><p>分类：按连接方式</p><table><thead><tr><th>分类</th><th>细分</th></tr></thead><tbody><tr><td>内连接（inner join）</td><td>等值连接</td></tr><tr><td></td><td>非等值连接</td></tr><tr><td></td><td>自连接</td></tr><tr><td>外连接（left join ; right join）</td><td>左外连接</td></tr><tr><td></td><td>右外连接</td></tr><tr><td>全连接</td><td></td></tr></tbody></table><p><strong>在表的连接查询方面有一种现象被成为：笛卡尔积现象（笛卡尔乘积现象）</strong></p><p>案例：找出每个员工的部门名称，要求显示员工名和部门名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.ename,d.dname <span class="keyword">from</span> emp e,dept d;</span><br></pre></td></tr></table></figure><p>当两张表进行连接查询时，如果没有任何条件限制，最终查询结果为两张表的乘积</p><p><strong>表的别名好处：执行效率高，指定在那张表中查询；可读性好</strong></p><p><strong>避免笛卡尔积现象</strong></p><p>添加条件进行过滤，但是匹配次数仍然没变，只是显示的是过滤后的记录 </p><hr><h4 id="内连接—–等值连接"><a href="#内连接—–等值连接" class="headerlink" title="内连接—–等值连接"></a>内连接—–等值连接</h4><p><em>最大特点：条件是等量关系</em></p><p>找出每个员工的部门名称，要求显示员工名和部门名</p><p>sql92（旧语法）,where后添加条件为and，关系不明确</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.ename,d.dname <span class="keyword">from</span> emp e ,dept d <span class="keyword">where</span> e.deptno=d.deptno;</span><br></pre></td></tr></table></figure><p>sql99（新语法），后面可以添加where过滤条件，inner可省略</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.ename,d.dname <span class="keyword">from</span> emp e <span class="keyword">inner</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno=d.deptno;</span><br></pre></td></tr></table></figure><hr><h4 id="内连接—–非等值连接"><a href="#内连接—–非等值连接" class="headerlink" title="内连接—–非等值连接"></a>内连接—–非等值连接</h4><p><em>最大特点：连接条件中的关系是非等量关系,inner可省略</em></p><p>案例：找出每个员工的工资等级，要求显示员工名，工资，工资等级</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">e.ename,e.sal,s.grade </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">emp e </span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> </span><br><span class="line">salgrade s </span><br><span class="line"><span class="keyword">on</span> </span><br><span class="line">e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal;</span><br></pre></td></tr></table></figure><hr><h4 id="内连接—–自连接"><a href="#内连接—–自连接" class="headerlink" title="内连接—–自连接"></a>内连接—–自连接</h4><p><em>最大特点：一张表看做两张表，自己连接自己，inner可省略</em></p><p>案例：找出每个员工的上级领导，要求显示员工名和对应的上级 的领导名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">a.ename <span class="keyword">as</span> <span class="string">'员工名'</span> ,b.ename <span class="keyword">as</span> <span class="string">'领导名'</span> </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">emp a </span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> </span><br><span class="line">emp b </span><br><span class="line"><span class="keyword">on</span> </span><br><span class="line">a.mgr=b.empno;</span><br></pre></td></tr></table></figure><hr><hr><p>####　外连接</p><p><em>内连接：两张表没有主副之分</em>，<code>inner</code> 可省略</p><p><em>外连接：一张为主表，一张为副表，当副表中没有数据和主表中数据匹配，副表自动模拟出null与之匹配</em>，<code>outer</code> 可省略</p><p>左连接：左外连接，左边的表为主表</p><p>右连接：右外连接，右边的表为主表</p><p>案例：找出每个员工的上级领导（所有员工必须查询出）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">a.ename <span class="keyword">as</span> <span class="string">'员工名'</span> ,b.ename <span class="keyword">as</span> <span class="string">'领导名'</span> </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">emp a </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> </span><br><span class="line">emp b </span><br><span class="line"><span class="keyword">on</span> </span><br><span class="line">a.mgr=b.empno;</span><br></pre></td></tr></table></figure><p>案例：找出没有员工的部门</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">d.*</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span></span><br><span class="line">dept d</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.deptno=d.deptno</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">e.empno <span class="keyword">is</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><hr><hr><h4 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">b</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">c</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>表示a表与b表先连接查询，然后a表再与c表连接查询</p><p>案例：找出每一个员工的部门名称，工资等级</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">e.ename,d.dname,s.grade</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">dept d</span><br><span class="line"><span class="keyword">on</span> </span><br><span class="line">e.deptno=d.deptno</span><br><span class="line"><span class="keyword">join</span> </span><br><span class="line">salgrade s</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.sal <span class="keyword">between</span> s.local <span class="keyword">and</span> s.hisal;</span><br></pre></td></tr></table></figure><p>案例：找出每一个员工的部门名称，工资等级，以及上级领导</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">e.ename <span class="keyword">as</span> <span class="string">'员工'</span>,d.dname,s.grade,e1.ename <span class="keyword">as</span> <span class="string">'领导'</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">dept d</span><br><span class="line"><span class="keyword">on</span> </span><br><span class="line">e.deptno=d.deptno</span><br><span class="line"><span class="keyword">join</span> </span><br><span class="line">salgrade s</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.sal <span class="keyword">between</span> s.local <span class="keyword">and</span> s.hisal</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span></span><br><span class="line">emp e1</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.mgr=e1.empno;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DQL_SQL语法详解</title>
      <link href="/2019/07/06/DQL-SQL%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/07/06/DQL-SQL%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="where条件查询"><a href="#where条件查询" class="headerlink" title="where条件查询"></a>where条件查询</h4><p>从物理磁盘上读取数据时的查询操作，只能逐行操作。</p><table><thead><tr><th align="center">-运算符</th><th align="center">-说明</th><th>例子</th></tr></thead><tbody><tr><td align="center">=</td><td align="center">等于</td><td>select  * from emp where sal = 1000;</td></tr><tr><td align="center">注意：</td><td align="center"></td><td></td></tr></tbody></table><p><font color=brown>当运算符的优先级不确定的时候加小括号。and的优先级大于or</font>&gt;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> ename = <span class="string">'黎明'</span> <span class="keyword">and</span> (sal=<span class="number">1000</span> <span class="keyword">or</span> sal =<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p> <font color=brown>%代表任意多个字符    _代表一个字符, \具有转义作用</font></p><p>查询名字中带有下划线的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">'%\_%'</span>;</span><br></pre></td></tr></table></figure><hr><h4 id="排序-order-by"><a href="#排序-order-by" class="headerlink" title="排序 order by"></a>排序 order by</h4><p>默认升序：<code>asc</code></p><p>降序：<code>desc</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><p>按照工资的降序排，当工资相同时在按照名字升序排</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>,ename <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><p>多重排序：越靠前的字段越能起到主导作用，只有当前面的字段无法完成排序的时候才启用后面的字段。</p><p><font color=brown>排序能使用字段名，还能使用数字，使用数字时需要注意当数字所在字段变化时，排序的字段将变化，所有不推荐使用</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">2</span>;<span class="comment">#注意是根据sal排序的</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>-语句</th><th>-执行顺序</th></tr></thead><tbody><tr><td>select</td><td>5</td></tr><tr><td>字段</td><td></td></tr><tr><td>from</td><td>1</td></tr><tr><td>表名</td><td></td></tr><tr><td>where</td><td>2</td></tr><tr><td>条件</td><td></td></tr><tr><td>group by</td><td>3</td></tr><tr><td></td><td></td></tr><tr><td>having</td><td>4</td></tr><tr><td></td><td></td></tr><tr><td>order by</td><td>6</td></tr><tr><td>…….</td><td></td></tr></tbody></table><hr><h4 id="分组函数-多行处理函数"><a href="#分组函数-多行处理函数" class="headerlink" title="分组函数(多行处理函数)"></a>分组函数(多行处理函数)</h4><p>所有的分组函数都是对某一组数据进行的操作</p><table><thead><tr><th>-分组函数</th><th>-举例</th></tr></thead><tbody><tr><td>count()</td><td>select count(*) from emp;</td></tr><tr><td>sum()</td><td>select sum(sal) from emp;</td></tr><tr><td>max()</td><td>select max(sal) from emp;</td></tr><tr><td>min()</td><td>select min(sal) from emp;</td></tr><tr><td>avg()</td><td>select avg(sal) from emp;</td></tr></tbody></table><p>多行处理函数的特点：输入多行，输出一行</p><p>注意：</p><p><font color=brown>分组函数会自动忽略null</font></p><p><strong><em>单行处理函数：ifnull()</em></strong></p><p>单行处理函数的特点：输入几行，输出几行</p><p><font color=brown>所有数据库规定：只要有null参与的运算结果一定为null</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,(sal+<span class="keyword">ifnull</span>(comm,<span class="number">0</span>))*<span class="number">12</span> <span class="keyword">as</span> yearsal <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p><strong><em>count(\</em>) 和 count(具体的某个字段) 的区别*</strong></p><p>count(*)：不是统计某个字段中数据的个数，而是统计总记录条数（和某个字段无关）。</p><p>count(具体的某个字段)：表示统计某个字段的总记录数，如果存在null，那么会被忽略。</p><hr><h4 id="group-by-和-having"><a href="#group-by-和-having" class="headerlink" title="group by 和 having"></a>group by 和 having</h4><p>group by：按照某个字段或者某些字段进行分组。</p><p>having：对分组之后的数据进行再次过滤。没有group by就没有having，但是having可以没有</p><p><font color=brown>注意：</font></p><p><font color=brown>分组函数一般都会和group by联合使用，这也是分组函数的来源，并且分组函数在group by执行之后才执行</font></p><p><font color=brown>当一条语句中有group by语句时，select后面只能跟分组函数和参与分组的字段</font></p><p><font color=brown>能使用where过滤的，尽量使用where，效率高，不能的则使用having</font></p><p><font color=brown>where后面不能使用分组函数</font></p><p>查询同一部门的员工最高工资高于3000的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno,<span class="keyword">max</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno <span class="keyword">having</span>  <span class="keyword">max</span>(sal) &gt; <span class="number">3000</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno,<span class="keyword">max</span>(sal) <span class="keyword">from</span> emp <span class="keyword">where</span> sal&gt;<span class="number">3000</span> <span class="keyword">group</span> <span class="keyword">by</span> deptno; <span class="comment">#效率更高</span></span><br></pre></td></tr></table></figure><p>多字段联合分组：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno,job,<span class="keyword">max</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno,job;<span class="comment">#每个部门不同工作岗位的最高薪资</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DQL_SQL基本写法</title>
      <link href="/2019/07/06/DQL-SQL%E5%9F%BA%E6%9C%AC%E5%86%99%E6%B3%95/"/>
      <url>/2019/07/06/DQL-SQL%E5%9F%BA%E6%9C%AC%E5%86%99%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>单表基础规则</p></blockquote><h5 id="完整语法"><a href="#完整语法" class="headerlink" title="完整语法"></a>完整语法</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> [<span class="keyword">select</span>选项] 字段列表[字段别名]<span class="comment">/* from 数据源 [where 字句] [group by子句 ][having 子句][order by 子句][limit 子句];</span></span><br></pre></td></tr></table></figure><h5 id="select"><a href="#select" class="headerlink" title="select"></a>select</h5><p>Select 选项包含：ALL（所有，默认）、distinct（去重）。其中distinct针对的是查询结果的整条记录而言的。</p><p>例如：下面这两句效果一样</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">DISTINCT</span>(sex),<span class="keyword">name</span> <span class="keyword">from</span> my_student; </span><br><span class="line"><span class="keyword">select</span> <span class="keyword">DISTINCT</span> sex,<span class="keyword">name</span> <span class="keyword">from</span> my_student;</span><br></pre></td></tr></table></figure><h5 id="where"><a href="#where" class="headerlink" title="where"></a>where</h5><p>where是唯一一个从磁盘开始拿数据的时候就开始进行判断的条件，从磁盘取出一条记录，开始进行where判断，判断结果如果成立，那么取出结果保存到内存，否则放弃。</p><p>注意：</p><p><font color=brown>这里提到了是取出一条数据，即读数据的方式是逐行，那么就可以理解了为什么where后面不能接分组函数了，因为分组函数的前提是分组了，即使后面没有使用group by子句，也是将整张表作为一个组来进行运算的。</font></p><h5 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h5><p>分组子句，group by子句主要的作用是分组，从而进行统计操作，而不是为了展示（展示的时候，只会展示分组记录的第一条记录），分组时，一般会结合使用count（）、max（）、min（）、avg（）、sum（）函数。</p><p>例如：<strong>单分组</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> c_id,<span class="keyword">count</span>(*),<span class="keyword">max</span>(height),<span class="keyword">min</span>(height),<span class="keyword">avg</span>(height),<span class="keyword">sum</span>(age) <span class="keyword">from</span> my_studentgroup <span class="keyword">by</span> c_id ;</span><br></pre></td></tr></table></figure><p>sql语句的意思是：my_student表以c_id进行分组，然后显示分组后的每组的c_id名称、每组的总数、每组的最高、最低、平均身高和每组的年龄总和。</p><hr><p>例如：<strong>多分组</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> c_id,sex,<span class="keyword">count</span>(*),<span class="keyword">max</span>(height),<span class="keyword">min</span>(height),<span class="keyword">avg</span>(height),<span class="keyword">sum</span>(age)<span class="keyword">from</span> my_student <span class="keyword">group</span> <span class="keyword">by</span> c_id ,sex;</span><br></pre></td></tr></table></figure><p>表示的含义是，对整个表先按照c_id进行分组，然后在此分组的基础之上，然后每组再按照sex,进行分组。</p><hr><p>例如：<strong>多字段分组（加上显示每组的某一字段的所有数据）</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> c_id,sex,<span class="keyword">count</span>(*),<span class="keyword">max</span>(height),<span class="keyword">min</span>(height),<span class="keyword">avg</span>(height),<span class="keyword">sum</span>(age) ,<span class="keyword">GROUP_CONCAT</span>(<span class="keyword">name</span>)<span class="keyword">from</span> my_student <span class="keyword">group</span> <span class="keyword">by</span> c_id ,sex;</span><br></pre></td></tr></table></figure><h5 id="having"><a href="#having" class="headerlink" title="having"></a>having</h5><p>having的作用类同where，而且having能做几乎所有where能做的事情，而where却不能做having能做的很多事情，主要是因为where只能在磁盘提取数据的时候对数据进行操作；而在内存中对数据进行group by分组之后的结果进行处理，只能通过having。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> c_id,<span class="keyword">count</span>(*),<span class="keyword">max</span>(height),<span class="keyword">min</span>(height),<span class="keyword">avg</span>(height),<span class="keyword">sum</span>(age) <span class="keyword">from</span> my_studentgroup <span class="keyword">by</span> c_id <span class="keyword">having</span> <span class="keyword">COUNT</span>(*) &gt;= <span class="number">3</span>;</span><br></pre></td></tr></table></figure><h5 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h5><p>对数据进行排序操作，根据某个字段进行升序或者降序排序。（进行多字段排序的时候，先根据某一字段进行潘旭，然后在排序好的内部再按照某字段进行排序）</p><p><strong>单个字段的排序：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> my_student <span class="keyword">order</span> <span class="keyword">by</span> c_id;</span><br></pre></td></tr></table></figure><p><strong>多个字段的排序：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> my_student <span class="keyword">order</span> <span class="keyword">by</span> c_id,sex;</span><br></pre></td></tr></table></figure><h5 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h5><p>限制结果的数量。Limit 偏移量  记录条数;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * frommy_student <span class="keyword">limit</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * frommy_student <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">3</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL基础概念</title>
      <link href="/2019/07/02/SQL%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
      <url>/2019/07/02/SQL%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h5 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h5><p>DQL（数据查询语言）：查询语句，凡是select都是DQL</p><p>DML（数据操作语言）：insert delete update，对表中的数据进行增删改</p><p>DDL（数据定义语言）：create drop alter，对表的结构进行增删改</p><p>TCL（事物控制语言）：commit提交事务，rollback回滚事务</p><p>DCL（数据控制语言）：grant授权，revoke撤销权限</p><h5 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h5><p>登录 <code>mysql -uroot -p密码</code></p><p>查看 <code>show databases</code></p><p>建数据库 <code>create database test</code></p><p>使用数据库 <code>use test</code></p><p>查看表 <code>show tables</code></p><p><font color=brown>批量导入数据 <code>source xx.sql</code>脚本文件</font></p><h5 id="查看数据库中的表"><a href="#查看数据库中的表" class="headerlink" title="查看数据库中的表"></a>查看数据库中的表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span><span class="comment">#查看当前数据库</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span> <span class="keyword">from</span> 数据库名<span class="comment">#查看其它数据库表</span></span><br></pre></td></tr></table></figure><h5 id="查看建表语句"><a href="#查看建表语句" class="headerlink" title="查看建表语句"></a>查看建表语句</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名</span><br></pre></td></tr></table></figure><h5 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc 表名<span class="comment">#describe</span></span><br></pre></td></tr></table></figure><h5 id="查看数据库版本"><a href="#查看数据库版本" class="headerlink" title="查看数据库版本"></a>查看数据库版本</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">version</span>();</span><br></pre></td></tr></table></figure><h5 id="查看当前使用的数据库"><a href="#查看当前使用的数据库" class="headerlink" title="查看当前使用的数据库"></a>查看当前使用的数据库</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">database</span>();</span><br></pre></td></tr></table></figure><h5 id="退出命令"><a href="#退出命令" class="headerlink" title="退出命令"></a>退出命令</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\c</span><br></pre></td></tr></table></figure><h5 id="退出mysql"><a href="#退出mysql" class="headerlink" title="退出mysql"></a>退出mysql</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><p>#####　简单DQL语句</p><p><font color=brown>sql语句以分号结尾，且不区分大小写</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名<span class="number">1</span>,字段名<span class="number">2</span>,字段名<span class="number">3</span>,字段名n <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><p>查询所有数据（但是不建议使用，命令执行时需要将星号翻译成字段名再查询，效率低）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><h5 id="字段可以做数学运算"><a href="#字段可以做数学运算" class="headerlink" title="字段可以做数学运算"></a>字段可以做数学运算</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sal*<span class="number">3</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><h5 id="查询结果字段的重命名"><a href="#查询结果字段的重命名" class="headerlink" title="查询结果字段的重命名"></a>查询结果字段的重命名</h5><p><font color=brown>标准SQL语句中，字符串要求使用单引号括起来</font></p><p><font color=brown> as可省略</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sal*<span class="number">3</span> <span class="keyword">as</span> <span class="string">'总价格'</span>　<span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><h5 id="SQL将空值nul输出为0"><a href="#SQL将空值nul输出为0" class="headerlink" title="SQL将空值nul输出为0"></a>SQL将空值nul输出为0</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SqlServer： isnull(字段,0)</span><br><span class="line">oracle: nvl(字段,0)</span><br><span class="line">access: iif(isnull(字段),0,字段)</span><br><span class="line">mysql: ifnull(字段,0);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux密码重置</title>
      <link href="/2019/06/30/Linux%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE/"/>
      <url>/2019/06/30/Linux%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天看到了一篇写如何破解Linux密码的文章，刚开始还不信，怎么会那么简单就可以破解，没想到真的可以。至少在centos和ubuntu上我实验确实是可以破解（是在不需要知道原密码的情况下直接破解）。所以这里就简单做个笔记了，在忘记了系统密码时还是非常有用的啦。</p></blockquote><hr><p>当然了，实验的前提是使用grub来启动系统的，而我使用的refind则不知道怎么进入编辑模式，所以是在虚拟机下实验的。</p><h5 id="方法一：rd-break"><a href="#方法一：rd-break" class="headerlink" title="方法一：rd.break"></a>方法一：rd.break</h5><p>rd：ramdisk，the initial ramdisk(initrd) environment.</p><ol><li><p>在系统进入grub菜单时，在需要重置密码的选项上按 <code>e</code> 进入编辑模式</p></li><li><p>在if….fi语句的下一行按<code>end</code>来到行的末尾，并在末尾添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rd.break</span><br></pre></td></tr></table></figure></li><li><p>按  <code>ctrl+x</code> 进入shell</p></li><li><p>重新挂载系统并赋予读写权限（<code>ls</code>查看系统跟目录为 <code>/sysroot</code> 所以需要挂载它）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -o remount,rw /sysroot</span><br></pre></td></tr></table></figure></li><li><p>切换到 <code>root</code>  目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chroot /sysroot</span><br></pre></td></tr></table></figure></li><li><p>重置密码</p><p>重置root密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure><p>或者可以重置其它用户密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd 用户名</span><br></pre></td></tr></table></figure></li><li><p>让 <code>selinux</code> 生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch /.autorelabel</span><br></pre></td></tr></table></figure></li><li><p>退出重启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit &amp;&amp; reboot</span><br></pre></td></tr></table></figure></li></ol><hr><h5 id="方法二：init"><a href="#方法二：init" class="headerlink" title="方法二：init"></a>方法二：init</h5><p>init：initial environment.</p><ol><li><p>在系统进入grub菜单时，在需要重置密码的选项上按 <code>e</code> 进入编辑模式</p></li><li><p>在if….fi语句的下一行按<code>end</code>来到行的末尾，并在末尾添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">init /bin/sh#当然了也可以换成别的shell，比如bash</span><br></pre></td></tr></table></figure></li><li><p>按  <code>ctrl+x</code> 进入shell</p></li><li><p>重新挂载系统并赋予读写权限（<code>ls</code>查看系统跟目录为 <code>/</code> 所以需要挂载它）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -o remount,rw /</span><br></pre></td></tr></table></figure></li><li><p>重置密码（由于是根目录所以不需要切换）</p><p>重置root密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure><p>或者可以重置其它用户密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd 用户名</span><br></pre></td></tr></table></figure></li><li><p>让 <code>selinux</code> 生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch /.autorelabel</span><br></pre></td></tr></table></figure></li><li><p>进入系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec /sbin/init</span><br></pre></td></tr></table></figure><p>或者重启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec /sbin/reboot</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> centos </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux下系统信息查看</title>
      <link href="/2019/06/26/linux%E4%B8%8B%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF%E6%9F%A5%E7%9C%8B/"/>
      <url>/2019/06/26/linux%E4%B8%8B%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF%E6%9F%A5%E7%9C%8B/</url>
      
        <content type="html"><![CDATA[<p>查看Linux系统信息</p><hr><h4 id="查看系统版本"><a href="#查看系统版本" class="headerlink" title="查看系统版本"></a>查看系统版本</h4><p>适用于centos</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/redhat-release</span><br></pre></td></tr></table></figure><p>适用于其他发行版</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lsb_realse -a</span><br><span class="line">或者</span><br><span class="line">cat /etc/issue</span><br></pre></td></tr></table></figure><h4 id="查看内核版本"><a href="#查看内核版本" class="headerlink" title="查看内核版本"></a>查看内核版本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br><span class="line">或者</span><br><span class="line">cat /proc/version</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos下lnmp安装</title>
      <link href="/2019/06/26/centos%E4%B8%8Blnmp%E5%AE%89%E8%A3%85/"/>
      <url>/2019/06/26/centos%E4%B8%8Blnmp%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<blockquote><p>CentOS Linux 7.6安装lnmp</p></blockquote><hr><h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><p>关闭selinux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0#临时</span><br><span class="line"></span><br><span class="line">vim /etc/selinux/config</span><br><span class="line">seleniux=disabled#永久</span><br></pre></td></tr></table></figure><p>关闭firewalld</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld#临时</span><br><span class="line">systemctl disable firewalld#永久</span><br></pre></td></tr></table></figure><h4 id="安装nginx源"><a href="#安装nginx源" class="headerlink" title="安装nginx源"></a>安装nginx源</h4><p>默认yum仓库没有nginx包，添加包含nginx的源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br></pre></td></tr></table></figure><h4 id="安装lnmp"><a href="#安装lnmp" class="headerlink" title="安装lnmp"></a>安装lnmp</h4><p>linx+nginx+mariadb+php（linux操作系统+nginx网页服务器+mariadb关系型数据库+php动态解释型语言）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx mariadb mariadb-server php php-fpm php-mysql</span><br></pre></td></tr></table></figure><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx</span><br><span class="line">systemctl start mariadb</span><br><span class="line">systemctl start php-fpm</span><br></pre></td></tr></table></figure><h4 id="将服务设为开机启动"><a href="#将服务设为开机启动" class="headerlink" title="将服务设为开机启动"></a>将服务设为开机启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable nginx</span><br><span class="line">systemctl enable mariadb</span><br><span class="line">systemctl enable php-fpm</span><br></pre></td></tr></table></figure><h4 id="测试nginx是否启动成功"><a href="#测试nginx是否启动成功" class="headerlink" title="测试nginx是否启动成功"></a>测试nginx是否启动成功</h4><p>浏览器输入ip地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost</span><br></pre></td></tr></table></figure><h4 id="测试php是否启动成功"><a href="#测试php是否启动成功" class="headerlink" title="测试php是否启动成功"></a>测试php是否启动成功</h4><p><code>/usr/share/nginx/html</code>下新建一个<code>index.php</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch /usr/share/nginx/html/index.php</span><br></pre></td></tr></table></figure><p>并添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这样仍然是访问不了的，需要配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>在server中的location下面添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">        root            html;</span><br><span class="line">        fastcgi_pass    127.0.0.1:9000;</span><br><span class="line">        fastcgi_index   index.php;</span><br><span class="line">        fastcgi_param   SCRIPT_FILENAME /usr/share/nginx/html$fastcgi_script_name;</span><br><span class="line">        include         fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>重启服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx php-fpm</span><br></pre></td></tr></table></figure><p>然后访问就可以了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip/index.php</span><br></pre></td></tr></table></figure><h4 id="中文支持"><a href="#中文支持" class="headerlink" title="中文支持"></a>中文支持</h4><p>修改nginx首页</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure><p>删除所有并添加中文</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;hello world&lt;/h1&gt;</span><br><span class="line">&lt;h3&gt;这是nginx的首页&lt;/h3&gt;</span><br></pre></td></tr></table></figure><hr><p>配置中文支持</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>在server下面添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">charsetutf-8;</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx php-fpm</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装基础系统之后</title>
      <link href="/2019/06/22/%E5%AE%89%E8%A3%85%E5%9F%BA%E7%A1%80%E7%B3%BB%E7%BB%9F%E4%B9%8B%E5%90%8E/"/>
      <url>/2019/06/22/%E5%AE%89%E8%A3%85%E5%9F%BA%E7%A1%80%E7%B3%BB%E7%BB%9F%E4%B9%8B%E5%90%8E/</url>
      
        <content type="html"><![CDATA[<h4 id="1-检测win系统"><a href="#1-检测win系统" class="headerlink" title="1.检测win系统"></a>1.检测win系统</h4><p>如果第一次安装grub后检测不到win系统，再运行一次这个命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub-mkconfig -o &#x2F;boot&#x2F;grub&#x2F;grub.cfg</span><br></pre></td></tr></table></figure><h4 id="2-wifi连接"><a href="#2-wifi连接" class="headerlink" title="2.wifi连接"></a>2.wifi连接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wifi-menu</span><br></pre></td></tr></table></figure><h4 id="3-用户与组"><a href="#3-用户与组" class="headerlink" title="3.用户与组"></a>3.用户与组</h4><p>可以选择将用户加入<code>wheel</code>组，因为系统内置这个组。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd -m -G wheel -s /bin/bash 用户名</span><br><span class="line">passwd 用户名</span><br></pre></td></tr></table></figure><hr><p>但是我想使用<code>sudo</code>组，系统没有内置这个组，先添加这个组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd sudo</span><br></pre></td></tr></table></figure><p>添加用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -g sudo -s /bin/bash -m 用户名</span><br></pre></td></tr></table></figure><p><code>-g</code>是将sudo组作为主组，<code>-G</code>是将wheel组作为附属组</p><hr><p>将用户从某个组中移除:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpasswd -d username groupname</span><br></pre></td></tr></table></figure><hr><p>将用户加入某个组:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpasswd -a username groupname</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -g groupname username</span><br></pre></td></tr></table></figure><h4 id="4-设置组的权限"><a href="#4-设置组的权限" class="headerlink" title="4.设置组的权限"></a>4.设置组的权限</h4><p>  这样加入之后，用户仍然使用不了<code>sudo</code>命令，因为没有设置完</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure><p>取消<code>wheel</code>或者<code>sudo</code>组的注释</p><h4 id="5-安装显示服务"><a href="#5-安装显示服务" class="headerlink" title="5.安装显示服务"></a>5.安装显示服务</h4><p>可以选择xorg或者wayland。现在wayland支持度已经不错了，比如gnome和kde就是默认使用wayland的。</p><h5 id="可以安装xorg"><a href="#可以安装xorg" class="headerlink" title="可以安装xorg"></a>可以安装xorg</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S xorg</span><br></pre></td></tr></table></figure><h5 id="或者安装wayland配合gnome用"><a href="#或者安装wayland配合gnome用" class="headerlink" title="或者安装wayland配合gnome用"></a>或者安装wayland配合gnome用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S wayland</span><br></pre></td></tr></table></figure><h4 id="6-安装显卡驱动"><a href="#6-安装显卡驱动" class="headerlink" title="6.安装显卡驱动"></a>6.<a href="https://wiki.archlinux.org/index.php/Xorg#Driver_installation" target="_blank" rel="noopener">安装显卡驱动</a></h4><h5 id="inter显卡驱动"><a href="#inter显卡驱动" class="headerlink" title="inter显卡驱动"></a>inter显卡驱动</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S xf86-video-intel (intel driver)</span><br></pre></td></tr></table></figure><h5 id="nvida显卡驱动"><a href="#nvida显卡驱动" class="headerlink" title="nvida显卡驱动"></a>nvida显卡驱动</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S xf86-video-nouveau (nvidia driver)</span><br></pre></td></tr></table></figure><h5 id="普通显卡驱动"><a href="#普通显卡驱动" class="headerlink" title="普通显卡驱动"></a>普通显卡驱动</h5><p>比较旧的硬件安装这个驱动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S xf86-video-vesa (common deriver)</span><br></pre></td></tr></table></figure><h4 id="7-安装声卡驱动"><a href="#7-安装声卡驱动" class="headerlink" title="7.安装声卡驱动"></a>7.安装声卡驱动</h4><p> (include alsamixer and amixer(a shell command tool))</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S alsa-utils</span><br></pre></td></tr></table></figure><hr><blockquote><p>这里就有很多选择了，可以只安装窗口管理器（节约系统资源），也可以安装桌面环境（集成度高，开箱即用的这种）。可以体验一下无限种可能的感觉</p></blockquote><h4 id="安装窗口管理器（WM-window-manager）"><a href="#安装窗口管理器（WM-window-manager）" class="headerlink" title="安装窗口管理器（WM window manager）"></a>安装窗口管理器（WM window manager）</h4><p>1.1安装平铺窗口管理器，这个安装配置好了之后很好用的。当然了，配置过程相当费时间(我喜欢的组合是 xmonad and xmobar plus dmenu)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pacman -S xmonad</span><br><span class="line">pacman -S xmobar</span><br><span class="line">pacman -S dmenu</span><br></pre></td></tr></table></figure><p>1.2.为了能够使用startx来进入窗口管理器需要安装基础的软件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pacman -S xorg-xinit # (get the command startx)</span><br><span class="line">pacman -S xterm      #(when we type startx then this is important for that .xinitrc</span><br></pre></td></tr></table></figure><p>  use xterm by default.and it can be changed by urxvt )<br><code># pacman -S rxvt-unioncode</code>  (i prefer this one for it can show chinese)</p><p>1.3.然后还要在文件里配置一下，才可以使用startx进入窗口管理器xmond</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp &#x2F;etc&#x2F;X11&#x2F;xinit&#x2F;xinitrc ~&#x2F;.xinitrc</span><br></pre></td></tr></table></figure><p>然后添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec xmonad to .xinitrc</span><br></pre></td></tr></table></figure><p>现在就可以进入xmond的世界了，不过没有配置的xmond是你不敢想象的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startx</span><br></pre></td></tr></table></figure><p>   如果想开机直接进入xmond，而不用每次都敲startx，那么修改一下~/.bash_profile</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim .bash_profile</span><br></pre></td></tr></table></figure><p>  添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if [ -z &quot;$DISPLAY&quot; ] &amp;&amp; [ -n &quot;$XDG_VTNR&quot; ] &amp;&amp; [ &quot;$XDG_VTNR&quot; -eq 1 ]; then  exec startxfi</span><br></pre></td></tr></table></figure><p>好了，一个完整系统已经安装好了。进入xmond后的一些小的配置</p><p>2.1 make super key instead of capslock<br><code>#xmodmap -pke</code>  //show key map and find capslock is 66 super_l is 133 super_r is 134<br><code>#touch .xmodmap</code> //used to set settings<br>  then add this command like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">!delete fake super key</span><br><span class="line">keycode 133 &#x3D;</span><br><span class="line">keycode 134 &#x3D;</span><br><span class="line">!change Caps_Lock to Super_L</span><br><span class="line">keycode 66 &#x3D; Super_L</span><br><span class="line">!clear lock</span><br><span class="line">clear lock</span><br><span class="line">!clear all mod_s with Super key</span><br><span class="line">clear mod4</span><br><span class="line">! add our new Super key</span><br><span class="line">add mod4 &#x3D; Super_L</span><br></pre></td></tr></table></figure><p>  then run command to make it work<br><code>#xmodmap ./.xmodmap</code><br>  after that we can add this command (xmodmap ~/.xmodmap &amp;) to ~/.xinitrc ,then it will work every       time we log into x window</p><p>2.2in order to use xbacklight to adjust backlight we should install xf86-video-intel<br><code>#pacman -S xf86-video-intel</code><br>and then run command like this to adjust screen light<br><code>#xbacklight -set 40</code></p><h4 id="安装桌面环境（DE-desktop-environment）"><a href="#安装桌面环境（DE-desktop-environment）" class="headerlink" title="安装桌面环境（DE desktop environment）"></a>安装桌面环境（DE desktop environment）</h4><p>安装gnome桌面环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S gnome</span><br></pre></td></tr></table></figure><p>安装额外的一些包，包含了许多有用的软件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S gnome-extra</span><br></pre></td></tr></table></figure><p>安装logoin管理器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pacman -S gdm</span><br><span class="line">systemctl enable gdm  #开启gdm服务，开机自启</span><br></pre></td></tr></table></figure><p>安装<a href="https://www.archlinux.org/packages/?name=xorg-server-xwayland" target="_blank" rel="noopener">xorg-server-xwayland</a>来启动某些不支持wayland的应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S xorg-server-xwayland</span><br></pre></td></tr></table></figure><p>安装gnome的个性化设置软件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S gnome-tweak</span><br></pre></td></tr></table></figure><p>（可选）2.6启动wayland服务，在<code>.bash_profile</code>中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if [[ -z $DISPLAY ]] &amp;&amp; [[ $(tty) &#x3D; &#x2F;dev&#x2F;tty1 ]] &amp;&amp; [[ -z $XDG_SESSION_TYPE ]]; then</span><br><span class="line">XDG_SESSION_TYPE&#x3D;wayland exec dbus-run-session gnome-session</span><br><span class="line">   fi</span><br></pre></td></tr></table></figure><p>用了许多桌面环境，我还是比较喜欢gnome的，和windows比起来，它所占用的内存其实很小的，开机才1G而已</p><hr>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>autojump</title>
      <link href="/2019/05/11/autojump/"/>
      <url>/2019/05/11/autojump/</url>
      
        <content type="html"><![CDATA[<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>linux中最常用的命令莫过于 <code>cd</code> 与 <code>ls</code> 了，使用习惯了觉得速度也还可以，但是今天发现另外一个好用的命令 <code>autojump</code></p><p><a href="https://github.com/wting/autojump" target="_blank" rel="noopener">github</a>上是这样描述它的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A cd command that learns - easily navigate directories from the command line</span><br></pre></td></tr></table></figure><p>也就是说这个命令具备学习能力，使我们的移动更加方便：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">autojump is a faster way to navigate your filesystem. It works by maintaining a database of the directories you use the most from the command line.</span><br></pre></td></tr></table></figure><p>直白点说就是可以不一级一级的进目录，而是可以指定目录跳转</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S autojump</span><br></pre></td></tr></table></figure><h4 id="启用"><a href="#启用" class="headerlink" title="启用"></a>启用</h4><p>找到它的位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis autojump</span><br></pre></td></tr></table></figure><p>由于我使用的是zsh这个shell，使用前需要先加载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /usr/share/autojump/autojump.zsh</span><br></pre></td></tr></table></figure><p>为了避免我们下次想使用这个命令的时候还要加载，把这句话加入到 <code>.zshrc</code> 文件中 （使用bash的加入到 <code>.bashrc</code>中）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo source /usr/share/autojump/autojump.zsh ~/.zshrc</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo source /usr/share/autojump/autojump.zsh ~/.bashrc</span><br></pre></td></tr></table></figure><p>这样下次就不需要再手动加载了</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>既然是为了方便我们的日常操作，那么命令就不可能有这么一长串，对的，就是： <code>j</code>+目录</p><p><strong>注意：</strong>首次使用时是不能跳转的，因为我们还没有在目录间移动，它呢还没有将我们的操作录入到数据库中</p><p>1.跳转到指定目录下（可以跳级）：</p><p>例如跳转Downloads目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">j Downloads</span><br></pre></td></tr></table></figure><p>2.跳转到子目录下（支持模糊匹配，即不需要输入完整目录名）：</p><p>例如跳转到家目录下的Picture目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jc Pic</span><br></pre></td></tr></table></figure><p>3.自身不跳转，而是使用资源管理器（文件管理器）去打开指定目录，发现也支持模糊匹配</p><p>例如我现在在家目录下，需要打开/opt目录查看文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jo opt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vsftpd</title>
      <link href="/2019/05/10/vsftpd/"/>
      <url>/2019/05/10/vsftpd/</url>
      
        <content type="html"><![CDATA[<hr><h4 id="为什么要安装vsftpd"><a href="#为什么要安装vsftpd" class="headerlink" title="为什么要安装vsftpd"></a>为什么要安装vsftpd</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">同一局域网内，没有网络也可以传输文件</span><br><span class="line"></span><br><span class="line">不需要U盘</span><br><span class="line"></span><br><span class="line">速度超快</span><br><span class="line"></span><br><span class="line">安全稳定</span><br></pre></td></tr></table></figure><hr><h4 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp是一种文件传输协议，基于这种协议的有许多ftp软件。ftp软件分为服务器：vsftpd 端和客户端：ftp</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ftp使用的端口默认有20,21。所以要保证这两个端口没有被防火墙拦截，而且没有被其他软件占用</span><br><span class="line">20端口用来传输数据</span><br><span class="line">21端口用来服务器与客户端之间传输指令</span><br></pre></td></tr></table></figure><hr><h4 id="简单安装使用"><a href="#简单安装使用" class="headerlink" title="简单安装使用"></a>简单安装使用</h4><p>我安装的是vsftpd</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install vsftpd -y</span><br></pre></td></tr></table></figure><p>启动vsftpd服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service vsftpd start</span><br></pre></td></tr></table></figure><p>查看服务器ip</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure><p>现在只要在局域网内，就可以通过浏览器访问了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">浏览器输入：ftp://ip</span><br></pre></td></tr></table></figure><p>如果你访问不了，那么先临时将防火墙关闭</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service iptables stop</span><br><span class="line">service firewalld stop</span><br></pre></td></tr></table></figure><p>可以看到这里有个文件夹：pub，这个pub在服务器的那个位置？</p><p>查看这个pub在位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name pub</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以看到位置在：/var/pub</span><br></pre></td></tr></table></figure><p>以后我们就可以将需要共享的文件放入这里，其他电脑就可以下载了</p><hr><h4 id="禁止匿名用户访问，指定用户访问"><a href="#禁止匿名用户访问，指定用户访问" class="headerlink" title="禁止匿名用户访问，指定用户访问"></a>禁止匿名用户访问，指定用户访问</h4><p>以上是简单的配置，接下来就进行个性化配置</p><p>这样设置之后我们发现其它人只要在局域网内都可以访问，是不安全的，所以我们想指定用户去访问（输入用户名和密码）</p><p>大部分配置文件都在 <code>/etc/vsftpd/vsftpd.conf</code> 这个文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anonymous_enable=NO#禁止匿名用户访问</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anon_upload_enable=NO#禁止匿名用户上传</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anon_mkdir_write_enable=NO#取消匿名写入权限</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">local_enable=YES#允许本地用户登录，也就是说只要是服务器端的用户都可以访问（包含root和/home下的user）</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">write_enable=YES#给用户写入权限</span><br></pre></td></tr></table></figure><p>这样设置之后可能使用用户和密码仍然访问不了，所以就需要了解 <code>/etc/vsftpd</code> 下面其他的两个配置文件的作用了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftpusers#这里设置黑名单 加入这里的用户都无法访问</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user_list#控制配置，这个既可以是黑名单，也可以是白名单</span><br><span class="line"></span><br><span class="line">当vsftpd.conf中 userlist_enable=YES 时，为黑名单，加入这里的用户无法访问</span><br><span class="line">当vsftpd.conf中 userlist_enable=NO 时，为白名单，加入这里的用户才能访问</span><br></pre></td></tr></table></figure><p>所以我们需要在 <code>vsftpd.conf</code> 中将 <code>userlist_enable</code>设为 <code>NO</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userlist_enable=NO</span><br></pre></td></tr></table></figure><p>同时在 <code>user_list</code> 中加入可以访问的用户名</p><p>以及确保 <code>ftpusers</code> 中没需要访问的用户名</p><hr><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p>开启被动模式</p><p>vsftpd默认是主动模式，也就是说数据连接的请求是由服务器发起的，由于防火墙的原因，这个连接请求可能被防火墙过滤掉了。所以才有了被动模式，被动模式中连接请求是有客户端发起的，而服务器端配置了允许固定范围ip的请求，这样保证了连接的正常。</p><p>在 <code>vsftpd.conf</code> 中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pasv_enable&#x3D;YES</span><br><span class="line">pasv_min_port&#x3D;30000</span><br><span class="line">pasv_max_port&#x3D;30999</span><br></pre></td></tr></table></figure><p>这样服务器端就算配置好了。但是还没有完，这个pasv模式还需要客户端发送一条命令</p><p>其实在这之前一直都没有涉及到真正的客户端，只是使用浏览器访问了一个地址而已，真正使用客户端，是使用命令 <code>ftp 服务器ip</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp ip#然后输入用户名，密码来访问</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passive#开启被动模式</span><br></pre></td></tr></table></figure><hr><h4 id="ftp客户端使用"><a href="#ftp客户端使用" class="headerlink" title="ftp客户端使用"></a>ftp客户端使用</h4><p>vsftpd安装时默认就已经创建了一个匿名用户 <code>ftp</code> ，所以我们可以只输入用户名，不输入密码登录ftp</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ftp ip#登录</span><br><span class="line">ftp#输入用户名</span><br></pre></td></tr></table></figure><p>当然了，在我们禁止匿名用户之后就需要使用设置的用户去登录了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp 用户名:密码@ip</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">help#查看所有命令</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">put#上传</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get#下载</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir #创建文件夹</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd#查看当前目录</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls#列出目录下的文件</span><br></pre></td></tr></table></figure><p>在命令前面加上 <code>l</code> 表示在本机操作（local）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lcd#本机目录中移动</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lpwd#本机当前目录</span><br></pre></td></tr></table></figure><hr><h4 id="错误解决"><a href="#错误解决" class="headerlink" title="错误解决"></a>错误解决</h4><p>如果用户登录后创建文件夹出现：550 Create directory operation failed错误</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/selinux/config</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure><hr><h4 id="开心啊"><a href="#开心啊" class="headerlink" title="开心啊"></a>开心啊</h4><p>老师让我讲linux上的vsftpd，我在archlinux上照着教程做，发现在浏览器中始终无法访问ftp服务器，都差点崩溃了。明明是照着教程做的，为什么就是不行呢。后来我终于放弃了，转到centos下面去弄，照着教程，慢慢配置，发现也没差啊，最后我差点怀疑是archlinux有问题。确实，它和大多数教程上的都不一样，安装完成之后就只有一个配置文件 <code>/etc/vsftpd.conf</code> 你说气不气。</p><p>不过坚持的人总有回报，今天google到了这个错误的原因，那就是这是archlinux上的一个<a href="https://wiki.archlinux.org/index.php/Very_Secure_FTP_Daemon#vsftpd:_Error_421_Service_not_available,_remote_server_has_closed_connection" target="_blank" rel="noopener">bug</a>，所以不能怪我咯</p><p>错误如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">500 OOPS: 421 Service not available, remote server has closed connection</span><br></pre></td></tr></table></figure><p>解决办法：在 <code>/etc/vsftpd.conf</code> 中添加一行配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seccomp_sandbox=NO</span><br></pre></td></tr></table></figure><p>然后重启一下vsftp服务就好了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart vsftpd</span><br></pre></td></tr></table></figure><p>那么什么是seccomp？<a href="https://fr.wikipedia.org/wiki/Seccomp" target="_blank" rel="noopener">维基百科</a>这么解释的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seccomp（安全计算模式的简称）是Linux内核的计算机安全功能。它被集成到2.6.12版本的主Linux内核分支中，该分支于2005年3月8日发布1。</span><br></pre></td></tr></table></figure><p>而vsftpd在版本3.0.0之后就开始使用它了，这就是bug产生的原因？</p><hr><h4 id="学这个vsftpd的过程真的相当艰难"><a href="#学这个vsftpd的过程真的相当艰难" class="headerlink" title="学这个vsftpd的过程真的相当艰难"></a>学这个vsftpd的过程真的相当艰难</h4><p>我想如果我一开始就在centos上面来安装的话，那么就不会有这么多的问题了</p><p>首先我觉得很疑惑的是ftp不是一个协议吗，为什么我电脑上输入ftp竟然进入了交互模式？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp同时也是ftp传输协议的一个客户端，取的名字相同而已</span><br></pre></td></tr></table></figure><p>然后是我明明安装的是vsftpd为什么可以启动ftpd这个服务？它和vsftpd有什么关系</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">安装gnome时默认就安装了一个组件 inetutils ，而它就包含了这个tftp，没错，它叫tftp也是一个ftp的server</span><br></pre></td></tr></table></figure><p>然后就是遇到了那个让人脑壳疼的bug</p><h4 id="疑问？"><a href="#疑问？" class="headerlink" title="疑问？"></a>疑问？</h4><p>1.作为日常使用，你觉得有必要设置个账号密码登录吗？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我觉得是没这个必要的，怎么简单怎么来</span><br></pre></td></tr></table></figure><p>2.如果你需要给别人分享一个很大的软件，你觉得有必要将那个软件复制到默认的 <code>/ser/ftp</code> 或者 <code>/var/ftp</code> 下吗？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">没这个必要，需要分享那个软件，就将那个软件所在的目录设置为别人访问的目录就好了</span><br></pre></td></tr></table></figure><p>设置也很简单，修改 <code>vsftpd.conf</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anon_root=要分享软件所在目录路径</span><br></pre></td></tr></table></figure><p>例如我要分享我家目录下的Downloads文件夹下的东西，就这么设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anon_root=/home/narcissus/Downloads/</span><br></pre></td></tr></table></figure><p>设置好了之后启动vsftpd服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start vsftpd#archlinux命令</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service vsftpd start#centos命令</span><br></pre></td></tr></table></figure><p>最后我们来看一下，它到底能有快，同一局域网下的测试，下载一个2.7GB的文件，平均速度为：100MB/s</p><p><a href="https://imgchr.com/i/E23iVA" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/10/E23iVA.png" alt="E23iVA.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> archlinux </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置用户环境变量</title>
      <link href="/2019/05/08/%E9%85%8D%E7%BD%AE%E7%94%A8%E6%88%B7%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
      <url>/2019/05/08/%E9%85%8D%E7%BD%AE%E7%94%A8%E6%88%B7%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="linux中下载软件后，配置用户环境变量，让软件在终端任意路径下可执行"><a href="#linux中下载软件后，配置用户环境变量，让软件在终端任意路径下可执行" class="headerlink" title="linux中下载软件后，配置用户环境变量，让软件在终端任意路径下可执行"></a>linux中下载软件后，配置用户环境变量，让软件在终端任意路径下可执行</h2><h3 id="解压软件"><a href="#解压软件" class="headerlink" title="解压软件"></a>解压软件</h3><h3 id="创建连接到软件"><a href="#创建连接到软件" class="headerlink" title="创建连接到软件"></a>创建连接到软件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.local/bin#一般用户软件放入到这个目录</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s 软件路径 软件名</span><br></pre></td></tr></table></figure><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH="$PATH=~/.local/bin"</span><br></pre></td></tr></table></figure><h3 id="让环境变量生效"><a href="#让环境变量生效" class="headerlink" title="让环境变量生效"></a>让环境变量生效</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>或者配置到本地shell配置文件中</p><p>如果使用的是bash：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>如果使用的是zsh：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure><p>添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH="$PATH=~/.local/bin"</span><br></pre></td></tr></table></figure><p>让环境变量生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><h3 id="最后查看环境变量是否配置成功"><a href="#最后查看环境变量是否配置成功" class="headerlink" title="最后查看环境变量是否配置成功"></a>最后查看环境变量是否配置成功</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>netstat</title>
      <link href="/2019/05/08/netstat/"/>
      <url>/2019/05/08/netstat/</url>
      
        <content type="html"><![CDATA[<h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><p>netstat是一个过气的查看端口的命令，我们所使用的也大概就是查看端口才用到它了吧</p><p>其实它的作用不止这些：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -r#查看网关、路由</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -i#查看网络接口名</span><br></pre></td></tr></table></figure><p>然后就是用来查端口的命令</p><p>指定连接状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-a#查看所有连接状态。默认为：connected</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-l#连接状态为listening，监听状态</span><br></pre></td></tr></table></figure><p>指定连接协议：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不指定时默认为所有协议</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-t#指定tcp协议</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-u#指定udp协议</span><br></pre></td></tr></table></figure><p>指定网络协议版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不指定时默认为ipv4和ipv6</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-6#指定为ipv6</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-4#指定为ipv4</span><br></pre></td></tr></table></figure><p>其它的部分：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-n#不解析域名</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-p#显示程序名</span><br></pre></td></tr></table></figure><p>如果仅仅只是使用这个命令，那么它是没有多大作用的，因为会打印出很多的信息。</p><p>而我们需要的是查找需要的部分，所以还需要 <code>grep</code> 这个命令</p><p><strong>指定程序名，查找端口</strong></p><p>例子：</p><p>查看ssh端口：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp | grep ssh --color</span><br></pre></td></tr></table></figure><p>由于ssh是使用tcp协议的，我们还可以加上 <code>-t</code>这个参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anpt | grep ssh --color</span><br></pre></td></tr></table></figure><p><strong>指定端口，查看是否被程序占用，被那个程序占用</strong></p><p>查看22端口是否被占用,如果找得到，说明被占用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -an | grep :22 --color</span><br></pre></td></tr></table></figure><p>查看22端口被那个程序占用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp |　grep :22 --color</span><br></pre></td></tr></table></figure><p>当然了，你也可以加上 <code>-l</code> 这个参数，指定是正在监听的状态</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux上打开windows的txt文件乱码</title>
      <link href="/2019/05/04/linux%E4%B8%8A%E6%89%93%E5%BC%80windows%E7%9A%84txt%E6%96%87%E4%BB%B6%E4%B9%B1%E7%A0%81/"/>
      <url>/2019/05/04/linux%E4%B8%8A%E6%89%93%E5%BC%80windows%E7%9A%84txt%E6%96%87%E4%BB%B6%E4%B9%B1%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="linux上打开windows的txt文件乱码"><a href="#linux上打开windows的txt文件乱码" class="headerlink" title="linux上打开windows的txt文件乱码"></a>linux上打开windows的txt文件乱码</h2><p>windows上默认是使用的gbk编码格式，然而linux设置的默认utf-8编码格式</p><p>之前有一个错误的想法:认为utf-8编码既然是国际通用的编码格式，支持各个国家的语言，那么就应该向下兼容gbk编码才对啊？其实不是这样的。如题，windows上的txt在linux上打开不就是乱码了吗</p><p>utf-8确实是支持所有的语言，但是它也是一种编码格式，只有你用了相同的编码格式，才能显示正常</p><p>乱码的本质是：<em>读取二进制的时候采用的编码和最初将字符转换成二进制时的编码不一致</em></p><p>其实各种编码都是独立的，并不存在兼容问题，你使用什么编码格式生成的文字，那就必须要使用这种编码格式才能正常显示。有两种方法可以正常显示</p><ol><li><p>可以将编辑器设置为支持这种编码格式</p><p>例如windows上gbk编码的txt，在utf-8编码的linux上要正常显示，可以将vim编辑器设置为支持gbk编码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.vimrc#修改vimrc配置文件</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set fileencodings=utf-8,gb18030,gbk#加入gbk支持</span><br></pre></td></tr></table></figure></li><li><p>使用更加彻底的解决方法，将gbk格式转换为utf-8，这样所有的编辑器打开都能正常显示</p><p>例如将gbk编码的1.txt转换为utf-8的2.txt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iconv -f gbk -t utf-8 1.txt -o 2.txt</span><br></pre></td></tr></table></figure></li></ol><h3 id="iconv语法："><a href="#iconv语法：" class="headerlink" title="iconv语法："></a>iconv语法：</h3><p><strong>iconv - convert text from one character encoding to another</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">inputfile输入文件如果不指定输入文件，那么读取标准输入</span><br><span class="line"></span><br><span class="line">outputfile输入文件如果不指定输出文件，那么写入标准输出</span><br><span class="line"></span><br><span class="line">-f原编码格式如果不指定原码格式，那么默认系统编码格式</span><br><span class="line"></span><br><span class="line">-t转换后的编码格式如果不指定输出编码格式，那么默认系统编码格式</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iconv [options] [-f from-encoding] [-t to-encoding] [inputfile] [-o] [outputfile]</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iconv -l#列出所有的编码格式</span><br><span class="line">iconv -c#忽略不能转化的字符</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>archlinux自动选择网速较快的源</title>
      <link href="/2019/05/04/archlinux%E8%87%AA%E5%8A%A8%E9%80%89%E6%8B%A9%E7%BD%91%E9%80%9F%E8%BE%83%E5%BF%AB%E7%9A%84%E6%BA%90/"/>
      <url>/2019/05/04/archlinux%E8%87%AA%E5%8A%A8%E9%80%89%E6%8B%A9%E7%BD%91%E9%80%9F%E8%BE%83%E5%BF%AB%E7%9A%84%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h2 id="archlinux自动选择网速较快的源"><a href="#archlinux自动选择网速较快的源" class="headerlink" title="archlinux自动选择网速较快的源"></a>archlinux自动选择网速较快的源</h2><h3 id="什么是reflector"><a href="#什么是reflector" class="headerlink" title="什么是reflector"></a>什么是reflector</h3><p><a href="http://xyne.archlinux.ca/projects/reflector/" target="_blank" rel="noopener">Reflector</a> is a script which can retrieve the latest mirror list from the <a href="https://www.archlinux.org/mirrors/status/" target="_blank" rel="noopener">MirrorStatus</a> page, filter the most up-to-date mirrors, sort them by speed and overwrite the file <code>/etc/pacman.d/mirrorlist</code>. </p><h3 id="安装reflector脚本"><a href="#安装reflector脚本" class="headerlink" title="安装reflector脚本"></a>安装reflector脚本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S reflector</span><br></pre></td></tr></table></figure><h3 id="命令运行"><a href="#命令运行" class="headerlink" title="命令运行"></a>命令运行</h3><p>首先备份之前的mirrorlist</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup</span><br></pre></td></tr></table></figure><p>选择https/http协议、位于中国、12小时同步的镜像，通过下载速度排序，写入到 <code>/etc/pacman.d/mirrorlist</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo reflector --verbose --country China --age 12 --protocol https --protocol http --sort rate --save /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>archlinux安装NVIDIA显卡驱动</title>
      <link href="/2019/05/03/archlinux%E5%AE%89%E8%A3%85NVIDIA%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/"/>
      <url>/2019/05/03/archlinux%E5%AE%89%E8%A3%85NVIDIA%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="archlinux安装NVIDIA显卡驱动"><a href="#archlinux安装NVIDIA显卡驱动" class="headerlink" title="archlinux安装NVIDIA显卡驱动"></a>archlinux安装NVIDIA显卡驱动</h3><p>安装驱动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S mesa#确保安装了这个基础显卡驱动</span><br><span class="line">sudo pacman -S nvidia#安装N卡驱动</span><br><span class="line">sudo pacman -S bumblebee#提供守护进程以及程序的主要安装包</span><br></pre></td></tr></table></figure><p>安装其他组件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S nvidia-setting#配置工具</span><br><span class="line">sudo pacman -S xorg-server-devel#nvidia-xconfig</span><br><span class="line">sudo pacman -S opencl-nvidia#提供opencl支持</span><br><span class="line">sudo pacman -S bbswitch#开启或者关闭显卡驱动</span><br></pre></td></tr></table></figure><p>将用户加入bumblebee组（必需的步骤）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gpasswd -a narcissus bumblebee</span><br></pre></td></tr></table></figure><p>将bumblebee设为开机启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable bumblebeed</span><br></pre></td></tr></table></figure><p>启动bumblebee,第一次安装之后启动没作用，重启之后才有用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start bumblebeed</span><br></pre></td></tr></table></figure><p>修改bumblebee配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/bumblebee/bumblebee.conf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Driver=nvidia#如果不指定会自动选择</span><br><span class="line"></span><br><span class="line">[driver-nvidia]</span><br><span class="line">PMMethod=bbswitch#指定电源管理</span><br></pre></td></tr></table></figure><h3 id="重启之后检测"><a href="#重启之后检测" class="headerlink" title="重启之后检测"></a>重启之后检测</h3><p>测试软件检测是否运行正常</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">optirun glxspheres64</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/05/03/EU7Jpj.png" alt="EU7Jpj.png"></p><p>命令行查看状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/05/03/EU7gj1.png" alt="EU7gj1.png"></p><h3 id="开启、关闭显卡"><a href="#开启、关闭显卡" class="headerlink" title="开启、关闭显卡"></a>开启、关闭显卡</h3><p>关闭</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tee /proc/acpi/bbswitch &lt;&lt;&lt; OFF</span><br></pre></td></tr></table></figure><p>开启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tee /proc/acpi/bbswitch &lt;&lt;&lt; ON</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基础操作</title>
      <link href="/2019/05/02/%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/05/02/%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<ul><li><p><strong>alt 搭配鼠标左、右、中键来对物体进行旋转、缩放、移动。中键在单窗口与四窗口间切换</strong></p></li><li><p><strong>shift+v 来对物体显示效果进行个性修改</strong><br><img src="https://upload-images.jianshu.io/upload_images/9937522-48c05ba42f802eef.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li></ul><ul><li><p><strong>backspace键来对前一步命令和当前命令的切换</strong></p></li><li><p><strong>w键 快速切换物体自身坐标轴与世界坐标轴</strong></p></li><li><p><strong>shift和alt键搭配左键的一些快捷操作</strong><br>shift指以十增长，alt指数字以0.1增长</p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9937522-ecc9ffbc5712e02b.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li><strong>调整过后需要恢复时按右键</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> c4d </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>excel函数if-countif</title>
      <link href="/2019/05/02/excel%E5%87%BD%E6%95%B0if-countif/"/>
      <url>/2019/05/02/excel%E5%87%BD%E6%95%B0if-countif/</url>
      
        <content type="html"><![CDATA[<blockquote><p>if用于判断，countif用于数数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if(logical_test,value_is_true,value_is_false)</span><br><span class="line">if（怎么样，则怎么样，否则怎么样）</span><br></pre></td></tr></table></figure><p>if中if的嵌套</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(logical_teat,value_is_ture,if(logical_is_true,value_is_true,value_is_false))</span><br></pre></td></tr></table></figure><p>if与and/or/not的配合使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IF(AND(Something is True, Something else is True), Value if True, Value if False)</span><br><span class="line"></span><br><span class="line">IF(OR(Something is True, Something else is True), Value if True, Value if False)</span><br><span class="line"></span><br><span class="line">IF(NOT(Something is True), Value if True, Value if False)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">countif()函数用于有条件的数数</span><br><span class="line">countif(区间，条件)</span><br></pre></td></tr></table></figure><blockquote><p>countif只能数小于15位的字符串<br>如果字符串值大于15位，则</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">countif(区间,值&amp;&quot;*&quot;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> excel </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>excel文本处理-数学函数</title>
      <link href="/2019/05/02/excel%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86-%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0/"/>
      <url>/2019/05/02/excel%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86-%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>left（）从左向右取</li><li>right（）从右向左取</li><li>mid（）从中间某一值向后开始取</li><li>find（）找某一个值所在的位置</li><li>len（）计算文本长度</li><li>lenb（）计算字节长度</li></ul></blockquote><p>如何提取数字和文本组合中的文本<br><img src="https://upload-images.jianshu.io/upload_images/9937522-86364fcd8efff9b8.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文本中字节长度减去文本长度等于文本长度</span><br></pre></td></tr></table></figure><hr><p>进位（四舍五入）</p><blockquote><ul><li>round（）</li><li>roundup（）</li><li>rounddown（）</li></ul></blockquote><blockquote><ul><li>mod（）计算余数</li><li>int（）计算整数</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> excel </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>excel数据有效性以及条件格式</title>
      <link href="/2019/05/02/excel%E6%95%B0%E6%8D%AE%E6%9C%89%E6%95%88%E6%80%A7%E4%BB%A5%E5%8F%8A%E6%9D%A1%E4%BB%B6%E6%A0%BC%E5%BC%8F/"/>
      <url>/2019/05/02/excel%E6%95%B0%E6%8D%AE%E6%9C%89%E6%95%88%E6%80%A7%E4%BB%A5%E5%8F%8A%E6%9D%A1%E4%BB%B6%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>由于这两点理解起来简单，所以简单写<br><img src="https://upload-images.jianshu.io/upload_images/9937522-949ab2c1e0e7f2b8.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>数据有效性即数据验证，它的作用是对单元格所能填写的值进行限定。</li></ul><hr><p><img src="https://upload-images.jianshu.io/upload_images/9937522-318b2a73e79faa2d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>条件格式作用是对数据进行分析，给满足条件的数据设定需要的格式。可以搭配切片器（筛选器）来对数据进行分类分析。</li></ul>]]></content>
      
      
      <categories>
          
          <category> excel </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>excel函数基础及相对-绝对引用</title>
      <link href="/2019/05/02/excel%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80%E5%8F%8A%E7%9B%B8%E5%AF%B9-%E7%BB%9D%E5%AF%B9%E5%BC%95%E7%94%A8/"/>
      <url>/2019/05/02/excel%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80%E5%8F%8A%E7%9B%B8%E5%AF%B9-%E7%BB%9D%E5%AF%B9%E5%BC%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 公式都是以等号开头</span><br><span class="line">2 算术运算符 +   -    *    &#x2F;    %    &amp;(连字符)     ^(乘方)</span><br><span class="line">3 判断 true&#x3D;1 false&#x3D;0</span><br><span class="line">4 单元格中文本的引用需要用双引号</span><br></pre></td></tr></table></figure><p>例如:<br>判断貂蝉那个技能具有无敌效果<br><img src="https://upload-images.jianshu.io/upload_images/9937522-2ee15e30d0fea0a7.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>怎么做呢？我们知道二技能是无敌的，所以我们就判断一下是不是二技能，如果是就是true 否则就是false<br><img src="https://upload-images.jianshu.io/upload_images/9937522-cc62b00adb5db60c.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>然后双击或者向下拉就是复制了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">为什么可以这样下拉就是复制了呢？这就是相对引用，相对引用指的总是左边的和上边的相对位置</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">绝对引用：指的就不是相对位置，而是固定位置，可以按快捷键F4来切换或者在引用前加$符号</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/9937522-9e8daad9e0c4133a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> excel </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>excel函数vlookup以及格式转换</title>
      <link href="/2019/05/02/excel%E5%87%BD%E6%95%B0vlookup%E4%BB%A5%E5%8F%8A%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
      <url>/2019/05/02/excel%E5%87%BD%E6%95%B0vlookup%E4%BB%A5%E5%8F%8A%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<ul><li><strong>vlookup语法</strong><blockquote><p>vlookup函数用来在一张表格中(或者跨表格)<strong>水平</strong>查找需要的数据<br><img src="https://upload-images.jianshu.io/upload_images/9937522-d465521a7939ec39.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>vlookup(查找值，查找区域，查找列，精确匹配0/模糊匹配1)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.凡是涉及到公式需要拖动（复制）时，都需要考虑查找区域的相对引用与绝对引用。</span><br><span class="line">2.跨表格引用时在选区时先点击另一张表的名称，然后选区，选区结束后必须先打逗号来结束选区的操作。</span><br><span class="line">3.模糊匹配数值时只会匹配小于等于自己的值。</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li><strong>vlookup使用通配符和格式转换</strong><blockquote><p>文本转数值  *1 或者   +0  或者   –<br>数值转文本     &amp;“”</p></blockquote></li></ul><p>如果是数字去查找文本格式的数字是找不到的，那么需要将数字变成文本，在数字后加   &amp;””   就会把数字当成文本处理</p><hr><ul><li><strong>使用isna函数处理数字格式引起的错误</strong></li></ul><p>如果查找的两边既有数字又有文本，那么我们需要用到两次查找，第一次按照数字格式查找一遍，然后用文本格式查找一遍。需要用到 <strong>if函数</strong> 和 <strong>isna函数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if(isna(数字查找),文本查找，数字查找)</span><br><span class="line">&#96;</span><br></pre></td></tr></table></figure><hr><ul><li><strong>hlookup函数用于竖着一列进行查找，和vlookup用法相同。</strong></li></ul><hr><ul><li><strong>vlookup函数只能从左向右查找，所以match函数与index函数的搭配使用使得查找更加灵活</strong></li></ul><hr><ul><li><strong>column函数用来查找列，row函数查找行</strong></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> excel </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>excel函数rank</title>
      <link href="/2019/05/02/excel%E5%87%BD%E6%95%B0rank/"/>
      <url>/2019/05/02/excel%E5%87%BD%E6%95%B0rank/</url>
      
        <content type="html"><![CDATA[<blockquote><p>rank(number,ref,[order])</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rank(需要排位的数字，排位的区间，升序&#x2F;降序排列)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">需要特别注意的是排序的区间必须要用绝对引用，否则区间是会变化的</span><br><span class="line">参数之间用英文的逗号分隔</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/9937522-0fefa3b3c1156237.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="升序排列"></p><p><img src="https://upload-images.jianshu.io/upload_images/9937522-b26b981632606d31.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="降序排列"></p><blockquote><p>默认排序是0，也就是降序排列的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> excel </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>excel中的下划线</title>
      <link href="/2019/05/02/excel%E4%B8%AD%E7%9A%84%E4%B8%8B%E5%88%92%E7%BA%BF/"/>
      <url>/2019/05/02/excel%E4%B8%AD%E7%9A%84%E4%B8%8B%E5%88%92%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<p>2018-09-29<br>本来是想录制gif放进来的，但是好麻烦。</p><hr><p>excel中的下划线有很多方法可以打出来</p><blockquote><p>1 文字下面加下划线都知道怎么打出来，但是想不到的是<strong>空白的地方下划线</strong>也可以这么打：先打几个空格，然后选中他们点击下划线按钮就可以了</p></blockquote><blockquote><p>2 文字后面要是有下划线怎么打呢？这个就比较复杂了<br>首先是说比较简单的方法那就是手动画直线：<strong>插入-形状-直线</strong><br>然后按住shift键就可以画出水平的线了，还可以改线的颜色</p></blockquote><blockquote><p>3 接下来这个方法知道的人应该很少吧：依然是打空格，然后选中空格，添加下划线，但是当鼠标点击别的单元格时下划线就消失了，那么就需要让它显示出来：<strong>插入-符号-特殊符号-零宽度空格-插入</strong> 神奇吗？</p></blockquote><blockquote><p>4 最后说一个简单的但不是直线的做法：shift+减号 （效果是断断续续的，并不是直线）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> excel </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>excel中时间与日期的计算</title>
      <link href="/2019/05/02/excel%E4%B8%AD%E6%97%B6%E9%97%B4%E4%B8%8E%E6%97%A5%E6%9C%9F%E7%9A%84%E8%AE%A1%E7%AE%97/"/>
      <url>/2019/05/02/excel%E4%B8%AD%E6%97%B6%E9%97%B4%E4%B8%8E%E6%97%A5%E6%9C%9F%E7%9A%84%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p>excel中的时间与日期计算算是比较复杂的一件事了，所以必须要掌握计算的原理。</p><ul><li><strong>时间与日期的计算实际上是用数值来运算的</strong><blockquote><p>一个单元格表示的就是一天，所以默认单位是：<strong>天</strong></p></blockquote></li></ul><p>那么开始日期是什么呢?</p><p><img src="https://upload-images.jianshu.io/upload_images/9937522-da9a3e51f29578cf.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li><p>我们可以知道1990年一月一日就是日期计数的第一天</p></li><li><p>对于时间而言同样的0.5天就是中午12点</p></li><li><p><strong>运算就是先统一单位，然后计算，最后转换为需要的单位</strong><br><img src="https://upload-images.jianshu.io/upload_images/9937522-a57d1b9d75194f3d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li></ul><p>这两个看起来复杂，其实理解了就懂了</p><blockquote><p>我们始终要记得单元格运算的单位是：天</p></blockquote><p>比如10：00，实质就是0.41666667天<br>第一个30分钟，我们需要把它转换为天，30分钟/24/60 就得到以天为单位了<br>第二个A12-B12 得到的单位是天，乘60乘24得到的就是分钟了</p><ul><li><strong>date，year，month,day这几个函数的简单应用</strong><br><img src="https://upload-images.jianshu.io/upload_images/9937522-11fe4135d7ac0aa8.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li></ul>]]></content>
      
      
      <categories>
          
          <category> excel </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-02-01</title>
      <link href="/2019/05/02/2018-02-01/"/>
      <url>/2019/05/02/2018-02-01/</url>
      
        <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/9937522-1b7929cc3c7730f5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>#excel学习知识点四</p><blockquote><p>如果你在excel中发现在做许多重复无脑的动作，那么你就要考虑是不是你的方法太复杂了</p></blockquote><hr><p>####排序与筛选<br><strong>1.简单的排序（对数字排序）</strong><br><strong><code>开始-排序与筛选-升序/降序/</code></strong><br><strong><em>不要先选中需要排序的整列，那样容易造成只有这一列才排序的错误。而应该在需要排序这一列的某单元格上点击，选中某一个单元格</em></strong><br><img src="http://upload-images.jianshu.io/upload_images/9937522-fe04634b2e4a6dd1.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/9937522-ee792d586accca1c.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><hr><p><strong>2.进阶排序</strong><br>1.如果是中文字怎么排序？<br><img src="http://upload-images.jianshu.io/upload_images/9937522-f386d5debbeffac5.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>    如果直接对其排序，那么会像下面这样<br><img src="http://upload-images.jianshu.io/upload_images/9937522-37740839d5fc72ca.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>正确做法是使用高级的排序做法：<code>开始-排序和筛选-自定义排序</code>手动填写排序规则<br><img src="http://upload-images.jianshu.io/upload_images/9937522-2b67928891071210.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>得到正确排序<br><img src="http://upload-images.jianshu.io/upload_images/9937522-8062cec65566bab2.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>2.怎么对多列数据综合排序（例如需要对语文，数学，英语综合排序。语文相同的就比较数学，语文和数学相同就比较英语）<br><img src="http://upload-images.jianshu.io/upload_images/9937522-a1b07a0f5a097e9e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>最终效果<br><img src="http://upload-images.jianshu.io/upload_images/9937522-b8142158c479bad0.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>3.怎么按照颜色这种格式排序？<br><img src="http://upload-images.jianshu.io/upload_images/9937522-e1331471bf8c1190.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>达到需要的效果<br><img src="http://upload-images.jianshu.io/upload_images/9937522-86599a866db02f86.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>4.当数据无法按照自身的格式规则排序时，那么我们可以考虑添加一些数据,对这些添加的数据进行排序来辅助我们达到需要的排序效果<br><code>例如：需要再每位同学的上面都添加“语文，数学，英语”这几个标题那么如何做到呢？</code><br><img src="http://upload-images.jianshu.io/upload_images/9937522-caad86d00879771e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/9937522-8a97b71db7ccb40c.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/9937522-1d987906114e53f0.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><hr><p>#筛选<br><strong>1.简单的筛选</strong><br><strong><code>开始-排序和筛选-筛选</code></strong><br>例如：怎么在数学中筛选出“12”的列？<br>首先选择数学列的某一单元格，然后“<strong><code>开始-排序和筛选-筛选</code></strong>”，<strong><code>下拉三角箭头-取消全选-选择12</code></strong>,搞定，就是这么简单。<br><img src="http://upload-images.jianshu.io/upload_images/9937522-3b92d0440128c458.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>筛选出来了<br><img src="http://upload-images.jianshu.io/upload_images/9937522-3ce399d2370a3430.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>可是筛选出来的数据中隐藏了许多过滤掉的列，怎么去掉这些隐藏的列呢？<br>这里要用到前一节讲到的“定位” ，“<strong><code>开始-查找和选择-定位条件</code></strong>”，这样就可以将隐藏的列去掉了，是不是很厉害！<br><img src="http://upload-images.jianshu.io/upload_images/9937522-265e7d2edae311fb.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><strong><em>PS：多个列需要筛选时，各个筛选条件之间是“且”（同时满足多个条件才符合要求）的关系。筛选也支持模糊筛选等高级筛选，由于不好截屏，这里就不再赘述了。</em></strong></p><hr><p><strong>2.高级筛选</strong><br><strong><code>数据-筛选-高级</code></strong><br><img src="http://upload-images.jianshu.io/upload_images/9937522-b71c93c801a434f4.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>高级筛选可以做什么？<br>—–还记得在前面讲到过简单筛选是“且” 的关系，如果需要“或”（满足这个条件或者满足另一条件）的关系，这时就需要高级筛选了。<br>—–另外，高级筛选可以将选出的数据中重复的选项去掉，这样的好处在于可以选出有多少类。</p><p>例如：怎么选出语文大于100，或者数学大于100的同学？<br><img src="http://upload-images.jianshu.io/upload_images/9937522-bd8f985d4149e165.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><strong><code>数据-筛选-高级</code></strong></p><p><img src="http://upload-images.jianshu.io/upload_images/9937522-7313b1be839a237b.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/9937522-c4e4e1bc9039b8ab.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/9937522-dbf9e4d15018327b.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>做出来啦<br><img src="http://upload-images.jianshu.io/upload_images/9937522-56b3b7415f498cdb.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><hr><blockquote><p><strong><em>技能点加成：同时按住 <code>ctrl+shift+方向键</code></em></strong> 可以快速选取全部数据</p></blockquote><hr><h2 id=""><a href="#" class="headerlink" title=""></a><img src="http://upload-images.jianshu.io/upload_images/9937522-c8a1fdb90e1845a8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></h2>]]></content>
      
      
      <categories>
          
          <category> excel </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-01-31</title>
      <link href="/2019/05/02/2018-01-31/"/>
      <url>/2019/05/02/2018-01-31/</url>
      
        <content type="html"><![CDATA[<h2 id="excel学习知识点二"><a href="#excel学习知识点二" class="headerlink" title="#excel学习知识点二"></a>#excel学习知识点二</h2><p>###<strong>主要讲任意单元格右键的“设置单元格格式”</strong></p><h2 id="（当某些数据无法对其进行正常操作时，可能是格式数据格式上的问题）"><a href="#（当某些数据无法对其进行正常操作时，可能是格式数据格式上的问题）" class="headerlink" title="######（当某些数据无法对其进行正常操作时，可能是格式数据格式上的问题）"></a>######（当某些数据无法对其进行正常操作时，可能是格式数据格式上的问题）</h2><blockquote><p>1.在一个单元格中换行———–按住alt+enter<br><img src="http://upload-images.jianshu.io/upload_images/9937522-0bc391cc04665d5f.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="8.PNG"></p></blockquote><blockquote><p>2.excel打印时没有单元格的线，需要在右键格式中设置</p></blockquote><blockquote><p>3.格式刷作用，将之前选中的格式赋予之后需要相同格式的地方</p></blockquote><blockquote><p>4.在设置单元格格式中可以设置时间，日期等等一系列需要的格式（例如有时候将日期复制再粘贴之后发现不是原来的日期了，这时就要考虑是不是格式不正确导致的）</p></blockquote><blockquote><blockquote><p>A:这里举例说明货币与会计专用的区别，会计专用的钱币符号始终在最左侧，无论单元格有多宽。而货币始终跟随数字<br><img src="http://upload-images.jianshu.io/upload_images/9937522-0bb58d574416b8f1.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.PNG"></p></blockquote></blockquote><blockquote><blockquote><p>B:<strong>如何填写“001”这样格式的数字</strong><br><img src="http://upload-images.jianshu.io/upload_images/9937522-26e8921c20189bd2.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="4.PNG"><br><img src="http://upload-images.jianshu.io/upload_images/9937522-3c358b01d2de2264.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3.PNG"></p></blockquote></blockquote><blockquote><blockquote><p>C:<strong>如何对同行或同列的数值进行批量添加等格式化操作</strong><br>PS：这些数值仍然可以进行求和等公式运算，数值格式保留不变（仍然可以求和）<br><img src="http://upload-images.jianshu.io/upload_images/9937522-b0019413c7631778.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="5.PNG"><br><img src="http://upload-images.jianshu.io/upload_images/9937522-81f0dcbf0d5c37ba.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="6.PNG"><br><img src="http://upload-images.jianshu.io/upload_images/9937522-8fec478d5a7f9a23.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="7.PNG"></p></blockquote></blockquote><blockquote><blockquote><p>D:如何对数据进行隐藏<br><img src="http://upload-images.jianshu.io/upload_images/9937522-be44a9d0f033414c.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="10.PNG"><br><img src="http://upload-images.jianshu.io/upload_images/9937522-efc531d717c295a5.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="11.PNG"></p></blockquote></blockquote><blockquote><blockquote><p>E:设置需要的日期格式<br>——-年为yyyy(year),月为m(month,天为d(day)<br>——-3个m(mmm)代表英文缩写月份；4个m(mmmm)代表英文全写月份。d的写法一样<br><img src="http://upload-images.jianshu.io/upload_images/9937522-6f799d3b27748475.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="12.PNG"><br><img src="http://upload-images.jianshu.io/upload_images/9937522-43a3a322d2b3c986.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="13.PNG"><br><img src="http://upload-images.jianshu.io/upload_images/9937522-8c964e4011ad78c3.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="14.PNG"><br><img src="http://upload-images.jianshu.io/upload_images/9937522-5cfd107633676b3a.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="15.PNG"><br>——-3个a(aaa)代表星期的大写缩写，4个a(aaaa)代表星期的全写<br><img src="http://upload-images.jianshu.io/upload_images/9937522-d6f766fbe7c14bf7.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="18.PNG"><br><img src="http://upload-images.jianshu.io/upload_images/9937522-011addbc9b3d431b.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="19.PNG"></p></blockquote></blockquote><blockquote><blockquote><p>F:excel每个单元格只保留15位数字，所以当需要填入超过15位数字的时候，需要将其转化为文本格式，具体做法是先转化为文本格式再填写数字（例如需要填18位的身份证号码）<br><img src="http://upload-images.jianshu.io/upload_images/9937522-e66fe45a1bd07e2e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="20.PNG"></p></blockquote></blockquote><blockquote><blockquote><p>G:文本格式的数字无法进行函数运算，需要转化为数字格式才可以。方法是同时选中需要运算的单元格，单击左上角出现的黄色图标，选择转化为数字。</p></blockquote></blockquote><blockquote><p>5.excel<code>数据-分列工具</code>的使用（很强大）<br>—–可以用来进行文本与数字格式的转化，其中包含了许多格式上便利的操作<br>—–也可以用来对从其他地方复制过来的文本进行列的划分<br><img src="http://upload-images.jianshu.io/upload_images/9937522-b4951fd818933300.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="21.PNG"><br>例如文本格式的日期无法进行格式的转化时，需要进行<code>数据-分列-直接点击完成</code>既可，然后可进行格式之间的转化</p></blockquote><hr><p>好喝的鸡汤：即使是在冬日里，心里也要像夏天一样温暖<br><img src="http://upload-images.jianshu.io/upload_images/9937522-acf2fb19201470ad.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="809033.jpg"></p><hr>]]></content>
      
      
      <categories>
          
          <category> excel </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-01-31-1</title>
      <link href="/2019/05/02/2018-01-31-1/"/>
      <url>/2019/05/02/2018-01-31-1/</url>
      
        <content type="html"><![CDATA[<hr><p>#excel学习知识点三<br><img src="http://upload-images.jianshu.io/upload_images/9937522-b969b07580d94cca.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><strong><em>excel中具有相同格式（例如颜色，字体，文本，日期，）的不按规律分布的数据的快速查找与替换。</em></strong><br><code>开始-查找和选择-查找(ctrl+f)/替换(ctrl+h)/转到(ctrl+g)</code></p><hr><p>####查找与替换</p><blockquote><p>一：最基本的替换：直接输入需要替换的数据<br><img src="http://upload-images.jianshu.io/upload_images/9937522-fee9ff27ec9ae201.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="将所有星期四替换为周四"></p></blockquote><blockquote><p>二：基于模糊匹配的查找与替换（只给出某一部分条件，没有给出精确查找对象）<br><code>1----无限匹配：*  （* 表示多个字符）</code><br><code>例如：将以周（包含周三与周四）开头的全部替换为工作日</code><br><img src="http://upload-images.jianshu.io/upload_images/9937522-87e4102d267e4b91.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3.PNG"><br><img src="http://upload-images.jianshu.io/upload_images/9937522-84d7881f15b666e5.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="周开头的全部替换为工作日"><br><code>2----只匹配一项：? (? 表示一个字符)</code><br><code>例如：需要将&quot;燕凌等风与燕凌等雨替换为燕凌等雪，而燕凌等风姣不被替换&quot;</code><br><img src="http://upload-images.jianshu.io/upload_images/9937522-cfac9da972ac6e97.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/9937522-ea0d1490ebfcd343.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><hr><p>######如果<em>和?是作为表格中的字符，那么取消其匹配作用需要在其前面添加波浪号:<code>~</code><br><code>例如：将</code>周</em><code>替换为</code>周八<code>而</code>周三<code>不被替换</code><br><img src="http://upload-images.jianshu.io/upload_images/9937522-3bc72aaa78d33f4e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/9937522-d195268788a93ace.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><blockquote><p>三：基于格式的查找与替换<br><code>例如1：将星期六替换为有填充颜色的格式</code><br><img src="http://upload-images.jianshu.io/upload_images/9937522-9c9c15657f55a293.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/9937522-54c64ff411c0f6a4.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><hr><p><code>例如2：将所有以浅绿色为填充色格式的替换为以橙色为填充色格式</code><br><img src="http://upload-images.jianshu.io/upload_images/9937522-15f2fcebe06b8b98.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/9937522-095b840c951b0712.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>####定位/转到<br>一：名称框定位（选中连续多行/多列）<br>—-行定位<br><img src="http://upload-images.jianshu.io/upload_images/9937522-7296ccdde7587cb7.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><hr><p>—-列定位<br><img src="http://upload-images.jianshu.io/upload_images/9937522-a3f7acd84df11c7b.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><hr><p>—-名称定位<br><img src="http://upload-images.jianshu.io/upload_images/9937522-d3aa5600e814e867.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><hr><blockquote><p>高级定位<br><code>开始-查找和选择-定位条件</code><br><img src="http://upload-images.jianshu.io/upload_images/9937522-d0f47499e696456b.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><p>####批注</p><blockquote><p><strong>用来做一些小的标记，笔记等</strong><br><code>单元格右键-插入批注</code>然后即可填写，在鼠标悬停到上面时显示批注<br><img src="http://upload-images.jianshu.io/upload_images/9937522-017a19d34ad961fc.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><hr><p>1—–可以将单个批注始终显示出来（不需要鼠标悬停）<br><code>单元格右键-显示/隐藏批注</code><br>2—–将所有的批注都显示出来/隐藏<br><code>审阅-显示所有批注</code></p></blockquote><blockquote><p><strong>批注的个性化设置</strong><br><img src="http://upload-images.jianshu.io/upload_images/9937522-ff2929ed98d1e3c5.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="如何做到这些样式？"><br><strong><em>怎么做到上面的批注样式？</em></strong><br>1.—<code>插入-形状</code><br><img src="http://upload-images.jianshu.io/upload_images/9937522-7d967260ff89843e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/9937522-3a6a44f222024a3f.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/9937522-19e282bfa38df8cd.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><code>**任意单元格右键-插入批注**</code><br><img src="http://upload-images.jianshu.io/upload_images/9937522-647152ddd74e1592.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/9937522-eb91eb3e023af9f5.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><hr><blockquote><p><strong>批注的定位</strong><br><code>开始-查找和选择-定位条件-选择批注-确定</code><br>然后可以对所有批注进行操作<br><img src="http://upload-images.jianshu.io/upload_images/9937522-29c7c242587f0c58.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>(在上面可以进行其他条件的定位，非常好用，批量操作)</p><hr><p><img src="http://upload-images.jianshu.io/upload_images/9937522-c963950211c25861.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><hr><p><strong><em>这是一碗毒鸡汤吗？：明天天气很好，出去透透气吧！</em></strong><br><img src="http://upload-images.jianshu.io/upload_images/9937522-bc700cce3adcc928.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><hr>]]></content>
      
      
      <categories>
          
          <category> excel </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-01-30</title>
      <link href="/2019/05/02/2018-01-30/"/>
      <url>/2019/05/02/2018-01-30/</url>
      
        <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/9937522-9e41e92b4701d1ea.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>写在前面：<br>1.首先在这里要感谢小佩老师的无私奉献，为老师可贵的精神鼓掌（此处应该有掌声）<a href="http://study.163.com/course/introduction/670032.htm" target="_blank" rel="noopener">这是老师课程的链接</a>点击可看老师详细教程。<br>2.再就是给咱们的暖男大张同学一些学习笔记，一起学习，共同进步。<br>#excel学习知识点一</p><hr><blockquote><p>1.交换整行/列———–首先选中整列，按住shift+鼠标拖动单元格边框<br><img src="http://upload-images.jianshu.io/upload_images/9937522-6fc821cc5075a22a.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.PNG"></p></blockquote><hr><blockquote><p>2.选中多行/列<br> *———–按住shift+单击标签边框（如果要选中连续的n行/列，只需按住shift选中1和n两个标签）<br> *———–如果行列太多，可以在名称框手动输入，中间需要冒号。例如：选中A1到A5，输入a1:a5</p></blockquote><hr><blockquote><p>3.调整行列宽度<br> *———-（自动适应）在行标签边框的右双击或在列标签边框的下双击（可选多行或列）<br> *———-（等间距调节）选中多行/列的时候，鼠标移动行/列标签边框</p></blockquote><hr><blockquote><p>4.插入行/列<br> *———-（单行/列）在选中的行/列标签右击插入<br> *———-（多行/列）选中多行列标签（选中的行列数即为插入的行列数）右击插入</p></blockquote><hr><blockquote><p>5.如何在整行/列中快速移动到首或者尾（行列连续无空行列）——-在任意的单元格边框上下双击到达列的首或尾/左右边框双击则到达行的首或尾</p></blockquote><hr><blockquote><p>6.冻结行列（作用是在滚动行列时某些行列不被覆盖，保持固定不动，例如标题、序号）<br> *———-（冻结首行/首列）视图-冻结窗格-冻结行/列首<br> *———-（冻结连续多行/列）选中m行n列的窗格-视图-冻结窗格-冻结拆分窗格（效果是冻结前m-1行前n-1列）</p></blockquote><hr><blockquote><p>7.快速在单元格中填入今天的日期———ctrl+:<br><img src="http://upload-images.jianshu.io/upload_images/9937522-5052ff0b615f8f11.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><hr><blockquote><p>8.填充柄（选中的单元格右下角出现的点，作用是复制填充一系列有规律的内容）</p></blockquote><blockquote><p><em>———-（复制）<br>方法一：选中单元格拖动右下角即可进行复制<br><img src="http://upload-images.jianshu.io/upload_images/9937522-4b6154542b53ed17.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>方法二：或者可以先选中要填充的单元格，然后输入一个需要复制的内容，ctrl+enter。<br><img src="http://upload-images.jianshu.io/upload_images/9937522-f0dd0ac806f4ec6b.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/9937522-32d77c80ff8294fc.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/9937522-3859ab76365ae367.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>方法三：需要用到第三节讲到的条件定位<br><code>如何在这些空白区域内填充与上面一样的文字？</code><br>1.首先选中需要填充的区域<br><img src="http://upload-images.jianshu.io/upload_images/9937522-5674f8736c2939ff.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>2`*</em>开始-查找和选择-定位条件-空值-确定**<code>![](http://upload-images.jianshu.io/upload_images/9937522-7dabd78c9ac16e2d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)3.直接填入：</code>=↑<code>（等于和上箭头）![](http://upload-images.jianshu.io/upload_images/9937522-4b46e12fdf20aefc.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)4.</code>ctrl+enter`即可达到复制效果<br><img src="http://upload-images.jianshu.io/upload_images/9937522-7bfdcd3cf198c0f8.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><blockquote><p>*———-（顺序1递增）选中单元格CTRL+拖动右下角即可<br><img src="http://upload-images.jianshu.io/upload_images/9937522-d3908cacf80be775.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3.PNG"></p></blockquote><blockquote><p>*———-（有序递增）在连续单元格中填充递增的两个数字，然后选中这两个单元拖动右下角即可进行递增<br><img src="http://upload-images.jianshu.io/upload_images/9937522-fb9f51f42a3d8c1e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><blockquote><p>*———-（其它格式）右键拖动，主要针对日期</p></blockquote><hr><blockquote><p>日期的复制<br>`ctrl+:’ 填充日期<br>——直接拖动则递增排序<br><img src="http://upload-images.jianshu.io/upload_images/9937522-98542a85eaa16dfd.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>—–按住ctrl拖动则是复制<br><img src="http://upload-images.jianshu.io/upload_images/9937522-1385b3c4c2bcf78d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><hr><p><img src="http://upload-images.jianshu.io/upload_images/9937522-b0cacf93707bcb1f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> excel </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>类，对象，方法</title>
      <link href="/2019/05/02/%E7%B1%BB%EF%BC%8C%E5%AF%B9%E8%B1%A1%EF%BC%8C%E6%96%B9%E6%B3%95/"/>
      <url>/2019/05/02/%E7%B1%BB%EF%BC%8C%E5%AF%B9%E8%B1%A1%EF%BC%8C%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>怎么写一个类，就这样写了，<code>class 名字{代码块}</code><br>前面是不是还有个<code>public</code>，它呢就是为了推销自己，让别人都可以调用它。如果是个private,那就尴尬了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Function &#123;</span><br><span class="line">    int width;</span><br><span class="line">    int height;</span><br><span class="line">    public int multi()&#123;   &#x2F;&#x2F;这里的int就是需要return一个数值的。给谁呢？山人自有妙用。</span><br><span class="line">        return(this.height*this.width);</span><br><span class="line">    &#125;</span><br><span class="line">    public void divi()&#123;  &#x2F;&#x2F; void就不需要返回数值了，自己用就好</span><br><span class="line">        System.out.println(multi()&#x2F;20);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Function()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到最后那个B没有，和class名字相同，它有名字的，叫<code>构造函数</code>，要他有何用呢？看下面的对象咋来的，是不是调用了一个叫Function的函数，没错了，这就是我们所说的对象的实例化，把类实例化为对象，就是用的这个函数了。当然了，除了这个，他还有一点作用，就是给类里面的<code>属性给初值</code>，初次之外毫无用处。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Function function&#x3D;new Function();</span><br><span class="line">        function.width&#x3D;100;</span><br><span class="line">        function.height&#x3D;50;</span><br><span class="line">        System.out.println(function.multi());&#x2F;&#x2F;有返回值啊，直接露出原形吧。</span><br><span class="line">        function.divi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类实例化为对象，用到了一个关键字叫<code>new</code>，除了这个还有其他的，如果是一个抽象类的话，就不能用<code>new</code>了，举个例子：</p><pre><code>Calendar calendar=Calendar.getInstance();</code></pre><p>至于为什么这么写，我也不清楚，为啥啊/(ㄒoㄒ)/~~你管他那么多，上天安排的最大嘛！<br>不过都是将一个函数给了另一个变量，然后可以用class的方法了。</p><p>方法为啥都有一个括号，为了传参数，虽然这里没有传参数，但是不代表不可以啊。格式什么的懂就行。</p><p>有话就直说，我喜欢《西游之大闹天宫》里的小狐狸</p><p><img src="https://upload-images.jianshu.io/upload_images/9937522-bede73dfe53419bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>接口，抽象</title>
      <link href="/2019/05/02/%E6%8E%A5%E5%8F%A3%EF%BC%8C%E6%8A%BD%E8%B1%A1/"/>
      <url>/2019/05/02/%E6%8E%A5%E5%8F%A3%EF%BC%8C%E6%8A%BD%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<ul><li>interface（接口）和 abstract（抽象）都是为了做一件事，那就是将方法与方法体（实现）分离。有什么实际意义，分工合作吧。</li><li>但是又有自己的特点，不然就叫一个名得了。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public abstract class  Calculate &#123;</span><br><span class="line">    double num1;</span><br><span class="line">    double num2;</span><br><span class="line">    public abstract void add(double num1,double num2);</span><br><span class="line">    public abstract void sub(double num1,double num2);</span><br><span class="line">    public abstract void mul(double num1,double num2);</span><br><span class="line">    public abstract void div(double num1,double num2);</span><br><span class="line">    public abstract void mod(double num1,double num2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public  class Method extends Calculate&#123;</span><br><span class="line">    public void add(double num1,double num2) &#123;</span><br><span class="line">        System.out.println(num1+num2);</span><br><span class="line">    &#125;</span><br><span class="line">    public void sub(double num1,double num2)&#123;</span><br><span class="line">        System.out.println(num1-num2);</span><br><span class="line">    &#125;</span><br><span class="line">    public void mul(double num1,double num2)&#123;</span><br><span class="line">        System.out.println(num1*num2);</span><br><span class="line">    &#125;</span><br><span class="line">    public void div(double num1,double num2)&#123;</span><br><span class="line">        System.out.println(num1&#x2F;num2);</span><br><span class="line">    &#125;</span><br><span class="line">    public void mod(double num1,double num2)&#123;</span><br><span class="line">        System.out.println(num1%num2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象类不能实例化为对象，但是被继承后就好说话了，继承后的类就和普通的类一样了，可以实例化。然后调用这些方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">public class Cal &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Method method &#x3D; new Method();</span><br><span class="line">        double num1&#x3D;0,num2&#x3D;0;</span><br><span class="line">        int choose&#x3D;1;</span><br><span class="line">        for(;;) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                Scanner scanner &#x3D; new Scanner(System.in);</span><br><span class="line">                System.out.println(&quot;输入第一个数值&quot;);</span><br><span class="line">                num1 &#x3D; scanner.nextDouble();</span><br><span class="line">                System.out.println(&quot;输入第二个数值&quot;);</span><br><span class="line">                num2 &#x3D; scanner.nextDouble();</span><br><span class="line">                System.out.println(&quot;1.+ 2.- 3.* 4.&#x2F; 5%&quot;);</span><br><span class="line">                choose &#x3D; scanner.nextInt();</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                System.out.println(&quot;输入不正确&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            switch (choose) &#123;</span><br><span class="line">                case 1:</span><br><span class="line">                    method.add(num1, num2);</span><br><span class="line">                    break;</span><br><span class="line">                case 2:</span><br><span class="line">                    method.sub(num1, num2);</span><br><span class="line">                    break;</span><br><span class="line">                case 3:</span><br><span class="line">                    method.mul(num1, num2);</span><br><span class="line">                    break;</span><br><span class="line">                case 4:</span><br><span class="line">                    method.div(num1, num2);</span><br><span class="line">                    break;</span><br><span class="line">                case 5:</span><br><span class="line">                    method.mod(num1, num2);</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口？差不多。区别就这么点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">interface Calculate &#123;方法名&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class Method implements Calculate&#123;方法体&#125;</span><br></pre></td></tr></table></figure><p>不过，抽象类里还可以有自己的方法体，而接口就纯接口，抽象类只能被一个继承，而接口可以被很多去实现。</p><p>快下课了，回去了！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>堆，栈内存分析</title>
      <link href="/2019/05/02/%E5%A0%86%EF%BC%8C%E6%A0%88%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90/"/>
      <url>/2019/05/02/%E5%A0%86%EF%BC%8C%E6%A0%88%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<ul><li><p>这是一个数据流，将李白这个对象写入到文件中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package fileOperatiion.fileSerializable;</span><br><span class="line"></span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">public class WriteWithSerialize &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        StudenInfo stu&#x3D;new StudenInfo();</span><br><span class="line">        stu.setName(&quot;李白&quot;);</span><br><span class="line">        stu.setAge(18);</span><br><span class="line">        stu.setGender(&quot;男&quot;);</span><br><span class="line"></span><br><span class="line">        File file&#x3D;new File(&quot;&#x2F;home&#x2F;narcissus&#x2F;Desktop&#x2F;studentinfo&quot;);</span><br><span class="line"></span><br><span class="line">        FileOutputStream fs&#x3D; null;</span><br><span class="line">        ObjectOutputStream oos&#x3D;null;</span><br><span class="line">        try &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">            fs &#x3D; new FileOutputStream(file);</span><br><span class="line">            oos&#x3D; new ObjectOutputStream(fs);</span><br><span class="line">            oos.writeObject(stu);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if(oos!&#x3D;null)&#123;</span><br><span class="line">                    oos.close();</span><br><span class="line">                &#125;</span><br><span class="line">                if(fs!&#x3D;null)&#123;</span><br><span class="line">                    oos.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个抄写下来也是懵的，不知道是啥意思，为什么是这样写的。然后也是找了许多资料才明白了一丢丢：)<br>看下图：<br><img src="https://upload-images.jianshu.io/upload_images/9937522-d0f07872fc42670d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="内存分析"></p></li><li><p>内存分析是很重要的。</p><pre><code>StudenInfo stu = new StudenInfo();</code></pre><p>这句话做了啥呢？三件事</p><ul><li><p>1变量stu前面的不仅仅可以放数据类型（int ，string等），还可以放类，对象等。其实是在栈中声明了一个局部变量，这个变量是对前面的引用。比如这里就是定义了一个stu的变量，这个变量是对StudenInfo类的引用。</p></li><li><p>2 new StudenInfo 在堆中创建了一个StudentInfo类的对象。</p></li><li><p>3 将创建的对象地址给到变量stu。</p><p>然后下面的这段也就不那么难理解了，只不过是把这些拆开了写，目的是什么呢？因为作用域的关系，为了后面写close（）方法，所以只能把初始化变量和实例化对象分开写。</p><pre><code>FileOutputStream fs= null; //变量fs对类的引用，并赋初值。ObjectOutputStream oos=null;try {    file.createNewFile();    fs = new FileOutputStream(file);  //实例化对象，并将地址给到变量fs    oos= new ObjectOutputStream(fs);    oos.writeObject(stu);  //oos的地址是对象ObjeOutpuStream，这里调用对象的writeObject()方法。} catch (Exception e) {    e.printStackTrace();}</code></pre></li></ul></li></ul><p>然后是读文件操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package fileOperatiion.fileSerializable;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line">public class ReadWithSerialize &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        File file &#x3D;new File(&quot;&#x2F;home&#x2F;narcissus&#x2F;Desktop&#x2F;studentinfo&quot;);</span><br><span class="line">        FileInputStream fis&#x3D;null;</span><br><span class="line">        ObjectInputStream ois&#x3D;null;</span><br><span class="line">        try&#123;</span><br><span class="line">            fis &#x3D; new FileInputStream(file);</span><br><span class="line">            ois &#x3D; new ObjectInputStream(fis);</span><br><span class="line">            &#x2F;&#x2F;怎么读一个Object？</span><br><span class="line">            StudenInfo stu&#x3D;(StudenInfo)ois.readObject();</span><br><span class="line">            System.out.println(stu.getName()+stu.getAge()+stu.getGender());</span><br><span class="line">           </span><br><span class="line">        &#125;catch(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if(oos!&#x3D;null)&#123;</span><br><span class="line">                    oos.close();</span><br><span class="line">                &#125;</span><br><span class="line">                if(fs!&#x3D;null)&#123;</span><br><span class="line">                    oos.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>匿名类，增强for循环</title>
      <link href="/2019/05/02/%E5%8C%BF%E5%90%8D%E7%B1%BB%EF%BC%8C%E5%A2%9E%E5%BC%BAfor%E5%BE%AA%E7%8E%AF/"/>
      <url>/2019/05/02/%E5%8C%BF%E5%90%8D%E7%B1%BB%EF%BC%8C%E5%A2%9E%E5%BC%BAfor%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<ul><li>forearch简称为增强for循环，目的是为了简化for循环<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for(数据类型 每次循环的名称 : 循环对象)&#123;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li><li>匿名类<br>之前一直以为一个方法method（）只能传值进去，今天才发现原来对象也可以当做参数传进去。<br>之前一直以为接口和对象都不能直接实例化为对象，都需要继承后才能实例化，今天才发现原来也可以，只要做成匿名类就好了。<br>so，new bird。天真<br>为啥接口可以直接实例化为对象，首先想想之前是咋做的。需要一个类去继承它，继承之后可以实例化，怎么继承？必须实现父类的方法。所以本质是实现方法，这也是为什么匿名类可以实例化的前提，那么实例这个接口就必须把方法实现。<blockquote><p>匿名类其实就是相当于实现接口或者实现抽象类的一个具体类</p></blockquote></li></ul><p>下面就是一个文件过滤的功能：找出家目录里以rc结尾的所有文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileFilter;</span><br><span class="line"></span><br><span class="line">public class FilterFile&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        File file&#x3D;new File(&quot;&#x2F;home&#x2F;narcissus&quot;);     &#x2F;&#x2F;File类实例化对象</span><br><span class="line">        &#x2F;&#x2F;这个File[] 是个什么鬼？数组？可以这么写？</span><br><span class="line">        File[] grade&#x3D;file.listFiles(new FileFilter() &#123;    &#x2F;&#x2F;FileFilter接口的构造函数的匿名实例化</span><br><span class="line">            public boolean accept(File file) &#123;    &#x2F;&#x2F;方法的实现，自动补全</span><br><span class="line">                if(file.getName().endsWith(&quot;rc&quot;))&#123;</span><br><span class="line">                    return true;</span><br><span class="line">                &#125;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        for(File f:grade) &#123;    &#x2F;&#x2F;增强for循环，之前一直不会写 :)</span><br><span class="line">            System.out.println(f.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一些基础</title>
      <link href="/2019/05/02/%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/05/02/%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<ul><li><p>怎么描述数据的类型：分类，资源合理利用。</p><ul><li>整形：byte short int long</li><li>浮点：float double</li><li>布尔：boolean</li><li>字符串：String （复合数据类型）</li></ul></li><li><p>怎么存放值：当然是放内存里了傻的，怎么找到他？起个名来指向这个地址</p><ul><li><p>常量：由final来定义。确认过眼神，不会变了</p><pre><code>final a=1；</code></pre></li><li><p>变量：随着程序运行而变化，变化多端，不喜欢，总喜欢跟着别人混，还混出了一个圈子，叫作用域。</p><pre><code>int b=1；</code></pre></li></ul></li><li><p>一个程序只有一个main方法（专一，可以），程序从main开始执行，直到main方法结束，然后程序也就可以休息了</p></li><li><p>一个程序由类，对象，方法等构成。但是方法很重要。</p><ul><li>那么什么是类呢，为什么需要类？<br>为了程序的简洁，不需要写许多重复的东西，都知道把具有相同数据类型的放在一起组成数组比较好，多简单。那么不同数据类型的怎么放一起呢，可以用代码块啊，但是怎么去调用呢，得起个名字才行，就叫class（类）了。</li><li>既然有类了，那么是不是可以了呢？<br>当然不行，如果就这样直接调用的话，那类的作用就不大了，因为只能放一组数据。所以就有了对象（object），我们把类实例化（把类变成对象的过程有个名字叫实例化）为许多许多的对象，这样类的作用就体现出来了。超多的</li><li>对象和类都有了，就下来就是方法（method）了。<br>方法也可以叫函数，就是用来实现一个小功能的代码块，写哪里呢？写class里吧，那样就可以被对象放肆的调用了</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class Calculate &#123;</span><br><span class="line">    int firstnum;</span><br><span class="line">    int secondnum;</span><br><span class="line"></span><br><span class="line">    public void add()&#123;</span><br><span class="line">        System.out.println(firstnum+secondnum);</span><br><span class="line">    &#125;</span><br><span class="line">    public void sub()&#123;</span><br><span class="line">        System.out.println(firstnum-secondnum);</span><br><span class="line">    &#125;</span><br><span class="line">    public void mul()&#123;</span><br><span class="line">        System.out.println(firstnum*secondnum);</span><br><span class="line">    &#125;</span><br><span class="line">    public void div()&#123;</span><br><span class="line">        System.out.println(firstnum&#x2F;secondnum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">public class Cal &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Scanner input&#x3D;new Scanner(System.in);</span><br><span class="line">        Calculate num&#x3D;new Calculate(); &#x2F;&#x2F;将类转为对象</span><br><span class="line">        System.out.println(&quot;输入第一个数字&quot;);</span><br><span class="line">        num.firstnum&#x3D;input.nextInt();</span><br><span class="line">        System.out.println(&quot;输入第二个数字&quot;);</span><br><span class="line">        num.secondnum&#x3D;input.nextInt();</span><br><span class="line">        System.out.println(&quot;1.+ 2.— 3.× 4.&#x2F;&quot;);</span><br><span class="line">        int math&#x3D;input.nextInt();</span><br><span class="line">        switch(math)&#123;</span><br><span class="line">            case 1:num.add(); break; &#x2F;&#x2F;对象.方法</span><br><span class="line">            case 2:num.sub(); break;</span><br><span class="line">            case 3:num.mul(); break;</span><br><span class="line">            case 4:num.div(); break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>学了三个星期了，理解的还是很肤浅，后面的学的有点郁闷，所以总结一下了，基础很重要。还是那句话，写代码是很优雅的事，所以为了让她变得优雅要好好学。拒绝浮躁！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux-jdk1-6的安装步骤</title>
      <link href="/2019/05/02/linux-jdk1-6%E7%9A%84%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4/"/>
      <url>/2019/05/02/linux-jdk1-6%E7%9A%84%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4/</url>
      
        <content type="html"><![CDATA[<ol><li><p>首先下载jdk1.6的二进制文件(可以直接安装，不要解压)<br>链接：<a href="https://pan.baidu.com/s/19lcBWUeYoM3kgaJQ-ybsrQ" target="_blank" rel="noopener">https://pan.baidu.com/s/19lcBWUeYoM3kgaJQ-ybsrQ</a><br>提取码：frd9 </p></li><li><p>然后通过xshell将jdk传输到linux中</p><pre><code>rz</code></pre></li><li><p>在linux中创建jdk安装目录</p><pre><code>sudo mkdir /usr/java</code></pre></li><li><p>复制jdk到/usr/java目录下</p><pre><code>sudo cp ~/jdk-6u45-linux-x64.bin /usr/javacd /usr/javals</code></pre></li><li><p>修改jdk文件权限</p><pre><code>sudo chmod 775 jdk-6u45-linux-x64.bin</code></pre></li><li><p>安装jdk</p><pre><code>./jdk-6u45-linux-x64.bin</code></pre></li><li><p>配置jdk环境变量</p><pre><code>sudo vim /etc/profile</code></pre><p> 添加</p><pre><code>JAVA_HOME=/usr/java/jdk1.6.0_45CLASSPATH=.:$JAVA_HOME/lib/tools.jarPATH=$PATH:$JAVA_HOME/binexport JAVA_HOME CLASSPATH PATH</code></pre></li><li><p>刷新一下，使配置环境变量生效</p><pre><code>source /etc/profile</code></pre></li><li><p>查看是否安装成功</p><pre><code>java -version</code></pre></li></ol><hr><p><code>1. 以上步骤需要对照自己安装目录这些什么的进行修改，如果操作步骤和我一样可以直接复制</code><br><code>2. 另外如果提示那条命令权限不足，就在命令前面添sudo</code></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>建表及简单操作</title>
      <link href="/2019/05/02/%E5%BB%BA%E8%A1%A8%E5%8F%8A%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/05/02/%E5%BB%BA%E8%A1%A8%E5%8F%8A%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>SQL：结构化查询语言(Structured Query Language) 属于lamp/lnmp中的m(MySQL)</p></blockquote><hr><blockquote><p>创建数据库</p></blockquote><p>1.创建数据库，设置utf8支持中文</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database 数据库名 default character set utf8;</span><br></pre></td></tr></table></figure><hr><p>ps:我在这里又上了一次当，这里其实只有一句话，建表和设置字符集是同一句话，因为我分开了写，所以老是报错，设置不了中文支持。 :)</p><hr><p>2.查询所有的已经存在的数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><blockquote><p>数据表</p></blockquote><p>1.进入数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名;</span><br></pre></td></tr></table></figure><p>2.创建表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table if not exists 表名(</span><br><span class="line">列名 数据类型 primary key,</span><br><span class="line">列名 数据类型,</span><br><span class="line">.....</span><br><span class="line">列名 数据类型</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>需要注意的事项：<br>自增长可以自动在主键生成有序列表 在primary key后加 <code>auto_increment</code></p><p>主键 primary key 必须唯一，一个表只有一个主键。<br>列名（不能是关键字 必须是英文）<br>表名不能有连字符<code>-</code>，只能使用 字母加下划线这种</p><p>3.查询所有已经存在的表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure><p>4.给表中写入数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名(列名,列名,....,列名) values(值,值....值);</span><br></pre></td></tr></table></figure><p>5.查询表中所有的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from 表名;</span><br></pre></td></tr></table></figure><hr><p>到这里数据表已经建好了，接下来就是对数据的修改了，修改之前先备份</p><blockquote><p>修改数据库</p></blockquote><p>1.修改之前先备份表数据（很重要）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table 数据表名_bak as select * from 表名;</span><br></pre></td></tr></table></figure><p>2.添加列或者备用列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 add 列名 列名的数据类型;</span><br><span class="line">alter table 表名 add bak 列名的数据类型；</span><br></pre></td></tr></table></figure><p>3.添加状态列,可以配合条件查询来显示不需要的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 status char</span><br></pre></td></tr></table></figure><p>4.加列类型的长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ater table 表名 modify column 列名 类型；</span><br></pre></td></tr></table></figure><p>5.配合条件语句的查找，修改指定的一条数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update 表名 set 列名&#x3D;值,列名&#x3D;值,.... 列名&#x3D;值 where 主键&#x3D;值</span><br></pre></td></tr></table></figure><p>6.删除整条数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from 表名 where 列名&#x3D;值&#x2F;主键&#x3D;值</span><br></pre></td></tr></table></figure><p>7.显示中文表名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 列名 替换的中文名,列名 替换的中文名 from 表名；</span><br></pre></td></tr></table></figure><p>8.条件查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from 表名 where  列名&#x3D;值</span><br></pre></td></tr></table></figure><hr><p>自增长<br>1.有上限 在主键后添加 auto_increment<br>2.无上限 select uuid</p>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>windows使用cmd操作mysql</title>
      <link href="/2019/05/02/windows%E4%BD%BF%E7%94%A8cmd%E6%93%8D%E4%BD%9Cmysql/"/>
      <url>/2019/05/02/windows%E4%BD%BF%E7%94%A8cmd%E6%93%8D%E4%BD%9Cmysql/</url>
      
        <content type="html"><![CDATA[<p>在linux终端上操作MySQL似乎很简单，其实在windows下的cmd中同样简单。并不需要安装其它软件的</p><ul><li>win+s 搜索cmd   右键管理员运行</li><li>net start mysql   启动MySQL服务</li><li>mysql -uroot -p   启动MySQL</li><li>show databases;   显示数据库</li><li>use mysql;   使用那个数据库</li><li>show tables;   显示表</li><li>select * from db;   显示表内容</li><li>exit;   退出mysql</li><li>net stop mysql   关闭MySQL服务</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9937522-a1844d0f77474feb.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面的输入</title>
      <link href="/2019/05/02/%E9%9D%A2%E7%9A%84%E8%BE%93%E5%85%A5/"/>
      <url>/2019/05/02/%E9%9D%A2%E7%9A%84%E8%BE%93%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<hr><p><strong>建模可以从线开始生成面，也可以直接从面开始，也可以直接画一个体。具体从哪里开始取决于那种方式最简单。</strong></p><hr><p><img src="https://upload-images.jianshu.io/upload_images/9937522-f5d86abd668c3e3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="从曲线生成面"></p><p><img src="https://upload-images.jianshu.io/upload_images/9937522-99a97b086b049a2f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="从曲面生成曲面"></p><p>曲面:</p><blockquote><p>1 SrfPt ：从点开始生成面（指定3或4个点）<br>2 PlanarSrf ：从线生成面，这些线要在同一平面且闭合</p></blockquote><blockquote><p>3 NetworkSrf ：线生成面，可以用于不在同一平面的线，线之间要有交点，即有相交的部分<br>4 Loft ：线生成面，可以用于不在同一平面的线，线之间没有交集，即有空隙<br>5 EdgeSrf ：线生成面，可以用于不在同一平面的线，从3或4根线生成，这些线最好是相互连接，闭合，这样生成的面就会以这些线为边缘，否则生成的面不规则<br>6 Patch ：线生成面，可以用于不在同一平面的线，由一些相交的线生成</p></blockquote><blockquote><p>7 Plane ：生成矩形平面<br>8 CutPlane ：用矩形平面对其他部分进行切割</p></blockquote><blockquote><p>9 PictureFrame ：将图片放到矩形平面中，并可以对其进行渲染（平面可以打开其控制点F10进行变形）</p></blockquote><blockquote><p>10 ExtrudeCrv ：将线框/曲线挤出成面<br>11 ExtrudeCrvAlongCrv ：将线框/曲线沿着线挤出成面<br>12 ExtrudeCrvTapered ：将线框/曲线渐变缩小挤出成面<br>13 ExtrudeCrvToPoint ：将线框/曲线挤出至一点<br>14 Ribbon ：将线框/曲线延伸成带状，环状<br>15  Fin ：将线框/曲线沿着曲面的法线方向挤出</p></blockquote><blockquote><p>16 Sweep1 ：同11<br>17 Sweep2 ：将线框或曲线沿着两条线流动成面</p></blockquote><blockquote><p>18 Revolve ：将线框或曲线进行任意角度旋转</p></blockquote><blockquote><p>19 Drape ：制作布料效果</p></blockquote><blockquote><p>20 HeightField ：通过图片灰度制造起伏的效果，适合做凹凸不平的地面</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> rhino </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面的编辑</title>
      <link href="/2019/05/02/%E9%9D%A2%E7%9A%84%E7%BC%96%E8%BE%91/"/>
      <url>/2019/05/02/%E9%9D%A2%E7%9A%84%E7%BC%96%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<hr><p><strong>对面进行编辑</strong></p><hr><blockquote><p>1 ExtendSrf ：延伸曲面，与ExtrudeCrv不同的是它延伸的与原来的面是一个整体，还是同一个面</p></blockquote><blockquote><p>2 FilletSrf ：对两个曲面连接部分进行圆角，圆角半径大小可能对结果有影响，太大可能出现错误<br>3 ChamferSrf：对连接的两个曲面进行倒角</p></blockquote><blockquote><p>4 VariableFilletSrf : 同2，不同点是可以不等距圆角<br>5 VariableChamferSrf : 同3，不同点是可以不等距倒角</p></blockquote><blockquote><p>6 BlendSrf : 对不相连接的两个曲面进行曲面衔接 ，效果比较好，可以对其进行控制点调节</p></blockquote><blockquote><p>7 OffsetSrf : 将曲面进行复制并偏移<br>8 VariableOffserSrf ： 将曲面进行复制并不等距偏移</p></blockquote><blockquote><p>9 SetSurfaceTangent : 对曲面进行曲率调节</p></blockquote><blockquote><p>10 MatchSrf : 对两个分开的曲面进行衔接，以正切的方式，过度很平滑，不过原曲面会改变<br>11 MergeSrf : 对两个公用一条边的两个面进行曲面连接<br>12 ConnectSrf : 对两个分开的延长线相交的面进行延长线连接</p></blockquote><blockquote><p>13 Symmetry : 对称，原物体形状改变，则对称的也会改变<br>14 Mirror ： 镜像，原物体形状改变，对称的不会改变</p></blockquote><blockquote><p>15 Rebuild : 对原物体进行控制点的重新分布，增加或减少<br>16 RebuildUV ：对原曲面的UV方向上的分段数和方向进行改变<br>17 FitSrf : 对原曲面的控制点进行智能减少</p></blockquote><blockquote><p>18 SplitEdge ：对曲面的边缘进行分段<br>19 MergeEdge ： 将曲面边缘有分段的边缘进行融合为一条没分段的线</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> rhino </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>边缘线断开了怎么办</title>
      <link href="/2019/05/02/%E8%BE%B9%E7%BC%98%E7%BA%BF%E6%96%AD%E5%BC%80%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/"/>
      <url>/2019/05/02/%E8%BE%B9%E7%BC%98%E7%BA%BF%E6%96%AD%E5%BC%80%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/</url>
      
        <content type="html"><![CDATA[<blockquote><p>有时候会发现一个面的边缘线断开了，可是又要选取整个曲线才能操作（比如说loft（放样），sweep2（双轨））</p></blockquote><hr><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://upload-images.jianshu.io/upload_images/9937522-e62fc0135a387057.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="边缘线断开了，无法loft操作"></h2><blockquote><p><strong>mergeedge</strong> 可以帮你省去所有烦恼，将断开的边缘性连接起来。好极了（我不要听 <strong>join</strong> 这种废话，醒醒吧，没用的，哈哈）</p></blockquote><hr><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="https://upload-images.jianshu.io/upload_images/9937522-9c874af30637375d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mergeedge的魔力"></h2><blockquote><p>现在可以开心的loft了</p></blockquote><hr><p><img src="https://upload-images.jianshu.io/upload_images/9937522-945ea950ff5f9f98.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="可以生成面了"></p>]]></content>
      
      
      <categories>
          
          <category> rhino </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>特殊曲线的输入</title>
      <link href="/2019/05/02/%E7%89%B9%E6%AE%8A%E6%9B%B2%E7%BA%BF%E7%9A%84%E8%BE%93%E5%85%A5/"/>
      <url>/2019/05/02/%E7%89%B9%E6%AE%8A%E6%9B%B2%E7%BA%BF%E7%9A%84%E8%BE%93%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>1 InterpcrvOnSrf ：在曲面上画线</p></blockquote><blockquote><p>2 CurveThroughSrfControlPt : 通过曲面的控制点画曲线</p></blockquote><blockquote><p>3 从曲面提取曲线 <img src="https://upload-images.jianshu.io/upload_images/9937522-8e385e7aa73a01f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="提取曲线"></p></blockquote><blockquote><p>4从其它曲线生成曲线 <img src="https://upload-images.jianshu.io/upload_images/9937522-8d213ade9698ca3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="从其它曲线生成曲线"></p></blockquote><blockquote><p>5 从曲面生成线<img src="https://upload-images.jianshu.io/upload_images/9937522-2beb9ecb146f5538.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="从曲面生成线"></p></blockquote><blockquote><p>6 当使用了extract(抽离曲线)命令后，无法打开原物体的控制点，需要使用 solidpton 这个命令</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> rhino </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>有没有觉得filletsrf后生成的面是断开的</title>
      <link href="/2019/05/02/%E6%9C%89%E6%B2%A1%E6%9C%89%E8%A7%89%E5%BE%97filletsrf%E5%90%8E%E7%94%9F%E6%88%90%E7%9A%84%E9%9D%A2%E6%98%AF%E6%96%AD%E5%BC%80%E7%9A%84/"/>
      <url>/2019/05/02/%E6%9C%89%E6%B2%A1%E6%9C%89%E8%A7%89%E5%BE%97filletsrf%E5%90%8E%E7%94%9F%E6%88%90%E7%9A%84%E9%9D%A2%E6%98%AF%E6%96%AD%E5%BC%80%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<blockquote><p>对两个生成的曲面进行倒角 <strong>filletsrf</strong>  ，发现生成的面是两个断开的<br><img src="https://upload-images.jianshu.io/upload_images/9937522-ba74b7d8cdf1d233.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="不同颜色代表不同的分段"></p></blockquote><blockquote><p>以前我看一个大神的视频，还没搞懂为什么一定要那样做，现在才发现他那样做是有道理的，而且就是解决这个问题的。<br>1.首先关掉要倒角的两个曲面的ISO线<br><img src="https://upload-images.jianshu.io/upload_images/9937522-35cb1edd55467cb3.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>会发现这两个曲面的接缝线并没有重合在一起，而是有一段的距离，这就是产生上面倒角后出现断裂面的原因</p></blockquote><blockquote><p>2.所以我们需要手动调解一下这个接缝线：<strong>srfseam</strong><br><img src="https://upload-images.jianshu.io/upload_images/9937522-447b87ee7fb1f050.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="让接缝重合"></p></blockquote><blockquote><p>3现在倒角就不会出现生成断开面的情况了<br><img src="https://upload-images.jianshu.io/upload_images/9937522-f199322e21233438.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="生成完整的面"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> rhino </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>曲面分割容易忽略的细节</title>
      <link href="/2019/05/02/%E6%9B%B2%E9%9D%A2%E5%88%86%E5%89%B2%E5%AE%B9%E6%98%93%E5%BF%BD%E7%95%A5%E7%9A%84%E7%BB%86%E8%8A%82/"/>
      <url>/2019/05/02/%E6%9B%B2%E9%9D%A2%E5%88%86%E5%89%B2%E5%AE%B9%E6%98%93%E5%BF%BD%E7%95%A5%E7%9A%84%E7%BB%86%E8%8A%82/</url>
      
        <content type="html"><![CDATA[<p>对于分割的曲面有两种方法可以做到，但是要选择好的<br>第一种是先画好线，分割好，然后生成面<br>第二种是先画好线，生成面，然后分割</p><p><img src="https://upload-images.jianshu.io/upload_images/9937522-9465f775fddbdad1.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="曲面分割"></p><hr><p>第二种更好：<br>因为第一种曲线分割之后，控制点会增多，即每条新分割出来的都会是原来数目的控制点数，这样生成的曲面就变得很复杂了。<br>第二种生成的面控制点比较均匀，而且分割之后通过<strong>shrinktrimsrf</strong>缩回控制点，达到比较好的效果，可以<strong>rebuildsrf</strong>，调整控制点等这些命令，可以达到理想的造型，而且曲面很平滑<br><img src="https://upload-images.jianshu.io/upload_images/9937522-5d3490606410b21b.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="zebra分析"><br><img src="https://upload-images.jianshu.io/upload_images/9937522-2584b2e022c93a6f.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="showedges"></p><hr><p>总之生成的面控制点越少越好，如果不够的话再<strong>rebuildsrf</strong>增加就是了</p>]]></content>
      
      
      <categories>
          
          <category> rhino </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>对线和物体造型的操作</title>
      <link href="/2019/05/02/%E5%AF%B9%E7%BA%BF%E5%92%8C%E7%89%A9%E4%BD%93%E9%80%A0%E5%9E%8B%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/05/02/%E5%AF%B9%E7%BA%BF%E5%92%8C%E7%89%A9%E4%BD%93%E9%80%A0%E5%9E%8B%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>1.<strong>F10 / pointson</strong> 打开控制点<br>     <strong>F11 / pointsoff</strong> 关闭控制点<br><img src="https://upload-images.jianshu.io/upload_images/9937522-9627a276c1088421.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="控制点"></p></blockquote><blockquote><p>2.<strong>editpton</strong> 打开编辑点（只对曲线有效）<br><img src="https://upload-images.jianshu.io/upload_images/9937522-95cb7b94a263a549.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="曲线编辑点"><br><strong>solidpton</strong> 打开物体的编辑点（只对体有效）<br><img src="https://upload-images.jianshu.io/upload_images/9937522-ae1be82e308129ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="体的编辑点"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> rhino </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>堪称利器</title>
      <link href="/2019/05/02/%E5%A0%AA%E7%A7%B0%E5%88%A9%E5%99%A8/"/>
      <url>/2019/05/02/%E5%A0%AA%E7%A7%B0%E5%88%A9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<hr><p><strong>之前写了那么多，发现并不好，没有什么条理。忽然之间发现真正的好东西就在身边，那就是犀牛的帮助手册，真的是写的好，条理清晰，解释透彻，还有小视频教程。超级好，所以以后就只写那些特别好用的功能。这里是<a href="https://docs.mcneel.com/rhino/6/help/en-us/index.htm#information/welcome_to_rhinoceros.htm%3FTocPath%3D_____1" target="_blank" rel="noopener">帮助手册链接</a>(在犀牛里按F1也可到达帮助界面)</strong></p><hr><p><img src="https://upload-images.jianshu.io/upload_images/9937522-9c27801b4c381430.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>这里要说的是以前一直让我不知所措的一个东西，那就是如何在需要的平面画线什么的。因为在画线的时候，虽然开了物件锁点，可是没有物件吸附的那些点又画到了世界坐标平面，真的是忒难受，（常用的方法是按住ctrl画，然后调点，很麻烦，或者干脆画一个平面去满足它，但这个平面不一定好画，画完之后还需要删除，或者画好之后移动过去），但是都不是很好用<br>so——今天发现了两个好命令，那就是  <strong>cplane  mplane</strong> </p><blockquote><p><strong>cplane</strong>是将坐标平面进行各种平移旋转等等等操作（总之功能好多），可以只在一个视图里面改，也可全局<br><img src="https://upload-images.jianshu.io/upload_images/9937522-5872758687722431.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="所有的线，体都是通过修改坐标平面一次性画的，不需要调"></p></blockquote><blockquote><p><strong>mplane</strong>是在一个任意的平面去画你想要的平面，前提是你已经有一个平面为基础，以这个平面为参照，<strong>它的好处是坐标会跟随物体的移动旋转等而发生改变，很有用</strong><br><img src="https://upload-images.jianshu.io/upload_images/9937522-44dd786c6bb245b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="坐标平面适应物体的表面"></p></blockquote><hr><blockquote><p>值得注意的是：在<strong>mplane</strong>命令修改平面后需要使用<strong>cplane</strong>恢复原来的世界坐标平面，在里面选择world，这样就恢复过去了，另外透视图使用的是top视图</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> rhino </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基础设置（快捷键等以及直线的输入）</title>
      <link href="/2019/05/02/%E5%9F%BA%E7%A1%80%E8%AE%BE%E7%BD%AE%EF%BC%88%E5%BF%AB%E6%8D%B7%E9%94%AE%E7%AD%89%E4%BB%A5%E5%8F%8A%E7%9B%B4%E7%BA%BF%E7%9A%84%E8%BE%93%E5%85%A5%EF%BC%89/"/>
      <url>/2019/05/02/%E5%9F%BA%E7%A1%80%E8%AE%BE%E7%BD%AE%EF%BC%88%E5%BF%AB%E6%8D%B7%E9%94%AE%E7%AD%89%E4%BB%A5%E5%8F%8A%E7%9B%B4%E7%BA%BF%E7%9A%84%E8%BE%93%E5%85%A5%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<hr><p><strong>rhino正式从今天学习，目的：熟练。参考资料：rhino自带的帮助手册</strong><br>写在前面：rhino的学习如果只是靠鼠标点击那些小的图标来操作，眼睛会受不了，速度也提不上来，这或许是我以前不喜欢rhino的原因吧，但是如果用命令来操作的话，就不要太方便，简直了，很好用。可以随便的布尔，曲面建模真的还是比较舒服的，不需要像C4D中那样考虑布线。so，我要好好学</p><hr><blockquote><p>首先将犀牛的界面进行一下调整：<br><strong><em>file-properties-general-command lists 写入 Testtoggleroundpoints 将控制点改为圆形</em></strong><br><strong><em>file-properties-view-display modes-wireframe-objects-control point size 输入4 将控制点的大小变大</em></strong><br><strong><em>file-properties-view-display modes-wireframe-objects-curves-curvewidth 输入2 将线的宽度变宽</em></strong></p></blockquote><blockquote><p>1.直线的输入：<br>2D平面坐标：在知道长度坐标的情况下，直接输入 x,y<br>3D平面坐标：直接输入 x,y,z<br>2D世界坐标(world coordinates)：输入：wx,y<br>3D世界坐标：输入：wx,y,z</p></blockquote><blockquote><p>2 以某一个角度画直线：输入：&lt;angle (angle是某一确定角度)<br>以某一个定长画直线：输入：长度数字<br>以上一个点为基准需要向输入需要的长度(relative coordinates)：输入：rx,y</p></blockquote><blockquote><p>3 以某一长度同时某一角度确定下一点，画直线：输入：@长度&lt;角度 或者 r长度&lt;角度 （@distance&lt;angle / r distance&lt;angle）</p></blockquote><blockquote><p>4 方向锁定，tab键：需要直线通过一条曲线的末端，然后以这个方向延长，在经过这个末端时按一下tab键</p></blockquote><blockquote><p>5 轴向锁定，ctrl键：按住ctrl键，在移动或确定下一个点，即下一个位置是在轴向上。</p></blockquote><blockquote><p>6 物体的复制：按住alt拖动物体，则进行了复制</p></blockquote><blockquote><p>7 ctrl +shift + RMB(右键) ：旋转视角</p></blockquote><blockquote><p>8 ctrl + shift + LMB(左键) : 在gumball(操作轴)开启的情况下，可以移动一个物体的子层级，例如一个box的边，面，在正常模式下是无法选中它们的，但是ctrl + shift + LMB(左键)可以选中，然后对其进行移动拉伸，非常方便，就像在C4D中一样，不要太好用，😄</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> rhino </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在面上打孔</title>
      <link href="/2019/05/02/%E5%9C%A8%E9%9D%A2%E4%B8%8A%E6%89%93%E5%AD%94/"/>
      <url>/2019/05/02/%E5%9C%A8%E9%9D%A2%E4%B8%8A%E6%89%93%E5%AD%94/</url>
      
        <content type="html"><![CDATA[<hr><p>如果有许多的真实的孔需要打（有一定的深度），而不是在渲染的时候贴图做纹理等来达到打孔的效果的话（无深度），那么就要掌握打孔的命令，然而这个命令还有点奇怪的地方。</p><hr><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://upload-images.jianshu.io/upload_images/9937522-c483c654bec419ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="如图"></h2><p>这是一个直接建立的球体，然后在上面画了七个圆，准备在上面打孔<br>如果直接打孔的话是这样子的：<br><strong>makehole</strong><br><img src="https://upload-images.jianshu.io/upload_images/9937522-4bbf204a3060494c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="有一定的深度"></p><p><img src="https://upload-images.jianshu.io/upload_images/9937522-8704cdf56f5e6126.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="全部打穿"></p><hr><p>然而我需要的只是一个孔洞，不是有这样的深度。因为这样打的孔那个孔深度的方向无法控制，而我需要的是沿着曲面的法线方向的孔洞<br><strong>这是因为这个球体是未修剪过的曲面，我们只需要把这个球体修剪一下就可以达到需要的效果</strong>（原理嘛，这个，我也不懂）</p><p><img src="https://upload-images.jianshu.io/upload_images/9937522-bcba497ef25336bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="用中间那个圆去trim（修剪）这个球体"></p><p><img src="https://upload-images.jianshu.io/upload_images/9937522-90e50f7fd846f685.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="makehole可以打没有深度的孔了，只是在平面有一个孔"></p><p><img src="https://upload-images.jianshu.io/upload_images/9937522-3739fc1d90d5e13e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="offsetsrf偏移一下就可以让孔洞是延法线的了"></p><hr><h2 id="就这样子咯，开心😂"><a href="#就这样子咯，开心😂" class="headerlink" title="就这样子咯，开心😂"></a>就这样子咯，开心😂</h2><p>对了，还有一个好玩的命令叫<strong>turntable</strong><br><img src="https://upload-images.jianshu.io/upload_images/9937522-7a59da9fd46f782e.gif?imageMogr2/auto-orient/strip" alt="自动旋转"></p>]]></content>
      
      
      <categories>
          
          <category> rhino </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于倒角的一个问题</title>
      <link href="/2019/05/02/%E5%85%B3%E4%BA%8E%E5%80%92%E8%A7%92%E7%9A%84%E4%B8%80%E4%B8%AA%E9%97%AE%E9%A2%98/"/>
      <url>/2019/05/02/%E5%85%B3%E4%BA%8E%E5%80%92%E8%A7%92%E7%9A%84%E4%B8%80%E4%B8%AA%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在对一个物体倒角的时候，发现有的边无法选择<br><img src="https://upload-images.jianshu.io/upload_images/9937522-d27546a1072bd745.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="无法选中边"><br>然后使用<strong>showedges</strong>命令，发现那两条边是裸露的边，不是物体的边，所以选不中<br><img src="https://upload-images.jianshu.io/upload_images/9937522-6b780bc5324ae512.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="naked edge"><br>出现这个问题的原因是因为，在生成那两个面的时候，出现了问题<br>：我使用的是双规扫掠这个命令生成的面，无法使用<strong>edgesrf</strong>这个命令，因为上面的两个面是分开的，但是明明就是组合在一起了的，这个问题我遇到好多次了，一直没有好的解决办法<br><img src="https://upload-images.jianshu.io/upload_images/9937522-995e32fff17ec7b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="上面的两个面是分离的"><br><img src="https://upload-images.jianshu.io/upload_images/9937522-85cebc60ff81854f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="本来是一个整体的"></p><hr><p>所以只能将那两个面删除，然后使用<strong>patch</strong>这个命令，生成的面就没有裸露的边缘了，然后可以倒角<br><img src="https://upload-images.jianshu.io/upload_images/9937522-ac6f082e59537544.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="可以倒角"></p><p>PS：在两个面之间无法倒角的时候，可以将面先提取出来，然后使用offsetcrvonsrf来得到一条面上的线，将不需要的面剪切掉，然后使用混接曲面就可以做到了</p>]]></content>
      
      
      <categories>
          
          <category> rhino </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一个另类切割命令</title>
      <link href="/2019/05/02/%E4%B8%80%E4%B8%AA%E5%8F%A6%E7%B1%BB%E5%88%87%E5%89%B2%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/05/02/%E4%B8%80%E4%B8%AA%E5%8F%A6%E7%B1%BB%E5%88%87%E5%89%B2%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p><strong>trim</strong>在切割工具里面 用的是比较多的<br><strong>wirecut</strong>是另一个好用的切割工具，它的效果类似于先分割先分割再加盖吧，三维切割？（我也不太确定）</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/9937522-19b196bbdd397bfc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/9937522-58bd353036785c9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> rhino </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>flowalongsrf</title>
      <link href="/2019/05/02/flowalongsrf/"/>
      <url>/2019/05/02/flowalongsrf/</url>
      
        <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/9937522-c1041813d2fb0b61.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>这个的做法就是先建一个球，然后<strong>createuvcrv</strong>得到球的uv曲线，通过这些uv曲线建立一个平面，因为后面<strong>flowalongsrf</strong>需要用。再建立需要流动的实体。然后就是<strong>flowalongsrf</strong>命令：选择流动的实体，选择uv曲面，选择应用的球。<br><img src="https://upload-images.jianshu.io/upload_images/9937522-da8a78fbd457520c.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> rhino </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网络知识及测试点</title>
      <link href="/2019/05/02/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E5%8F%8A%E6%B5%8B%E8%AF%95%E7%82%B9/"/>
      <url>/2019/05/02/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E5%8F%8A%E6%B5%8B%E8%AF%95%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>web网络三层结构<br>展现层/web server，显示数据或者接受用户的输入—-应用程序逻辑、逻辑层、事物层—-数据层/database server</p><p>客户端–web服务器–应用程序–数据服务器</p><p>负载均衡：在多个服务器随机获取数据，降低单个服务器压力</p><p>b/s网络结构模式browser/server：客户通过浏览器访问服务器资源，客户端零维护<br>c/s网络结构模式client/server：利用两端硬件资源，降低服务器开销。需要针对不同操作系统开发不同版本，更新代价高，效率低</p><p>activeX：软件组件或对象，可以插入到web网页中提高浏览器效率。比如flash<br>ajax异步处理asynchronous javascript and xml:在浏览器与web服务器之间使用异步数据传输（http请求），可以使网页从服务器请求少量信息，而不是整个网页。是一种独立于web服务器软件的浏览器技术。可使因特网应用程序更小、快、友好。</p><p>ria（Rich Internet Applications）丰富互联网程序，具有高度互动性、丰富用户体验以及功能强大的客户端</p><p>web2.0特点：<br>用户参与网站内容制造<br>web2.0更加注重交互性<br>符合web标准的网站设计<br>web2.0网站与web1.0没有绝对的界限<br>web2.0的核心不是技术而在于指导思想</p><p>web核心技术：<br>协议类型<br>域名<br>端口号<br>页面文件<br>url地址参数</p><p>动态页面vs静态页面：<br>静态HTML指的是使用单纯的HTML或者结合CSS制作的包括图片、文字等的只供用户浏览但不包含任何脚本、不含有任何交互功能的网页！</p><p>动态的HTML指的是网页不仅提供给用户浏览，网页本身还有交互功能，存在着在脚本如JAVASCRIPT，并利用某种服务器端语言如PHP等实现如用户注册，用户登录，上传文件，下载文件等功能</p><p>web服务器作用：<br>监听客户端请求<br>处理客户端请求<br>客户端与数据库之间的屏障</p><p>应用服务器的作用：处理复杂系统的业务和数据库的访问 例如常见的应用服务器：weblogic</p><p>硬件集群/软件集群目的：负载均衡/故障转移</p><p>服务器端数据库：<br>文件型数据库<br>关系型数据库<br>内存型数据库：将数据放在内存中直接操作的数据库，10倍传统数据库速度<br>nosql：非关系型数据库</p><p>服务器端技术-其它<br>soa:面向服务的架构service-oritented architecture<br>saas：软件即服务software-as-a-service<br>云计算<br>物联网</p><p>网络协议：<br>tcp/ip<br>udp<br>http<br>https</p><p>网络协议模型：osi开放式系统互联open system interconnect<br>7应用层—处理网络应用：DNS、HTTP、邮件服务、文件传送服务<br>6表示层—数据表示：编码、加密解密、压缩<br>5会话层—主机间通信：建立连接，保证数据传输不错<br>4传输层—进程间通信：中转站<br>3网络层—寻址和最短路径：主要设备：路由器<br>2链路层—介质访问（接入）:常见的链路层设备有：二层交换机/网桥<br>1物理层—二进制传输：常见的物理层设备有：中继器/集线器</p><p>网络协议模型-tcp/ip模型：<br>4应用层（5，6，7）<br>3传输层（4）<br>2internet层（3）<br>1网络访问层（1，2）</p><p>tcp协议-三次握手<br>tcp协议提供了一种端到端的、基于连接的、可靠的通信服务</p><p>udp协议<br>通讯时不需要接收方确认，属于不可靠的传输，可能会出现丢包现象，实际应用中要求程序员编程验证</p><p>ip协议</p><p>http协议：hypertext transport protocol：<br>支持客户/服务器模式<br>简单快速<br>协议简单，速度快<br>灵活<br>无连接<br>无状态</p><p>http协议-http请求：<br>request，客户端发送给服务器端 get（显式传值）/post（隐式传值）/head（中文支持，授权码）/put（修改）/delete（删除）</p><p>http协议-http响应：<br>response，由服务器端返回给客户端，包含正常响应和异常响应<br>http协议通过响应的状态码来进行定义：100-300属于正常 400-500为不正常<br>200正常发送请求<br>400发送的数据不对应，参数问题<br>401端口错误<br>402缺少head<br>403端口冲突/权限不够，服务器已经理解请求，但无法执行<br>404请求失败/没有功能链接<br>500源码错误<br>502网关错误/网络连接失败<br>504网络错误造成数据丢失</p><p>https：<br>HTTPS和HTTP的区别主要为以下四点：<br>一、https协议需要到ca申请证书，一般免费证书很少，需要交费。<br>二、http是超文本传输协议，信息是明文传输，https 则是具有安全性的ssl加密传输协议。<br>三、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。<br>四、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p><p>http协议-session和cookie<br>http协议：无连接，无状态<br>cookie是服务器暂存放在用户计算机上的一些资料，<br>session会话，客户端和服务器之间的会话，<br>特点：<br>1 session数据保存在服务端，客户端也会保存一个session的id值，存在cookie中<br>2 键值对应<br>3 有生命周期；默认40分钟<br>4 以文本形式存在<br>区别:<br>cookie以文本形式存在，无时间限制 session有时间限制<br>cookie记住用户登录信息密码，下次不需要输入，只能通过清除缓存才能消除。session用来存用户是否登录信息<br>session将用户登录信息保存在服务器中，并发送一个session的id值与cookie中的信息对比</p><p>web开发技术：<br>java微服务，接口，应用服务器<br>php前端 html js jQuery h5<br>app应用 android ios<br>mysql/oracle 数据库</p><p>服务端脚本技术-php基础<br>php是一种服务器端的脚本语言</p><hr><p>web测试技术-功能测试<br>1 链接测试：<br>登录之前能否通过网址直接进入登录后的页面，绕过登录。<br>fidder查看页面是否有400-500错误</p><p>2 表单测试<br>输入框边界值，错误提示，长度，特殊字符</p><p>3 cookie测试：密码是否加密<br>4 session测试<br>5 脚本测试：数据库脚本<br>6 文件上传测试<br>7 数据库的查询测试：密码是否加密</p><p>web测试技术-可用性测试<br>站点整体布局<br>页面导航直观<br>图形内容风格统一<br>页面内容准确<br>注意快捷 fangshi<br>满足区域文化<br>考虑用户群体</p><p>web测试技术-兼容性测试<br>客户端平台：app安装要求的android版本</p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>测试-软件质量</title>
      <link href="/2019/05/02/%E6%B5%8B%E8%AF%95-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F/"/>
      <url>/2019/05/02/%E6%B5%8B%E8%AF%95-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="http://music.163.com/song?id=546500326&userid=1388867694" target="_blank" rel="noopener">弹奏江南夜雨，唱了一首花语</a></p></blockquote><h3 id="1-软件质量的定义"><a href="#1-软件质量的定义" class="headerlink" title="1. 软件质量的定义"></a>1. 软件质量的定义</h3><ul><li><p><strong>iso（国际标准化组织）关于质量的定义：</strong></p><ul><li>一个实体的所有特性，基于这些特性可以满足明显的或隐含的需求。而质量就是实体基于这些实体特性满足需求的程度。</li></ul></li><li><p><strong>软件质量的三个层次</strong></p><ul><li>符合需求规格 ：符合开发者明确定义的目标，即产品是不是在做让它做的事情，目标是开发者定义的，并且是可以验证的。（例如用户目标群体）</li><li>符合用户显式需求：符合用户所明确说明的目标，目标是客户所定义的，符合目标即判断我们是不是在做我们需要做的事情。（例如客户对功能和界面的需求）</li><li>符合用户实际需求：实际的需求包括用户明确说明的和隐含的需求。</li></ul></li><li><p><strong>影响软件质量的因素</strong></p><ul><li>流程</li><li>技术</li><li>组织<ul><li>软件质量的提高需要综合考虑，需要从各个方面进行改进，同时还需要兼顾成本和进度</li><li>如果有不能解决的技术问题，需要先屏蔽/跳过这个问题</li></ul></li></ul></li><li><p><strong>质量管理发展阶段</strong></p><ul><li>第一阶段：检验质量管理 19th末-20th初</li><li>第二阶段：统计质量控制。强调统计方法</li><li>第三阶段：将质量控制扩展到产品生命周期全过程。强调全体员工参与</li></ul></li></ul><h3 id="2-软件质量管理体系"><a href="#2-软件质量管理体系" class="headerlink" title="2. 软件质量管理体系"></a>2. 软件质量管理体系</h3><table><thead><tr><th>流行的质量管理体系</th><th></th><th></th></tr></thead><tbody><tr><td>iso9000</td><td>cmm</td><td>六西格玛</td></tr></tbody></table><ul><li><p><strong>iso2000八项质量管理原则</strong></p><ul><li>1.以顾客为中心</li><li>2.领导作用</li><li>3.全员参与</li><li>4.过程方法：做好相关过程记录</li><li>5.管理的系统方法：</li><li>6.持续的改进：提出建议</li><li>7.基于事实的决策方法</li><li>8.互利的供方关系<ul><li>意义:<ul><li>质量管理的理论基础</li><li>最基本/通用的一般性规律</li><li>为组织建立质量管理体系提供了理论依据</li><li>是组织领导者有效实施质量管理工作必须遵循的原则 </li></ul></li></ul></li></ul></li><li><p><strong>八项质量管理原则的意义</strong></p><ul><li>是质量管理的理论基础；</li><li>用高度概括、易于理解的语言所表述的质量管理的最基本、最通用的一般性规律；</li><li>为组织建立质量管理体系提供了理论依据；</li><li>是组织的领导者有效地实施质量管理工作必须遵循的原则。</li></ul></li></ul><ul><li><p><strong>cmm的用途</strong><br><img src="https://upload-images.jianshu.io/upload_images/9937522-55bc810748657b8e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="cmm等级"></p><ul><li>评估组用来识别组织中的强处和弱点</li><li>评估组用来识别选择不同的业务承包商的风险和监督合同</li><li>管理者用来了解其组织的能力，并了解了提高其能力成熟度而进行软件过程改进所需要进行的活动</li><li>技术人员和过程改进组用来作为指南，指导他们在组织中定义和改进软件过程</li></ul></li><li><p><strong>iso9001和cmm关系</strong></p><ul><li>最大相似点：强调管理、过程、规范化和文档化</li><li>不同点<ul><li>cmm焦点在软件</li><li>iso包括硬件/软件/流程性服务</li></ul></li></ul></li><li><p><strong>六西格玛管理法</strong></p><ul><li>以质量作为主线，以客户需求为中心，利用对数据和数据的分析，改进一个组织的业务流程能力，从而增强企业竞争力，是一套灵活，综合性的管理方法体系。</li><li>要求企业完全从外部客户角度，而不是自己的角度来看待企业内部的各种流程。</li><li>利用客户的要求来建立标准，设立产品与服务的标准与规格，并以此来评估企业流程的有效性和合理性</li></ul></li></ul><h3 id="3-软件质量模型"><a href="#3-软件质量模型" class="headerlink" title="3. 软件质量模型"></a>3. 软件质量模型</h3><ul><li>质量模型：一组特性及特性之间的关系，它提供规定质量需求和评价质量的基础<ul><li>外部和内部质量<ul><li>功能性：当软件在指定条件下使用时，软件产品提供满足明确和隐含需求的功能的能力<ul><li>适合：软件产品为指定的任务和用户目标提供一组合适的功能的能力。</li><li>准确：软件产品提供具有所需精确度的正确或相符的结果或效果的能力。</li><li>互操作：软件产品与一个或更多的规定系统进行交互的能力。</li><li>保密安全性：软件产品保护信息和数据的能力，以使未授权的人员或系统不能阅读或修改这些信息和数据，而不拒绝授权人员或系统对它们的访问。</li></ul></li><li>可靠性：在指定条件下使用时，软件产品维持规定的性能级别的能力<ul><li>成熟：软件产品为避免由软件中错误而导致失效的能力</li><li>容错：在软件出现故障或者违反指定接口的情况下，软件产品维持规定的性能级别的能力。</li><li>易恢复性：在失效发生的情况下，软件产品重建规定的性能级别并恢复受直接影响的数据的能力。</li></ul></li><li>易用性：在指定条件下使用时，软件产品被理解、学习、使用和吸引用户的能力<ul><li>易理解：软件产品使用户能理解软件是否合适以及如何能将软件用于特定的任务和使用环境的能力。</li><li>易学：软件产品使用户能学习其应用的能力。</li><li>易操作：软件产品使用户能操作和控制它的能力。</li><li>吸引性：软件产品吸引用户的能力。</li></ul></li><li>效率： 在规定条件下，相对于所用资源的数量，软件产品可提供适当性能的能力<ul><li>时间特性：在规定条件下，软件产品执行其功能时，提供适当的响应和处理时间以及吞吐率的能力。即完成用户的某个功能需要的响应时间</li><li>资源利用性：在规定条件下，软件产品执行其功能时，使用合适的资源数量和类别的能力。</li></ul></li><li>维护性：软件可被修改的能力，修改可能包括修正，改进或软件对环境需求和功能规格说明变化的适应<ul><li>易分析：软件诊断软件中的缺陷或失效原因或识别待修改部分的能力</li><li>易改变：软件产品使指定的修改可被变成现实的能力</li><li>稳定：软件产品避免由于软件修改而造成意外结果的能力</li><li>易测试性：软件产品使已修改软件能被确认的能力</li></ul></li><li>可移植性：软件产品从一种环境迁移到另外一种环境的能力<ul><li>适应：软件产品无需采用有别于为考虑该软件的目的而准备的活动或手段就可能适应不同的指定环境的能力</li><li>易安装：软件产品在指定环境中被安装的能力</li><li>共存：软件产品在公共环境中同与其分享公共资源的其它独立软件共存的能力</li><li>易替换性：软件产品在同样环境下，替代另一个相同用途的指定软件产品的能力</li></ul></li></ul></li></ul></li></ul><h3 id="4-软件质量活动"><a href="#4-软件质量活动" class="headerlink" title="4. 软件质量活动"></a>4. 软件质量活动</h3><ul><li><p><strong>软件质量保证SQA与测试的关系</strong></p><ul><li>软件质量由组织、流程和技术三方面决定<ul><li>SQA从流程方面保证软件的质量</li><li>测试从技术方面保证软件的质量</li><li>只进行SQA活动或只进行测试活动不一定能产生好的软件质量</li></ul></li></ul></li><li><p><strong>SQA的主要工作范围</strong></p><ul><li>指导并监督项目按照过程实施；</li><li>对项目进行度量、分析，增加项目的可视性；</li><li>审核工作产品，评价工作产品和过程质量目标的符合度；</li><li>进行缺陷分析，缺陷预防活动，发现过程的缺陷，提供决策参考，促进过程改进</li></ul></li><li><p><strong>质量度量的概念和目的</strong></p><ul><li>概念：<ul><li>度量：对事物属性的量化表示</li><li>度量：指计算机软件中范围广泛的测度，包括对软件系统，构件或生命周期过程具有的某个给定属性的度的一个定量测量</li></ul></li><li>目的：<ul><li>提高软件生产率，缩短产品研发周期，降低研发成本、维护成本</li><li>提高软件产品质量，提高用户满意度</li><li>为组织持续改进提供量化的指标和反馈</li></ul></li></ul></li><li><p><strong>软件度量的作用</strong></p><ul><li>理解：通过度量，获得对过程，产品，资源等的理解，确定以后预测的基线和模型，对于不同的软件组织和软件类型，过程和模型都不一样。这是评估，预测，改进活动的基础</li><li>预测：根据所理解确定的模型，由已知的要素推算，估计其它要素，以便合理分配资源，合理制定计划。</li><li>评估：<ul><li>分析活动与计划的符合度，确定是否有偏差，以便控制其执行</li><li>开发活动与计划的符合程度。如工作量估计偏差、进度偏差等；</li><li>产品的质量。如软件复杂度、缺陷密度、平均失效时间间隔等；</li><li>新技术的影响</li></ul></li><li>改进：根据得到的量化信息，可以帮助我们识别要因、查找问题的根源，以及能提高产品质量和过程效率的其它方法；与以前的量化信息比较，可以验证这些方法是否有效</li></ul></li><li><p><strong>软件度量分类</strong></p><ul><li>四个基本度量项：<ul><li>规模：软件工作产品的大小</li><li>工作量：完成各软件工作产品和活动所用人时</li><li>进度：各软件工作产品和活动开始和结束的时间</li><li>质量缺陷：在各软件工作产品和活动中产生的缺陷数</li></ul></li></ul></li><li><p><strong>软件度量分类-规模数量</strong></p><ul><li>规模度量：<ul><li>SRS文档页数</li><li>HLD文档页数</li><li>LLD文档页数</li><li>代码量</li><li>UT用例数</li><li>IT用例数</li><li>ST用例数、</li></ul></li></ul></li><li><p><strong>其它度量指标</strong></p><ul><li>依据基本度量数可以分析，综合得到其它度量数据或指标</li><li>缺陷密度：<ul><li>研发活动发现缺陷密度</li><li>研发活动引入缺陷密度</li><li>工作产品缺陷密度</li></ul></li><li>生产率</li><li>测试执行效率</li><li>用例密度</li></ul></li></ul><hr><p><img src="https://upload-images.jianshu.io/upload_images/9937522-7e53a0f57b506201.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="软件质量管理体系"><br><img src="https://upload-images.jianshu.io/upload_images/9937522-d3ec8bd43fe25655.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="软件质量模型"><br><img src="https://upload-images.jianshu.io/upload_images/9937522-ac944462535af1dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="软件质量活动"></p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>测试-软件研发组织和流程</title>
      <link href="/2019/05/02/%E6%B5%8B%E8%AF%95-%E8%BD%AF%E4%BB%B6%E7%A0%94%E5%8F%91%E7%BB%84%E7%BB%87%E5%92%8C%E6%B5%81%E7%A8%8B/"/>
      <url>/2019/05/02/%E6%B5%8B%E8%AF%95-%E8%BD%AF%E4%BB%B6%E7%A0%94%E5%8F%91%E7%BB%84%E7%BB%87%E5%92%8C%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="http://music.163.com/video?id=78BD764FD77D1EBC8A9780E28AEB5333&userid=1388867694" target="_blank" rel="noopener">此树，昔年汝去时栽之。十年生死两隔，今已亭亭如盖矣。卿卿，十年之日为你报了仇。你可愿，如梦一见</a></p></blockquote><ul><li><h3 id="软件研发组织和流程"><a href="#软件研发组织和流程" class="headerlink" title="软件研发组织和流程"></a>软件研发组织和流程</h3><ul><li><p>#####软件研发相关要素</p><ul><li>人员：只有合适的人员借助合适的工具经过合适的过程才能研发出高质量的软件</li><li>过程</li><li>工具：工具为人员和过程服务，起辅助作用，起关键作用的是人员和过程</li></ul></li><li><p>#####基本软件研发流程</p><ul><li><p><strong>瀑布模型</strong>：应用的最为广泛的一种模型，也是最容易理解和掌握的模型，然而他的缺陷也是显而易见的。（人员闲置）<br><img src="https://upload-images.jianshu.io/upload_images/9937522-d819985182b2d183.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>优点：简单</li><li>缺点：测试介入较晚，人员闲置严重，后续工作跟不上。项目开发完成后才招测试人员，那么可能是瀑布模型，不适合需求频繁变更的项目。不适合于大的项目，适用于小规模传统项目业务研发。</li></ul></li><li><p><strong>螺旋模型</strong>:综合了基本的瀑布式模型和演化/渐增原型方法（技术储备不足）。<br><img src="https://upload-images.jianshu.io/upload_images/9937522-4a328dd1138d9e29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>与瀑布不同点：螺旋模型有替代方案，是多个瀑布模型的并行集合。充分考虑了风险问题，故设计了替代方案。</li><li>优点：充分考虑风险，抗风险能力强</li><li>缺点：成本太高，需要专业的风险分析专家参与</li><li>适用范围：与生命财产相关的系统。</li><li><code>理解：</code><ul><li>1.软件分多个版本开发，每个版本就是一次螺旋。</li><li>2.每个版本按照这样的顺序进行：<ul><li>1）确定软件目标，选取定实施方案，弄清项目开发的限制条件；（图中左上象限）</li><li>2）分析所选取方案，考虑如何识别和消除风险；（图中右上象限）</li><li>3）实施软件开发；（图中右下象限）</li><li>4）评价开发工作，提出修正建议，调整计划。（图中右下象限、左下象限）</li></ul></li><li>3.需求不是一次获取和实现的，通过多个螺旋来完善。</li><li>4.计划也不是一次成型的，每次螺旋都需要调整。</li></ul></li></ul></li><li><p><strong>RUP流程</strong>：所有工作流在各个阶段都有体现<br><img src="https://upload-images.jianshu.io/upload_images/9937522-3758a89c785f1b98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>优点：<ul><li>1、RUP的思想打破了“需求-设计-编码-测试”这样的传统瀑布模式，需求、设计、编码、测试这些工作其实一直都在进行的，只是不同时间比重不一样。这个思想是和实际情况非常吻合。</li><li>2、用户可在早期提出变更并进行修复，从而有效控制变更风险及代价（往往都是局部变更）</li><li>3、可在早期增强用户的信心（看到了半成品）</li></ul></li><li>缺点：<ul><li>1、要有专业的架构师（架构师的职责），当功能与功能之间联系太过紧密的话，不太使用rup模型，比如登陆与注册的联系</li><li>2、已经确定了的功能将不允许变更，但由于因为设计引起的内在联系引起的变更是无法控制的。</li></ul></li><li>适用范围：<ul><li>大型复杂的项目研发，耦合度较低的系统。</li></ul></li></ul></li><li><p><strong>IPD流程</strong>：从整个产品角度出发，不仅仅针对研发<br><img src="https://upload-images.jianshu.io/upload_images/9937522-2e45f98e1b26f56f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>优点：<ul><li>1、将软硬件研发及生产、销售等各个部门有效整合，集中在一个平台下统一管理，提高了决策的准确性及时效性。</li><li>2、利于各部门关键数据的共享</li></ul></li><li>缺点：<ul><li>1、管理成本高</li><li>2、部门之间的协调关系较复杂</li></ul></li><li>适用范围：<ul><li>大型软硬件集成厂商</li></ul></li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>测试-软件中引入缺陷的原因</title>
      <link href="/2019/05/02/%E6%B5%8B%E8%AF%95-%E8%BD%AF%E4%BB%B6%E4%B8%AD%E5%BC%95%E5%85%A5%E7%BC%BA%E9%99%B7%E7%9A%84%E5%8E%9F%E5%9B%A0/"/>
      <url>/2019/05/02/%E6%B5%8B%E8%AF%95-%E8%BD%AF%E4%BB%B6%E4%B8%AD%E5%BC%95%E5%85%A5%E7%BC%BA%E9%99%B7%E7%9A%84%E5%8E%9F%E5%9B%A0/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="http://music.163.com/song?id=553386230&userid=1388867694" target="_blank" rel="noopener">你永远也不知道 在车站候车 看起来文文静静的女孩子 耳机里在听些什么</a></p></blockquote><ul><li>软件中引入缺陷的原因<ul><li>软件缺陷和bug<ul><li>软件缺陷：既指静态存在于软件工作产品（文档、代码）中的错误，也指软件运行时由于这些错误被激发引起的和软件产品预期属性的偏离现象。</li><li>Bug：代码中的缺陷。有时也被泛指因软件产品内部的缺陷引起的软件产品最终运行时和预期属性的偏离。</li><li>软件错误、软件缺陷、Bug在实际工作中可以认为一样。</li></ul></li><li>常见的引入缺陷的原因<ul><li>开发过程缺乏有效的沟通，或者没有进行沟通</li><li>软件复杂度越来越高</li><li>编程中产生错误</li><li>需求不断变更</li><li>项目进度的压力不重视开发文档</li><li>软件开发工具本身隐藏的问题</li></ul></li><li>缺陷类型：所有缺陷可以归纳为三类<ul><li>遗漏：规定的或预期的需求未体现在产品中（可能未将规格说明全面实现，也可能需求分析阶段就遗漏了需求）</li><li>错误：未将规格说明正确实现（可能设计错误、也可能编码错误）</li><li>额外的实现：规格说明并未规定的需求被纳入产品，得到实现</li></ul></li></ul></li></ul><hr><p><img src="https://upload-images.jianshu.io/upload_images/9937522-2e5ef345dbc7d79f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="软件缺陷的产生原因"></p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>测试的相关概念</title>
      <link href="/2019/05/02/%E6%B5%8B%E8%AF%95%E7%9A%84%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/"/>
      <url>/2019/05/02/%E6%B5%8B%E8%AF%95%E7%9A%84%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h3 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h3><ul><li>开发 ：项目经理/架构师（软件设计） 高级开发 中级开发 初级开发<ul><li>开发管理：需求 测试报告 计划 测试用例</li></ul></li><li>测试：测试经理 高级测试 中级测试 初级测试 <ul><li>1 功能测试/性能测试</li><li>2 系统测试<ul><li>bug：<ul><li>致命bug</li><li>严重bug 影响流程</li><li>一般bug</li><li>建议bug</li></ul></li><li>接口测试 ：工具测试（app，web工具）</li><li>自动化测试</li></ul></li><li>3 操作文档（帮助文档）</li></ul></li></ul><blockquote><p>软件测试的目的和定义</p></blockquote><ul><li>什么是软件测试<ul><li>定义：<ul><li>软件测试是一个过程，包含若干活动，运行软件进行测试只是活动之一</li><li>进行软件测试可以是人工方式，也可以借助于工具</li><li>进行软件测试可以运行软件也可不运行软件</li><li>软件测试的目的不仅仅是为了发现错误<ul><li>目的：以最少的人力、物力和时间找出软件中潜在的各种错误和缺陷，通过修正各种错误和缺陷提高软件质量，回避软件发布后由于潜在的软件缺陷和错误造成的隐患所带来的商业风险</li><li>目的-证明：</li><li>获取系统在可接受风险范围内可用的信心</li><li>尝试在非正常情况和条件下的功能和特性</li><li>保证一个工作产品是完整的并且可用或者可被集成</li><li>目的-检测</li><li>发现缺陷，错误和系统不足</li><li>定义系统的能力和局限性</li><li>提供组件，工作产品和系统的质量信息</li><li>目的-预防</li><li>澄清系统的规格和性能</li><li>提供预防或减少可能制造错误的信息</li><li>在过程中尽早检测错误</li><li>确认问题和风险并且提前确认这些问题和风险的途径</li><li>软件测试的主要工作</li><li>检测代码，评审开发文档</li><li>进行测试设计，写作测试文档（测试计划，测试方案，测试用例）</li><li>执行测试，发现软件缺陷，提交缺陷报告，并确认缺陷最终得到了修正</li><li>通过测试度量软件的质量</li></ul></li></ul></li></ul></li></ul><blockquote><p>软件生命周期</p></blockquote><ul><li>计划（开发/测试）<ul><li>工作内容 ：<ul><li>确定软件开发总目标</li><li>给出软件的功能，性能，可靠性以及接口等方面的设想</li><li>研究完成该项目的可行性，探讨问题解决方案；</li><li>对可供开发使用的资源、成本、可取得的效益和开发进度作出估计；</li><li>制定完成开发任务的实施计划。</li></ul></li></ul></li><li>需求分析：<ul><li>工作内容：<ul><li>对开发的软件进行详细的定义，由需求分析人员和用户共同讨论决定，那些需求是可以满足的，并且给予了确切的描述，写出软件需求说明书SRS（software requirement specification）</li></ul></li><li>软件研发的类型不同，需求的来源也不同，需求分析中的用户针对的具体内容也不同</li><li>针对产品的软件研发（自主研发）<ul><li>需求来源：市场调研</li><li>用户：市场调研人员</li><li>特点：自己想研发什么，自己就来研发</li></ul></li><li>针对项目的软件研发（需求开发）<ul><li>需求来源：客户要求</li><li>用户：实际用户</li><li>特点：别人想研发什么，我们帮助研发</li></ul></li></ul></li><li>设计<ul><li>工作内容<ul><li>设计是软件工程的技术核心，这个阶段需要完成设计说明书</li><li>概要设计（HLD），在设计阶段把各项需求转换成相应的体系结构，每一部分是功能明确的模块；</li><li>详细设计（LLD），对每个模块要完成的工作进行具体的描述。</li></ul></li></ul></li><li>编码<ul><li>工作内容：<ul><li>把软件设计转换成计算机可以接受的程序，即写成以某个程序设计语言表示的源程序清单，使用RDBMS工具建立数据库。</li></ul></li></ul></li><li>测试<ul><li>工作内容：<ul><li>测试时检验软件是否符合客户需求，达到质量要求，一般由独立的小组独立执行，测试工作分为：<ul><li>单元测试</li><li>集成测试</li><li>系统测试</li></ul></li></ul></li></ul></li><li>运行维护<ul><li>工作内容：<ul><li>这个阶段将软件交付用户投入正式使用，以后便进入维护阶段，可能由多种原因需要对它进行修改，如软件错误，系统软件升级，增强软件功能，提高性能</li></ul></li></ul></li></ul><hr><p><img src="https://upload-images.jianshu.io/upload_images/9937522-506a5b129c3a23d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="软件测试"></p><p><img src="https://upload-images.jianshu.io/upload_images/9937522-04c02995a526649f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目开发生命周期"></p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>测试-测试过程</title>
      <link href="/2019/05/02/%E6%B5%8B%E8%AF%95-%E6%B5%8B%E8%AF%95%E8%BF%87%E7%A8%8B/"/>
      <url>/2019/05/02/%E6%B5%8B%E8%AF%95-%E6%B5%8B%E8%AF%95%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="http://music.163.com/video?id=B4C3809F23BF9245D6E22AFDE5E9D024&userid=1388867694" target="_blank" rel="noopener">此物…..此物…….此物最相思！</a></p></blockquote><h3 id="测试过程"><a href="#测试过程" class="headerlink" title="测试过程"></a>测试过程</h3><p>组织机构：公司人员结构<br>外包：1. 项目外包 2. 人力外包</p><ul><li><p><strong>测试阶段划分</strong></p><ul><li>单元测试(<code>白盒测试</code>)–&gt;集成测试(<code>灰盒测试</code>)–&gt;系统测试(<code>黑盒测试</code>)</li><li>单元测试：<ul><li>单元测试是针对软件基本组成单元（软件设计的最小单位）来进行正确性检验的测试工作</li><li>单元测试的目的是检测软件模块对<code>《详细设计说明书》</code>的符合程度</li></ul></li><li>集成测试：<ul><li>集成测试是在单元测试的基础上，将所有模块按照概要设计要求组装成为子系统或系统，验证组装后功能以及模块间接口是否正确的测试工作</li><li>集成测试的目的是检测软件模块对<code>《概要设计说明书》</code>的符合程度</li></ul></li><li>系统测试<ul><li>系统测试是将已经集成好的软件系统，作为整个基于计算机系统的一个元素，与计算机硬件、外设、某些支持软件、数据和人员等其他系统元素结合在一起，在实际运行（使用）环境下，对计算机系统进行一系列的测试工作</li><li>系统测试的目的在于通过与《需求规格说明书》作比较，发现软件与系统需求定义不符合或与之矛盾的地方 </li></ul></li></ul></li><li><p><strong>单元、集成、系统测试的比较</strong></p><ul><li>测试方法不同<ul><li>单元测试属于白盒测试范畴</li><li>集成测试属于灰盒测试范畴</li><li>系统测试属于黑盒测试范畴</li></ul></li><li>考察范围不同<ul><li>单元测试主要测试单元内部的数据结构、逻辑控制、异常处理等</li><li>集成测试主要测试模块之间的接口和接口数据传递关系，以及模块组合后的整体功能</li><li>系统测试主要测试整个系统相对于需求的符合度</li></ul></li><li>评估基准不同<ul><li>单元测试的评估基准主要是<code>逻辑覆盖率</code></li><li>集成测试的评估基准主要是<code>接口覆盖率</code></li><li>系统测试的评估基准主要是<code>测试用例对需求规格的覆盖率</code></li></ul></li></ul></li><li><p><strong>回归测试</strong></p><ul><li>软件在测试或其他活动中发现的缺陷经过修改后，应该进行回归测试（Regression Testing）。目的是验证缺陷得到了正确的修复，同时对系统的变更没有影响以前的功能</li><li>回归测试可以发生在任何一个阶段，包括单元测试，集成测试，系统测试。</li></ul></li><li><p><strong>回归测试流程</strong></p><ul><li>以下流程适合于单元测试，集成测试，系统测试<ul><li>1、在测试策略制定阶段，制定回归测试策略</li><li>2、确定需要回归测试的版本</li><li>3、回归测试版本发布，按照回归测试策略执行回归测试</li><li>4、回归测试通过，关闭缺陷跟踪单（问题单）</li><li>5、回归测试不通过，缺陷跟踪单返回开发人员，开发人员重新修改问题，再次提交测试人员回归测试</li></ul></li></ul></li><li><p><strong>回归测试策略一</strong></p><ul><li>完全重复测试：重新执行所有在前期测试阶段建立的测试用例，来确认问题修改的正确性和修改的扩散局部影响性</li><li>选择性重复测试：即有选择地重新执行部分在前期测试阶段建立的测试用例，来测试被修改的程序<ul><li>覆盖修改法：即针对被修改的部分，选取或重新构造测试用例验证没有错误再次发生的用例选择方法。</li><li>周边影响法：该方法不但要包含覆盖修改法确定的用例，还需要分析修改的扩散影响，对那些受到修改间接影响的部分选择测试用例验证它没有受到不良影响。该方法比覆盖修改法更充分一点。</li><li>指标达成方法：这是一种类似于单元测试的方法，在重新执行测试前，先确定一个要达成的指标，如修改部分代码100%的覆盖、与修改有关的接口60%的覆盖等，基于这种要求选择一个最小的测试用例集合。</li></ul></li></ul></li><li><p><strong>回归测试自动化</strong></p><ul><li>后面的功能由前面的数据支撑，而前面的功能没有bug，那么可以通过自动化脚本来写前面的测试部分。</li></ul></li><li><p><strong>什么时候需要回归测试</strong></p><ul><li>bug修复之后</li><li>大版本升级</li></ul></li><li><p><strong>其它测试阶段</strong></p><ul><li><p>有用户参与的测试阶段</p><ul><li>验收测试</li><li>α测试：现场测试（开发者在现场）</li><li>β测试：多用户/多环境的现场测试（开发者不在现场）</li></ul></li><li><p>测试过程：</p><ul><li>上线测试：验收测试之前的第一步测试</li><li>验收测试：在客户端试运行</li></ul></li></ul></li><li><p><strong>测试过程阶段划分</strong></p><ul><li>测试计划阶段-测试计划</li><li>测试设计阶段-测试方案</li><li>测试实现阶段-测试用例、测试规程</li><li>测试执行阶段-测试报告</li></ul></li><li><p><strong>测试总结：</strong></p><ul><li>项目功能</li><li>功能流程（联系）</li><li>测试用例/测试功能/bug的数量</li><li>收获（遇到的难点，解决的想法）</li></ul></li><li><p><strong>主要的测试文档</strong></p><ul><li>测试计划：指明测试范围、方法、资源，以及相应测试活动的时间进度安排表的文档。</li><li>测试方案：指明为完成软件或软件集成特性的测试而进行的设计测试方法的细节文档。</li><li>测试用例：指明为完成一个测试项的测试输入、预期结果、测试执行条件等因素的文档。（<code>需要评审</code>）</li><li>测试规程：指明执行测试时测试活动序列的文档。</li><li>测试报告：指明执行测试结果的文档。</li><li>测试日报：每天测试执行情况的记录和总结。</li></ul></li><li><p><strong>常见的测试模型</strong></p><ul><li>瀑布模型</li><li>H模型</li><li>V&amp;V模型</li></ul></li><li><p><strong>H模型</strong></p><ul><li>测试分两类活动：<ul><li>测试准备活动，包括测试需求分析、测试计划、测试设计、测试编码、测试验证</li><li>另一类是测试执行活动，包括测试运行、测试报告、测试结果分析等</li></ul></li><li>软件测试不仅仅指测试执行，还包括很多其他的活动。</li><li>测试是一个独立的流程，贯穿产品整个周期，与其他流程并发地进行。</li><li>测试要尽早准备，尽早执行。</li><li>各个不同阶段的测试除了简单的时间上的先后关系外，还存在触发、反复、迭代和增量关系。</li></ul></li><li><p><strong>v模型</strong></p><ul><li>V&amp;V模型实现了测试设计和测试执行相分离</li><li>V&amp;V模型揭示了软件测试活动分层和分阶段的本质特性，测试执行的顺序与开发活动相反</li></ul></li><li><p><strong>验证与确认V&amp;V</strong></p><ul><li>验证（Verification）—重点在软件<ul><li>验证是保证软件正确地实现特定功能的一系列活动</li><li>验证是检测每一阶段形成的工作产品是否与前一阶段定义的规格相一致</li><li>“Are we building the product right？”</li></ul></li><li>确认（Validation）—重点在需求<ul><li>确认是指保证所生产的软件可追溯到用户需求的一系列活动</li><li>确认是检测每一阶段的工作产品是否与最初定义的软件需求规格相一致</li><li>“Are we building the right product？”</li></ul></li></ul></li><li><p><strong>需求分析阶段的主要任务</strong></p><ul><li>需求分析，完成SRS</li><li>软件需求规格说明书的评审</li><li>进行需求跟踪</li><li>系统测试计划</li><li>系统测试计划的评审</li></ul></li><li><p><strong>需求阶段的角色和职责</strong></p><ul><li>软件开发项目经理：<ul><li>A、带领项目组分析审核工作任务书；计划</li><li>B、带领项目组与系统工程师进行需求交流并进行分析和文档化；</li><li>C、组织SRS文档评审；</li><li>D、组织需求跟踪；</li></ul></li><li>软件开发工程师：<ul><li>A、完成SRS文档；</li><li>B、完成需求跟踪；</li><li>C、参加SRS review；</li><li>D、根据SRS评审专家意见，修改SRS文档；</li><li>E、参加系统测试计划的评审；</li></ul></li><li>软件经理：A、在SRS评审结束后，批准SRS文档；</li><li>软件测试项目经理：<ul><li>A、参与开发人员的软件需求分析，提出可测试性需求；</li><li>B、组织人员参与SRS的评审工作；</li><li>C、软件系统测试计划写作；</li><li>D、组织系统测试计划的评审；</li><li>E、组织本阶段测试需求跟踪；</li></ul></li><li>软件测试工程师：<ul><li>A、参与SRS评审工作；</li><li>B、协助软件测试项目经理完成软件系统测试计划写作；</li><li>C、参加系统测试计划的评审；</li><li>D、完成本阶段测试需求跟踪；</li></ul></li></ul></li><li><p><strong>概要设计阶段的主要任务</strong></p><ul><li>进行软件系统各层设计，完成HLD文档</li><li>概要设计的评审</li><li>系统测试方案，用例的设计</li><li>系统测试方案，用例的评审</li><li>需求跟踪更新</li><li>集成测试计划</li><li>集成测试计划评审</li></ul></li><li><p><strong>概要设计阶段的角色和职责</strong></p><ul><li>软件开发项目经理：<ul><li>A、安排概要设计任务，并确保有足够的资源；</li><li>B、组织概要设计文档的评审；</li><li>C、批准评审后的概要设计说明书；</li><li>D、组织需求跟踪；</li></ul></li><li>软件开发工程师：<ul><li>A、数据字典</li><li>B、完成需求跟踪；</li><li>C、参加概要设计文档review；</li><li>D、根据评审专家意见，修改概要设计文档；</li><li>E、参加系统测试方案、用例、集成测试计划的评审；</li></ul></li><li>测试经理：在集成测试计划评审结束后，批准集成测试计划。</li><li>软件测试项目经理：<ul><li>A、组织人员参与HLD的评审工作；</li><li>B、软件集成测试计划写作；</li><li>C、组织集成测试计划的评审；</li><li>D、安排相关系统测试方案、用例设计任务；</li><li>E、组织系统测试方案、用例评审；</li><li>F、组织本阶段测试需求跟踪；</li></ul></li><li>软件测试工程师：<ul><li>A、参与HLD评审；</li><li>B、参与集成测试计划的评审；</li><li>C、进行系统测试方案、用例的设计；</li><li>D、参与系统测试方案、用例评审；</li><li>E、完成本阶段的测试需求跟踪；</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>测试-测试方法</title>
      <link href="/2019/05/02/%E6%B5%8B%E8%AF%95-%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/"/>
      <url>/2019/05/02/%E6%B5%8B%E8%AF%95-%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="http://music.163.com/song?id=425684758&userid=1388867694" target="_blank" rel="noopener">一个潦草的名字,拨动了故事的弦</a></p></blockquote><ol><li><p>#####白盒测试（代码测试）：测试代码的覆盖率</p></li><li><p>#####黑盒测试（功能测试）</p><ul><li><strong>什么是黑盒测试？</strong><ul><li>把被测对象看成一个黑盒，只考虑<code>整体特性</code>，不考虑其内部具体实现。</li><li>被测对象可以时一个系统，一个子系统，一个模块，一个子模块，一个函数等。</li><li>黑盒测试又可以被称为基于规格的测试。</li></ul></li><li><strong>常见的黑盒测试类型</strong><ol><li><em>功能性测试：</em><ul><li>是顺序测试每个程序特性或功能</li><li>一个模块一个模块的测试，即每个功能在其最先调用的地方被测试</li></ul></li><li><em>容量测试：</em>检测软件在处理海量数据时的局限性，能发现系统效率方面的问题。</li><li><em>负载测试：</em>检测系统在一个很短时间内处理一个巨大的数据量或执行许多功能调用上的能力</li><li><em>恢复性测试：</em>主要保证系统在崩溃后能够恢复外部数据的能力</li></ol></li></ul></li><li><p><strong>黑盒测试来源于质量模型</strong></p></li><li><p><strong>功能性测试所测试的软件质量特性</strong></p><ul><li><em>外部和内部质量</em><ul><li>功能性：适合/准确/互操作/保密安全性</li><li>可靠性：成熟/容错/易恢复性</li><li>易用性：易理解/易学/易操作/吸引性</li><li>效率： 时间特性/资源利用性</li><li>维护性：易分析/易改变/稳定/易测试性</li><li>可移植性：适应/易安装/共存/易替换性</li></ul></li></ul></li><li><p><strong>常用黑盒测试方法：</strong></p><ul><li>等价类划分法 </li><li>边界值分析法 </li><li>因果图分析法 </li><li>判定表法 </li><li>状态迁移法</li></ul></li><li><p><strong>黑盒测试特点：</strong></p><ul><li><em>优点：</em><ul><li>对于更大的代码单元来说（子系统/系统级），比白盒测试<code>效率高</code></li><li>测试人员不需要了解现实的细节，包括特定的编程语言</li><li>从用户的视角进行测试，很容易被大家理解和接受</li><li>有助于暴露任何规格不一致或有歧义的问题</li></ul></li><li><em>缺点：</em><ul><li>没有清晰的和简明的规格，测试用例时很难设计的</li><li>不能控制内部执行路径，会有很多内部程序路径没有被测试到</li><li>不能直接针对特定的程序段，这些程序可能非常复杂</li></ul></li></ul></li><li><p><strong>灰盒测试（黑盒测试和白盒测试结合）</strong></p><ul><li>典型的灰盒测试比如集成测试和系统测试时借助log信息</li></ul></li><li><p><strong>以下属于什么测试</strong></p><ul><li>LLD：详细设计文档 —&gt;    单元测试-白盒</li><li>SRS：需求分析文档 —&gt;    系统测试-黑盒</li><li>HLD：概要设计文档 —&gt;    集成测试-灰盒</li></ul></li></ol><hr><ul><li><em>LLD（详细设计文档 ）</em><ul><li>单元测试UT   </li><li>白盒测试范畴  主要测试单元内部的数据结构 逻辑控制 异常处理等</li></ul></li></ul><hr><ul><li><em>HLD（概要设计文档）</em><ul><li>集成测试IT  </li><li>灰盒测试范畴   主要测试模块之间的接口和接口数据传递关系，以及模块组合后的整体功能</li></ul></li></ul><hr><ul><li><em>SRS（需求设计文档）</em><ul><li>系统测试ST   </li><li>黑盒测试范畴</li><li>主要测试整个系统相对于需求的符合度</li></ul></li></ul><hr><ol start="9"><li><p><strong>产品软件：</strong>把行业的共同点抽出来做一套软件。</p><ul><li>软件研发可以看成一个生成过程，在这个过程中会有产品输出，或者叫做工件输出</li><li>输出的产品分为两类：<ul><li>最终产品：编译后的软件，用户手册</li><li>中间产品：SRS，HLD，LLD，代码等</li></ul></li><li>无论是最终产品还是中间产品，都可以分为代码和文档</li><li>文档进一步细分：<ul><li>开发文档：SRS，HLD,LLD</li><li>测试文档：测试计划，测试方案，测试用例</li></ul></li></ul></li><li><p><strong>静态测试/动态测试</strong></p><ul><li><em>静态测试：</em>不运行被测试软件，而是采用其它手段和技术对被测试软件进行检测的一种测试技术，常用技术有<code>静态分析技术</code></li><li><em>动态测试：</em>按照预先设计的数据和步骤去运行被测软件系统，从而对被测软件系统进行检测的一种测试技术。常用技术有<code>动态分析技术</code></li></ul></li><li><p><strong>静态分析技术</strong></p><ul><li><em>定义：</em>静态分析是一种不通过执行程序二分析程序执行的技术</li><li><em>功能：</em>检查软件的表示和描述是否一致，没有冲突或者没有歧义，它瞄准的是纠正软件系统在描述，表示和规格上的错误，因此是任何进一步测试执行的前提。</li><li><em>主要有三种不同的程序测试可能性</em><ul><li>考虑程序是否满足编码规则，语法上是否具有一致性和完整性</li><li>考虑文档描述是否符合规范，准确，便于查阅</li><li>考虑程序和文档之间的一致性</li></ul></li></ul></li><li><p><strong>动态分析技术</strong></p><ul><li><em>定义：</em>对软件系统运行行为进行分析，包含程序在受控的环境下使用特定的输入进行正式的运行，和期望的结果比较以检查系统运行是正确还是不正确。</li><li><em>常用的动态分析技术</em><ul><li>路径测试</li><li>分支测试</li><li>性能测试</li></ul></li></ul></li><li><p><strong>人工测试和自动化测试</strong></p><ul><li><em>人工测试：</em>测试活动由人来完成，狭义上是指测试执行由人工完成，是最基本的测试形式</li><li><em>自动化测试：</em>一般是指通过计算机模拟人的测试行为，替代人的测试活动，狭义上是指测试执行由计算机来完成</li><li><em>自动化测试的意义：</em><ul><li>对程序新版本运行前一版本执行的测试，提高回归测试效率</li><li>可以运行更多更频繁的测试，比如冒烟测试</li><li>更好的利用资源</li><li>可以执行手工测试困难或不可能做的测试</li><li>测试具有一致性和可重复性，即自动化测试的步骤和结果是完全一样的</li><li>测试的复用性，即自动化测试脚本可以拆分开给其它测试脚本使用</li><li>可以更快的将软件推向市场，软件发布前进行高效的回归测试，减少软件发布的时间</li><li>增加软件的信任度，通过自动化测试提高了测试效率。</li></ul></li><li><em>自动化测试的限制</em><ul><li>不能取代手工测试，自动化测试只能提高测试效率，不能提高测试有效性，即不可能发现更多缺陷</li><li>手工测试比自动测试发现的缺陷更多</li><li>对测试设计依赖性极大，测试设计的不好会遗漏问题</li><li>自动化测试对软件开发具有很大的依赖性，开发上出现变更可能导致前面的自动化测试完全失效</li><li>工具本身并不具备想象力，智能。</li></ul></li></ul></li><li><p><strong>性能测试</strong></p><ul><li><em>什么是软件性能：</em>软件的性能是软件的一种非功能特性，它关注的不是软件是否能够完成特定的功能，而是在完成该功能时展示出来的及时性。<ul><li><code>理解：</code>由定义可知性能关注的是软件的非功能特性，所以一般来说性能测试介入的时机是在功能测试完成之后。另外，由定义中的及时性可知性能也是一种指标，可以用时间或其它指标来衡量，通常我们会使用某些工具或手段来检测软件的某些指标是否达到了要求，这就是性能测试。 </li></ul></li><li><em>性能测试定义：</em>指通过自动化的测试工具模拟多种正常、峰值以及异常负载条件来对系统的各项性能指标进行测试</li><li><em>性能测试类型</em><ul><li>基准测试：在给系统施加较低压力时，查看系统的运行状况并记录相关数做为基础参考</li><li>负载测试：是指对系统不断地增加压力或增加一定压力下的持续时间，直到系统的某项或多项性能指标达到安全临界值，例如某种资源已经达到饱和状态等 。</li><li>压力测试：压力测试是评估系统处于或超过预期负载时系统的运行情况，关注点在于系统在峰值负载或超出最大载荷情况下的处理能力。</li><li>稳定性测试：在给系统加载一定业务压力的情况下，使系统运行一段时间，以此检测系统是否稳定。</li><li>并发测试：测试多个用户同时访问同一个应用、同一个模块或者数据记录时是否存在死锁或者其他性能问题，</li></ul></li><li><em>性能测试包含那些方面：</em><ul><li>响应时间</li><li>吞吐量</li><li>并发数</li><li>资源利用率</li></ul></li></ul></li></ol><hr><p><img src="https://upload-images.jianshu.io/upload_images/9937522-efa594f60a37e4a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="测试方法"></p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>测试方法</title>
      <link href="/2019/05/02/%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/"/>
      <url>/2019/05/02/%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><strong><em>测试用例测试方法：判定表，因果图，等价类，边界值</em></strong></p><hr><blockquote><ol><li>边界值测试：</li></ol></blockquote><p>一种<a href="https://baike.baidu.com/item/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95" target="_blank" rel="noopener">黑盒测试</a>方法，是对等价类分析方法的一种补充,由长期的测试工作经验得知，大量的错误是发生在输入或输出的边界上。因此针对各种边界情况设计<a href="https://baike.baidu.com/item/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B" target="_blank" rel="noopener">测试用例</a>，可以查出更多的错误。</p><p>边界条件测试是环绕边界值的测试。通常意味着测试软件各功能是否能正确处理最大值，最小值或者所设计软件能够处理的最长的字符串等等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">等价类划分法将程序所有可能的输入数据（有效的和无效的）划分成若干个等价类。然后从每个部分中选取具有代表性的数据当做测试用例进行合理的分类，测试用例由有效等价类和无效等价类的代表组成，从而保证测试用例具有完整性和代表性。</span><br><span class="line">有效和无效的输入（以某个注册的输入框为例）</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>等价划分测试</li></ol></blockquote><p>等价划分测试是根据等价类设计<a href="https://baike.baidu.com/item/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B" target="_blank" rel="noopener">测试用例</a>的一种技术。是<a href="https://baike.baidu.com/item/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95" target="_blank" rel="noopener">黑盒测试</a>的典型方法之一，通过把被<a href="https://baike.baidu.com/item/%E6%B5%8B%E8%AF%95%E7%A8%8B%E5%BA%8F" target="_blank" rel="noopener">测试程序</a>所有可能的输入数据域划分成若干部分。从每一部分中选取少数有代表性的数据作为测试用例，可有效减少测试次数，极大提高软件测试效率，缩短软件开发周期．等价类划分测试的目的就是为了在有限的测试资源的情况下，用少量有代表性的数据得到比较好的测试效果。有效等价类和<a href="https://baike.baidu.com/item/%E6%97%A0%E6%95%88%E7%AD%89%E4%BB%B7%E7%B1%BB" target="_blank" rel="noopener">无效等价类</a>。有效等价类中的数据代表的是一组符合需求文档的正确的有意义数据。无效等价类则正相反。<br><code>组合方法：控制变量法</code><br><code>有效等价类（合法输入）------------&gt;预期结果</code><br><code>无效等价类（不合法输入）----------&gt;预期结果</code></p><table><thead><tr><th>输入</th><th>有效等价类</th><th>无效等价类</th></tr></thead><tbody><tr><td></td><td>1.6-18个字符</td><td>4.5个字符</td></tr><tr><td></td><td>2.字母开头</td><td>5.19个字符</td></tr><tr><td></td><td>3.字母、数字、下划线</td><td>6.非字母开头</td></tr><tr><td></td><td>9.邮箱地址不存在</td><td>7.非字母、数字、下划线</td></tr><tr><td></td><td></td><td>8.邮箱地址已经存在</td></tr><tr><td></td><td></td><td></td></tr><tr><td>输出</td><td></td><td></td></tr><tr><td>邮箱地址可注册</td><td>1，2，3，9</td><td></td></tr><tr><td>长度为6-18个字符</td><td>4，2，3</td><td>5，2，3</td></tr><tr><td>邮箱地址为字母开头</td><td>6，1，3</td><td></td></tr><tr><td>邮箱地址为字母、数字、下划线</td><td>1，2，7</td><td></td></tr><tr><td>邮箱地址已注册</td><td>1，2，3，8</td><td></td></tr></tbody></table><blockquote><ol start="3"><li>判定表</li></ol></blockquote><p>判定表的英文是decision table，是指一个表格，用于显示条件和条件导致动作的集合。</p><p>定义：<a href="https://baike.baidu.com/item/%E5%88%A4%E5%AE%9A%E8%A1%A8" target="_blank" rel="noopener">判定表</a>是分析和表达多逻辑条件下执行不同操作的情况的工具。</p><p>判定表的优点：能够将复杂的问题按照各种可能的情况全部列举出来，简明并避免遗漏。因此，利用判定表能够设计出完整的<a href="https://baike.baidu.com/item/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B" target="_blank" rel="noopener">测试用例</a>集合。</p><p>在一些数据处理问题当中，某些操作的实施依赖于多个逻辑条件的组合，即：针对不同逻辑条件的组合值，分别执行不同的操作。判定表很适合于处理这类问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">【判定表的合并规则：</span><br><span class="line">1、以相同动作项出发；</span><br><span class="line">2、相同的条件项直接合并；</span><br><span class="line">3、相反的条件忽略（注意：此处为一般情况，需结合业务再次明确其必要性，否则不予合并】</span><br><span class="line">条件和动作相反都是必测的，如全部输入和全部不输入</span><br><span class="line">注意一些单引号、</span><br></pre></td></tr></table></figure><p><code>判定表的合并规则：</code><br><code>1 以相同的动作和项出发</code><br><code>2 相同的条件直接合并</code><br><code>3 相反的条件忽略</code></p><table><thead><tr><th></th><th></th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th></tr></thead><tbody><tr><td></td><td>没有输入</td><td>y</td><td>n</td><td>n</td><td>n</td><td>n</td><td>n</td></tr><tr><td></td><td>商品名称</td><td>y</td><td>y</td><td>n</td><td>n</td><td>n</td><td>n</td></tr><tr><td>条件</td><td>商品货号</td><td>y</td><td>y</td><td>y</td><td>n</td><td>n</td><td>n</td></tr><tr><td></td><td>价格开始</td><td>y</td><td>y</td><td>y</td><td>y</td><td>n</td><td>n</td></tr><tr><td></td><td>价格结束</td><td>y</td><td>y</td><td>y</td><td>y</td><td>y</td><td>n</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>所有商品信息</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>查询出有这个输入关键字的商品名称</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>动作</td><td>查询出有这个输入关键字的商品货号</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>起始价</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>最高价</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>没有数据显示</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>没有数据显示</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><blockquote><ol start="4"><li>因果图（鱼骨图）方法：生成判定表</li></ol></blockquote><p>左边列条件，右边列结果<br>一般是针对比较复杂的情况，可能出现的情况和结果，主要是分析出判定表的条件桩和动作桩<br>先鱼骨图，再做判定表</p><hr><p>流程分析法<br>前提是要画好流程图，分清三种流程，分别测一遍。<br>基本流——正常流程<br>备选流——分支，换了个条件<br>异常流——异常操作，强制性终端操作<br>以银行转账为例<br>基本流放入银行卡→输入密码→输入转账卡号→输入转账金额→转账人金额减少，被转账人金额增加<br>备选流：放入卡号、正确输入密码、账号输入错误、没有账号<br>输入转账账号、取消后续操作<br>输入转账账号、输入金额但余额不足<br>异常流：放入卡号→密码输入错误3次，卡被冻结，无法转账</p><hr><p>图片上传测试：<br>1.功能测试<br>（1）选择符合要求的图片，上传——–上传成功；<br>（2）上传成功的图片名称显示———-显示正常（根据需求）<br>（3）查看，下载上传成功的图片——–上传的图片可查看或下载<br>（4）删除上传成功的图片————-可删除<br>（5）替换上传成功的图片————-可替换<br>（6）上传图片是否支持中文名称——–根据需求而定<br>（7）图片路径是否可手动输入———-根据需求而定<br>（8）手动输入正确的图片路径，上传—–上传成功<br>（9）手动输入错误的图片路径，上传—–提示，不能上传</p><p>2.图片大小测试<br>（1）符合格式，总大小稍小于限制大小的图片——上传成功<br>（2）符合图片，总大小等于限制大小的图片——–上传成功<br>（3）符合图片总大小稍大于限制大小的图片——–在上传初提示附件过大<br>（4）小为0kb的txt图片———————–不能上传</p><p>3.图片名称测试<br>（1）图片名称过长。Win2000标准：255个字符（指在英文的字符下），如果是中文不超过127个汉字—–提示过长<br>（2）图片名称达到最大长度（中文，英文或混在一起）上传后名称显示，页面排版———–页面显示正常<br>（3）图片名称中包含特殊字符————-根据需求而定<br>（4）图片名全为中文——————–根据需求而定<br>（5）图片名全为英文——————–根据需求而定<br>（6）图片名为中、英混合—————–根据需求而定</p><p>4.图片类型测试<br>（1）上传正确格式—————–上传成功<br>（2）上传不允许的格式————–提示不能上传<br>（3）上传rar,zip等打包图片（多图片压缩）———根据需求而定</p><p> 5.安全性测试<br>（1）上传可执行图片（exe图片）—————–根据需求而定<br>（2）上传常见的木马图片————————提示不能上传<br>（3）上传时服务器空间已满———————-有提示<br>（4）上传时服务器验证————————–所有的验证都在服务端，不能在客户断验证<br>（5）上传时绕过验证，替换j_sessionid———–验证失败<br>（6）上传时绕过验证，删除j_sessionid———–验证失败</p><p> 6.性能测试<br>（1）上传时网速很慢（限速）—————–当超过一定时间，提示<br>（2）上传过程断网————————–有提示是否上传成功<br>（3）上传过程服务器停止工资——————有提示是否上传成功<br>（4）上传过程服务器的资源利用率—————在正常范围<br>（5）发送多个上传请求<br>（6）对接口进行压力测试<br>（7）响应时间、吞吐量、并发数记录</p><p>7.接口测试<br>（1）接口参数化：特殊字符、参数类型、参数有、无、null、必选参数、组合参数、边界值<br>（2）接口功能测试：    业务流程———正常场景、异常场景<br>（3）接口性能：响应时间、吞吐量、并发数<br>（4）接口安全：敏感信息加密、必要参数后端验证、接口防恶意修改</p><p>8.界面测试<br>（1）界面美观性、易用性（键盘和鼠标的操作、tab跳转的顺序是否正确）———-显示正常（根据需求）<br>（2）按钮文字是否正确————–正确<br>（3）正确/错误提示的文字是否正确—————正确<br>（4）说明性文字是否正确———————–正确</p><p> 9.其他测试<br>（1）有多个上传框时，上传相同名称的图片—————根据需求而定<br>（2）上传一个正在打开的图片————————-可以上传<br>（3）图片路径是手工输入的是否限制长度—————-限制一定的长度<br>（4）上传过程中是否有取消正在上传图片的功能———–有<br>（5）保存时有没有已经选择好，但没有上传的图片———–提示上传<br>（6）选择好但是未上传的图片是否可以取消选择————可以取消选择</p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基础语法</title>
      <link href="/2019/05/02/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/05/02/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>数组</p></blockquote><ul><li><p>Python continue 语句跳出本次循环，而break跳出整个循环。<br>continue 语句用来告诉Python跳过当前循环的剩余语句，然后继续进行下一轮循环。<br>continue语句用在while和for循环中。</p></li><li><p>元组 tuple  ()<br>Python的元组与列表类似，不同之处在于元组的元素不能修改字典 dict {}</p></li><li><p>字典的每个键值 key=&gt;value 对用冒号 : 分割，每个键值对之间用逗号 , 分割，整个字典包括在花括号 {} 中</p><ul><li><p>key不可重复，后面的相同键会覆盖前面键值，none可以作为键</p></li><li><p>读取：dic.get(key)  或者dic[key]<strong>set()</strong> 函数创建一个无序不重复元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等</p><ul><li>可以用来将list中的重复元素去除，然后通过循环set集合取值，重新变成list</li></ul></li></ul></li></ul><hr><blockquote><p>对象</p></blockquote><ul><li><p>类的创建</p><pre><code>class student：    name:str        age:int    address=&quot;&quot;</code></pre></li><li><p>方法：</p><pre><code>def study(self):     print(&quot;&quot;)</code></pre></li><li><p>类的实例化,对象的创建</p><pre><code>stu=student()stu.name=&quot;李白&quot;stu.age=&quot;20&quot;stu.address=&quot;中国&quot;</code></pre></li><li><p>方法的调用</p><pre><code>stu.study()</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python基础知识点</title>
      <link href="/2019/05/02/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2019/05/02/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<ul><li><p>Python程序是大小写敏感的，如果写错了大小写，程序会报错</p></li><li><p>以#开头的语句是注释，注释是给人看的，可以是任意内容，解释器会忽略掉注释。其他每一行都是一个语句，当语句以冒号:结尾时，缩进的语句视为代码块。<br>如果字符串里面有很多字符都需要转义，就需要加很多\，为了简化，Python还允许用r’ ‘表示’ ‘内部的字符串默认不转义<br>如果字符串内部有很多换行，用\n写在一行里不好阅读，为了简化，Python允许用’’’…’’’的格式表示多行内容</p></li><li><p>数组 [] () {}<br>数据类型：int float complex str bool<br>算术运算符：+ - * / % // **<br>关系运算符：&lt; &gt; = &gt;= &lt;= != ==</p></li><li><p>函数：无参无返回值函数/无参有返回值函数/有参有返回值函数/内置函数</p></li></ul><hr><ul><li>python异常处理：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    正常的操作</span><br><span class="line">except(Exception1[, Exception2[,...ExceptionN]]]):</span><br><span class="line">   发生以上多个异常中的一个，执行这块代码</span><br><span class="line">else:</span><br><span class="line">    如果没有异常执行这块代码</span><br><span class="line"></span><br><span class="line">try-finally 语句无论是否发生异常都将执行最后的代码。</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>字符串和编码：<br>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码（可变长编码”的UTF-8编码）。<br>对于单个字符的编码，Python提供了ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符<br>len()函数计算的是str的字符数，如果换成bytes，len()函数就计算字节数</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>pycharm激活</title>
      <link href="/2019/05/02/pycharm%E6%BF%80%E6%B4%BB/"/>
      <url>/2019/05/02/pycharm%E6%BF%80%E6%B4%BB/</url>
      
        <content type="html"><![CDATA[<p>没有激活的pycharm只能使用30天,所以需要激活一下.<br>简单讲分为三步:</p><ol><li><p>下载破解补丁:<br>链接: <a href="https://pan.baidu.com/s/14dJCxmnY7GXf7tQOWw6iIA" target="_blank" rel="noopener">https://pan.baidu.com/s/14dJCxmnY7GXf7tQOWw6iIA</a> 提取码: k7mu<br>不需要解压,放到任何你想放的位置,比如说你放到了D盘</p></li><li><p>修改pycharm安装目录下的bin文件夹下的<strong><code>pycharm.exe.vmoptions</code></strong><br>在文本最后面添加下载的补丁的位置</p><pre><code>-javaagent:D:/JetbrainsCrack-release-enc.jar</code></pre></li><li><p>修改pycharm安装目录下的bin文件夹下的<strong><code>pycharm64.exe.vmoptions</code></strong><br>在文本最后面添加下载的补丁的位置</p><pre><code>-javaagent:D:/JetbrainsCrack-release-enc.jar</code></pre></li></ol><p>这样就激活成功了,可以查看激活时间:<code>菜单栏--help--about</code><br><img src="https://upload-images.jianshu.io/upload_images/9937522-2b80e780f0d8160b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="可以看到已经激活到了2100年"></p><hr><p>如果是linux系统,操作也是一样的.只是要修改的bin目录下的文件名不同<br>分别为<strong><code>pycharm.vmoptions</code></strong>  ,  <strong><code>pycharm64.vmoptions</code></strong></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>django配置过滤器</title>
      <link href="/2019/05/02/django%E9%85%8D%E7%BD%AE%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>/2019/05/02/django%E9%85%8D%E7%BD%AE%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="http://music.163.com/song?id=555894912&userid=1388867694" target="_blank" rel="noopener">每日歌曲</a></p></blockquote><p>为什么需要过滤器？比如用户没有登录是发不了评论的，但是在没有配置过滤器时，用户只需要知道发表评论的地址，就可以进入这个界面。所以需要加一个地址过滤器，判断是否是用户登录了，没有登录时，如果输入的不是我们过滤掉的地址就让它回到首页，不允许访问。<br>具体配置：</p><ul><li><ol><li>在子项目新建一个mymiddleware.py的文件</li></ol><ul><li>代码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from django.shortcuts import HttpResponseRedirect</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    from django.utils.deprecation import MiddlewareMixin</span><br><span class="line">except ImportError:</span><br><span class="line">    MiddlewareMixin&#x3D;object</span><br><span class="line"></span><br><span class="line">class SimpleMiddleware(MiddlewareMixin):</span><br><span class="line">    def process_request(self,request):</span><br><span class="line">        if request.path!&#x3D;&#39;&#x2F;file&#x2F;index&#x2F;&#39; and \</span><br><span class="line">                request.path!&#x3D;&#39;&#x2F;file&#x2F;login&#x2F;&#39; and \</span><br><span class="line">                request.path!&#x3D;&#39;&#x2F;file&#x2F;find&#x2F;&#39; and \</span><br><span class="line">                request.path!&#x3D;&#39;&#x2F;file&#x2F;signin&#x2F;&#39; and \</span><br><span class="line">                request.path!&#x3D;&#39;&#x2F;file&#x2F;logout&#x2F;&#39; and \</span><br><span class="line">                request.path!&#x3D;&#39;&#x2F;file&#x2F;addUser&#x2F;&#39;:</span><br><span class="line">            # if request.session[&#39;id&#39;]!&#x3D;None: 这么写是错的，因为刚开始登录时是没有id这个session的</span><br><span class="line">            if request.session.get(&#39;id&#39;,None)!&#x3D;None: #所以需要在这里设置默认值</span><br><span class="line">                pass</span><br><span class="line">            else:</span><br><span class="line">                return HttpResponseRedirect(&#39;&#x2F;file&#x2F;index&#39;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9937522-396710f09e271ccc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置"></p><ul><li><ol start="2"><li><p>在settings.py配置</p><pre><code>&apos;file.mymiddleware.SimpleMiddleware&apos;, #配置登录访问的过滤器</code></pre></li></ol></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9937522-3d1c42e4200bd6ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>django配置一</title>
      <link href="/2019/05/01/django%E9%85%8D%E7%BD%AE%E4%B8%80/"/>
      <url>/2019/05/01/django%E9%85%8D%E7%BD%AE%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<ul><li>djanjo安装</li></ul><p>1.安装好python并配置好环境变量<br>2.安装pip并配置环境变量<br>3.pip install Django==2.1.7  （<a href="https://www.djangoproject.com/download/" target="_blank" rel="noopener">网址</a>）<br>4.python连接mysql：安装pymysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pymysql</span><br><span class="line">pip install mysqlclient</span><br></pre></td></tr></table></figure><ul><li><p>项目中各文件含义：<br>template 网页<br>static 网站资源<br>settings.py 配置 数据库链接插件<br>urls.py 主链接地址<br>models.py 表模型 做数据库的增删查改功能<br>urls.py 副链接地址<br>views.py 视图 网页互动代码</p></li><li><p>python manage.py startapp 项目名字  #初始化自己的项目</p></li><li><p>settings.py文件中的配置<br>默认DEBUG = True<br>INSTALLED_APPS 添加自己新建的项目名<br>MIDDLEWARE 添加插件功能</p></li><li><p>新建数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br><span class="line">create database djangotest default character set utf8;</span><br></pre></td></tr></table></figure></li><li><p>DATABASES 指定使用的数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES &#x3D; &#123;</span><br><span class="line">    &#39;default&#39;: &#123;</span><br><span class="line">        &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,</span><br><span class="line">        &#39;NAME&#39;: &#39;djangotest&#39;, #数据库名</span><br><span class="line">        &#39;USER&#39;: &#39;root&#39;,</span><br><span class="line">        &#39;PASSWORD&#39;: &#39;xxxx&#39;,</span><br><span class="line">        &#39;HOST&#39;: &#39;127.0.0.1&#39;,</span><br><span class="line">        &#39;PORT&#39;: &#39;3306&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>建一个与项目同级的目录名为：static<br>在settings.py最后添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">STATICFILES_DIRS&#x3D;[</span><br><span class="line">    os.path.join(BASE_DIR,&#39;static&#39;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>static中放图片<br>templates中放网页html文件<br>在自己新建的项目里新建urls.py文件</li></ul>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo基本操作</title>
      <link href="/2019/05/01/hexo%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/05/01/hexo%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo的配置在三个地方"><a href="#hexo的配置在三个地方" class="headerlink" title="hexo的配置在三个地方"></a>hexo的配置在三个地方</h1><p>一个是hexo主目录下的<code>_config.yml</code>，这个用来对整个网站的设置</p><p>另外一个是hexo主目录下themes/next中的<code>_config.yml</code>，这个用来对网站主题的设置</p><p>这第三个就是为了更加个性化的设置的，前提是要有点html，以及网页调试的基础。<code>themes/next/source/css/_custom/custom.styl</code></p><h2 id="自定义主题"><a href="#自定义主题" class="headerlink" title="自定义主题"></a>自定义主题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim _config.yml#修改hexo主目录下的配置</span><br><span class="line">theme: next#将主题设置为下载好了的next</span><br></pre></td></tr></table></figure><h2 id="自定义网站的标题、描述等"><a href="#自定义网站的标题、描述等" class="headerlink" title="自定义网站的标题、描述等"></a>自定义网站的标题、描述等</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> 6 title: NARCISSUS木</span><br><span class="line"> 7 subtitle: narcissus blog</span><br><span class="line"> 8 description: &quot;for u in my love&quot;</span><br><span class="line"> 9 keywords:</span><br><span class="line">10 author: NARCISSUS木</span><br><span class="line">11 language: zh-CN#界面语言设置为中文</span><br><span class="line">12 timezone: Asia&#x2F;Shanghai</span><br></pre></td></tr></table></figure><h2 id="next设置"><a href="#next设置" class="headerlink" title="next设置"></a>next设置</h2><ul><li><p>主题风格选择</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">181 scheme: Mist#选择mist这个风格</span><br></pre></td></tr></table></figure></li><li><p>页面底部设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">65   copyright:#留空显示author</span><br><span class="line">66 </span><br><span class="line">67   powered:#不显示hexo授权图片</span><br><span class="line">68     # Hexo link (Powered by Hexo).</span><br><span class="line">69     enable: false</span><br><span class="line">70     # Version info of Hexo after Hexo link (vX.X.X).</span><br><span class="line">71     version: false</span><br><span class="line">72 </span><br><span class="line">73   theme:#不显示hexo版本内容</span><br><span class="line">74     # Theme &amp; scheme info link (Theme - NexT.scheme).</span><br><span class="line">75     enable: false                                                                                                  </span><br><span class="line">76     # Version info of NexT after scheme info (vX.X.X).</span><br><span class="line">77     version: false</span><br></pre></td></tr></table></figure></li><li><p>页面顶部菜单栏项目的添加</p><p>默认的菜单栏有点少，可以将其他的都开启。也可以自定义菜单，不仅仅局限于给出的这些</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">159 menu:</span><br><span class="line">160   home: &#x2F; || home</span><br><span class="line">161   tags: &#x2F;tags&#x2F; || tags</span><br><span class="line">162   categories: &#x2F;categories&#x2F; || th</span><br><span class="line">163   archives: &#x2F;archives&#x2F; || archive</span><br><span class="line">164   schedule: &#x2F;schedule&#x2F; || calendar</span><br><span class="line">165   about: &#x2F;about&#x2F; || user</span><br><span class="line">166   网站集锦: &#x2F;website&#x2F; || link</span><br></pre></td></tr></table></figure><p>这样设置之后点击菜单时，会报错，因为没有关联网页，所以还需要将这些页面生成出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo n page about</span><br><span class="line">hexo n page website</span><br></pre></td></tr></table></figure></li></ul><h2 id="文章的创建"><a href="#文章的创建" class="headerlink" title="文章的创建"></a>文章的创建</h2><p>先在<code>_drafts</code>下创建草稿，不会发布到网站上去，publish后才会转移到<code>_posts</code>下</p><p>创建草稿</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n draft 文章名</span><br></pre></td></tr></table></figure><p>草稿发布前可以在本地预览</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s --drafts</span><br></pre></td></tr></table></figure><p>发布草稿</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish 文章名</span><br></pre></td></tr></table></figure><p>直接创建文章，可直接发布到网站上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n 文章名</span><br></pre></td></tr></table></figure><p>然后使用编辑器来编辑文章</p><h2 id="文章的发布"><a href="#文章的发布" class="headerlink" title="文章的发布"></a>文章的发布</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean#清楚缓存</span><br><span class="line">hexo g#将md文件生成静态页面</span><br><span class="line">hexo d#同步到github上进行发布</span><br></pre></td></tr></table></figure><p>本地查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><h2 id="修改文章的同时预览"><a href="#修改文章的同时预览" class="headerlink" title="修改文章的同时预览"></a>修改文章的同时预览</h2><p>不需要修改完后再<code>hexo g &amp;&amp;　hexo s</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -w#一个终端开实时预览</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s＃一个终端开本地服务</span><br></pre></td></tr></table></figure><h2 id="侧边头像设置"><a href="#侧边头像设置" class="headerlink" title="侧边头像设置"></a>侧边头像设置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim themes&#x2F;next&#x2F;_config.yml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">227 avatar:                                                                                                            </span><br><span class="line">228   # In theme directory (source&#x2F;images): &#x2F;images&#x2F;avatar.gif</span><br><span class="line">229   # In site directory (source&#x2F;uploads): &#x2F;uploads&#x2F;avatar.gif</span><br><span class="line">230   # You can also use other linking images.</span><br><span class="line">231   #url: #&#x2F;images&#x2F;avatar.gif</span><br><span class="line">232   url: https:&#x2F;&#x2F;hbimg.huabanimg.com&#x2F;62479431e0811e471f0d94672049141a41d6c65413f9-hX0miG_fw658</span><br><span class="line">233   # If true, the avatar would be dispalyed in circle.</span><br><span class="line">234   rounded: true</span><br><span class="line">235   # The value of opacity should be choose from 0 to 1 to set the opacity of the avatar.</span><br><span class="line">236   opacity: 0.8</span><br><span class="line">237   # If true, the avatar would be rotated with the cursor.</span><br><span class="line">238   rotated: false</span><br></pre></td></tr></table></figure><h2 id="添加背景等个性化配置"><a href="#添加背景等个性化配置" class="headerlink" title="添加背景等个性化配置"></a>添加背景等个性化配置</h2><p>hexo主题提供了个性化配置网页的属性。需要通过网页调试，找到需要修改style的地方。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/Documents/hexo/themes/next/source/css/_custom/custom.styl</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// Custom styles.</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">'https://s2.ax1x.com/2019/11/23/MH3BVJ.jpg'</span>);</span><br><span class="line"><span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header</span>&#123;</span><br><span class="line"><span class="attribute">background</span>:<span class="number">#7ab56ead</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main-inner</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">234</span>, <span class="number">219</span>, <span class="number">192</span>, <span class="number">0.86</span>);</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">90px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span>&#123;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#7eaec1ad</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.menu-item-active</span> <span class="selector-tag">a</span>, <span class="selector-class">.menu</span> <span class="selector-class">.menu-item</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>, <span class="selector-class">.menu</span> <span class="selector-class">.menu-item</span> <span class="selector-tag">span</span><span class="selector-class">.exturl</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"><span class="attribute">background</span>:<span class="number">#f87543</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-title-link</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#687ede</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-meta</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f87171</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">2px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">176</span>, <span class="number">174</span>, <span class="number">174</span>, <span class="number">0.34</span>);</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">234</span>, <span class="number">219</span>, <span class="number">192</span>, <span class="number">0.86</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>, <span class="selector-tag">span</span><span class="selector-class">.exturl</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line"> <span class="attribute">border-bottom-color</span>: <span class="number">#fb6767</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面就是对自己想要修改的部分进行了修改，比如加入背景图片，修改main背景色，以及sidebar，footbar等的颜色。唯一需要注意的就是背景图片是一个链接，所以首先就是要有这个图片的链接，那么从哪里来呢，方式有很多了，可以直接百度搜一张图片，找到链接就好；可以将图片存到云端，比如我的图片都是托管在了图床上了；当然还可以放到github上面；如果有自己的服务器，那也可以放到自己服务器上去。等等，只要可以通过网址访问的就行。</p><h2 id="添加搜索功能"><a href="#添加搜索功能" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h2><p>安装<a href="https://link.jianshu.com?t=https%3A%2F%2Fgithub.com%2Fflashlab%2Fhexo-generator-search" target="_blank" rel="noopener">hexo-generator-searchdb</a> 插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>添加配置到hexo主目录下的<code>_config.yml</code>中，在<code>Extensions</code>下添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><p>修改主题配置文件<code>themes/next/_config.yml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><h2 id="给文章加密"><a href="#给文章加密" class="headerlink" title="给文章加密"></a>给文章加密</h2><p>编辑文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim themes&#x2F;next&#x2F;layout&#x2F;_partials&#x2F;head&#x2F;head.swig</span><br></pre></td></tr></table></figure><p>在文章末尾<code>script</code>后添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    (function()&#123;</span><br><span class="line">        if(&#39;&#123;&#123; page.password &#125;&#125;&#39;)&#123;</span><br><span class="line">            if (prompt(&#39;请输入文章密码&#39;) !&#x3D;&#x3D; &#39;&#123;&#123; page.password &#125;&#125;&#39;)&#123;</span><br><span class="line">                alert(&#39;密码错误！&#39;);</span><br><span class="line">                history.back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>在需要加密的文章的<code>tags</code>后面添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">password&#x3D; 123456</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1 ---                                                                                                                 </span><br><span class="line">2 title: hexo基本操作</span><br><span class="line">3 date: 2019-05-01 00:41:28</span><br><span class="line">4 categories:</span><br><span class="line">5     - hexo</span><br><span class="line">6 tags:</span><br><span class="line">7 password: 123456</span><br><span class="line">8 ---</span><br></pre></td></tr></table></figure><hr><blockquote><p>上面这个方法在本地运行可以加密，但是在github上面不能，也不知道原因，所以找到了另外一种方法：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure><p>然后在hexo的配置文件末尾添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">encrypt:</span><br><span class="line">enable: true</span><br></pre></td></tr></table></figure><p>同样是在需要加密的文章中添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">password: mypassword</span><br></pre></td></tr></table></figure><h2 id="添加分类"><a href="#添加分类" class="headerlink" title="添加分类"></a>添加分类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>给模板添加分类，然后我们新建文章时就会自动添加分类属性<br>在 <code>source/scarffolds/post.md</code> 的 <code>tags</code> 上面添加 <code>categories</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories:</span><br><span class="line">tags:</span><br></pre></td></tr></table></figure><p>然后新建文章后就可以在开头开到这个分类的属性了，就只需要填充就好了。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>wc计数</title>
      <link href="/2019/04/27/wc%E8%AE%A1%E6%95%B0/"/>
      <url>/2019/04/27/wc%E8%AE%A1%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="http://music.163.com/#/m/song?id=39635792" target="_blank" rel="noopener">前面说的时候没注意到这个命令还挺复杂的</a></p></blockquote><ul><li><p>wc(word count)计数<br>常用参数</p><ul><li>-c, –bytes            字节数</li><li>-m, –chars            字符数</li><li>-l, –lines            总行数</li><li>-L, –max-line-length  最长的行的字符数</li><li>-w, –words            单词数</li></ul></li><li><p>wc是支持管道的,可以接受标准输入.所以我们使用echo来看<br><img src="https://upload-images.jianshu.io/upload_images/9937522-2d2ba4aae5d0960b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>为什么输出是5?是它数错了吗?不是的,其实每行的结尾都有一个换行符,只是我们看不到而已.我们把它打印出来看看<br><img src="https://upload-images.jianshu.io/upload_images/9937522-20f1651c679190d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>所以现在就很清楚了,每一行都有一个换行符.总的字节数=字节数-行数=(wc -c )-(wc -l)</p></li><li><p>如果是汉字呢?我们来数一下字数<br><img src="https://upload-images.jianshu.io/upload_images/9937522-027fda14fcb6fb6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>同样的道理,都需要考虑到换行符的问题</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机安装ubuntu服务器版</title>
      <link href="/2019/04/27/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%89%88/"/>
      <url>/2019/04/27/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%89%88/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="http://music.163.com/song?id=501220618&userid=1388867694" target="_blank" rel="noopener">不要奇怪我为啥会呢，无他，唯手熟尔。所以多安装几次就会了</a></p></blockquote><ol><li><p>新建<br><img src="https://upload-images.jianshu.io/upload_images/9937522-a48bc92abdeea1e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>给系统取个名<br><img src="https://upload-images.jianshu.io/upload_images/9937522-0624d90c8fc37b63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>然后一直下一步（设置动态磁盘啊什么的这些都不用管），需要注意的是，这里选择系统大小的时候不要太小了（默认10G没有问题），否则安装不上（我刚开始装的时候分配了2G，结果就没安装成功）<br><img src="https://upload-images.jianshu.io/upload_images/9937522-fe40444364d9b460.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>一直下一步，然后就进入设置界面了<br><img src="https://upload-images.jianshu.io/upload_images/9937522-00e49cc0ca630b02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>存储这里添加下载好的ubuntu iso文件<br><img src="https://upload-images.jianshu.io/upload_images/9937522-b0e61daacbd8db18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>网络这里设置桥接网卡，混杂模式选择全部允许<br><img src="https://upload-images.jianshu.io/upload_images/9937522-7fad4297f7e755f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>设置好了，启动<br><img src="https://upload-images.jianshu.io/upload_images/9937522-3e7580f2684696ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>选择安装系统时界面提示的语言，这里选汉语了。这样界面就是汉语的<br><img src="https://upload-images.jianshu.io/upload_images/9937522-a149a9e58ce1b094.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>选择安装服务器版<br><img src="https://upload-images.jianshu.io/upload_images/9937522-93a20708fcfd3b3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>在选择系统语言的时候本来是要选择英语的（汉语支持不好），但是我也不知道咋的，选不了其它语言。可能是前面选择了汉语的原因吧。不过没什么影响，毕竟是服务器版，也看不到什么汉语。<code>yes</code><br><img src="https://upload-images.jianshu.io/upload_images/9937522-a36ff6a6d52b6142.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>不需要配置键盘，<code>否</code><br><img src="https://upload-images.jianshu.io/upload_images/9937522-e435eaeba36c61f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>选择汉语<br><img src="https://upload-images.jianshu.io/upload_images/9937522-d49f5a8a635a9e68.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="https://upload-images.jianshu.io/upload_images/9937522-2972638152c6ab6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>设置系统名称<br><img src="https://upload-images.jianshu.io/upload_images/9937522-da84aa2e68ea7be5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>设置用户名称<br><img src="https://upload-images.jianshu.io/upload_images/9937522-325607842a2849aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>设置用户密码<br><img src="https://upload-images.jianshu.io/upload_images/9937522-714b8f967fff0bbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>他会提示这个密码太弱，但是我们不需要设置复杂密码，选择<code>是</code><br><img src="https://upload-images.jianshu.io/upload_images/9937522-9b1b9aca67af12a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>不需要加密家目录，选择<code>否</code><br><img src="https://upload-images.jianshu.io/upload_images/9937522-9152d3e7207acabd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>可以看到时区是正确的，所以选择<code>是</code><br><img src="https://upload-images.jianshu.io/upload_images/9937522-1b5b2130634845d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>磁盘分区，这里不需要选择其他的，选第一个就好了（动态磁盘阵列以及手动分区用在这个虚拟机上实在是浪费感情啊）<br><img src="https://upload-images.jianshu.io/upload_images/9937522-31992253e98bd7dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>直接下一步<br><img src="https://upload-images.jianshu.io/upload_images/9937522-0e9d71941b0c1a79.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>选择<code>是</code>，将会自动格式化磁盘<br><img src="https://upload-images.jianshu.io/upload_images/9937522-8cf3c59a1c1e6971.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>不需要代理，直接下一步<br><img src="https://upload-images.jianshu.io/upload_images/9937522-2d7255d4a7473546.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>下面进入安装系统了，漫长的等待<br><img src="https://upload-images.jianshu.io/upload_images/9937522-022abe24fbf0ef82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>选择不自动更新，服务器嘛，稳定最重要了<br><img src="https://upload-images.jianshu.io/upload_images/9937522-d935805e16cb040f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>这里要用空格将ssh选择上，方便用xshell来连接linux，如果不选的话，就要等系统安装好了之后在手动安装ssh了<br><img src="https://upload-images.jianshu.io/upload_images/9937522-d928c05c228ae722.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>系统开始下载并安装选择的ssh了，漫长的等待<br><img src="https://upload-images.jianshu.io/upload_images/9937522-a659f89e7a826c1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>安装grub启动管理器了，这里选择<code>是</code>，这一步一定不要选错，不然启动不了的<br><img src="https://upload-images.jianshu.io/upload_images/9937522-c4e3b3c1ce93a1ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>看到下面这个界面就是安装好了，继续下一步<br><img src="https://upload-images.jianshu.io/upload_images/9937522-bc86f5d7915baadf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>看，自动重启进入系统了<br><img src="https://upload-images.jianshu.io/upload_images/9937522-ead1c43f9488e198.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>用户名，密码登录成功了<br><img src="https://upload-images.jianshu.io/upload_images/9937522-07b551eef7d5a6db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li></ol><hr><p>有的电脑可能存在显卡不支持的情况，也就是花屏，修改设置里面的显卡驱动<br><img src="https://upload-images.jianshu.io/upload_images/9937522-a4abac11764356ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><hr><p>end——————————————————————————————————-完结</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机sharefolder</title>
      <link href="/2019/04/27/%E8%99%9A%E6%8B%9F%E6%9C%BAsharefolder/"/>
      <url>/2019/04/27/%E8%99%9A%E6%8B%9F%E6%9C%BAsharefolder/</url>
      
        <content type="html"><![CDATA[<ul><li>安装插件insert Guest Additions cd image</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9937522-30b81df322661247.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>会提示添加盘符，新建一个空的option device， 再安装就可以了</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9937522-caaa1ef2a3381814.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>在~/virtualbox vms目录下建一个share_folder文件夹，用来在linux和windows上共享文件</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9937522-3828045ed1f90187.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>在虚拟机上machine-settings-shared folders-新建一个共享目录，路径为之前设置的。选择自动挂载</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9937522-22a34655c55e22d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>然后就可以在虚拟机中看到挂载的虚拟磁盘了，通过这个共享磁盘实现共享文件。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9937522-81d5300fcb41973a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统注册表错误修复</title>
      <link href="/2019/04/27/%E7%B3%BB%E7%BB%9F%E6%B3%A8%E5%86%8C%E8%A1%A8%E9%94%99%E8%AF%AF%E4%BF%AE%E5%A4%8D/"/>
      <url>/2019/04/27/%E7%B3%BB%E7%BB%9F%E6%B3%A8%E5%86%8C%E8%A1%A8%E9%94%99%E8%AF%AF%E4%BF%AE%E5%A4%8D/</url>
      
        <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/9937522-775829e759b6aa24.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><hr><ul><li>如果电脑因为一些错误的操作出现了注册表损坏的这种情况，首先可以试着修复它。<blockquote><p>我们需要用到pe启动器（或者电脑上的其它操作系统），进入pe，打开文件管理器，复制<strong>C:\Windows\System32\config\RegBack</strong>下的所有文件到<strong>C:\Windows\System32\config</strong>目录下。然后重启电脑就有可能修复好了。</p></blockquote></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9937522-22acdb39f41e6d69.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/9937522-fa3d5807f2b7bdae.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> windows10 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目录基本操作</title>
      <link href="/2019/04/27/%E7%9B%AE%E5%BD%95%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/04/27/%E7%9B%AE%E5%BD%95%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="http://music.163.com/#/m/song?id=497463179" target="_blank" rel="noopener">ls cd clear alias</a></p></blockquote><p>今天主要说如何在linux文件系统目录中移动</p><ul><li><ol><li>ls(list directory contents) 列出目录内容,作用就是列出当前目录下的文件<br><img src="https://upload-images.jianshu.io/upload_images/9937522-1c48c5e100d28f26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>常用参数: </li></ol></li><li><p>a 列出所有文件</p></li><li><p>l 以长列的格式列出</p></li><li><p>h 以易于读的大小表示文件大小<br>这些参数都是可以组合使用的<br><img src="https://upload-images.jianshu.io/upload_images/9937522-3e747b8acfb143e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p> 可能有的人会看到别人使用了<code>ll</code>这个命令,为什么你的使用不了呢?其实linux上是没有这个命令的.而是使用了<code>alias</code><br>在<code>.bashrc</code>里面写</p><pre><code>alias ll=&apos;ls -lh&apos;</code></pre><p> 然后运行</p><pre><code>source ~/.bashrc</code></pre><p> 再试试<code>ll</code>这个命令<br> 什么意思呢?就是给之前那一长串的命令写了一个别名,用来简化命令的<br>再举个例子:<br><code>clear</code>这个命令是用来清屏的,由于经常使用,我们想能不能写简单点,这个命令打起来太麻烦了.当然可以了,在<code>.bashrc</code>中加上</p><pre><code>alias cc=&apos;clear&apos;</code></pre><p> 然后运行</p><pre><code>source ~/.bashrc</code></pre><p> 再试试 <code>cc</code>这个命令<br><img src="https://upload-images.jianshu.io/upload_images/9937522-718440cec3a00e54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="我使用的alias,由于我使用的是zsh,所以写在了.zshrc中"></p></li><li><p>2.cd(change working directory)改变工作目录,目的是在各目录中移动<br>回到上一级目录:</p><pre><code>cd ..</code></pre><p>回到家目录:</p><pre><code>cd</code></pre><p>或者:</p><pre><code>cd ~</code></pre><p>在linux中目录中移动有两种方式:<br>1.绝对路径:所有路径都是以 <code>/</code> (根目录为基准)<br>  比如:</p><pre><code>cd /opt cd /etc/fontscd /home</code></pre><p>2.相对路径:所有路径都是以当前工作路径或者家目录<code>~</code>为基准</p><pre><code>cd ..cd Picturecd Downloads/zipfilecd ~/Picture</code></pre></li></ul><hr><p>再来一个好玩的命令<code>screenfetch</code>,可以在终端打印出系统的一些信息<br><img src="https://upload-images.jianshu.io/upload_images/9937522-b0be45adf0e5d0a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器百度网址打不开如何解决</title>
      <link href="/2019/04/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%99%BE%E5%BA%A6%E7%BD%91%E5%9D%80%E6%89%93%E4%B8%8D%E5%BC%80%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3/"/>
      <url>/2019/04/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%99%BE%E5%BA%A6%E7%BD%91%E5%9D%80%E6%89%93%E4%B8%8D%E5%BC%80%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>（分享张罐子的单曲《十二（Cover 留声玩具）》<a href="http://music.163.com/song/435307280?userid=1388867694" target="_blank" rel="noopener">http://music.163.com/song/435307280?userid=1388867694</a> (@网易云音乐)）</p><blockquote><p>问题：同桌电脑不能打开百度网址，其它的网址打开没问题</p></blockquote><ol><li><p>刚开始以为所有网址都打开不了，就以为是网络链接问题，于是需要ping网络<br>首先在正常电脑（我的）上找到网关地址</p><pre><code>ipconfig</code></pre></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/9937522-648afef61fea01c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>然后在她电脑cmd输入</p><pre><code>ping 192.168.0.252</code></pre><p>   发现可以ping通，然后继续ping百度地址</p><pre><code>ping www.baidu.com</code></pre><p> 发现也可以ping通，这就有点奇怪了。所以怀疑是dns解析出了问题<br>然后就是去配置dns了：配置了静态的ip地址和两个固定dns（这里不写了，有点多）<br>可是。。。。。还是打不开百度网址，其它的网页没有问题<br>最后呢，是她自己找到了解决办法  :)<br>所以。。。。。你懂吧，有一个美丽会计算机的女同桌多么可怕，哈哈</p><p>下面是操作步骤：<br><img src="https://upload-images.jianshu.io/upload_images/9937522-2fbf138e8d32c173.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/9937522-d3d896f88b9460c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>这样就好了。鉴定结果是病毒修改了ie的设置。</p>]]></content>
      
      
      <categories>
          
          <category> windows10 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2019/04/27/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2019/04/27/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>虽然记忆力不怎么好,但是我想全部记下来怎么办?</p><ul><li>下面是我的简单总结:</li></ul><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>\</td><td>转义</td></tr><tr><td>^</td><td>行首</td></tr><tr><td>$</td><td>行尾</td></tr><tr><td>*</td><td>[0, +∞)</td></tr><tr><td>+</td><td>[1, +∞)</td></tr><tr><td>?</td><td>0或1</td></tr><tr><td>{n}</td><td>确定的n次</td></tr><tr><td>{n,}</td><td>[n, +∞)</td></tr><tr><td>{m,n}</td><td>[m, n]</td></tr><tr><td>点</td><td>匹配除换行/回车之外的单个字符</td></tr><tr><td>x|y</td><td>匹配x或者y(x和y为一个词)</td></tr><tr><td>[ xyz ]</td><td>匹配x或y或z</td></tr><tr><td>[ ^xyz ]</td><td>匹配除x或y或z之外的</td></tr><tr><td>[a-z]</td><td>a到z中的任意一个字母</td></tr><tr><td>[A-Z]</td><td>A到Z中的任意一个字母</td></tr><tr><td>[0-9]</td><td>0到9中的任意一个数字</td></tr><tr><td>\d</td><td>0到9中的任意一个数字</td></tr><tr><td>\D</td><td>非数字</td></tr></tbody></table><ul><li>下面是详细介绍:</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9937522-0d2047d62c8bfebf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="https://upload-images.jianshu.io/upload_images/9937522-277f8f46040a80a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/9937522-53430fe5b4c33249.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/9937522-79277dc325cd77c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/9937522-5330d4fe4d271c91.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/9937522-de862e027b68c615.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文本内容查看</title>
      <link href="/2019/04/26/%E6%96%87%E6%9C%AC%E5%86%85%E5%AE%B9%E6%9F%A5%E7%9C%8B/"/>
      <url>/2019/04/26/%E6%96%87%E6%9C%AC%E5%86%85%E5%AE%B9%E6%9F%A5%E7%9C%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="http://music.163.com/#/m/song?id=497463179" target="_blank" rel="noopener">cat more less diff/colordiff wc </a></p></blockquote><p>使用linux总会有这种感觉,用起来怎么那么舒服呢?没错,真的是这样的<br>我们在windows上想看一个文本文件里面写了什么,一般都是用记事本打开来看吧.然而这个记事本实在是有点难用.so,我们来看看linux上怎么看文本内容吧</p><ul><li><ol><li><p><code>cat</code>(concatenate file and print on the standard output) 连接文件并输出到屏幕上</p><pre><code>cat 文件名</code></pre><p>这样可以显示行号</p><pre><code>cat -n 文件名   </code></pre></li></ol></li><li><ol start="2"><li><p><code>less/more</code> 如果文件内容比较长,那么这两个命令就有作用了,支持滚屏.其中less支持回滚与vim的简单移动操作</p><pre><code>more 文件名less 文件名</code></pre><p>这样可以显示行号</p><pre><code>less -L 文件名</code></pre></li></ol></li></ul><ul><li><ol start="3"><li><p>如果不想看文本内容只想知道有多少行呢? <code>wc</code> 可以数文件行数,字数,最长一行的字符数</p><pre><code>wc 文件名</code></pre><p> 不仅如此, wc是支持使用pipe(管道)的.简单说只要能在屏幕输出信息的都可以作为wc的输入.比如说你可以这样:<br>数一下/bin下有多少个命令?</p><pre><code>ls /bin | wc -l</code></pre><p>统计一下有多少进程?</p><pre><code>ps -aux | wc -l</code></pre></li></ol></li><li><ol start="4"><li><p>如何比较两个文件的差别?vim可以,但是更简单的是  <code>diff</code></p><pre><code>diff -y 文件1 文件2</code></pre><p> 但是  <code>diff</code>没有颜色显示,  <code>colordiff</code> 有颜色显示,安装一下就可以用了</p><pre><code>sudo pacman -S colordiffcolordiff -y 文件1 文件2</code></pre><p> <img src="https://upload-images.jianshu.io/upload_images/9937522-8cf9ef9e19b89836.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li></ol></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用软件</title>
      <link href="/2019/04/26/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/"/>
      <url>/2019/04/26/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>软件名</th><th>简介</th></tr></thead><tbody><tr><td>variety</td><td>动态壁纸</td></tr><tr><td>archlinux-wallpaper</td><td>archlinux壁纸包</td></tr><tr><td>yaodao-dict</td><td>有道翻译</td></tr><tr><td>sublime-text-dev</td><td>sublime-text3</td></tr><tr><td>xchm</td><td>.chm格式（windows帮助文档）查看</td></tr><tr><td>treesheets</td><td>思维导图</td></tr><tr><td>fragments</td><td>bit下载</td></tr><tr><td>iotop</td><td>磁盘写入检查</td></tr><tr><td>leafpad</td><td>记事本</td></tr><tr><td>netease-cloud-music</td><td>网易云音乐</td></tr><tr><td>virtualbox</td><td>虚拟机</td></tr><tr><td>mplayer</td><td>视频播放</td></tr><tr><td>wpsoffice</td><td>办公软件</td></tr><tr><td>marktext</td><td>markdown 编辑</td></tr><tr><td>shotcut</td><td>视频剪辑</td></tr><tr><td>gimp</td><td>和ps一样的图片处理软件</td></tr><tr><td>deepin-wine-tim</td><td>聊天 （不过个人不喜欢）</td></tr><tr><td>weechat</td><td>irc聊天</td></tr><tr><td>nautilus</td><td>gnome默认文件管理器</td></tr><tr><td>unrar</td><td>解压rar格式文件</td></tr><tr><td>rar</td><td>压缩文件格式为rar</td></tr><tr><td>lsof</td><td>列出打开的文件（list openfile and cat ip port）</td></tr><tr><td>tor torsocks</td><td>tor</td></tr><tr><td>dconf-editor</td><td>可以用来关闭gnome自动挂载U盘</td></tr><tr><td>gnome-software-packagekit-plugin</td><td>系统必须要安装的一个神器，安装之后应用商店就有很多很多软件可以下载了</td></tr><tr><td>blender</td><td>3d动画自作软件（很想学习的一个软件）</td></tr><tr><td>ydcv</td><td>终端有道翻译</td></tr><tr><td>amor</td><td>桌面小猫</td></tr><tr><td>netease-musicbox</td><td>网易云终端 musicbox</td></tr><tr><td>exfat-utils</td><td>fix unable to read portable添加U盘特殊格式exfat驱动</td></tr><tr><td>ntfs-3g</td><td>添加ntfs驱动（读写windows文件：mount -t ntfs-3g /dev/sdxy）</td></tr><tr><td>cava</td><td>终端下alsa声音可视化</td></tr><tr><td>wewechat</td><td>微信</td></tr><tr><td>geckodriver</td><td>linux下selenium的firefox驱动</td></tr><tr><td>scrot</td><td>命令截图软件</td></tr><tr><td>launch-cmd</td><td>在命令行打开软件</td></tr><tr><td>ncdu</td><td>终端图像化du命令（很好看）</td></tr></tbody></table><hr><table><thead><tr><th>gnome-shell</th><th>简介</th></tr></thead><tbody><tr><td>screenshot tool</td><td>截屏</td></tr><tr><td>easyscreencast</td><td>录屏</td></tr><tr><td>netspeed</td><td>网速</td></tr><tr><td>freon</td><td>温度</td></tr><tr><td>coverflow alt-tab</td><td>alt-tab切换窗口</td></tr><tr><td>notes</td><td>便签</td></tr><tr><td>night light slider</td><td>屏幕色温调节</td></tr><tr><td>alarm clock</td><td>闹钟</td></tr><tr><td>weatherin the clock</td><td>天气</td></tr><tr><td>caffeine</td><td>用来阻止屏幕自动休眠，在看视频的时候很好用</td></tr><tr><td>Drop down terminal</td><td>也是一个神器，安装后可以用～快速打开一个终端，很帅气</td></tr><tr><td>No Topleft Hot Corner</td><td>去掉gnome左上角的热区</td></tr><tr><td>Dash to Dock</td><td>修改gnome默认dock的位置，很好用</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用archlinux需要明白的</title>
      <link href="/2019/04/25/%E4%BD%BF%E7%94%A8archlinux%E9%9C%80%E8%A6%81%E6%98%8E%E7%99%BD%E7%9A%84/"/>
      <url>/2019/04/25/%E4%BD%BF%E7%94%A8archlinux%E9%9C%80%E8%A6%81%E6%98%8E%E7%99%BD%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<ul><li><p>首先需要明白的是archlinux和其它发行版的不同之处:</p><ul><li>1.archlinux是”rolling release”,它不需要系统的版本升级</li><li>2.不敢说archlinux是最稳定的,但它却是我最钟爱的.archlinux仓库的软件都是最新的,而且软件仓库中的软件比其他发行版的软件要多的多</li><li>3.因为它是可定制的,想安装什么软件,什么桌面环境都是自己选择的.虽然没有gentoo那样高度定制化,但是与gentoo安装时编译需要花费的时间比起来,archlinux这种二进制文件安装更快</li></ul></li><li><p>archlinux是滚动发行版,所以经常更新是必要的.为了确保更新不会出现任何问题,我们需要了解最近更新了什么,有那些需要注意的.怎么了解呢?</p><ul><li>第一种方式是查看<a href="https://www.archlinux.org/" target="_blank" rel="noopener">Arch News</a></li><li>第二种方式是订阅archlinux的<a href="https://lists.archlinux.org/listinfo/arch-announce/" target="_blank" rel="noopener">更新邮件服务</a>,有更新消息会通过邮件发送给你<br><img src="https://upload-images.jianshu.io/upload_images/9937522-5455a5b70bc6c714.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li></ul></li><li><p>了解mirror和repository,repository是存放在mirror上的</p><ul><li>/etc/pacman.d/mirrorlist 中列出了所有的镜像/服务器,把中国的服务器位置放到前面,这样下载东西的时候网速就快很多</li><li>/etc/pacman.conf中有官方仓库,可以添加<a href="https://wiki.archlinux.org/index.php/Unofficial_user_repositories#gnome-devel" target="_blank" rel="noopener">非官方仓库</a>,仓库就是用来存放软件的,添加的越多,能搜到的软件就越多.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zsh安装配置</title>
      <link href="/2019/04/25/zsh%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/04/25/zsh%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>zsh配置好了是很好看的</p></blockquote><ul><li><ol><li><p>安装 <a href="https://wiki.archlinux.org/index.php/Zsh#Initial_configuration" target="_blank" rel="noopener">zsh</a></p><pre><code>pacman -S zshpacman -S zsh-completions</code></pre></li></ol></li><li><ol start="2"><li>切换shell为zsh</li></ol><ul><li><p>查看现在使用的shell</p><pre><code>chsl -l</code></pre></li><li><p>设置默认shell为zsh</p><pre><code>chsh -s /bin/zsh</code></pre></li><li><p>切换为zsh</p><pre><code>zsh</code></pre></li></ul></li><li><ol start="3"><li><p>基础配置<br>添加以下到<code>.zshrc</code>里</p><pre><code>autoload -Uz compinit promptinitcompinitpromptinit</code></pre></li></ol><ul><li><p>查看自带的主题</p><pre><code>prompt -l</code></pre><p>然后选择一种</p><pre><code>prompt xxx  #xxx为主题名</code></pre></li></ul></li><li><ol start="4"><li><p>我们发现这些主题并不是特别好看，所以安装 <a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">0h-my-zsh</a></p><pre><code>yay -S oh-my-zsh-git</code></pre><ul><li><p>安装这个之后我们就可以选择一种主题了<br>例如：</p><pre><code>ZSH_THEME=&quot;agnoster&quot;</code></pre><ul><li>我们发现并不像下面这么好看</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9937522-bb4acf888d68205d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li></ul></li></ol></li><li><ol start="5"><li><p>那是因为没有安装 <a href="https://github.com/powerline/fonts" target="_blank" rel="noopener">powerline</a> 这种字体，所以终端就无法显示这些箭头了。</p><pre><code>git clone https://github.com/powerline/fonts.git --depth=1cd fonts./install.shcd ..rm -rf fonts</code></pre><p>重新打开一个终端就可以正常显示了</p></li></ol></li><li><ol start="6"><li><p>然后我们还可以找更多喜欢的 <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/External-themes" target="_blank" rel="noopener">主题</a><br>我比较喜欢 <a href="https://github.com/bhilburn/powerlevel9k" target="_blank" rel="noopener">powerlevel9k</a> 这款主题</p><pre><code>sudo pacman -S zsh-theme-powerlevel9k</code></pre><p> 设置为终端主题</p><pre><code>echo &apos;source /usr/share/zsh-theme-powerlevel9k/powerlevel9k.zsh-theme&apos; &gt;&gt; ~/.zshrc</code></pre><p> 这样设置之后已经很好看了，不过有些自带的图标显示不了</p></li></ol></li><li><ol start="7"><li><p>下载 <a href="https://github.com/gabrielelana/awesome-terminal-fonts" target="_blank" rel="noopener">Awesome-Terminal Fonts</a></p><pre><code>pacman -Syu awesome-terminal-fonts</code></pre><p>   然后配置一下</p></li></ol><ul><li><p>在<code>.zshrc</code>找到设置 powerlevel9k的位置，将下面的配置放到它上面</p><pre><code>POWERLEVEL9K_MODE=&apos;awesome-fontconfig&apos;</code></pre></li></ul></li><li><ol start="8"><li>重新打开一个新的终端，就可以看到漂亮的主题了<br>有关主题更多的配置，就照着这里 <a href="https://github.com/bhilburn/powerlevel9k#installation" target="_blank" rel="noopener">设置</a> 好了</li></ol></li><li><p>9.安装<a href="https://www.archlinux.org/packages/?name=zsh-syntax-highlighting" target="_blank" rel="noopener">zsh-syntax-highlighting</a>　</p><pre><code>　sudo pacman -S zsh-syntax-highlighting</code></pre><p>我的 zsh配置文件 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">export TERM&#x3D;&quot;xterm-256color&quot; </span><br><span class="line">#common setting</span><br><span class="line">autoload -Uz compinit promptinit</span><br><span class="line">compinit</span><br><span class="line">promptinit</span><br><span class="line">zstyle &#39;:completion::complete:*&#39; gain-privileges 1</span><br><span class="line">zstyle &#39;:completion:*&#39; menu select</span><br><span class="line"></span><br><span class="line">#theme setting</span><br><span class="line">POWERLEVEL9K_MODE&#x3D;&#39;awesome-fontconfig&#39;</span><br><span class="line">source &#x2F;usr&#x2F;share&#x2F;zsh-theme-powerlevel9k&#x2F;powerlevel9k.zsh-theme</span><br><span class="line">POWERLEVEL9K_LEFT_PROMPT_ELEMENTS&#x3D;(load dir vcs ssh dir_writable)</span><br><span class="line">POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS&#x3D;(status root_indicator background_jobs history newline)</span><br><span class="line">#use to highlight syntax like fish</span><br><span class="line">source &#x2F;usr&#x2F;share&#x2F;zsh&#x2F;plugins&#x2F;zsh-syntax-highlighting&#x2F;zsh-syntax-highlighting.zsh</span><br><span class="line"></span><br><span class="line">#highlight man </span><br><span class="line">man() &#123;</span><br><span class="line">    LESS_TERMCAP_md&#x3D;$&#39;\e[01;31m&#39; \</span><br><span class="line">    LESS_TERMCAP_me&#x3D;$&#39;\e[0m&#39; \</span><br><span class="line">    LESS_TERMCAP_se&#x3D;$&#39;\e[0m&#39; \</span><br><span class="line">    LESS_TERMCAP_so&#x3D;$&#39;\e[01;44;33m&#39; \</span><br><span class="line">    LESS_TERMCAP_ue&#x3D;$&#39;\e[0m&#39; \</span><br><span class="line">    LESS_TERMCAP_us&#x3D;$&#39;\e[01;32m&#39; \</span><br><span class="line">    command man &quot;$@&quot;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">#user alias</span><br><span class="line">alias l&#x3D;&#39;ls -lh --color&#x3D;auto&#39;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9937522-b03eb34026087324.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows系统的安装</title>
      <link href="/2019/04/25/windows%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%89%E8%A3%85/"/>
      <url>/2019/04/25/windows%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>PS：其实很久之前就想写这个的，虽然安装了无数次，但是因为安装系统的时候不好截屏，所以就一直没做：）还记得大一的时候因为安装linux，然后把win10弄坏了（没有启动项），差点就拿去店里修了。但是因为太年轻=任性，所以最后还是自己安装好了系统。之后也给别人安装了许多次系统，但是也就那次真的是开心，像吃了蜂蜜。</p><hr><p>好了废话不多说了，接下来就开始了。</p><ol><li><p>在安装系统之前第一件要做的事就是备份好重要的资料，比如说作业：)，不然就有点意思了。</p></li><li><p>第二件要做的事是弄清楚你的电脑（主板）是啥型号，然后百度一下找到开机时怎么进BIOS和启动项选择的界面的。比如我的联想电脑F2进BIOS，F12进启动项选择。</p></li><li><p>这里就要说一些概念了，以便决定你的系统是进行怎么样的分区。你的整个磁盘的磁盘分区表采用的是gpt还是mbr？可能有人不懂gpt和mbr是啥，简单的说gpt是比较新的技术，mbr技术比较老；gpt分区表需要一个esp分区来存放开机时的启动文件，而mbr分区表则不需要。如果你想用gpt分区表，那么就要确保你的bios里面设置了支持uefi启动，这个知识点需要自己去get。</p></li><li><p>既然上面说了磁盘分区表是对于整个磁盘而言的，所以如果你要修改的话，整个磁盘相当于格式化了，所以你懂得，只有保证磁盘上没有重要文件才可以这样操作。当然了，我是推荐用gpt分区表的，因为对于装多个系统来说很好用鸭。</p></li><li><p>分区：用了这么久的电脑，我们都习惯了系统有多个分区了吧，比如系统盘C盘，软件D盘，其它E盘等，分区的好处是各个分区相对独立，也便于归类。所以说给磁盘进行分区这个技能要提前get到。</p></li></ol><hr><p>道理讲完了，下面开始正式的安装。</p><ol><li><p>制作U盘启动器。此方法我之前写的有介绍过，这里略过了。</p></li><li><p>下载windows镜像文件。按照这个步骤下载下来格式为ISO的系统镜像，具体的操作不解释了。</p></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/9937522-9f64d39bafa432fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/9937522-28c3ea013f75ca02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ol start="3"><li><p>这个iso镜像文件放那里呢，只要不是放在你要安装系统的分区就好了。你也可以复制到你制作的启动U盘里。</p></li><li><p>开机选择U盘启动，进入pe系统。在这里将完成我们的大部分安装步骤。</p></li></ol><p>注意：以下步骤本来是要在pe下操作的，但是pe下不好截屏，所以我就用虚拟机代替了，但是步骤一样，可能图标长得有点不同。同时我是用一整个磁盘来安装系统的，如果你的磁盘上还有其他分区，那么就要注意区别了。</p><ol start="5"><li>打开一个叫diskgenius的用来分区的软件。我们可以看到一个空闲为5G大小的磁盘，这个就是我要安装系统的磁盘。可以看到他的磁盘分区表格式为mbr，接下来我会采用gpt分区表格式来安装系统。如果你的磁盘也是mbr，同时想用gpt分区表，而且没有其他分区，或者其他分区没有重要文件，那么继续往下看，否则看第六点。</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/9937522-bf2d9b15e133361d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>  5.1 选中整个磁盘，如图中的HD1：VBOXHARDDISK（5GB），然后右键选择转换分区表类型为guid格式，然后选择左上角的保存更改。</p><p><img src="https://upload-images.jianshu.io/upload_images/9937522-1a89b9dc3aecf41d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>5.2 选中整个磁盘，右键–&gt;选择建立新分区。</p><p><img src="https://upload-images.jianshu.io/upload_images/9937522-3e024d91ab4043d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>5.3 这里要勾上建立esp分区，大小100MB-500MB之间随便选。太大了也没必要，太小肯定不行。并且不要选择建立msr分区。然后确定，再将剩余的空间作为系统盘。<br><img src="https://upload-images.jianshu.io/upload_images/9937522-c3b7ef2e26624947.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>5.4 一路确定下来，然后点击左上角的保存更改。<br><img src="https://upload-images.jianshu.io/upload_images/9937522-c79dc8a93deb4902.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>5.5 一般来说esp分区就会自动分配有一个盘符，如果没有那么我们就手动给他添加上去。右键–&gt;指派新的驱动器号</p><p><img src="https://upload-images.jianshu.io/upload_images/9937522-b44782f9289553d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>5.6 找到我们下载的iso系统镜像，右键–&gt;装载 （或者叫其他什么的名字，目的是挂载后可以读取到里面的文件），记住挂载的盘符位置。</p><p><img src="https://upload-images.jianshu.io/upload_images/9937522-a9547566a014abc9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>5.7 在桌面上打开一个叫WinNTSetup的软件。</p><p>5.8 .1在选择windows安装源这里要选择刚刚挂载的windows镜像目录里面的sources–&gt;install.wim<br>5.8. 2 在选择引导器这里选择之前分配的esp分区的盘符<br>5.8 .3 在选择安装驱动器这里选择系统安装的位置<br><img src="https://upload-images.jianshu.io/upload_images/9937522-3de049b0ff8a88c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>5.9 然后点击开始安装，然后确定，等待大约十几分钟，复制完之后选择重启，重启之后按照步骤操作选择语言什么的………大概十几分钟就可以安装好系统了</p><ol start="6"><li><p>如果你是mbr分区，而且不想转换为gpt分区表，那就好办了。<br>第一步和5.8.1的步骤一样，选择引导驱动器和选择安装驱动器都选择要安装系统的分区。其它的步骤一样。</p></li><li><p>到这一步，系统已经安装好了。是不是觉得安装系统如此简单。。。。。。就像宫本的台词：无敌的我。</p></li><li><p>激活系统。另外如果还有不懂的话，可以参考我录得视频，<a href="https://www.bilibili.com/video/av21730376" target="_blank" rel="noopener">安装系统</a> （看着像上个世纪的，其实就是去年录得）。<a href="https://www.bilibili.com/video/av40258103" target="_blank" rel="noopener">激活系统</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> windows10 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>U盘启动盘的制作</title>
      <link href="/2019/04/25/U%E7%9B%98%E5%90%AF%E5%8A%A8%E7%9B%98%E7%9A%84%E5%88%B6%E4%BD%9C/"/>
      <url>/2019/04/25/U%E7%9B%98%E5%90%AF%E5%8A%A8%E7%9B%98%E7%9A%84%E5%88%B6%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>在说到安装以及修复操作系统时，很多时候我们都会用到PE启动器，这里就写下如何制作它。</p><hr><ul><li><p><strong>为什么要制作这个东西呢</strong><br>我们知道一旦电脑出现问题并且无法开机后，就没办法进系统里面去修复它了。所以我们需要借助别的工具来修复系统。<br>U盘启动器/PE启动盘，就是将一个微型的操作系统安装到U盘里，从U盘启动这个微操作系统。然后对我们有问题的系统（不能正常启动）进行修复。</p></li><li><p><strong>如何制作这个U盘启动器</strong></p></li></ul><p>1.下载制作软件。<br>这里推荐绿色纯净的<a href="http://www.wepe.com.cn/" target="_blank" rel="noopener">WePE</a>，当然了你也可以选择其它喜欢的比如熟悉的大白菜，老毛桃 ……<br>2.安装进U盘。<br>选择一个没有任何文件的U盘（因为安装的时候会格式化U盘），4G足够了，插入U盘，打开软件，选择其它安装方式的<strong>U盘安装方式</strong>，待写入U盘里选择插入的U盘，然后点击安装进U盘。<br><img src="https://upload-images.jianshu.io/upload_images/9937522-02e0a11bc6df6497.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/9937522-967e3fc7e39e5c4a.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li><p><strong>这样一个U盘启动盘就制作好了</strong><br>然后就可以安装或者修复系统了</p></li><li><p><strong>启动盘制作好了，如何进入这个启动盘呢</strong><br>我们每个电脑的主板都不一样，这个就需要自己搜自己电脑是怎么进启动项界面的了。<br>比如我的联想就是在开机的时候按 <strong>F12</strong>，然后选择需要启动那个选项的。<br>选择U盘启动项，这样就进PE启动盘了。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> windows10 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu14配置静态ip及使用xshell传输文件</title>
      <link href="/2019/04/25/ubuntu14%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip%E5%8F%8A%E4%BD%BF%E7%94%A8xshell%E4%BC%A0%E8%BE%93%E6%96%87%E4%BB%B6/"/>
      <url>/2019/04/25/ubuntu14%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip%E5%8F%8A%E4%BD%BF%E7%94%A8xshell%E4%BC%A0%E8%BE%93%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<ol><li><p>修改配置文件    </p><pre><code>sudo vim /etc/network/interfaces</code></pre><p> 添加：</p><pre><code>auto eth0iface eth0 inet staticaddress 192.168.0.111  #配置没有被使用的ip地址netmask 255.255.255.0gateway 192.168.0.252 #写入网关地址dns-nameservers 1.1.1.1 #写dns解析地址</code></pre><p> <code>a</code>. 其中dns（域名解析服务）是必须要写的，不然配置不会成功<br> <code>b</code>. 网关地址哪里看？通过命令查询：</p><pre><code>ip route</code></pre><p> <code>c</code>. 怎么知道那些ip地址没有被使用？</p><pre><code>ping 想要使用的ip地址</code></pre><p>   如果没有ping通，那么就可以使用</p><p>   或者使用更高级一点的工具：nmap<br>   首先安装nmap这个软件</p><pre><code>sudo apt-get install nmap</code></pre><p> 然后使用ping的方式扫描局域网内所有已经使用的ip</p><pre><code>nmap -sn 192.168.0.0/24</code></pre></li><li><p>重启网络服务</p><pre><code>/etc/init.d/networking restart</code></pre></li></ol><hr><ol start="3"><li><p>将ssh设置为开机启动</p><pre><code>chkconfig --add sshchkconfig ssh on</code></pre></li><li><p>然后使用xshell连接ubuntu<br>安装一个lrzsz的软件，用来在windows与ubuntu间传输文件</p><pre><code>sudo apt-get install lrzsz</code></pre><p> 上传文件：rz(receive zmodem)</p><pre><code>rz </code></pre><p>   下载文件：sz(send zmodem)</p><pre><code>sz 文件名</code></pre></li></ol><hr><p>PS:有没有觉得挺方便的？<br><img src="https://upload-images.jianshu.io/upload_images/9937522-789d3b410dd9453e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="xshell截图"></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sublime-text3配置随笔</title>
      <link href="/2019/04/25/sublime-text3%E9%85%8D%E7%BD%AE%E9%9A%8F%E7%AC%94/"/>
      <url>/2019/04/25/sublime-text3%E9%85%8D%E7%BD%AE%E9%9A%8F%E7%AC%94/</url>
      
        <content type="html"><![CDATA[<blockquote><p>sublime 的goto，macro，group搭配vim的使用，飘逸。</p></blockquote><ul><li><p>优点：轻量，插件多</p></li><li><p>缺点：调试不方便</p></li><li><p>1.首先安装package control，作用是安装管理其它插件</p></li><li><p>2.然后需要安装其它插件都是Ctrl+shift+p调出命令窗口，然后输入package control install，等一会就可以输入插件名并安装了。</p></li><li><p>3.preference-setting加入这两句，高亮光标所在行和所在的文件。</p><pre><code>&quot;highlight_line&quot;: true,&quot;highlight_modified_tabs&quot;: true,</code></pre></li><li><p>4.然后是一些插件的推荐</p><ul><li>a folder icon 提供左边打开文件的图标</li><li>package resource view</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>parrotos-4-x使用指南</title>
      <link href="/2019/04/25/parrotos-4-x%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2019/04/25/parrotos-4-x%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/9937522-4ddfb2094f211ac1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><hr><ol><li><strong>parrotos4.18的版本取消了root用户（虽然有root用户，但是无法使用），这给使用带来了许多的麻烦。所以第一件要做的事就是让普通用户加入sudoer。</strong></li></ol><ul><li>由于没有root权限，不能在系统里去修改。所以使用别的系统去修改<code>/etc/sudoers/</code>这个文件，将用户加入sudoer。<br><img src="https://upload-images.jianshu.io/upload_images/9937522-fbcde508a3bd0a0b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li><li>然后正常进入系统后<code>sudo su</code>就可以使用管理员权限了<br><img src="https://upload-images.jianshu.io/upload_images/9937522-45c5b4267ea3910e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li></ul><hr><ol start="2"><li><strong>然后就是第二个问题了，因为有两块硬盘，所以安装时启动程序默认安装到了第一块硬盘，但是系统却在第二块硬盘上，所以需要重新安装一下grub</strong><br>由于有了root权限，所以有权限去安装grub</li></ol><ul><li><p>挂载efi分区<code>/dev/sdb1</code>到<code>/boot/efi</code>下<br><img src="https://upload-images.jianshu.io/upload_images/9937522-899278c16920cbbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>修改<code>/etc/fstab</code>，将efi分区调整为<code>/dev/sdb1</code><br><img src="https://upload-images.jianshu.io/upload_images/9937522-9d65b3fa07b9ca70.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>然后安装grub到efi分区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grub-mkconfig -o &#x2F;boot&#x2F;grub&#x2F;grub.cfg</span><br><span class="line">grub-install --target&#x3D;x86_64-efi --efi-directroy&#x3D;&#x2F;dev&#x2F;sdb1 --bootloader-id&#x3D;grub</span><br></pre></td></tr></table></figure></li><li><p>安装后efi分区包含一个grub和一个parrot目录，并分别有一个grubx64.efi文件<br><img src="https://upload-images.jianshu.io/upload_images/9937522-ec1fe1d75e290268.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="https://upload-images.jianshu.io/upload_images/9937522-34135e4675bb13ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li></ul><hr><ol start="3"><li><strong>到这里已经把grub安装到了第二块磁盘上了，但是这个grub的启动项不完整，需要手动添加Android的启动项，以及一些关机重启的选项</strong><br><img src="https://upload-images.jianshu.io/upload_images/9937522-9d0d5944979a2fe4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li></ol><p><strong>over</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/9937522-4e34cbc0d6691e23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> penetration </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
            <tag> linux </tag>
            
            <tag> parrotos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux的一些美化优化</title>
      <link href="/2019/04/25/linux%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BE%8E%E5%8C%96%E4%BC%98%E5%8C%96/"/>
      <url>/2019/04/25/linux%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BE%8E%E5%8C%96%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<blockquote><p>所以pacman命令能生效的前提是开启了AUR源，以及安装了AUR的包管理器yay。在pacman搜索不到的情况下使用yay。</p></blockquote><ul><li><p>archlinux默认下载软件后是不会自动删除软件的安装包的,长时间不清理那么就会很占磁盘空间,必须要手动进行清除</p><pre><code>sudo pacman -Scc</code></pre></li><li><p>但是这样还是不是特别好,毕竟有时候会忘了,那么就可以将下载包的位置换一下.默认是下载到了<code>/var/cache/pacman/pkg</code>这个位置</p><pre><code>sudo vim /etc/pacman.conf</code></pre><p>修改cache的位置就ok了<br><img src="https://upload-images.jianshu.io/upload_images/9937522-fa86fb7a8e3b610a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li></ul><ul><li><p>让man有不同颜色显示，加入<code>.bashrc</code>或者<code>.zshrc</code>，取决于使用何种shell</p><pre><code>man() {    LESS_TERMCAP_md=$&apos;\e[01;31m&apos; \    LESS_TERMCAP_me=$&apos;\e[0m&apos; \    LESS_TERMCAP_se=$&apos;\e[0m&apos; \    LESS_TERMCAP_so=$&apos;\e[01;44;33m&apos; \    LESS_TERMCAP_ue=$&apos;\e[0m&apos; \    LESS_TERMCAP_us=$&apos;\e[01;32m&apos; \    command man &quot;$@&quot;  }</code></pre></li></ul><ul><li><p>diff没有颜色显示，那么安装<code>colordiff</code></p></li><li><p>安装编程用字体 <code>iosevka</code></p></li><li><p>将firefox等浏览器的缓存文件放入RAM，加快响应速度以及减少SSD的数据写入。</p><pre><code>pacman -S profile-sync-daemonsystemctl --user enable psd.service</code></pre><ul><li>开启overlay：在<code>~/.config/psd/psd.conf</code>中加入 <code>USE_OVERLAYFS=&quot;yes&quot;</code></li><li>在 <code>/etc/sudoers/</code>  中加入 <code>user ALL=(ALL) NOPASSWD: /usr/bin/psd-overlay-helper</code> </li></ul></li><li><p>安装QQ或者TIM。先在 /etc/pacman.conf 中开启multilib仓库</p><p>   <img src="https://upload-images.jianshu.io/upload_images/9937522-56ef74bf8d7e8146.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><pre><code> pacman -S deepin-qq-impacman -S deepin-wine-tim</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux搜狗输入法的安装</title>
      <link href="/2019/04/25/linux%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E7%9A%84%E5%AE%89%E8%A3%85/"/>
      <url>/2019/04/25/linux%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E7%9A%84%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<hr><p>首先在<a href="https://pinyin.sogou.com/linux/?r=pinyin" target="_blank" rel="noopener">官网</a>下载安装包<br>然后执行下面两条命令就好了<br><img src="https://upload-images.jianshu.io/upload_images/9937522-5f022ea8f8f49d7f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/9937522-8e7eedd0d43cb1fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux基础-认识</title>
      <link href="/2019/04/25/linux%E5%9F%BA%E7%A1%80-%E8%AE%A4%E8%AF%86/"/>
      <url>/2019/04/25/linux%E5%9F%BA%E7%A1%80-%E8%AE%A4%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="http://music.163.com/song?id=554191055&userid=1388867694" target="_blank" rel="noopener">学习主题曲</a></p></blockquote><ol><li><p>linux上一切皆文件<br>什么意思呢？就是说你所有的配置操作，都可以通过修改文件来达到效果，不同于windows那样通过软件设置。修改ip地址、修改主机名称、修改用户、调节屏幕亮度、音频声音大小。。。如你所知，都可以通过修改文件配置内容达到目的</p></li><li><p>root拥有最高权限<br>linux上很大的一个特色就是可以多用户登录，那么每个用户对应就有不同的权限。root拥有至高无上的权限，也就是说一般不用root用户登录，因为你的一个不小心就可能造成无法挽回的错误（比如说把系统删掉）。那么普通用户没有权限怎么操作呢？我们是可以的，既可以临时使用root权限 <code>sudo 命令</code> ，也可以切换到root用户去 <code>su</code></p></li><li><p>home（家）是最终归宿<br>无论你用何种身份登录终端，你一定会先到达一个称为家的地方。<code>pwd</code>查看一下，<code>/home/user</code>这个目录就是家，或者<code>~</code>也称为家。无论你进入了那个目录，<code>cd</code>会带你回到家的地方。家目录已经为我们分好了许多目录，我们可以将日常操作的文件放入对应的地方。比如说Picture里面就放壁纸图片什么的</p></li><li><p>熟悉linux命令<br>怎么熟悉呢？你一定会想到记命令，没错，但是不全对。命令记忆是有方法的，比如说<code>cd</code>这个命令，改变所在位置对吧，英文为<code>change directory</code>,是不是很好记了，首拼就是<code>cd</code>。<code>pwd</code>显示当前所在位置,<code>print working directory</code>的首拼。<code>sudo</code>临时使用root权限，<code>super user do</code>的首拼。<code>su</code>切换root用户，<code>super user</code>的首拼。</p></li><li><p>善于使用帮助命令<br>那么多的命令，已经很难记了，如果再加上参数怎么办？参数其实不需要怎么记，在你使用的时候查看一下帮助文档就好了，<code>命令 --help</code>就是显示简单的使用帮助，一般用这个就够了，如果你需要更详细的解释，就用<code>man 命令</code>吧</p></li></ol><hr><p>  好了，基础就这么多了，了解了这些，相信学起来就如鱼得水了吧</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
            <tag> linux </tag>
            
            <tag> archlinux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux修改磁盘卷标</title>
      <link href="/2019/04/25/linux%E4%BF%AE%E6%94%B9%E7%A3%81%E7%9B%98%E5%8D%B7%E6%A0%87/"/>
      <url>/2019/04/25/linux%E4%BF%AE%E6%94%B9%E7%A3%81%E7%9B%98%E5%8D%B7%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<p>在windows上修改磁盘的名称只要右键就可以修改了,但是linux中却害得我好找啊<br>首先是修改ext2,ext3,ext4这种类型的</p><pre><code>e2label /dev/sdb3 ARCHLINUX</code></pre><p>修改ntfs的卷标</p><pre><code>ntfslabel /dev/sda2 WIN10</code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iptables防火墙设置-补充</title>
      <link href="/2019/04/25/iptables%E9%98%B2%E7%81%AB%E5%A2%99%E8%AE%BE%E7%BD%AE-%E8%A1%A5%E5%85%85/"/>
      <url>/2019/04/25/iptables%E9%98%B2%E7%81%AB%E5%A2%99%E8%AE%BE%E7%BD%AE-%E8%A1%A5%E5%85%85/</url>
      
        <content type="html"><![CDATA[<p>前面说的rule-specification不够详细,so,补充一下<br>rule-specification是用来指定符合条件的规则,包含了对这个规则的处理<br><strong><code>注意了:写规则的时候是可以用tab键来补全的,所以这样就简单多了</code></strong><br> <strong><code>有些参数是支持取反的</code></strong></p><ul><li><p>-4, –ipv4 指定使用ipv4</p></li><li><p>-6, –ipv6 指定使用ipv6</p></li><li><p>[!] -p, –protocol protocol 指定使用的协议,这个参数就支持取反,如果我想写除tcp之外的协议:<code>!  -p tcp</code><br>例如我写这个的时候不知道有那些协议啊?tab一下就出来了<br><img src="https://upload-images.jianshu.io/upload_images/9937522-990fea45314f8074.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>[!] -s, –source address[/mask][,…] 指定源主机地址,包含a network name, a hostname, a network IP address </p></li><li><p>[!] -d, –destination address[/mask][,…]与上面的参数一样,指定目标主机地址</p></li><li><p>-m, –match match 匹配模块,可以调用模块的扩展功能.<br>举个例子:使用 -p tcp参数的时候,就是指定匹配tcp协议.而使用-m tcp参数的时候,是调用tcp模块.不过我真不知道这有啥用,恕我孤陋寡闻了</p></li><li><p>-j, –jump target 动作,包含<code>ACCEPT      DROP        ECN         MARK        MIRROR      REDIRECT    RETURN      TCPMSS      ULOG                  DNAT        DSCP        LOG         MASQUERADE  QUEUE       REJECT      SNAT        TOS</code></p></li><li><p>-g, –goto chain指定跳转用户自定义的链</p></li><li><p>[!] -i, –in-interface name 指定数据进来的网络接口</p></li><li><p>[!] -o, –out-interface name 指定数据出去的网络接口</p></li><li><p>[!] -f, –fragment 只能是ipv4起作用,类似于模糊匹配,通过数据包片段来匹配</p></li><li><p>-c, –set-counters packets bytes 允许root初始化链的数据</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iptables防火墙设置-语法</title>
      <link href="/2019/04/25/iptables%E9%98%B2%E7%81%AB%E5%A2%99%E8%AE%BE%E7%BD%AE-%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/04/25/iptables%E9%98%B2%E7%81%AB%E5%A2%99%E8%AE%BE%E7%BD%AE-%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="http://music.163.com/#/m/song?id=1294899029" target="_blank" rel="noopener">今天心情不好,果然,放个歌的链接都有问题</a></p></blockquote><p>相信看了前面的还是不懂怎么写,其实前面的只是以讲故事的方式了解了一下表和链,以及简单的添加和删除</p><hr><p> <img src="https://upload-images.jianshu.io/upload_images/9937522-2753136af6999423.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="man page中规则的写法已经写的很详细了"></p><p>这里总结一下:</p><blockquote><p>iptables -t 使用什么表 -增加/删除/修改 那条链 (数字) -p 协议 -s 目标地址 -j 丢弃/接收</p></blockquote><p>当然了,也不是每条规则都需要写这么多参数的.只要能达到目标即可,比如说:我想阻止所有的tcp请求(默认是filter表可以不写,<code>-I</code>默认写入到规则列表最上面,后面数字也不必写,已经阻止所有tcp请求了,ip地址也不需要写)</p><pre><code>sudo iptables -I INPUT -p tcp -j DROP</code></pre><p>上面这条规则写完后,你会惊喜的发现你已经打不开百度网页了.为什么呢?我只阻止了tcp请求啊,跟服务器给我发消息有什么关系呢?tcp协议是有三次握手的,网页传输正好使用了tcp协议,我们给服务器发送一个请求后,服务器会给我们回一个请求,可是我们阻止了所有的tcp请求,自然无法完成握手,也就无法打开网页了.打不开网页多可怕,所以把上面的规则删掉</p><pre><code>sudo iptables -D INPUT 1</code></pre><p>下面正式写语法:</p><ul><li><p>新增规则</p><pre><code>iptables [-t table] -A chain rule-specification iptables [-t table] -I chain rulenum rule-specificationiptables [-t table] -N chain</code></pre><ul><li>rule-specification表示指定规则,比如说指定ip,指定协议,指定动作这些<br><code>rule-specification =[matches...] [target]</code><ul><li>match = <code>-m matchname [per-match-options]</code><br>举个例子:match为-p tcp 或者 -s 192.168.0.12</li><li>target = <code>-j targetname [per-target-options]</code><br>举个例子:target为-j DROP 或者 -j ACCEPT</li></ul></li><li><code>[-t table]</code>表示可选,可以写,可以不写(如果是filter表就不需要写,其它表是必须写的)</li><li><code>-A</code>参数与<code>-I</code>参数区别:<code>A</code>表示append/add,新增或在已有规则后面添加.<code>I</code>表示insert,插入到指定位置,可以将规则写入到表中的任意位置,这个位置就是后面的rulenum决定的.</li><li><code>-N</code>表示添加用户自定义的链</li><li>targetname表示对规则的处理,有accept接收/drop丢弃/return暂存</li></ul></li><li><p>删除规则</p><pre><code>iptables [-t table] -D chain rulenumiptables [-t table] -Fiptables [-t table] -X</code></pre><ul><li><code>-D</code>删除rulenum所指的规则</li><li><code>-F</code>删除指定的整个表的规则</li><li><code>-X</code>删除用户自定义的表</li></ul></li><li><p>查看规则</p><pre><code>iptables [-t table] -C chain rule-specificationiptables [-t table] -L [chain [rulenum]]iptables [-t table] -S [chain [rulenum]]</code></pre><p><code>-C</code>check检查是否存在规则,存在不给提示,不存在给出提示<br><code>-L</code>与<code>-S</code>区别:L显示的信息全面,S显示简略信息<br>常用的查看规则(显示排序数字):   <code>sudo iptables -nvL --line-numbers</code></p></li><li><p>修改规则</p><pre><code>iptables [-t table] -R chain rulenum rule-specificationiptables [-t table] -E old-chain-name new-chain-nameiptables [-t table] -P chain target</code></pre><ul><li><p><code>-R</code>replace替代rulenum指定的规则</p></li><li><p><code>-E</code>rename修改用户自定义链的名字</p></li><li><p><code>-P</code>policy修改iptables默认链的规则,target只有drop和accept这两种情况<br>举个例子:<br>我们的个人电脑一般是不会用来做路由的吧,路由转发这种事是服务器和路由器做的,所以forward这条链对我们的作用几乎为零,那我们就可以将链的规则修改为丢弃</p><pre><code>sudo iptables -P FORWARD -j DROP</code></pre></li></ul></li><li><p>清除所有链/指定链/指定规则的数据包统计</p><pre><code>iptables [-t table] -Z [chain [rulenum]]</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/9937522-ed1916dd91d1319f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="清除数据之前"></p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9937522-0a306afc404cca6f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="清除数据之后"></p><hr><p>over over语法已经完了<br>想想和mysql的增删改查好像没多大区别吧,其实语法写起来简单,难的是rule-specification的写法,就比如说可以ping别的主机且不允许被ping,就需要了解icmp-type的相关知识了.</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iptables防火墙设置-规则</title>
      <link href="/2019/04/25/iptables%E9%98%B2%E7%81%AB%E5%A2%99%E8%AE%BE%E7%BD%AE-%E8%A7%84%E5%88%99/"/>
      <url>/2019/04/25/iptables%E9%98%B2%E7%81%AB%E5%A2%99%E8%AE%BE%E7%BD%AE-%E8%A7%84%E5%88%99/</url>
      
        <content type="html"><![CDATA[<ul><li><p>iptables有五张表(<strong><code>filter,nat,mangle,raw,security</code></strong>),五个规则链(<strong><code>prerouting,input,forward,output,postrouting</code></strong>).要全部弄懂好像有点麻烦,不过先挑常用的来学学还是一个不错的选择.</p></li><li><p>什么是表呢?用过myql数据库的应该很清楚,表是用来存放数据的.就像excel表格一样,将数据一条一条的存到数据库中.同理,这里的表也是这个作用,表里面存放的就是我们写好的规则.为什么又分了五个呢,一个不行吗?我觉得一个也不是不可以,但是那样不是就很乱了吗?分类管理还是挺好的.既然说到分类管理了,那么五条链也就比较好理解了,也是为了分类管理.</p></li><li><p>在表中存放着许多规则,我们把这些规则分个类,这些类就是链.而每张表的功能又不一样,所以每张表中的链也就不一样了</p><ul><li>nat表:<strong><code>prerouting,input,output,postrouting</code></strong></li><li>filter表:<strong><code>input,forward,output</code></strong></li><li>mangle:<strong><code>prerouting,iniput,forward,output,postrouting</code></strong></li><li>raw表:<strong><code>prerouting,output</code></strong></li><li>security表:<strong><code>input,forward,output</code></strong></li></ul></li><li><p>上面这样写应该还是不好理解,到底是怎么起作用的?arch wiki上的这张图很好的展示了如何接收/发送数据.以数据的流向为依据,将这些表和链很好的连接在了一起,非常漂亮.所以又不得不夸夸arch wiki了,写的是真的好.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">                               XXXXXXXXXXXXXXXXXX</span><br><span class="line">                             XXX     Network    XXX</span><br><span class="line">                               XXXXXXXXXXXXXXXXXX</span><br><span class="line">                                       +</span><br><span class="line">                                       |</span><br><span class="line">                                       v</span><br><span class="line"> +-------------+              +------------------+</span><br><span class="line"> |table: filter| &lt;---+        | table: nat       |</span><br><span class="line"> |chain: INPUT |     |        | chain: PREROUTING|</span><br><span class="line"> +-----+-------+     |        +--------+---------+</span><br><span class="line">       |             |                 |</span><br><span class="line">       v             |                 v</span><br><span class="line"> [local process]     |           ****************          +--------------+</span><br><span class="line">       |             +---------+ Routing decision +------&gt; |table: filter |</span><br><span class="line">       v                         ****************          |chain: FORWARD|</span><br><span class="line">****************                                           +------+-------+</span><br><span class="line">Routing decision                                                  |</span><br><span class="line">****************                                                  |</span><br><span class="line">       |                                                          |</span><br><span class="line">       v                        ****************                  |</span><br><span class="line">+-------------+       +------&gt;  Routing decision  &lt;---------------+</span><br><span class="line">|table: nat   |       |         ****************</span><br><span class="line">|chain: OUTPUT|       |               +</span><br><span class="line">+-----+-------+       |               |</span><br><span class="line">      |               |               v</span><br><span class="line">      v               |      +-------------------+</span><br><span class="line">+--------------+      |      | table: nat        |</span><br><span class="line">|table: filter | +----+      | chain: POSTROUTING|</span><br><span class="line">|chain: OUTPUT |             +--------+----------+</span><br><span class="line">+--------------+                      |</span><br><span class="line">                                      v</span><br><span class="line">                               XXXXXXXXXXXXXXXXXX</span><br><span class="line">                             XXX    Network     XXX</span><br><span class="line">                               XXXXXXXXXXXXXXXXXX</span><br></pre></td></tr></table></figure></li><li><p>看这个表就知道我们主要操作的还是filter表了.下面就操作一下,秀操作的时候到了,有没有操作?(PS:老年人手速,也想有操作?)</p></li><li><p><strong>iptables的规则书写是有大小写区别的</strong></p></li><li><p>首先我们不想别人ping我们的ip</p><pre><code>sudo iptables -A INPUT -p icmp -j DROP</code></pre><p>其实完整的写法是下面这样的(需要指定是那张表),但是它默认就是filter表,而我们操作的也是filter表就省略了</p><pre><code>sudo iptables -t filter -A INPUT -p icmp -j DROP</code></pre><p>可以查看一下</p><pre><code>sudo iptables -S</code></pre><p>这样虽然别人不能ping我们了,但是我们发现自己也无法ping别人了,所以得改</p></li><li><p>这个iptables执行是按顺序一条一条从上向下执行的,所以我们想写在之前写的那条规则上面就要使用<code>-I</code>这个参数,insert将规则插入到最上面,如果后面再接一个数字的话,就是插入到指定第几条规则的上面<br><img src="https://upload-images.jianshu.io/upload_images/9937522-1c7bb04d152470e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="看见了没,这里有两条规则,规则前面就有数字排序"></p></li><li><p>在<a href="https://www.cnblogs.com/itcomputer/p/4939399.html" target="_blank" rel="noopener">这里</a>我们可以看到icmp-type对应数字的意义,icmp-type 8代表echo request,就是别人ping我们时怎么回答</p><pre><code>sudo iptables -I  INPUT -p icmp --icmp-type 8 -j DROP</code></pre><p>上面这句话就是别人ping我们时,我们不回答,直接丢弃.其实这里还是没有解决无法ping别人的问题,只是替代了上面那条规则</p></li><li><p>好,这里就写怎么解决ping别人.前面是别人ping我们时,发给我们的icmp数据包直接丢弃.而我们自己ping别人时是需要别人发给我们一个icmp回应包才算ping通的,所以就要接收这个包咯,前面不是说了不接受包吗?icmp-type 0就是接受我们发给别人后回传的数据包的.通过数据包类型的不同来区分到底是别人ping我们的数据包还是回传的数据包<br>我们把这条规则加到最开始</p><pre><code>sudo iptables -I INPUT 1 -p icmp --icmp-type 0 -j ACCEPT</code></pre></li><li><p>还记得我们添加的第一条规则吗,没有作用了,我们把它删除</p><pre><code>sudo iptables -D INPUT 3</code></pre></li><li><p>然后查看一下现在的规则</p><pre><code>sudo  iptables -S</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/9937522-ebeaa52d4b2cfed2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>最后保存一下,以免下次开机这些规则就丢失了</p><pre><code>suiptables-save &gt; /etc/iptables/iptables-rules</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iptables防火墙设置-基础</title>
      <link href="/2019/04/25/iptables%E9%98%B2%E7%81%AB%E5%A2%99%E8%AE%BE%E7%BD%AE-%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/04/25/iptables%E9%98%B2%E7%81%AB%E5%A2%99%E8%AE%BE%E7%BD%AE-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>早就听闻iptables很难了,也一直没有学.但是呢,这么基础和重要的东西不掌握点总觉得缺点什么.是的,关闭端口/拒绝访问都不会,要我何用?</p><hr><ul><li><p>archlinux安装系统的时候默认就已经安装好了iptables,只是没有开启而已,不信我们看一下就知道了<br><img src="https://upload-images.jianshu.io/upload_images/9937522-5070d3b50fc5f7b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>arch wiki上说开启这个服务首先需要有 <code>/etc/iptables/iptables.rules</code>这个文件,默认是没有的(但是我的系统上有是什么鬼?),没有就自己新建一个</p><pre><code>sudo touch /etc/iptables/iptables.rules</code></pre><p>或者复制一个</p><pre><code>sudo cp /etc/iptables/empty.rules /etc/iptables/iptables.rules</code></pre></li><li><p>然后就可以启动了</p><pre><code>sudo systemctl start iptables</code></pre><p>如果想要开机自动启动的话,就这样设置</p><pre><code>sudo systemctl enable iptables</code></pre></li><li><p>如果是使用的ipv6那么就这样设置(多个6而已)</p><pre><code>sudo systemctl start ip6tablessudo systemctl enable ip6tables</code></pre><p>等等,我启动时竟然出错了?<br><img src="https://upload-images.jianshu.io/upload_images/9937522-5f6365a231ef9201.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="但是我启动服务时出错了我"><br>  终于找到原因了,那个iptables.rules文件中说了要清空内容,但是默认是没有清空的,删掉之后再启动就OK了(所以创建这个文件时还是用touch吧,不要copy的好)<br><img src="https://upload-images.jianshu.io/upload_images/9937522-bb0853902b5dd208.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>可能现在写规则还是会出现一些错误提示,重启一下就ok</p></li><li><p>现在来写第一条规则,了解一下怎么保存规则的<br>我想阻止别人ping 我的ip地址</p><pre><code>iptables -A INPUT -p icmp -j DROP</code></pre><p>查看写的这条规则:</p><pre><code>sudo iptables -nvL</code></pre><p>现在写的这个可以临时生效,只要重启后就失效了,所以要保存这条规则,需将规则保存在<code>/etc/iptables/iptables-rules</code>中<br>这条命令需要root权限,但是sudo来执行的话,好像有点问题.所以切换root用户操作</p><pre><code>suiptables-save &gt; /etc/iptables/iptables-rules</code></pre><p>搞定<br>至此 ,在别的电脑上ping我的ip就ping不通了</p><p><img src="https://upload-images.jianshu.io/upload_images/9937522-45aedf3d0f18c16e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li></ul><hr><p>  开心</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gnome主题设置</title>
      <link href="/2019/04/25/gnome%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE/"/>
      <url>/2019/04/25/gnome%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>怎么说呢,gnome主题确实做的不错,不过个人觉得mac的主题更好看,所以安装gnome后第一件事就是修改一下默认的主题</p><hr><ol><li><p>首先我们需要安装gnome-tweaks这个软件(好像安装gnome时已经安装了,忘了) ,用来做个性化设置</p><pre><code>sudo pacman -S gnome-tweaks</code></pre></li><li><p>主题分为三个部分:application(所有应用程序的主题),icons(所有图标的主题),shell(桌面最上面的状态栏的主题).所以在下载的时候需要注意了,有的主题包里面不一定包含了shell或者icons,可能安装之后发现最上面的状态栏并没有改变,其实是因为那个主题包不包含shell主题了<br><img src="https://upload-images.jianshu.io/upload_images/9937522-66f49f3905a5f022.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="themes包含的几个部分"></p></li></ol><ol start="3"><li><p>如果要改变shell,那么还需要安装一个插件,用来启用user themes(忘了要不要安装,好像默认已经安装上了).然后在设置中启用它</p><pre><code>sudo pacman -S gnome-shell-extensions</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/9937522-f28e4b9a682bcdd6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="启用user themes"></p></li></ol><ol start="4"><li><p>然后就是去下载了<a href="https://www.opendesktop.org/s/Gnome/p/1013741/" target="_blank" rel="noopener">opendesktop</a>这个网站有很多主题,而链接里的这个主题包包含了application和shell主题.所以安装后application和shell的主题都可以被改变</p></li><li><p>如何安装,applications和shell主题可以放在<code>~/.local/share/themes</code> 这个目录下,icons可以放在<code>~/.local/share/icons</code>这个目录下<br>或者可以直接放在家目录下,在家目录下新建<code>.themes</code>文件夹用来放application和shell主题,在家目录下新建<code>.icons</code>文件夹用来放icons主题.</p></li><li><p>把下载下来的压缩包解压之后放在对应文件夹下,然后打开tweaks设置就ok了<br><img src="https://upload-images.jianshu.io/upload_images/9937522-2e55e5520168ac57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gnome设置默认file-manager</title>
      <link href="/2019/04/25/gnome%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4file-manager/"/>
      <url>/2019/04/25/gnome%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4file-manager/</url>
      
        <content type="html"><![CDATA[<p>安装ranger后，再打开filemanager时总是会默认用ranger打开，觉得十分不方便，但是在设置里找不到设置默认文件管理器的选项</p><p><img src="https://upload-images.jianshu.io/upload_images/9937522-9a932b21e8e6ad2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>所以需要手动设置：会用到一个叫 <strong>xdg-mime</strong> 的命令</p><blockquote><p><strong>mime:</strong>多用途Internet邮件扩展（MIME）类型 是一种标准化的方式来表示文档的性质和格式</p><blockquote><p>格式：type/subtype</p></blockquote></blockquote><p>gnome自带的文件管理器叫 <strong>nautilus</strong> 用下面命令来设置默认文件管理器</p><pre><code>xdg-mime default org.gnome.Nautilus.desktop inode/directory</code></pre><p>最后一行可以看到nautilus已经加进去了</p><p><img src="https://upload-images.jianshu.io/upload_images/9937522-4fc5849bbe62511d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>也可以用下面的命令查看默认文件管理器</p><pre><code>xdg-mime query default inode/directory </code></pre><p><img src="https://upload-images.jianshu.io/upload_images/9937522-fda7b2d5ca7c0335.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Archlinux zsh安装配置</title>
      <link href="/2019/04/25/Archlinux-zsh%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/04/25/Archlinux-zsh%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>zsh配置好了是很好看的</p></blockquote><ul><li><ol><li><p>安装 <a href="https://wiki.archlinux.org/index.php/Zsh#Initial_configuration" target="_blank" rel="noopener">zsh</a></p><pre><code>pacman -S zshpacman -S zsh-completions</code></pre></li></ol></li><li><ol start="2"><li>切换shell为zsh</li></ol><ul><li><p>查看现在使用的shell</p><pre><code>chsl -l</code></pre></li><li><p>设置默认shell为zsh</p><pre><code>chsh -s /bin/zsh</code></pre></li><li><p>切换为zsh</p><pre><code>zsh</code></pre></li></ul></li><li><ol start="3"><li><p>基础配置<br>添加以下到<code>.zshrc</code>里</p><pre><code>autoload -Uz compinit promptinitcompinitpromptinit</code></pre></li></ol><ul><li><p>查看自带的主题</p><pre><code>prompt -l</code></pre><p>然后选择一种</p><pre><code>prompt xxx  #xxx为主题名</code></pre></li></ul></li><li><ol start="4"><li><p>我们发现这些主题并不是特别好看，所以安装 <a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">0h-my-zsh</a></p><pre><code>yay -S oh-my-zsh-git</code></pre><ul><li><p>安装这个之后我们就可以选择一种主题了<br>例如：</p><pre><code>ZSH_THEME=&quot;agnoster&quot;</code></pre><ul><li>我们发现并不像下面这么好看</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9937522-bb4acf888d68205d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li></ul></li></ol></li><li><ol start="5"><li><p>那是因为没有安装 <a href="https://github.com/powerline/fonts" target="_blank" rel="noopener">powerline</a> 这种字体，所以终端就无法显示这些箭头了。</p><pre><code>git clone https://github.com/powerline/fonts.git --depth=1cd fonts./install.shcd ..rm -rf fonts</code></pre><p>重新打开一个终端就可以正常显示了</p></li></ol></li><li><ol start="6"><li><p>然后我们还可以找更多喜欢的 <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/External-themes" target="_blank" rel="noopener">主题</a><br>我比较喜欢 <a href="https://github.com/bhilburn/powerlevel9k" target="_blank" rel="noopener">powerlevel9k</a> 这款主题</p><pre><code>sudo pacman -S zsh-theme-powerlevel9k</code></pre><p> 设置为终端主题</p><pre><code>echo &apos;source /usr/share/zsh-theme-powerlevel9k/powerlevel9k.zsh-theme&apos; &gt;&gt; ~/.zshrc</code></pre><p> 这样设置之后已经很好看了，不过有些自带的图标显示不了</p></li></ol></li><li><ol start="7"><li><p>下载 <a href="https://github.com/gabrielelana/awesome-terminal-fonts" target="_blank" rel="noopener">Awesome-Terminal Fonts</a></p><pre><code>pacman -Syu awesome-terminal-fonts</code></pre><p>   然后配置一下</p></li></ol><ul><li><p>在<code>.zshrc</code>找到设置 powerlevel9k的位置，将下面的配置放到它上面</p><pre><code>POWERLEVEL9K_MODE=&apos;awesome-fontconfig&apos;</code></pre></li></ul></li><li><ol start="8"><li>重新打开一个新的终端，就可以看到漂亮的主题了<br>有关主题更多的配置，就照着这里 <a href="https://github.com/bhilburn/powerlevel9k#installation" target="_blank" rel="noopener">设置</a> 好了</li></ol></li><li><p>9.安装<a href="https://www.archlinux.org/packages/?name=zsh-syntax-highlighting" target="_blank" rel="noopener">zsh-syntax-highlighting</a>　</p><pre><code>　sudo pacman -S zsh-syntax-highlighting</code></pre><p>我的 zsh配置文件 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">export TERM&#x3D;&quot;xterm-256color&quot; </span><br><span class="line">#common setting</span><br><span class="line">autoload -Uz compinit promptinit</span><br><span class="line">compinit</span><br><span class="line">promptinit</span><br><span class="line">zstyle &#39;:completion::complete:*&#39; gain-privileges 1</span><br><span class="line">zstyle &#39;:completion:*&#39; menu select</span><br><span class="line"></span><br><span class="line">#theme setting</span><br><span class="line">POWERLEVEL9K_MODE&#x3D;&#39;awesome-fontconfig&#39;</span><br><span class="line">source &#x2F;usr&#x2F;share&#x2F;zsh-theme-powerlevel9k&#x2F;powerlevel9k.zsh-theme</span><br><span class="line">POWERLEVEL9K_LEFT_PROMPT_ELEMENTS&#x3D;(load dir vcs ssh dir_writable)</span><br><span class="line">POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS&#x3D;(status root_indicator background_jobs history newline)</span><br><span class="line">#use to highlight syntax like fish</span><br><span class="line">source &#x2F;usr&#x2F;share&#x2F;zsh&#x2F;plugins&#x2F;zsh-syntax-highlighting&#x2F;zsh-syntax-highlighting.zsh</span><br><span class="line"></span><br><span class="line">#highlight man </span><br><span class="line">man() &#123;</span><br><span class="line">    LESS_TERMCAP_md&#x3D;$&#39;\e[01;31m&#39; \</span><br><span class="line">    LESS_TERMCAP_me&#x3D;$&#39;\e[0m&#39; \</span><br><span class="line">    LESS_TERMCAP_se&#x3D;$&#39;\e[0m&#39; \</span><br><span class="line">    LESS_TERMCAP_so&#x3D;$&#39;\e[01;44;33m&#39; \</span><br><span class="line">    LESS_TERMCAP_ue&#x3D;$&#39;\e[0m&#39; \</span><br><span class="line">    LESS_TERMCAP_us&#x3D;$&#39;\e[01;32m&#39; \</span><br><span class="line">    command man &quot;$@&quot;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">#user alias</span><br><span class="line">alias l&#x3D;&#39;ls -lh --color&#x3D;auto&#39;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9937522-b03eb34026087324.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>firefox无法输入中文</title>
      <link href="/2019/04/25/firefox%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87/"/>
      <url>/2019/04/25/firefox%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87/</url>
      
        <content type="html"><![CDATA[<p>在parrotOS英文版上安装了fcitx输入框架和googlepinyin输入法，在终端可以输入中文，但是在firefox等浏览器里无法使用中文输入法<br>解决方法：原来是local-gen里面没有设置中文环境。<br><img src="https://upload-images.jianshu.io/upload_images/9937522-5497f924bd21369c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>然后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo locale-gen</span><br></pre></td></tr></table></figure><p>这样就可以在firefox里输入中文了</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EncFS加密</title>
      <link href="/2019/04/25/EncFS%E5%8A%A0%E5%AF%86/"/>
      <url>/2019/04/25/EncFS%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<p>linux下面加密文件的方法还是比较多的，常见的vim，zip，tar等都可以加密。不过这里要说的是加密文件夹的一个软件：<a href="https://wiki.archlinux.org/index.php/EncFS#Installation" target="_blank" rel="noopener">encfs</a></p><blockquote><p>所有的路径都是绝对路径,假设文件都在家目录</p></blockquote><ul><li><p>假设要加密的是data这个文件夹，先创建一个存加密文件的.data文件夹。</p><pre><code>mkdir ～/.data</code></pre></li><li><p>加密data文件夹</p><pre><code>encfs ~/.data ~/data</code></pre></li><li><p>取消被加密的文件的挂载</p><pre><code>fuser -u ~/data</code></pre></li><li><p>重新挂载文件</p><pre><code>encfs ~/.data ~/data</code></pre></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Archlinux手动安装mysql-5.6.42</title>
      <link href="/2019/04/25/Archlinux%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85mysql-5-6-42/"/>
      <url>/2019/04/25/Archlinux%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85mysql-5-6-42/</url>
      
        <content type="html"><![CDATA[<p>不像之前那样，一条命令就可以安装好，手动安装真的很麻烦。但是这么麻烦为什么还要安装呢？还不是因为mysql5.7以后版本有ssl加密，驱动包也不同，而我又不会，学习java又要用。哎，所以不得不手动安装。</p><hr><p>####参考教程<br>多亏了网上的教程 <a href="https://www.cnblogs.com/wangdaijun/p/6132632.html" target="_blank" rel="noopener">教程1</a>     <a href="https://www.cnblogs.com/WEREWOLFGHOST-Zedekiah/p/5812064.html" target="_blank" rel="noopener">教程2</a></p><ul><li><p>下载的mysql版本是<a href="https://dev.mysql.com/downloads/mysql/5.6.html#downloads" target="_blank" rel="noopener">5.6.42</a>,同样的方法，在5.5.42上没有成功。或许是之前步骤错误吧。</p></li><li><p>参考<a href="https://dev.mysql.com/doc/refman/5.6/en/binary-installation.html" target="_blank" rel="noopener">官网教程</a><br><img src="https://upload-images.jianshu.io/upload_images/9937522-64b7aeb3b0c1a4c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>步骤都差不多，但是一定是把解压后的文件放到<strong><code>/usr/local/</code></strong>文件下。不然会有奇奇怪怪的问题。（ps：本来想放到自己的家目录的），我就是直接在<strong><code>/usr/local/</code></strong>下新建了一个<strong><code>mysql</code></strong>的文件夹，然后将解压的文件全部复制进去，没有做链接这个操作。</p></li><li><p>所有操作都基于<strong><code>root</code></strong>权限</p></li></ul><hr><p>####具体安装步骤</p><ul><li><p>很重要的一点是archlinux安装mysql后是启动不了的，因为缺少了一个aur的依赖包，所以先安装上。</p><pre><code>pacman -S ncurses5-compat-libs</code></pre></li><li><p>解压安装包。</p><pre><code>tar -xvzf ~/Downloads/mysql-5.6.42-linux-glibc2.12-x86_64.tar.gz</code></pre></li><li><p>添加mysql组。</p><pre><code>groupadd mysql</code></pre></li><li><p>添加mysql用户。</p><pre><code>useradd -r -g mysql -s /bin/false mysql</code></pre></li><li><p>进入安装目录，创建文件夹。</p><pre><code>cd /usr/localmkdir mysql</code></pre></li><li><p>把解压好的文件复制到安装目录。</p><pre><code>cp -r ~/Downloads/mysql-5.6.42-linux-glibc2.12-x86_64/* /usr/local/mysql</code></pre></li></ul><ul><li><p>修改文件的所属用户和组。</p><pre><code>cd mysql &amp;&amp; chown -R mysql:mysql ./</code></pre></li><li><p>执行安装脚本。</p><pre><code>./scripts/mysql_install_db --user=mysql</code></pre></li><li><p>再修改文件的所属用户和组</p><pre><code>chown -R root:root ./chown -R mysql:mysql data</code></pre></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9937522-145f1e75e7f79203.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="现在，就像这样了"></p><ul><li><p>启动mysql。</p><pre><code>./support-files/mysql.server start</code></pre></li><li><p>修改密码。</p><pre><code>./bin/mysqladmin -u root -h localhost.localdomain password &apos;密码&apos;</code></pre></li><li><p>启动mysql。</p><pre><code>./bin/mysql  -uroot -p</code></pre></li></ul><hr><p>####修改一些东西，方便下次启动<br> 如果不做一些修改的话，那么每次都要进入<strong><code>/usr/share/mysql</code></strong>然后再执行启动命令，这样有点麻烦。</p><ul><li><p>给启动服务命令加一个别名</p><pre><code>vim .zshrcalias mysqld=&apos;sudo /usr/local/mysql/support-files/mysql.server&apos;</code></pre><p>这样下次操作时，就只需要<strong><code>mysqld option</code></strong></p><pre><code>mysqld start/stop/restart/status</code></pre></li><li><p>mysql不是系统命令，所以当你使用mysql命令登录时，会提示找不到此命令，所以做一个链接</p><pre><code>ln -s /usr/local/mysql/bin/mysql /usr/bin/mysql </code></pre><p><img src="https://upload-images.jianshu.io/upload_images/9937522-4b0e5242f3ddc4fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9937522-fc7213f188e17e7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li><p>这样下次登录mysql就简单许多了</p><pre><code>mysql -uroot -p</code></pre></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9937522-b6a2e8941192becb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><hr><p>ps:本来想将mysql.server加入systemd，然后利用systemctl来启动的，但是失败了，也不纠结了</p><p><img src="https://upload-images.jianshu.io/upload_images/9937522-b76923fcae2d24ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Archlinux安装mysql和ssh</title>
      <link href="/2019/04/25/Archlinux%E5%AE%89%E8%A3%85mysql%E5%92%8Cssh/"/>
      <url>/2019/04/25/Archlinux%E5%AE%89%E8%A3%85mysql%E5%92%8Cssh/</url>
      
        <content type="html"><![CDATA[<blockquote><p>mysql安装</p></blockquote><ul><li><p>1.使用<code>pacman</code>查看mysql版本</p><pre><code>sudo pacman -Si mysql</code></pre></li><li><p>2.下载安装mysql</p><pre><code>sudo pacman -S mysql</code></pre><p>仔细看安装的说明，里面有介绍初始化安装的步骤</p></li><li><p>3.初始化安装</p><pre><code>sudo mysqld --initialize --user=mysql --basedir=/usr --datadir=/var/lib/mysql</code></pre><p> 仔细看初始化安装的输出，里面有初始登录的密码</p><p>   <img src="https://upload-images.jianshu.io/upload_images/9937522-8f77e5705732a8a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li></ul><ul><li><p>4.启动mysql，archlinux使用的是systemd</p><pre><code>sudo systemctl start mysqld.service</code></pre></li><li><p>5.查看mysql服务是否启动</p><pre><code>systemctl status mysqld.service</code></pre><p>   <img src="https://upload-images.jianshu.io/upload_images/9937522-93bc36490403d3f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li></ul><ul><li><p>6.连接mysql数据库</p><pre><code>mysql -uroot -p</code></pre><p>输入上面的临时密码</p></li><li><p>7.可以看到提示说需要修改密码</p><pre><code>alter user user() identified by &apos;新密码&apos;</code></pre><p>   密码长度太短会报错。。。。。。</p><p>  <img src="https://upload-images.jianshu.io/upload_images/9937522-b60c7e5c63b064f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li></ul><ul><li><p>8.好了，密码修改成功了，可以退出去然后再用新密码进来</p><pre><code>exitmysql  -uroot -p</code></pre><p>输入新密码进入数据库，然后就可以操作了</p></li><li><p>9.下次登录就可以直接启动了</p><pre><code>sudo systemctl start mysqld.servicemysql -uroot -p</code></pre></li><li><p>10.如果你想让mysql服务开机自启动</p><pre><code>sudo systemctl enable mysqld.service</code></pre></li></ul><blockquote><p>ssh远程连接</p></blockquote><ul><li><p>安装ssh</p><pre><code>pacman -S openssh</code></pre><p>系统开启ssh服务</p><pre><code>systemctl start sshd.serviceip -color addr show  #查看ip地址</code></pre><p>然后在其他终端就可以连接了</p><pre><code>ssh 用户名@地址</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Archlinux安装marktext(创建快捷方式)</title>
      <link href="/2019/04/25/Archlinux%E5%AE%89%E8%A3%85marktext-%E5%88%9B%E5%BB%BA%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/"/>
      <url>/2019/04/25/Archlinux%E5%AE%89%E8%A3%85marktext-%E5%88%9B%E5%BB%BA%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Mark Text is a Markdown editor for Mac, Windows, and Linux. It is a concise text editor, dedicated to improving your editing efficiency. </p></blockquote><ul><li><p>最近想用markdown记笔记，所以选择了marktext.由于通过aur安装失败，所以直接在<a href="https://marktext.github.io/website/" target="_blank" rel="noopener">官网</a>下载并安装</p></li><li><p>下载完，解压之后就可以直接使用</p><pre><code>cd .local/marktext-0.13.65  ./marktext</code></pre></li><li><p>这样使用是没有问题的，但是有点麻烦，因为通过搜索软件那样直接搜是搜不到的（环境变量没有设置），而且没有图标。所以呢，就自己创建一个快捷方式（当然也可以使用ln 来创建软连接，然后。。。。），不过这里我使用了另外的一个方式</p></li><li><p>首先去官网把logo图片下载下来，并移动到marktext的安装目录<br><img src="https://upload-images.jianshu.io/upload_images/9937522-b6b29cad523f24c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="logo.png"></p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9937522-47fbf5ba4843a37b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="logo已经移动到安装目录了"></p><ul><li><p>在gnome桌面环境下，app的桌面快捷方式在<code>~/.local/share/applications</code>下</p><pre><code>cd /home/narcissus/.local/share/applicationstouch marktext.desktopvim marktext.desktop</code></pre><ul><li>然后添加下面信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Version&#x3D;0.13.65</span><br><span class="line">Type&#x3D;Application</span><br><span class="line">Name&#x3D;marktext</span><br><span class="line">Icon&#x3D;&#x2F;home&#x2F;narcissus&#x2F;.local&#x2F;marktext-0.13.65&#x2F;logo.png</span><br><span class="line">Exec&#x3D;&quot;&#x2F;home&#x2F;narcissus&#x2F;.local&#x2F;marktext-0.13.65&#x2F;marktext&quot; %f</span><br><span class="line">Categories&#x3D;Development;</span><br><span class="line">Terminal&#x3D;false</span><br></pre></td></tr></table></figure></li></ul></li><li><p>然后就可以搜索到了<br><img src="https://upload-images.jianshu.io/upload_images/9937522-acfc9550b849d3eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Archlinux安装之后的配置</title>
      <link href="/2019/04/25/Archlinux%E5%AE%89%E8%A3%85%E4%B9%8B%E5%90%8E%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/04/25/Archlinux%E5%AE%89%E8%A3%85%E4%B9%8B%E5%90%8E%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/9937522-a97d887ad9e881fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><blockquote><p>安装软件</p></blockquote><ul><li><p>1.pacman的使用（以前介绍的不全，现在补上）</p><blockquote><p>pacman -Syu  升级系统<br>pacman -Ss   搜索软件<br>pacman -Si 查看软件详细信息<br>pacman -S   安装软件<br>pacman -Rs  删除软件<br>pacman -Qs 查询已安装软件<br>pacman -Qi 查询已安装软件详细信息<br>这两个查询命令有啥作用呢？可以把已安装的软件导出到一个文件里面去，下次安装系统就知道要安装那么东西了。</p></blockquote><ul><li>a 如果想指定某些软件不更新，该怎么做？<br>例如我不想更新mate-desktop这个软件，那么就修改 <strong>/etc/pacman.conf</strong> 这个文件，ignorepkg后面写上不需要更新的软件名就好了</li><li>b 是不是每次搜索软件的时候终端搜索出来的结果都很难看（都是一个颜色），去掉color的注释就好了</li></ul></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9937522-43067dea0f28d6f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li><p>一些必备应用：</p><ul><li>字体：ttf-dejavu  ttf-inconsolata ；</li><li>资源查看：htop；</li><li>终端图片查看：feh (used for x window , set desktop background)；</li><li>编辑器： vim ；</li><li>终端文件管理器：ranger </li><li>终端视频播放器：mplayer</li></ul></li><li><p>2.配置aur来启用更多的软件库 :  找到<a href="https://github.com/archlinuxcn/mirrorlist-repo" target="_blank" rel="noopener">aur源</a>，选择一种</p><pre><code>比如添加163源</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim  &#x2F;etc&#x2F;pacman.conf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">## 网易 (ipv4, http, https)</span><br><span class="line">[archlinuxcn]</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirrors.163.com&#x2F;archlinux-cn&#x2F;$arch</span><br></pre></td></tr></table></figure><p>然后需要安装archlinuxcn签名</p><pre><code>pacman -S archlinuxcn-keyring</code></pre><p>然后安装一个<a href="https://wiki.archlinux.org/index.php/AUR_helpers#Search_and_download" target="_blank" rel="noopener">aur的包管理器</a><br>比如安装：yay</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S git</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;aur.archlinux.org&#x2F;yay.git</span><br><span class="line">cd yay</span><br><span class="line">makepkg -si</span><br></pre></td></tr></table></figure><p>然后就可以使用yay来安装软件了</p></li><li><p>3.firefox</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pacman -S firefox</span><br><span class="line">pacman -S wqy-microhei  #firefox显示中文</span><br><span class="line">pacman -S flashplugin  #firefox播放视频</span><br></pre></td></tr></table></figure></li><li><p>4.安装搜狗输入法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pacman -S fcitx</span><br><span class="line">pacman -S fcitx-configtool</span><br><span class="line">pacman -S fcitx-im</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S fcitx-sogoupinyin</span><br></pre></td></tr></table></figure><p>如果使用的是wayland，那么在<code>/etc/environment</code>中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GTK_IM_MODULE&#x3D;fcitx</span><br><span class="line">QT_IM_MODULE&#x3D;fcitx</span><br><span class="line">XMODIFIERS&#x3D;@im&#x3D;fcitx</span><br></pre></td></tr></table></figure><p>如果使用xorg，则添加到<code>.xinitrc</code></p></li><li><p>5.安装网易云音乐</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S netease-cloud-music</span><br></pre></td></tr></table></figure></li><li><p>6.安装urxvt，以及配置xterm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S rxvt-unicode</span><br></pre></td></tr></table></figure><p>配置：新建.Xresources</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch .Xresources</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">URxvt.font: xft:Inconsolata:style&#x3D;bole:pixelsize&#x3D;22</span><br><span class="line">URxvt.letterSpace: +1</span><br><span class="line">URxvt.scrollBar_right: True</span><br><span class="line">URxvt.cursorBlink:True</span><br><span class="line">URxvt.cursorColor:#DCB36A</span><br><span class="line">URxvt.cursorUnderline:False</span><br><span class="line">URxvt.pointerBlankDelay:1</span><br><span class="line">URxvt.saveLines:1000</span><br><span class="line"></span><br><span class="line">URxvt.background:#002B35</span><br><span class="line">URxvt.foreground:#839496</span><br><span class="line"></span><br><span class="line">URxvt.scrollBar:false</span><br><span class="line">URxvt.inheritPixmap: true</span><br><span class="line">URxvt.tintCddolor:white </span><br><span class="line">URxvt.shading:40 </span><br><span class="line"></span><br><span class="line">URxvt.colorBD:#78E3BF</span><br><span class="line">URxvt.colorUL:#D7D2BC</span><br><span class="line">! Colors</span><br><span class="line">URxvt*color0:  #000000</span><br><span class="line">URxvt*color8:  #686868</span><br><span class="line">URxvt*color1:  #B21818</span><br><span class="line">URxvt*color9:  #FF5454</span><br><span class="line">URxvt*color2:  #18B218</span><br><span class="line">URxvt*color10: #7EDD7E</span><br><span class="line">URxvt*color3:  #B26818</span><br><span class="line">URxvt*color11: #FFFF54</span><br><span class="line">URxvt*color4:  #14477b</span><br><span class="line">URxvt*color12: #2578cb</span><br><span class="line">URxvt*color5:  #B218B2</span><br><span class="line">URxvt*color13: #FF54FF</span><br><span class="line">URxvt*color6:  #18B2B2</span><br><span class="line">URxvt*color14: #6ADCDC</span><br><span class="line">URxvt*color7:  #B2B2B2</span><br><span class="line">URxvt*color15: #FFFFFF</span><br><span class="line"></span><br><span class="line">URxvt*iso14755:false</span><br><span class="line">URxvt*iso14755_52:false</span><br><span class="line"></span><br><span class="line">URxvt.urlLauncher:firefox</span><br><span class="line">URxvt.urgentOnBell:True</span><br><span class="line">URxvt.fade:50</span><br><span class="line">URxvt.fadecolor:gray</span><br><span class="line">URxvt.highlightColor:#BDBC6A</span><br><span class="line">URxvt.highlightTextColor:black</span><br></pre></td></tr></table></figure><p>配置xterm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim  .Xresources</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">!XTerm.vt100.faceName:Libration Mono:size&#x3D;14:antialias&#x3D;false</span><br><span class="line">XTerm.vt100.faceName:Inconsolata Mono:size&#x3D;14:antialias&#x3D;false</span><br><span class="line"></span><br><span class="line">XTerm.vt100.foreground: black</span><br><span class="line">XTerm.vt100.background: #DEDEDE</span><br><span class="line">XTerm.vt100.color0: rgb:28&#x2F;28&#x2F;28</span><br><span class="line">XTerm.vt100.color15: rgb:e4&#x2F;e4&#x2F;e4</span><br></pre></td></tr></table></figure><p>让配置生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xrdb .Xresources</span><br></pre></td></tr></table></figure><p>如果使用的是xorg，就需要将这句加入<code>.xinitrc</code> (<code>cp /etc/X11/xinit/xinitrc ~/.xinitrc</code>)<br>如果使用wayland，加入<code>.bash_profile</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Archlinux基础系统安装</title>
      <link href="/2019/04/25/Archlinux%E5%AE%89%E8%A3%85/"/>
      <url>/2019/04/25/Archlinux%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/9937522-5a9d2737f415dc14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><blockquote><p>archlinux的是在使用了无数发行版之后最喜欢的一个，因为其简洁、个性、或者说是偏爱。</p></blockquote><hr><h4 id="1-默认终端字体大小"><a href="#1-默认终端字体大小" class="headerlink" title="1.默认终端字体大小"></a>1.默认终端字体大小</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setfont /usr/share/kbd/consolefonts/iso01-12x22.psfu.gz</span><br></pre></td></tr></table></figure><h4 id="2-连接网络"><a href="#2-连接网络" class="headerlink" title="2.连接网络"></a>2.连接网络</h4><p>允许网络连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rfkill unblock all</span><br></pre></td></tr></table></figure><h5 id="无线连接"><a href="#无线连接" class="headerlink" title="无线连接"></a>无线连接</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wifi-menu#图形化网络连接软件</span><br></pre></td></tr></table></figure><h5 id="有线连接"><a href="#有线连接" class="headerlink" title="有线连接"></a>有线连接</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dhcpcd#获取动态ip</span><br></pre></td></tr></table></figure><p>查看是否连接成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip -c a</span><br></pre></td></tr></table></figure><h4 id="3-磁盘分区"><a href="#3-磁盘分区" class="headerlink" title="3.磁盘分区"></a>3.磁盘分区</h4><p>分区表（partition table），用来记录磁盘的分区信息。现有两种分区表：MBR，GPT</p><ol><li><p>MBR就是比较传统的分区表，win7就必须使用这种分区表，win10也可以使用这种分区表</p></li><li><p>GPT是比较先进的分区表，需要主板支持UEFI，当然linux最好选这种分区格式。使用GPT分区表就需要一块ESP分区，用来存储启动程序/信息</p></li></ol><p>我比较喜欢GPT分区表，所以所有操作都基于GPT分区表来操作。如果是MBR的分区表可以转换为GPT分区表，当然了，分区表是针对整个磁盘的，所以整个磁盘的数据将会被清除。</p><p>分区的方式有很多，可以使用简单的<code>cfdisk</code>命令来分区。</p><p>我喜欢<code>parted</code>命令，因为它支持动态调整分区大小。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">parted</span><br><span class="line">mktable gpt#gpt分区格式</span><br><span class="line">mkpart fat32 0% 300MiB#300M的esp分区，文件格式为fat32</span><br><span class="line">mkpart ext4 300MiB 30GiB#30G的root分区，文件格式为ext4</span><br><span class="line">mkpart ext4 30GiB 100%#剩下整个磁盘作为home分区，文件格式为ext4</span><br><span class="line">print #查看分区信息</span><br><span class="line">quit#退出</span><br></pre></td></tr></table></figure><p>esp分区并不需要挂载随系统启动，esp分区用来存放系统引导管理器grub或者refind</p><p><code>lsblk -af</code> #查看分区信息<br><img src="https://upload-images.jianshu.io/upload_images/9937522-a705378143c1213e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="4-设置分区文件系统格式"><a href="#4-设置分区文件系统格式" class="headerlink" title="4.设置分区文件系统格式"></a>4.设置分区文件系统格式</h4><p>分区好了之后还需要配置分区所使用的文件系统格式，文件系统格式很多，有ntfs、vfat、ext4等</p><p>如果使用<code>parted</code>命令则已经设置过了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkfs.vat -F 32 &#x2F;dev&#x2F;sdxy  #x代表a&#x2F;b&#x2F;c,y代表数字，这里格式化esp分区为fat格式</span><br><span class="line">mkfs..ext4 &#x2F;dev&#x2F;sdxy  #x代表a&#x2F;b&#x2F;c,y代表数字，这里格式化root为ext4格式</span><br></pre></td></tr></table></figure><h4 id="5-挂载分区"><a href="#5-挂载分区" class="headerlink" title="5.挂载分区"></a>5.挂载分区</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mount &#x2F;dev&#x2F;sdxy &#x2F;mnt  #这里先挂载root分区到&#x2F;mnt下</span><br><span class="line">mkdir -p &#x2F;mnt&#x2F;boot&#x2F;efi  #然后建文件夹来挂载esp分区</span><br><span class="line">mount &#x2F;dev&#x2F;sdxy &#x2F;mnt&#x2F;boot&#x2F;efi #将esp分区挂载到新建的文件下</span><br></pre></td></tr></table></figure><h4 id="6-选择国内源"><a href="#6-选择国内源" class="headerlink" title="6.选择国内源"></a>6.选择国内源</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;pacman.d&#x2F;mirrorlis</span><br></pre></td></tr></table></figure><p>将这里面的china源移动到文件开头就像下面一样<br><img src="https://upload-images.jianshu.io/upload_images/9937522-b1efc6ac7019029c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="7-安装系统到root分区"><a href="#7-安装系统到root分区" class="headerlink" title="7.安装系统到root分区"></a>7.安装系统到root分区</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacstrap /mnt base base-devel</span><br></pre></td></tr></table></figure><p>如果制作的启动盘是比较早的版本，那么这里可能会出现安装不了的问题，需要安装archlinux-keyring来解决这个问题。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -Sy archlinux-keyring &amp;&amp; pacman -Su</span><br></pre></td></tr></table></figure><h4 id="8-将分区挂载信息写到fstab"><a href="#8-将分区挂载信息写到fstab" class="headerlink" title="8.将分区挂载信息写到fstab"></a>8.将分区挂载信息写到fstab</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br></pre></td></tr></table></figure><h4 id="9-切换进系统"><a href="#9-切换进系统" class="headerlink" title="9.切换进系统"></a>9.切换进系统</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arch-chroot /mnt</span><br></pre></td></tr></table></figure><h4 id="10-设置时区"><a href="#10-设置时区" class="headerlink" title="10.设置时区"></a>10.设置时区</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -sf /usr/share/zoneinfo/*Region*/*City* /etc/localtime</span><br></pre></td></tr></table></figure><h4 id="11-设置语言环境"><a href="#11-设置语言环境" class="headerlink" title="11.设置语言环境"></a>11.设置语言环境</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/locale.gen</span><br></pre></td></tr></table></figure><p>由于要使用中文的输入法或者中文系统语言的，所以 <code>zh_CN.UTF-8 UTF-8</code> 和<code>en_US.UTF-8 UTF-8</code>是要选择的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locale-gen  #生成配置</span><br></pre></td></tr></table></figure><h4 id="12-配置网络"><a href="#12-配置网络" class="headerlink" title="12.配置网络"></a>12.配置网络</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hostname#设置主机名</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1localhost</span><br><span class="line">::1localhost</span><br><span class="line">127.0.1.1myhostname.localdomainmyhostname</span><br></pre></td></tr></table></figure><h4 id="13-下载wifi软件"><a href="#13-下载wifi软件" class="headerlink" title="13.下载wifi软件"></a>13.下载wifi软件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S wpa_supplicant dialog wifi-menu</span><br></pre></td></tr></table></figure><h4 id="14-设置root用户密码"><a href="#14-设置root用户密码" class="headerlink" title="14.设置root用户密码"></a>14.设置root用户密码</h4><p>输入密码时是没有显示，这是一种安全保护措施</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure><h4 id="15-安装启动管理器"><a href="#15-安装启动管理器" class="headerlink" title="15.安装启动管理器"></a>15.安装启动管理器</h4><h5 id="可以安装grub"><a href="#可以安装grub" class="headerlink" title="可以安装grub"></a>可以安装grub</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pacman -S grub efibootmgr os-prober #os-prober是为了检测windows系统，efibootmgr是为了添加系统启动项</span><br><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br><span class="line">grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=grub</span><br></pre></td></tr></table></figure><hr><h5 id="或者安装refind"><a href="#或者安装refind" class="headerlink" title="或者安装refind"></a>或者安装<a href="https://wiki.archlinux.org/index.php/REFInd#Installation" target="_blank" rel="noopener">refind</a></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S refind</span><br></pre></td></tr></table></figure><h6 id="运行自动化安装脚本："><a href="#运行自动化安装脚本：" class="headerlink" title="运行自动化安装脚本："></a>运行自动化安装脚本：</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">refind-install</span><br></pre></td></tr></table></figure><h6 id="我喜欢手动安装："><a href="#我喜欢手动安装：" class="headerlink" title="我喜欢手动安装："></a>我喜欢手动安装：</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /boot/efi/EFI/BOOT  #新建BOOT文件夹用来存放配置文件</span><br><span class="line">cp /usr/share/refind/refind_x64.efi /boot/efi/EFI/BOOT/bootx64.efi#复制配置文件</span><br><span class="line">cp -r /usr/share/refind/drivers_x64 /boot/efi/EFI/BOOT</span><br></pre></td></tr></table></figure><h4 id="16-安装完成，重启"><a href="#16-安装完成，重启" class="headerlink" title="16.安装完成，重启"></a>16.安装完成，重启</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br><span class="line">umount -R /mnt</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>至此最基本的系统已经安装完，接下去的安装就有很多选择了</p><hr>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> archlinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于github和hexo的个人博客搭建步骤</title>
      <link href="/2019/04/25/%E5%9F%BA%E4%BA%8Egithub%E5%92%8Chexo%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4/"/>
      <url>/2019/04/25/%E5%9F%BA%E4%BA%8Egithub%E5%92%8Chexo%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><ul><li><p>本地编写markdown文件，选择一个喜欢的hexo主题，使用hexo框架生成静态网页，利用git将本地文件推送到github代码托管平台，然后通过网址进行访问（这里也可以自己注册域名，在github上进行绑定，然后可以通过自己的域名来访问网站）</p><p>  github是一个代码托管平台，用来存放网页文件，当做服务器使用 </p><p>  hexo是基于node.js的静态博客框架，用来生成html静态网页</p><p>  git是一个分布式版本控制系统，用来将本地文件推送到github上</p></li></ul><h4 id="必备技能"><a href="#必备技能" class="headerlink" title="必备技能"></a>必备技能</h4><ul><li><p>markdown编写能力（十分钟就可以掌握，超简单的）</p></li><li><p>github注册账号，创建仓库</p></li><li><p>git的基本使用</p></li></ul><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><h5 id="安装node-js-git-hexo"><a href="#安装node-js-git-hexo" class="headerlink" title="安装node.js  git hexo"></a>安装node.js  git hexo</h5><ul><li><p>archlinux上安装比较简单</p><pre><code>pacman -S nodejs git      npm install -g hexo-cli   #这里可能需要花费点时间，也可能会报错，不用管就oknpm install --save hexo-deployer-git    #解决后面发布时找不到git的问题</code></pre></li><li><p>windows安装<br><a href="https://git-scm.com/downloa" target="_blank" rel="noopener">git</a></p><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a></p><p>上面两个安装好了之后打开cmd</p></li></ul><pre><code>npm install -g hexo-cli</code></pre><h5 id="新建存放hexo的文件夹"><a href="#新建存放hexo的文件夹" class="headerlink" title="新建存放hexo的文件夹"></a>新建存放hexo的文件夹</h5><ul><li><p>archlinux</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir hexodir</span><br></pre></td></tr></table></figure></li><li><p>windows</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">随便找个地方新建一个文件夹就好了</span><br></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1></li></ul><h5 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h5><p>需要进入到新建的文件夹下面操作</p><ul><li>linux</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd hexodir</span><br><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><ul><li><p>windows</p><p>进入hexo文件夹下面，打开cmd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure></li></ul><h5 id="使用hexo生成静态html文件"><a href="#使用hexo生成静态html文件" class="headerlink" title="使用hexo生成静态html文件"></a>使用hexo生成静态html文件</h5><pre><code>进入到hexo文件下，windows打开cmd，linux打开终端</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><pre><code>或者简写为</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><h5 id="本地启动服务"><a href="#本地启动服务" class="headerlink" title="本地启动服务"></a>本地启动服务</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><pre><code>或者简写为</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><h5 id="使用浏览器访问"><a href="#使用浏览器访问" class="headerlink" title="使用浏览器访问"></a>使用浏览器访问</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:4000&#x2F;</span><br></pre></td></tr></table></figure><pre><code>如果能打开网页，说明本地已经配置好了</code></pre><hr><h5 id="在github上面创建仓库"><a href="#在github上面创建仓库" class="headerlink" title="在github上面创建仓库"></a>在github上面创建仓库</h5><ul><li><p>如果没有github，先去<a href="[https://github.com/join?source=header-home](https://github.com/join?source=header-home">注册</a>一个</p></li><li><p>git与github连接需要使用ssh，所以需要生成ssh 密匙。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>linux在~/.ssh下生成id_rsa.pub文件，复制文件内容</p><p><img src="https://s2.ax1x.com/2019/05/01/EYNF7d.png" alt="EYNF7d.png"></p><p><a href="https://imgchr.com/i/EYNm1f" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/01/EYNm1f.png" alt="EYNm1f.png"></a></p><p><a href="https://imgchr.com/i/EYNQBQ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/01/EYNQBQ.png" alt="EYNQBQ.png"></a></p><p><a href="https://imgchr.com/i/EYN3As" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/01/EYN3As.png" alt="EYN3As.png"></a></p><p><a href="https://imgchr.com/i/EYNGhq" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/01/EYNGhq.png" alt="EYNGhq.png"></a></p><ul><li>复制id_rsa.pub文件内容，添加到key中</li></ul><p><a href="https://imgchr.com/i/EYNDE9" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/01/EYNDE9.png" alt="EYNDE9.png"></a></p><p><a href="https://imgchr.com/i/EYN69x" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/01/EYN69x.png" alt="EYN69x.png"></a></p><p><a href="https://imgchr.com/i/EYN2jO" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/01/EYN2jO.png" alt="EYN2jO.png"></a></p></li></ul><h5 id="配置hexo，与github关联起来"><a href="#配置hexo，与github关联起来" class="headerlink" title="配置hexo，与github关联起来"></a>配置hexo，与github关联起来</h5><pre><code>注意：在写配置的时候，冒号后面需要有一个空格，不然会报错编辑hexodir文件夹下面的_config.yml文件，最后面添加</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deloy:</span><br><span class="line">        type: git</span><br><span class="line">    rpeo: git@github.com:用户名&#x2F;仓库名.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><h5 id="将本地文件推送到github上面"><a href="#将本地文件推送到github上面" class="headerlink" title="将本地文件推送到github上面"></a>将本地文件推送到github上面</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><pre><code>或者简写为</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    hexo g</span><br><span class="line">    hexo d</span><br></pre></td></tr></table></figure><p>然后打开网址就能看到自己的网站了</p><h5 id="配置自己喜欢的主题"><a href="#配置自己喜欢的主题" class="headerlink" title="配置自己喜欢的主题"></a>配置自己喜欢的主题</h5><ul><li><p>在官网选择自己喜欢的<a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题</a></p></li><li><p>将主题下载到hexodir下的themes目录下，比如我下载的next主题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd hexodir</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure></li><li><p>修改hexodir目录下的_config.yml配置文件,修改theme</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">      theme: next</span><br></pre></td></tr></table></figure></li><li><p>然后重新生成静态网页，并将网页推送到github上</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">    hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
